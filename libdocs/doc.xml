<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/runner/haxe/versions/4.1.3/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/runner/haxe/versions/4.1.3/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="EReg" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/EReg.hx">
		<r><c path="_EReg.HaxeRegExp"/></r>
		<split public="1" set="method" line="80">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<new public="1" get="inline" set="null" line="25">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"RegExp"</e></m>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/home/runner/haxe/versions/4.1.3/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/runner/haxe/versions/4.1.3/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/home/runner/haxe/versions/4.1.3/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<class path="Lambda" params="" file="/home/runner/haxe/versions/4.1.3/std/Lambda.hx">
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="Map" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/Math.hx" extern="1">
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="String" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/Std.hx">
		<string public="1" set="method" line="46" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/runner/haxe/versions/4.1.3/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringTools" params="" file="/home/runner/haxe/versions/4.1.3/std/StringTools.hx">
		<isSpace public="1" set="method" line="279" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="297" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="322" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="344" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="rm.core.Utils" params="" file="src/rm/core/Utils.hx" extern="1">
		<RPGMAKER_NAME public="1" static="1">
			<c path="String"/>
			<haxe_doc>* The name of the RPG Maker. 'MV' in the current version.</haxe_doc>
		</RPGMAKER_NAME>
		<RPGMAKER_VERSION public="1" static="1">
			<c path="String"/>
			<haxe_doc>* The version of the RPG Maker.
  *
  * @static
  * @property RPGMAKER_VERSION
  * @type String
  * @final</haxe_doc>
		</RPGMAKER_VERSION>
		<isOptionValid public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether the option is in the query string.
  *
  * @param {String} name The option name
  * @return {Boolean} True if the option is in the query string</haxe_doc>
		</isOptionValid>
		<isNwjs public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the platform is NW.js.
  *
  * @return {Boolean} True if the platform is NW.js</haxe_doc>
		</isNwjs>
		<isMobileDevice public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the platform is a mobile device.
  *
  * @static
  * @method isMobileDevice
  * @return {Boolean} True if the platform is a mobile device</haxe_doc>
		</isMobileDevice>
		<isMobileSafari public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the browser is Mobile Safari.
  *
  * @static
  * @method isMobileSafari
  * @return {Boolean} True if the browser is Mobile Safari</haxe_doc>
		</isMobileSafari>
		<isAndroidChrome public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the browser is Android Chrome.
  *
  * @return {Boolean} True if the browser is Android Chrome</haxe_doc>
		</isAndroidChrome>
		<canReadGameFiles public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the browser can read files in the game folder.
  *
  * @return {Boolean} True if the browser can read files in the game folder</haxe_doc>
		</canReadGameFiles>
		<rgbToCssColor public="1" set="method" static="1">
			<f a="r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Makes a CSS color string from RGB values.
  *
  * @static
  * @method rgbToCssColor
  * @param {Int} r The red value in the range (0, 255)
  * @param {Int} g The green value in the range (0, 255)
  * @param {Int} b The blue value in the range (0, 255)
  * @return {String} CSS color string</haxe_doc>
		</rgbToCssColor>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Utils"</e></m>
		</meta>
	</class>
	<class path="core.Amaryllis" params="" file="src/core/Amaryllis.hx">
		<VERSION final="1" public="1" set="null" expr="&quot;1.0.0&quot;" line="16" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"1.0.0"</e></m></meta>
		</VERSION>
		<MZ_NAME final="1" public="1" set="null" expr="Utils.RPGMAKER_NAME" line="17" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>Utils.RPGMAKER_NAME</e></m></meta>
		</MZ_NAME>
		<MZ_VERSION final="1" public="1" set="null" expr="Utils.RPGMAKER_VERSION" line="18" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>Utils.RPGMAKER_VERSION</e></m></meta>
		</MZ_VERSION>
		<createEventEmitter public="1" get="inline" set="null" line="20" static="1"><f a=""><c path="pixi.interaction.EventEmitter"/></f></createEventEmitter>
		<createDie public="1" get="inline" set="null" line="24" static="1"><f a="sides">
	<x path="Int"/>
	<c path="core.Die"/>
</f></createDie>
		<elementName public="1" get="inline" set="null" line="28" static="1"><f a="entity">
	<d/>
	<unknown/>
</f></elementName>
		<getParams public="1" set="method" line="37" static="1">
			<f a="regEx">
				<c path="EReg"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Returns plugin parameters using regular expression matching
  * on plugin description
  * @param regEx</haxe_doc>
		</getParams>
		<lerp public="1" set="method" line="47" static="1">
			<f a="start:end:amount">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Applies Linear Interpolation to the variable provided
  * @param start
  * @param end
  * @param amount
  * @return {Float}</haxe_doc>
		</lerp>
		<currentScene public="1" get="inline" set="null" line="55" static="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns the current SceneManager._scene.
  * @returns {Scene}</haxe_doc>
		</currentScene>
		<isImagePath public="1" get="inline" set="null" line="59" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isImagePath>
		<loadImage public="1" get="inline" set="null" line="63" static="1">
			<f a="path:?hue" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><c path="rm.core.Bitmap"/></x>
			</f>
			<meta><m n=":value"><e>{ hue : 0 }</e></m></meta>
		</loadImage>
		<isNwjs public="1" get="inline" set="null" line="72" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game is running on desktop(nwjs).
  * @returns {boolean}</haxe_doc>
		</isNwjs>
		<isMobile public="1" get="inline" set="null" line="80" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game is running on mobile.
  * @returns{boolean}</haxe_doc>
		</isMobile>
		<isTest public="1" get="inline" set="null" line="88" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game is in test mode.
  * @returns {boolean}</haxe_doc>
		</isTest>
		<once public="1" set="method" line="97" static="1">
			<f a="f">
				<x path="haxe.Function"/>
				<f a=""><unknown/></f>
			</f>
			<haxe_doc>* Creates a function that only be run once.
  * @param {Function} f
  * @returns {Function}</haxe_doc>
		</once>
		<times public="1" set="method" line="115" static="1">
			<f a="iterations:f">
				<x path="Int"/>
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Repeats the code a set number of times
  * similar to a for loop.
  * @param {number} iterations
  * @param {Function} f</haxe_doc>
		</times>
		<safeParse public="1" set="method" line="121" static="1"><f a="string">
	<c path="String"/>
	<c path="haxe.Exception"/>
</f></safeParse>
		<lines public="1" get="inline" set="null" line="134" static="1">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns a number based on the game's default lineHeight.
  * @param {number} number
  * @returns {number}</haxe_doc>
		</lines>
		<rgbToHex public="1" get="inline" set="null" line="145" static="1">
			<f a="red:green:blue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns rgb as a css hex string.
  * @param {number} red
  * @param {number} green
  * @param {number} blue
  * @returns {string}</haxe_doc>
		</rgbToHex>
		<rgbToCss public="1" get="inline" set="null" line="157" static="1">
			<f a="red:green:blue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a rgb in css format string.
  * @param {Int} red
  * @param {Int} green
  * @param {Int} blue
  * @returns {string}</haxe_doc>
		</rgbToCss>
		<clear public="1" get="inline" set="null" line="165" static="1">
			<f a="array">
				<c path="Array"><x path="Any"/></c>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc><![CDATA[* Clears an array of all values.
  * @param {Array<Any>} array]]></haxe_doc>
		</clear>
		<take public="1" get="inline" set="null" line="177" static="1">
			<f a="amount:list">
				<x path="Int"/>
				<c path="Array"><x path="Any"/></c>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>* Takes a set amount of elements from the start of an array.
     * Doesn't modify the original array.
  * @param {number} amount
  * @param {any[]} list
  * @returns {any[]}</haxe_doc>
		</take>
		<drop public="1" get="inline" set="null" line="188" static="1">
			<f a="amount:list">
				<x path="Int"/>
				<c path="Array"><x path="Any"/></c>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>* Takes a set amount of elements from the end of an array.
  * Doesn't modify the original array.
  * @param {number} amount
  * @param {any[]} list
  * @returns {any[]}</haxe_doc>
		</drop>
		<arrayEquals public="1" get="inline" set="null" line="192" static="1"><f a="arr1:arr2">
	<c path="Array"><x path="Any"/></c>
	<c path="Array"><x path="Any"/></c>
	<x path="Bool"/>
</f></arrayEquals>
		<addWindowToScene public="1" get="inline" set="null" line="198" static="1"><f a="window">
	<c path="rm.windows.Window_Base"/>
	<x path="Void"/>
</f></addWindowToScene>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="core.TBox" params="T" file="src/core/AnyBox.hx" module="core.AnyBox">
		<this><c path="core.TBox.T"/></this>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="core._AnyBox.TBox_Impl_" params="" file="src/core/AnyBox.hx" private="1" module="core.AnyBox" final="1">
	<dyn public="1" get="accessor" set="accessor" static="1">
		<d/>
		<meta><m n=":impl"/></meta>
	</dyn>
	<setField public="1" get="inline" set="null" line="10" static="1">
		<f a="this:fieldName:value">
			<c path="core.TBox.T"/>
			<c path="String"/>
			<x path="Any"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setField>
	<get_dyn get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="core.TBox.T"/>
			<d/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_dyn>
	<set_dyn get="inline" set="null" line="18" static="1">
		<f a="this:obj">
			<c path="core.TBox.T"/>
			<c path="core.TBox.T"/>
			<d/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_dyn>
	<set public="1" get="inline" set="null" line="22" static="1">
		<f a="this:f">
			<c path="core.TBox.T"/>
			<f a="dSelf">
				<d/>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
</class></impl>
	</abstract>
	<class path="core._AnyBox.TBox_Impl_" params="" file="src/core/AnyBox.hx" private="1" module="core.AnyBox" final="1">
		<dyn public="1" get="accessor" set="accessor" static="1">
			<d/>
			<meta><m n=":impl"/></meta>
		</dyn>
		<setField public="1" get="inline" set="null" line="10" static="1">
			<f a="this:fieldName:value">
				<c path="core.TBox.T"/>
				<c path="String"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setField>
		<get_dyn get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="core.TBox.T"/>
				<d/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_dyn>
		<set_dyn get="inline" set="null" line="18" static="1">
			<f a="this:obj">
				<c path="core.TBox.T"/>
				<c path="core.TBox.T"/>
				<d/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_dyn>
		<set public="1" get="inline" set="null" line="22" static="1">
			<f a="this:f">
				<c path="core.TBox.T"/>
				<f a="dSelf">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
	</class>
	<class path="core.Assets" params="" file="src/core/Assets.hx">
		<Assets_TestTXT public="1" get="inline" set="null" expr="&quot;assets/test.txt&quot;" line="41" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"assets/test.txt"</e></m></meta>
		</Assets_TestTXT>
		<Assets_MypicPNG public="1" get="inline" set="null" expr="&quot;assets/mypic.png&quot;" line="41" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"assets/mypic.png"</e></m></meta>
		</Assets_MypicPNG>
		<Yes_New_nameTXT public="1" get="inline" set="null" expr="&quot;assets/yes/new_name.txt&quot;" line="41" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"assets/yes/new_name.txt"</e></m></meta>
		</Yes_New_nameTXT>
		<haxe_doc>* Asset Folder Files
 * We can't import macros when using build macros
 * and have to use the full path name.
 * Add your paths here as build directives to the root folder
 * for more assets.</haxe_doc>
		<meta><m n=":build"><e>macros.BuildMacroTools.buildFileList("assets/")</e></m></meta>
	</class>
	<class path="core.Die" params="" file="src/core/Die.hx">
		<sides><c path="Array"><x path="Int"/></c></sides>
		<roll public="1" get="inline" set="null" line="13"><f a=""><x path="Int"/></f></roll>
		<new public="1" get="inline" set="null" line="9"><f a="sides">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* A die class for rolling for random numbers</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="core.SMath" params="" file="src/core/Math.hx" module="core.Math"><c path="Math"/></typedef>
	<abstract path="core.Math" params="" file="src/core/Math.hx">
		<this><t path="core.SMath"/></this>
		<meta><m n=":forwardStatics"/></meta>
		<impl><class path="core._Math.Math_Impl_" params="" file="src/core/Math.hx" private="1" module="core.Math" final="1">
	<randomInt public="1" set="method" line="11" static="1">
		<f a=""><x path="Int"/></f>
		<haxe_doc>* Returns a random integer within 0 - 1
  * @return Int</haxe_doc>
	</randomInt>
	<randomRangeInt public="1" get="inline" set="null" line="21" static="1">
		<f a="start:end">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Returns a random integer in range start, end
  * @param start
  * @param end
  * @return Int</haxe_doc>
	</randomRangeInt>
	<clampf public="1" get="inline" set="null" line="26" static="1"><f a="num:min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampf>
	<clamp public="1" get="inline" set="null" line="30" static="1"><f a="num:min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="core._Math.Math_Impl_" params="" file="src/core/Math.hx" private="1" module="core.Math" final="1">
		<randomInt public="1" set="method" line="11" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns a random integer within 0 - 1
  * @return Int</haxe_doc>
		</randomInt>
		<randomRangeInt public="1" get="inline" set="null" line="21" static="1">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns a random integer in range start, end
  * @param start
  * @param end
  * @return Int</haxe_doc>
		</randomRangeInt>
		<clampf public="1" get="inline" set="null" line="26" static="1"><f a="num:min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampf>
		<clamp public="1" get="inline" set="null" line="30" static="1"><f a="num:min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="core.NumberExtensions" params="" file="src/core/NumberExtensions.hx">
		<clampf public="1" get="inline" set="null" line="6" static="1"><f a="num:min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampf>
		<clamp public="1" get="inline" set="null" line="11" static="1"><f a="num:min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<withinRange public="1" get="inline" set="null" line="15" static="1"><f a="num:min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></withinRange>
		<withinRangef public="1" get="inline" set="null" line="20" static="1"><f a="num:min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></withinRangef>
		<negate public="1" get="inline" set="null" line="25" static="1"><f a="num">
	<x path="Int"/>
	<x path="Int"/>
</f></negate>
		<negatef public="1" get="inline" set="null" line="29" static="1"><f a="num">
	<x path="Float"/>
	<x path="Float"/>
</f></negatef>
	</class>
	<class path="core.PixiExtensions" params="" file="src/core/PixiExtensions.hx"><setInteracble public="1" set="method" line="11" static="1">
	<f a="displayObj:bool">
		<c path="pixi.core.display.DisplayObject"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Sets the pixi object interactable along with
  * setting the button mode to interactable as well.
  * @param bool</haxe_doc>
</setInteracble></class>
	<class path="core.StringExtensions" params="" file="src/core/StringExtensions.hx">
		<capitalize public="1" get="inline" set="null" line="11" static="1">
			<f a="string">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a capitalized version of the string.
  * @param {string} string
  * @returns {string}</haxe_doc>
		</capitalize>
		<title public="1" get="inline" set="null" line="20" static="1">
			<f a="string">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a version of the string with all words capitalized.
  * @param {string} string
  * @returns {string}</haxe_doc>
		</title>
		<wordCount public="1" get="inline" set="null" line="29" static="1">
			<f a="string">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the word count of a string.
  * @param {string} string
  * @returns {number}</haxe_doc>
		</wordCount>
		<x1breplace public="1" get="inline" set="null" line="39" static="1">
			<f a="string">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Replaces double backslashes with escape codes
  * to recreate escape sequences.
  * @param {string} string</haxe_doc>
		</x1breplace>
		<x1breplace2 public="1" get="inline" set="null" line="43" static="1"><f a="string">
	<c path="String"/>
	<c path="String"/>
</f></x1breplace2>
		<monoSpace public="1" get="inline" set="null" line="52" static="1">
			<f a="string">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the string spaced evenly.
  * @param {string} string
  * @returns {string}</haxe_doc>
		</monoSpace>
	</class>
	<class path="pixi.interaction.EventEmitter" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/interaction/EventEmitter.hx" extern="1">
		<listeners public="1" set="method">
			<f a="event">
				<c path="String"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>* Return a list of assigned event listeners.
	 *
	 * @param {String} eventName
	 * @return {Array}</haxe_doc>
		</listeners>
		<emit public="1" set="method">
			<f a="event:?a1:?a2:?a3:?a4:?a5">
				<c path="String"/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Emit an event to all registered event listeners.
	 *
	 * @alias dispatchEvent
	 * @param eventName {String} The name of the event.
	 * @return {Bool} Indication if we've emitted an event.</haxe_doc>
		</emit>
		<on public="1" set="method">
			<f a="event:fn:?context">
				<c path="String"/>
				<f a="">
					<c path="pixi.interaction.InteractionEvent"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
			<overloads>
				<on public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</on>
				<on public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<f a="">
							<d/>
							<x path="Void"/>
						</f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</on>
				<on public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</on>
			</overloads>
		</on>
		<once public="1" set="method">
			<f a="event:fn:?context">
				<c path="String"/>
				<f a="">
					<c path="pixi.interaction.InteractionEvent"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
			<overloads>
				<once public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</once>
				<once public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<f a="">
							<d/>
							<x path="Void"/>
						</f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</once>
				<once public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</once>
			</overloads>
		</once>
		<addListener public="1" set="method">
			<f a="event:fn:?context">
				<c path="String"/>
				<f a="">
					<c path="pixi.interaction.InteractionEvent"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
			<overloads>
				<addListener public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<f a="">
							<d/>
							<x path="Void"/>
						</f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="event:fn:?context">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {function} fn Callback function.
	 * @param {Mixed} context The context of the function.</haxe_doc>
				</addListener>
			</overloads>
		</addListener>
		<off public="1" set="method">
			<f a="event:fn:?once">
				<c path="String"/>
				<f a="">
					<c path="pixi.interaction.InteractionEvent"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
			<overloads>
				<off public="1" set="method">
					<f a="event:fn:?once">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
				</off>
				<off public="1" set="method">
					<f a="event:fn:?once">
						<c path="String"/>
						<f a="">
							<d/>
							<x path="Void"/>
						</f>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
				</off>
				<off public="1" set="method">
					<f a="event:fn:?once">
						<c path="String"/>
						<d/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
				</off>
			</overloads>
		</off>
		<removeListener public="1" set="method">
			<f a="event:fn:?once">
				<c path="String"/>
				<f a="">
					<c path="pixi.interaction.InteractionEvent"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
			<overloads>
				<removeListener public="1" set="method">
					<f a="event:fn:?once">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="event:fn:?once">
						<c path="String"/>
						<f a="">
							<d/>
							<x path="Void"/>
						</f>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="event:fn:?once">
						<c path="String"/>
						<d/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<haxe_doc>* Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {function} fn The listener that we need to find.
	 * @param {Bool} once Only remove once listeners.</haxe_doc>
				</removeListener>
			</overloads>
		</removeListener>
		<removeAllListeners public="1" set="method">
			<f a="?event">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Remove all listeners or only the listeners for the specified event.
	 *
	 * @param {String} event The event want to remove all listeners for.</haxe_doc>
		</removeAllListeners>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Minimal EventEmitter interface that is molded against the Node.js
	 * EventEmitter interface.
	 *
	 * @constructor</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"PIXI.utils.EventEmitter"</e></m>
		</meta>
	</class>
	<class path="pixi.interaction.InteractiveTarget" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/interaction/InteractiveTarget.hx" extern="1">
		<extends path="pixi.interaction.EventEmitter"/>
		<mousedown public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button (usually a mouse button) is pressed on the display
	 * object.
	 *
	 * @event mousedown
	 * @memberof InteractiveTarget#</haxe_doc>
		</mousedown>
		<rightdown public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	 * on the display object.
	 *
	 * @event rightdown
	 * @memberof InteractiveTarget#</haxe_doc>
		</rightdown>
		<mouseup public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button (usually a mouse button) is released over the display
	 * object.
	 *
	 * @event mouseup
	 * @memberof InteractiveTarget#</haxe_doc>
		</mouseup>
		<rightup public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device secondary button (usually a mouse right-button) is released
	 * over the display object.
	 *
	 * @event rightup
	 * @memberof InteractiveTarget#</haxe_doc>
		</rightup>
		<click public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button (usually a mouse button) is pressed and released on
	 * the display object.
	 *
	 * @event click
	 * @memberof InteractiveTarget#</haxe_doc>
		</click>
		<rightclick public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	 * and released on the display object.
	 *
	 * @event rightclick
	 * @memberof InteractiveTarget#</haxe_doc>
		</rightclick>
		<mouseupoutside public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button (usually a mouse button) is released outside the
	 * display object that initially registered a
	 * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.
	 *
	 * @event mouseupoutside
	 * @memberof InteractiveTarget#</haxe_doc>
		</mouseupoutside>
		<rightupoutside public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device secondary button (usually a mouse right-button) is released
	 * outside the display object that initially registered a
	 * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.
	 *
	 * @event rightupoutside
	 * @memberof InteractiveTarget#</haxe_doc>
		</rightupoutside>
		<mousemove public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device (usually a mouse) is moved while over the display object
	 *
	 * @event mousemove
	 * @memberof InteractiveTarget#</haxe_doc>
		</mousemove>
		<mouseover public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device (usually a mouse) is moved onto the display object
	 *
	 * @event mouseover
	 * @memberof InteractiveTarget#</haxe_doc>
		</mouseover>
		<mouseout public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device (usually a mouse) is moved off the display object
	 *
	 * @event mouseout
	 * @memberof InteractiveTarget#</haxe_doc>
		</mouseout>
		<pointerdown public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button is pressed on the display object.
	 *
	 * @event pointerdown
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointerdown>
		<pointerup public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button is released over the display object.
	 *
	 * @event pointerup
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointerup>
		<pointertap public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button is pressed and released on the display object.
	 *
	 * @event pointertap
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointertap>
		<pointerupoutside public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device button is released outside the display object that initially
	 * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.
	 *
	 * @event pointerupoutside
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointerupoutside>
		<pointermove public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device is moved while over the display object
	 *
	 * @event pointermove
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointermove>
		<pointerover public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device is moved onto the display object
	 *
	 * @event pointerover
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointerover>
		<pointerout public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a pointer device is moved off the display object
	 *
	 * @event pointerout
	 * @memberof InteractiveTarget#</haxe_doc>
		</pointerout>
		<touchstart public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a touch point is placed on the display object.
	 *
	 * @event touchstart
	 * @memberof InteractiveTarget#</haxe_doc>
		</touchstart>
		<touchend public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a touch point is removed from the display object.
	 *
	 * @event touchend
	 * @memberof InteractiveTarget#</haxe_doc>
		</touchend>
		<tap public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a touch point is placed and removed from the display object.
	 *
	 * @event tap
	 * @memberof InteractiveTarget#</haxe_doc>
		</tap>
		<touchendoutside public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a touch point is removed outside of the display object that initially
	 * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.
	 *
	 * @event touchendoutside
	 * @memberof InteractiveTarget#</haxe_doc>
		</touchendoutside>
		<touchmove public="1" set="dynamic">
			<f a="event">
				<c path="pixi.interaction.InteractionEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fired when a touch point is moved along the display object.
	 *
	 * @event touchmove
	 * @memberof InteractiveTarget#</haxe_doc>
		</touchmove>
		<interactive public="1">
			<x path="Bool"/>
			<haxe_doc>* Indicates if the displayObject is interactive or not.
	 *
	 * @member {Bool}
	 * @default false
	 * @memberof InteractiveTarget#</haxe_doc>
		</interactive>
		<interactiveChildren public="1">
			<x path="Bool"/>
			<haxe_doc>* Indicates if the children of displayObject are interactive or not.
	 *
	 * @member {Bool}
	 * @default true
	 * @memberof InteractiveTarget#</haxe_doc>
		</interactiveChildren>
		<hitArea public="1">
			<c path="pixi.core.math.shapes.Shape"/>
			<haxe_doc>* Interaction shape. Children will be hit first, then this shape will be checked.
	 *
	 * @member {Shape}
	 * @memberof InteractiveTarget#
	 * @default null</haxe_doc>
		</hitArea>
		<buttonMode public="1">
			<x path="Bool"/>
			<haxe_doc>* Indicates if the displayObject uses button mode or normal mode.
	 *
	 * @member {Bool}
	 * @default false
	 * @memberof InteractiveTarget#</haxe_doc>
		</buttonMode>
		<defaultCursor public="1">
			<c path="String"/>
			<haxe_doc>* Default cursor.
	 *
	 * @member {String}
	 * @default pointer
	 * @memberof InteractiveTarget#</haxe_doc>
		</defaultCursor>
		<_over public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Internal check to detect if the mouse cursor is hovered over the displayObject
	 *
	 * @member {Bool}
	 * @private</haxe_doc>
		</_over>
		<_isLeftDown public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Internal check to detect if the left mouse button is pressed on the displayObject
	 *
	 * @member {Bool}
	 * @private</haxe_doc>
		</_isLeftDown>
		<_isRightDown public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Internal check to detect if the right mouse button is pressed on the displayObject
	 *
	 * @member {Bool}
	 * @private</haxe_doc>
		</_isRightDown>
		<_pointerOver public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Internal check to detect if the pointer cursor is hovered over the displayObject
	 *
	 * @member {Bool}
	 * @private</haxe_doc>
		</_pointerOver>
		<_pointerDown public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Internal check to detect if the pointer is down on the displayObject
	 *
	 * @member {Bool}
	 * @private</haxe_doc>
		</_pointerDown>
		<_touchDown public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Internal check to detect if a user has touched the displayObject
	 *
	 * @member {Bool}
	 * @private</haxe_doc>
		</_touchDown>
		<meta><m n=":native"><e>"PIXI.interaction.interactiveTarget"</e></m></meta>
	</class>
	<class path="pixi.core.display.DisplayObject" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/display/DisplayObject.hx" extern="1">
		<extends path="pixi.interaction.InteractiveTarget"/>
		<getBounds public="1" set="method">
			<f a="?skipUpdate:?rect">
				<x path="Bool"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
			</f>
			<haxe_doc>* Retrieves the bounds of the displayObject as a rectangle object
	 *
	 * @param skipUpdate {Matrix} setting to true will stop the transforms of the scene graph from being updated.
	 * This means the calculation returned MAY be out of date BUT will give you a nice performance boost
	 * @param rect {Rectangle} Optional rectangle to store the result of the bounds calculation
	 * @return {Rectangle} the rectangular bounding area</haxe_doc>
		</getBounds>
		<getLocalBounds public="1" set="method">
			<f a="?rect">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
			</f>
			<haxe_doc>* Retrieves the local bounds of the displayObject as a rectangle object
	 *
	 * @param rect {Rectangle} Optional rectangle to store the result of the bounds calculation
	 * @return {Rectangle} the rectangular bounding area</haxe_doc>
		</getLocalBounds>
		<toGlobal public="1" set="method">
			<f a="position:?point:?skipUpdate">
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
				<x path="Bool"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* Calculates the global position of the display object
	 *
	 * @param position {Point} The world origin to calculate from
	 * @param point {Point} A Point in which to store the value, optional (otherwise a new Point is created)
	 * @param skipUpdate {Bool} Should we skip the update transform
	 * @return {Point} A point object representing the position of this object</haxe_doc>
		</toGlobal>
		<toLocal public="1" set="method">
			<f a="position:?frm:?point">
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* Calculates the local position of the display object relative to another point
	 *
	 * @param position {Point} The world origin to calculate from
	 * @param [from] {DisplayObject} The DisplayObject to calculate the global position from
	 * @param [point] {Point} A Point object in which to store the value, optional (otherwise will create a new Point)
	 * @return {Point} A point object representing the position of this object</haxe_doc>
		</toLocal>
		<updateTransform public="1" set="method"><f a=""><x path="Void"/></f></updateTransform>
		<displayObjectUpdateTransform public="1" set="method"><f a=""><x path="Void"/></f></displayObjectUpdateTransform>
		<setParent public="1" set="method">
			<f a="container">
				<c path="pixi.core.display.Container"/>
				<c path="pixi.core.display.Container"/>
			</f>
			<haxe_doc>* Set the parent Container of this DisplayObject
	 *
	 * @param container {Container} The Container to add this DisplayObject to
	 * @return {Container} The Container that this DisplayObject was added to</haxe_doc>
		</setParent>
		<setTransform public="1" set="method">
			<f a="?x:?y:?scaleX:?scaleY:?rotation:?skewX:?skewY:?pivotX:?pivotY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Convenience function to set the postion, scale, skew and pivot at once.
	 *
	 * @param [x=0] {Float} The X position
	 * @param [y=0] {Float} The Y position
	 * @param [scaleX=1] {Float} The X scale value
	 * @param [scaleY=1] {Float} The Y scale value
	 * @param [skewX=0] {Float} The X skew value
	 * @param [skewY=0] {Float} The Y skew value
	 * @param [pivotX=0] {Float} The X pivot value
	 * @param [pivotY=0] {Float} The Y pivot value
	 * @return {DisplayObject}</haxe_doc>
		</setTransform>
		<destroy public="1" set="method">
			<f a="?options">
				<x path="haxe.extern.EitherType">
					<x path="Bool"/>
					<t path="pixi.core.display.DestroyOptions"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Base destroy method for generic display objects
	 * Removes all internal references and listeners as well as removes children from the display list.
	 *
	 * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
	 *  have been set to that value
	 * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
	 *  method called as well. 'options' will be passed on to those calls.
	 * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
	 *  Should it destroy the texture of the child sprite
	 * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
	 *  Should it destroy the base texture of the child sprite</haxe_doc>
		</destroy>
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The instance name of the object.
	 *
	 * @member {String}</haxe_doc>
		</name>
		<cacheAsBitmap public="1">
			<x path="Bool"/>
			<haxe_doc>* Set this to true if you want this display object to be cached as a bitmap.
	 * This basically takes a snap shot of the display object as it is at that moment. It can provide a performance benefit for complex static displayObjects.
	 * To remove simply set this property to 'null'
	 *
	 * @member {Bool}
	 * @memberof DisplayObject#</haxe_doc>
		</cacheAsBitmap>
		<alpha public="1">
			<x path="Float"/>
			<haxe_doc>* The opacity of the object.
	 *
	 * @member {Float}</haxe_doc>
		</alpha>
		<transform public="1">
			<c path="pixi.core.display.Transform"/>
			<haxe_doc>* World transform and local transform of this object. This will become read-only later,
	 * please do not assign anything there unless you know what are you doing.
	 *
	 * @member {Transform}</haxe_doc>
		</transform>
		<visible public="1">
			<x path="Bool"/>
			<haxe_doc>* The visibility of the object. If false the object will not be drawn, and
	 * the updateTransform function will not be called.
	 *
	 * @member {Bool}</haxe_doc>
		</visible>
		<renderable public="1">
			<x path="Bool"/>
			<haxe_doc>* Can this object be rendered, if false the object will not be drawn but the updateTransform
	 * methods will still be called.
	 *
	 * @member {Bool}</haxe_doc>
		</renderable>
		<parent public="1">
			<c path="pixi.core.display.Container"/>
			<haxe_doc>* The display object container that contains this display object.
	 *
	 * @member {Container}
	 * @readOnly</haxe_doc>
		</parent>
		<worldAlpha public="1">
			<x path="Float"/>
			<haxe_doc>* The multiplied alpha of the displayObject
	 *
	 * @member {Float}
	 * @readOnly</haxe_doc>
		</worldAlpha>
		<filterArea public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* The area the filter is applied to. This is used as more of an optimisation
	 * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle
	 *
	 * Also works as an interaction mask
	 *
	 * @member {Rectangle}</haxe_doc>
		</filterArea>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* The position of the displayObject on the x axis relative to the local coordinates of the parent.
	 *
	 * @member {Float}
	 * @memberof DisplayObject#</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* The position of the displayObject on the y axis relative to the local coordinates of the parent.
	 *
	 * @member {Float}
	 * @memberof DisplayObject#</haxe_doc>
		</y>
		<worldTransform public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* Current transform of the object based on world (parent) factors
	 *
	 * @member {Matrix}
	 * @readOnly</haxe_doc>
		</worldTransform>
		<localTransform public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* Current transform of the object based on local factors: position, scale, other stuff
	 *
	 * @member {PIXI.Matrix}
	 * @readOnly</haxe_doc>
		</localTransform>
		<position public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* The coordinate of the object relative to the local coordinates of the parent.
	 *
	 * @member {Point}</haxe_doc>
		</position>
		<scale public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* The scale factor of the object.
	 *
	 * @member {Point}</haxe_doc>
		</scale>
		<pivot public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* The pivot point of the displayObject that it rotates around
	 *
	 * @member {Point}</haxe_doc>
		</pivot>
		<skew public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* The skew factor for the object in radians.
	 *
	 * @member {Point}</haxe_doc>
		</skew>
		<rotation public="1">
			<x path="Float"/>
			<haxe_doc>* The rotation of the object in radians.
	 *
	 * @member {Float}</haxe_doc>
		</rotation>
		<worldVisible public="1">
			<x path="Bool"/>
			<haxe_doc>* Indicates if the displayObject is globally visible.
	 *
	 * @member {Bool}
	 * @memberof DisplayObject#
	 * @readonly</haxe_doc>
		</worldVisible>
		<mask public="1">
			<x path="haxe.extern.EitherType">
				<c path="pixi.core.sprites.Sprite"/>
				<c path="pixi.core.graphics.Graphics"/>
			</x>
			<haxe_doc>* Sets a mask for the displayObject. A mask is an object that limits the visibility of an object to the shape of the mask applied to it.
	 * In PIXI a regular mask must be a PIXI.Graphics or a PIXI.Sprite object. This allows for much faster masking in canvas as it utilises shape clipping.
	 * To remove a mask, set this property to null.
	 *
	 * For the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
	 *
	 * @member {Graphics|Sprite}
	 * @memberof DisplayObject#</haxe_doc>
		</mask>
		<filters public="1">
			<c path="Array"><c path="pixi.core.renderers.webgl.filters.Filter"/></c>
			<haxe_doc><![CDATA[* Sets the filters for the displayObject.
	 * * IMPORTANT: This is a webGL only feature and will be ignored by the canvas renderer.
	 * To remove filters simply set this property to 'null'
	 *
	 * @member {Array<AbstractFilter>}
	 * @memberof DisplayObject#]]></haxe_doc>
		</filters>
		<accessible public="1">
			<x path="Bool"/>
			<haxe_doc>*  Flag for if the object is accessible. If true AccessibilityManager will overlay a
	 *   shadow div with attributes set
	 *
	 * @member {Bool}</haxe_doc>
		</accessible>
		<accessibleTitle public="1">
			<c path="String"/>
			<haxe_doc>* Sets the title attribute of the shadow div
	 * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'
	 *
	 * @member {String}</haxe_doc>
		</accessibleTitle>
		<accessibleHint public="1">
			<c path="String"/>
			<haxe_doc>* Sets the aria-label attribute of the shadow div
	 *
	 * @member {String}</haxe_doc>
		</accessibleHint>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The base class for all objects that are rendered on the screen.
	 * This is an abstract class and should not be used on its own rather it should be extended.
	 *
	 * @class
	 * @namespace PIXI</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.DisplayObject"</e></m></meta>
	</class>
	<class path="pixi.core.display.Container" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/display/Container.hx" extern="1">
		<extends path="pixi.core.display.DisplayObject"/>
		<children public="1">
			<c path="Array"><c path="pixi.core.display.DisplayObject"/></c>
			<haxe_doc>* The array of children of this container.
	 *
	 * @member {DisplayObject[]}
	 * @readonly</haxe_doc>
		</children>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* The width of the Container, setting this will actually modify the scale to achieve the value set
	 *
	 * @member {Float}
	 * @memberof Container#</haxe_doc>
		</width>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* The height of the Container, setting this will actually modify the scale to achieve the value set
	 *
	 * @member {Float}
	 * @memberof Container#</haxe_doc>
		</height>
		<addChild public="1" params="T" set="method">
			<f a="child">
				<c path="addChild.T"/>
				<c path="addChild.T"/>
			</f>
			<haxe_doc>* Adds a child to the container.
	 *
	 * You can also add multple items like so: myContainer.addChild(thinkOne, thingTwo, thingThree)
	 *
	 * @param child {DisplayObject} The DisplayObject to add to the container
	 * @return {DisplayObject} The child that was added.</haxe_doc>
			<overloads><addChild public="1" set="method">
	<f a="child">
		<x path="haxe.extern.Rest"><c path="pixi.core.display.DisplayObject"/></x>
		<c path="pixi.core.display.DisplayObject"/>
	</f>
	<haxe_doc>* Adds a child to the container.
	 *
	 * You can also add multple items like so: myContainer.addChild(thinkOne, thingTwo, thingThree)
	 *
	 * @param child {DisplayObject} The DisplayObject to add to the container
	 * @return {DisplayObject} The child that was added.</haxe_doc>
</addChild></overloads>
		</addChild>
		<addChildAt public="1" params="T" set="method">
			<f a="child:index">
				<c path="addChildAt.T"/>
				<x path="Int"/>
				<c path="addChildAt.T"/>
			</f>
			<haxe_doc>* Adds a child to the container at a specified index.
	 * If the index is out of bounds an error will be thrown.
	 *
	 * @param child {DisplayObject} The child to add
	 * @param index {Int} The index to place the child in
	 * @return {DisplayObject} The child that was added.</haxe_doc>
		</addChildAt>
		<swapChildren public="1" set="method">
			<f a="child1:child2">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Swaps the position of 2 Display Objects within this container.
	 *
	 * @param child1 {DisplayObject}
	 * @param child2 {DisplayObject}</haxe_doc>
		</swapChildren>
		<getChildIndex public="1" set="method">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the index position of a child DisplayObject instance
	 *
	 * @param child {DisplayObject} The DisplayObject instance to identify
	 * @return {Int} The index position of the child display object to identify</haxe_doc>
		</getChildIndex>
		<setChildIndex public="1" set="method">
			<f a="child:index">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the position of an existing child in the display object container
	 *
	 * @param child {DisplayObject} The child DisplayObject instance for which you want to change the index number
	 * @param index {Int} The resulting index number for the child display object</haxe_doc>
		</setChildIndex>
		<getChildAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Returns the child at the specified index
	 *
	 * @param index {Int} The index to get the child from
	 * @return {DisplayObject} The child at the given index, if any.</haxe_doc>
		</getChildAt>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the container.
	 *
	 * @param child {DisplayObject} The DisplayObject to remove
	 * @return {DisplayObject} The child that was removed.</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the specified index position.
	 *
	 * @param index {Int} The index to get the child from
	 * @return {DisplayObject} The child that was removed.</haxe_doc>
		</removeChildAt>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="pixi.core.display.DisplayObject"/></c>
			</f>
			<haxe_doc><![CDATA[* Removes all children from this container that are within the begin and end indexes.
	 *
	 * @param beginIndex {Int} The beginning position. Default value is 0.
	 * @param endIndex {Int} The ending position. Default value is size of the container.
	 * @return {Array<DisplayObject>} The children that are removed.]]></haxe_doc>
		</removeChildren>
		<getChildByName public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Returns the display object in the container
	 *
	 * @param name {string} instance name
	 * @return {DisplayObject}</haxe_doc>
		</getChildByName>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* A Container represents a collection of display objects.
	 * It is the base class of all display objects that act as a container for other objects.
	 *
	 * @class
	 * @extends DisplayObject
	 * @namespace PIXI</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Container"</e></m></meta>
	</class>
	<class path="rm.core.Stage" params="" file="src/rm/core/Stage.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<addChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container.
  *
  * @method addChild
  * @param {PIXI.DisplayObject} child The child to add
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" override="1">
			<f a="child:index">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container at a specified index.
  *
  * @method addChildAt
  * @param {PIXI.DisplayObject} child The child to add
  * @param {Number} index The index to place the child in
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChildAt>
		<removeChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the container.
  *
  * @method removeChild
  * @param {PIXI.DisplayObject} child The child to remove
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the specified index position.
  *
  * @method removeChildAt
  * @param {Number} index The index to get the child from
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChildAt>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The root object of the display tree.
  *
  * @class Stage
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Stage"</e></m></meta>
	</class>
	<class path="rm.scenes.Scene_Base" params="" file="src/rm/scenes/Scene_Base.hx" extern="1">
		<extends path="rm.core.Stage"/>
		<_started><x path="Bool"/></_started>
		<_active><x path="Bool"/></_active>
		<_fadeSign><x path="Int"/></_fadeSign>
		<_fadeDuration><x path="Int"/></_fadeDuration>
		<_imageReservationId><x path="haxe.extern.EitherType">
	<d/>
	<x path="Int"/>
</x></_imageReservationId>
		<_windowLayer><c path="rm.core.WindowLayer"/></_windowLayer>
		<windowLayer public="1">
			<c path="rm.core.WindowLayer"/>
			<meta><m n=":native"><e>"_windowLayer"</e></m></meta>
		</windowLayer>
		<initialize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the scene.
  * @return Void</haxe_doc>
		</initialize>
		<create public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the scene's important properties.</haxe_doc>
		</create>
		<isActive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns whether the scene is active or not.
  * @return Bool</haxe_doc>
		</isActive>
		<isReady public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns if the scene is ready or not.
  * @return Bool</haxe_doc>
		</isReady>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the scene.</haxe_doc>
		</start>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the scene.</haxe_doc>
		</update>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the scene.</haxe_doc>
		</stop>
		<isBusy public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks if the Scene is busy processing an event
  * or other conditions.
  * @return Bool</haxe_doc>
		</isBusy>
		<isStarted public="1" set="method"><f a=""><x path="Bool"/></f></isStarted>
		<isFading public="1" set="method"><f a=""><x path="Bool"/></f></isFading>
		<createColorFilter public="1" set="method"><f a=""><x path="Void"/></f></createColorFilter>
		<updateColorFilter public="1" set="method"><f a=""><x path="Void"/></f></updateColorFilter>
		<scaleSprite public="1" set="method"><f a=""><x path="Void"/></f></scaleSprite>
		<centerSprite public="1" set="method"><f a=""><x path="Void"/></f></centerSprite>
		<isBottomHelpMode public="1" set="method"><f a=""><x path="Bool"/></f></isBottomHelpMode>
		<isBottomButtonMode public="1" set="method"><f a=""><x path="Bool"/></f></isBottomButtonMode>
		<isRightInputMode public="1" set="method"><f a=""><x path="Bool"/></f></isRightInputMode>
		<mainCommandWidth public="1" set="method"><f a=""><x path="Int"/></f></mainCommandWidth>
		<buttonAreaTop public="1" set="method"><f a=""><x path="Int"/></f></buttonAreaTop>
		<buttonAreaBottom public="1" set="method"><f a=""><x path="Int"/></f></buttonAreaBottom>
		<buttonAreaHeight public="1" set="method"><f a=""><x path="Int"/></f></buttonAreaHeight>
		<buttonY public="1" set="method"><f a=""><x path="Int"/></f></buttonY>
		<calcWindowHeight public="1" set="method"><f a=""><x path="Int"/></f></calcWindowHeight>
		<requestAutosave public="1" set="method"><f a=""><x path="Void"/></f></requestAutosave>
		<isAutosaveEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isAutosaveEnabled>
		<executeAutosave public="1" set="method"><f a=""><x path="Void"/></f></executeAutosave>
		<onAutosaveSuccess public="1" set="method"><f a=""><x path="Void"/></f></onAutosaveSuccess>
		<onAutosaveFailure public="1" set="method"><f a=""><x path="Void"/></f></onAutosaveFailure>
		<terminate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Terminates/ends the scene.</haxe_doc>
		</terminate>
		<createWindowLayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the window layer on the current scene
  * for displaying any and all windows.</haxe_doc>
		</createWindowLayer>
		<addWindow public="1" set="method">
			<f a="window">
				<c path="rm.windows.Window_Base"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a child window to the window layer for processing.
  * @param window</haxe_doc>
		</addWindow>
		<startFadeIn public="1" set="method">
			<f a="duration:white">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Request a fadeIn screen process
  * @param duration  [duration=30] The time the process will take to fadeIn the screen.
  * @param white  [white=false] If true the fadeIn will process with a white color else it will be black.</haxe_doc>
		</startFadeIn>
		<startFadeOut public="1" set="method">
			<f a="duration:white">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Request a fadeOut screen process
  * @param duration  [duration=30] The time the process will take to fadeOut the screen.
  * @param white  [white=false] If true the fadeOut will process with a white color else it will be black.</haxe_doc>
		</startFadeOut>
		<createFadeSprite public="1" set="method"><f a="white">
	<x path="Bool"/>
	<x path="Void"/>
</f></createFadeSprite>
		<updateFade public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the scene's fade</haxe_doc>
		</updateFade>
		<updateChildren public="1" set="method"><f a=""><x path="Void"/></f></updateChildren>
		<popScene public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pops the current scene and returns to the previous scene if available.</haxe_doc>
		</popScene>
		<checkGameOver public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks for game over.</haxe_doc>
		</checkGameOver>
		<fadeOutAll public="1" set="method"><f a=""><x path="Void"/></f></fadeOutAll>
		<fadeSpeed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the fade speed.
  * @return Int</haxe_doc>
		</fadeSpeed>
		<slowFadeSpeed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the slow fade speed.
  * @return Int</haxe_doc>
		</slowFadeSpeed>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Base"</e></m>
		</meta>
	</class>
	<class path="core.TestScene" params="" file="src/core/TestScene.hx">
		<extends path="rm.scenes.Scene_Base"/>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="core.JsFn" params="" file="src/core/Types.hx" module="core.Types"><c path="js.lib.Function"/></typedef>
	<abstract path="haxe.CallStack" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="70"><f a=""><x path="Any"/></f></unwrap>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Json" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe.PosInfos" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ValueException" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.display.CompletionParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<qualifier>
		<c path="String"/>
		<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
	</qualifier>
	<isQualified>
		<x path="Bool"/>
		<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
	</isQualified>
</a></typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<origin><x path="haxe.display.LocalOrigin"/></origin>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<isInline><x path="Bool"/></isInline>
	<isFinal><x path="Bool"/></isFinal>
	<id><x path="Int"/></id>
	<extra>
		<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
		<meta><m n=":optional"/></meta>
	</extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonEnumField"/></field>
</a></typedef>
	<abstract path="haxe.display.Literal" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.DisplayModuleType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
</a></typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><c path="String"/></name></a></typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.Platform" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.Metadata" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<name><c path="String"/></name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Define" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<value><x path="Null"><c path="String"/></x></value>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<name><c path="String"/></name>
	<links><c path="Array"><c path="String"/></c></links>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Keyword" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><x path="haxe.display.KeywordKind"/></name></a></typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.Package" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonPackagePath"/></path></a></typedef>
	<typedef path="haxe.display.Module" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonModulePath"/></path></a></typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.DisplayItem" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
	<index>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</index>
	<args><c path="haxe.display.DisplayItem.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<keyValueIterator>
		<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
		<meta><m n=":optional"/></meta>
	</keyValueIterator>
	<iterator>
		<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
		<meta><m n=":optional"/></meta>
	</iterator>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
</a></typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a><isIntersectionType><x path="Bool"/></isIntersectionType></a></typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<isOutermostPattern><x path="Bool"/></isOutermostPattern>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
</a></typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.CompletionMode" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<replaceRange>
		<x path="Null"><t path="haxe.display.Range"/></x>
		<meta><m n=":optional"/></meta>
	</replaceRange>
	<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
	<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
	<isIncomplete>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isIncomplete>
	<filterString>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filterString>
</a></typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t></typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t></typedef>
	<typedef path="haxe.display.FindReferencesParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<kind>
				<x path="Null"><x path="haxe.display.FindReferencesKind"/></x>
				<meta><m n=":optional"/></meta>
			</kind>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>FindReferences</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FindReferencesKind" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
	<expected>
		<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
		<meta><m n=":optional"/></meta>
	</expected>
</a></typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<documentation>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentation>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.SignatureItem" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
	<kind><x path="haxe.display.SignatureItemKind"/></kind>
	<activeSignature><x path="Int"/></activeSignature>
	<activeParameter><x path="Int"/></activeParameter>
</a></typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t></typedef>
	<typedef path="haxe.display.PositionParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonType" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<supportsResolve final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</supportsResolve>
	<maxCompletionItems final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of completion items to return</haxe_doc>
	</maxCompletionItems>
	<exclude final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.display.Version" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t></typedef>
	<typedef path="haxe.display.Timer" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<percentTotal final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentTotal>
	<percentParent final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentParent>
	<path final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<name final="1" set="null"><c path="String"/></name>
	<info final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</info>
	<children final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
		<meta><m n=":optional"/></meta>
	</children>
	<calls final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</calls>
</a></typedef>
	<typedef path="haxe.display.Response" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<timestamp final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
	</timestamp>
	<timers final="1" set="null">
		<x path="Null"><t path="haxe.display.Timer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
	</timers>
	<result final="1" set="null">
		<x path="Null"><c path="haxe.display.Response.T"/></x>
		<meta><m n=":optional"/></meta>
	</result>
</a></typedef>
	<typedef path="haxe.display.FileParams" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><file><x path="haxe.display.FsPath"/></file></a></typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c></typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="263"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/runner/haxe/versions/4.1.3/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/Bytes.hx">
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.lib.Uint8Array"/></b>
		<new set="method" line="32">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<class path="haxe.io.Eof" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="js.lib.ArrayBuffer" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.DataView" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.io.Input" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/io/Input.hx">
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/io/Output.hx">
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><c path="js.lib.Uint8Array"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.macro.Position" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/runner/haxe/versions/4.1.3/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="js.Boot" params="" file="/home/runner/haxe/versions/4.1.3/std/js/Boot.hx">
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/home/runner/haxe/versions/4.1.3/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="69" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="100" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="110" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="122" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.html.EventTarget" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?options:?wantsUntrusted">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.AddEventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><addEventListener public="1" set="method">
	<f a="type:listener:?options:?wantsUntrusted">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.AddEventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
</addEventListener></overloads>
		</addEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?options">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.EventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><removeEventListener public="1" set="method">
	<f a="type:listener:?options">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.EventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
</removeEventListener></overloads>
		</removeEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="js.html.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Dispatch an event to this `EventTarget`.
		@throws DOMError</haxe_doc>
		</dispatchEvent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`EventTarget` is an interface implemented by objects that can receive events and may have listeners for them.

	Documentation [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.AbortSignal" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AbortSignal.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the request(s) the signal is communicating with is/are aborted (`true`) or not (`false`).</haxe_doc>
		</aborted>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Invoked when an `abort_(dom_abort_api)` event fires, i.e. when the DOM request(s) the signal is communicating with is/are aborted.</haxe_doc>
		</onabort>
		<haxe_doc><![CDATA[The `AbortSignal` interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an `AbortController` object.

	Documentation [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal>]]></haxe_doc>
		<meta><m n=":native"><e>"AbortSignal"</e></m></meta>
	</class>
	<typedef path="js.html.AddEventListenerOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AddEventListenerOptions.hx"><a>
	<passive>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</passive>
	<once>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</once>
	<capture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</capture>
</a></typedef>
	<abstract path="js.html.AlignSetting" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Node" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ELEMENT_NODE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ATTRIBUTE_NODE>
		<TEXT_NODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TEXT_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</COMMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</NOTATION_NODE>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" expr="4" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" expr="8" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" expr="32" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<nodeType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the type of the node. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		   </tr>
		   <tr>
		    <td><code>ELEMENT_NODE</code></td>
		    <td><code>1</code></td>
		   </tr>
		   <tr>
		    <td><code>ATTRIBUTE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		   </tr>
		   <tr>
		    <td><code>TEXT_NODE</code></td>
		    <td><code>3</code></td>
		   </tr>
		   <tr>
		    <td><code>CDATA_SECTION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>4</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_REFERENCE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>5</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_NODE</code> <em>(deprecated)</em></td>
		    <td><code>6</code></td>
		   </tr>
		   <tr>
		    <td><code>PROCESSING_INSTRUCTION_NODE</code></td>
		    <td><code>7</code></td>
		   </tr>
		   <tr>
		    <td><code>COMMENT_NODE</code></td>
		    <td><code>8</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_NODE</code></td>
		    <td><code>9</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_TYPE_NODE</code></td>
		    <td><code>10</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_FRAGMENT_NODE</code></td>
		    <td><code>11</code></td>
		   </tr>
		   <tr>
		    <td><code>NOTATION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>12</code></td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</nodeType>
		<nodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the name of the `Node`. The structure of the name will differ with the node type. E.g. An `HTMLElement` will contain the name of the corresponding tag, like `'audio'` for an `HTMLAudioElement`, a `Text` node will have the `'#text'` string, or a `Document` node will have the `'#document'` string.</haxe_doc>
		</nodeName>
		<baseURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the base URL. The concept of base URL changes from one language to another; in HTML, it corresponds to the protocol, the domain name and the directory structure, that is all until the last `'/'`.</haxe_doc>
		</baseURI>
		<isConnected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the `Document` object in the case of the normal DOM, or the `ShadowRoot` in the case of a shadow DOM.</haxe_doc>
		</isConnected>
		<ownerDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns the `Document` that this node belongs to. If the node is itself a document, returns `null`.</haxe_doc>
		</ownerDocument>
		<parentNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns `null`.</haxe_doc>
		</parentNode>
		<parentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.</haxe_doc>
		</parentElement>
		<childNodes public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the `Node` change, the `NodeList` object is automatically updated.</haxe_doc>
		</childNodes>
		<firstChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the first direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</firstChild>
		<lastChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the last direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the previous node in the tree, or `null` if there isn't such node.</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the next node in the tree, or `null` if there isn't such node.</haxe_doc>
		</nextSibling>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the value of the current node</haxe_doc>
		</nodeValue>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the textual content of an element and all its descendants.</haxe_doc>
		</textContent>
		<getRootNode public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.GetRootNodeOptions"/></x>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns the context object's root which optionally includes the shadow root if it is available. </haxe_doc>
		</getRootNode>
		<hasChildNodes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has any child nodes, or not.</haxe_doc>
		</hasChildNodes>
		<insertBefore public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Inserts a `Node` before the reference node as a child of a specified parent node.
		@throws DOMError</haxe_doc>
		</insertBefore>
		<appendChild public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adds the specified childNode argument as the last child to the current node.
		
		 If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.
		@throws DOMError</haxe_doc>
		</appendChild>
		<replaceChild public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Replaces one child `Node` of the current one with the second one given in parameter.
		@throws DOMError</haxe_doc>
		</replaceChild>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Removes a child node from the current element, which must be a child of the current node.
		@throws DOMError</haxe_doc>
		</removeChild>
		<normalize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</normalize>
		<cloneNode public="1" set="method">
			<f a="?deep" v="false">
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Clone a `Node`, and optionally, all of its contents. By default, it clones the content of the node.
		@throws DOMError</haxe_doc>
		</cloneNode>
		<isSameNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether or not the two nodes are the same (that is, they reference the same object).</haxe_doc>
		</isSameNode>
		<isEqualNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isEqualNode>
		<compareDocumentPosition public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the position of the current node against another node in any other document.</haxe_doc>
		</compareDocumentPosition>
		<contains public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether a node is a descendant of a given node or not.</haxe_doc>
		</contains>
		<lookupPrefix public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the prefix for a given namespace URI, if present, and `null` if not. When multiple prefixes are possible, the result is implementation-dependent.</haxe_doc>
		</lookupPrefix>
		<lookupNamespaceURI public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Accepts a prefix and returns the namespace URI associated with it on the given node if found (and `null` if not). Supplying `null` for the prefix will return the default namespace.</haxe_doc>
		</lookupNamespaceURI>
		<isDefaultNamespace public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Accepts a namespace URI as an argument and returns a `Boolean` with a value of `true` if the namespace is the default namespace on the given node or `false` if not.</haxe_doc>
		</isDefaultNamespace>
		<haxe_doc><![CDATA[`Node` is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.

	Documentation [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Node$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Node>]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.DOMElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMElement.hx" extern="1">
		<extends path="js.html.Node"/>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>The namespace URI of the element, or `null` if it is no namespace.
		 
		 Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the `http://www.w3.org/1999/xhtml` namespace in both HTML and XML trees. `1.9.2`</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the element, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the element.</haxe_doc>
		</localName>
		<tagName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `String` with the name of the tag for the given element.</haxe_doc>
		</tagName>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the id of the element.</haxe_doc>
		</id>
		<className public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the class of the element.</haxe_doc>
		</className>
		<classList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` containing the list of class attributes.</haxe_doc>
		</classList>
		<attributes public="1" set="null">
			<c path="js.html.NamedNodeMap"/>
			<haxe_doc>Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.</haxe_doc>
		</attributes>
		<title public="1"><c path="String"/></title>
		<lang public="1"><c path="String"/></lang>
		<dir public="1"><c path="String"/></dir>
		<dataset public="1" set="null"><c path="js.html.DOMStringMap"/></dataset>
		<innerText public="1"><c path="String"/></innerText>
		<itemScope public="1"><x path="Bool"/></itemScope>
		<itemType public="1" set="null"><c path="js.html.DOMTokenList"/></itemType>
		<itemId public="1"><c path="String"/></itemId>
		<itemRef public="1" set="null"><c path="js.html.DOMTokenList"/></itemRef>
		<itemProp public="1" set="null"><c path="js.html.DOMTokenList"/></itemProp>
		<properties public="1" set="null"><c path="js.html.HTMLPropertiesCollection"/></properties>
		<itemValue public="1"><d/></itemValue>
		<hidden public="1"><x path="Bool"/></hidden>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<accessKey public="1"><c path="String"/></accessKey>
		<accessKeyLabel public="1" set="null"><c path="String"/></accessKeyLabel>
		<draggable public="1"><x path="Bool"/></draggable>
		<contentEditable public="1"><c path="String"/></contentEditable>
		<isContentEditable public="1" set="null"><x path="Bool"/></isContentEditable>
		<contextMenu public="1" set="null"><c path="js.html.MenuElement"/></contextMenu>
		<spellcheck public="1"><x path="Bool"/></spellcheck>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<oncopy public="1"><x path="haxe.Function"/></oncopy>
		<oncut public="1"><x path="haxe.Function"/></oncut>
		<onpaste public="1"><x path="haxe.Function"/></onpaste>
		<offsetParent public="1" set="null"><c path="js.html.Element"/></offsetParent>
		<offsetTop public="1" set="null"><x path="Int"/></offsetTop>
		<offsetLeft public="1" set="null"><x path="Int"/></offsetLeft>
		<offsetWidth public="1" set="null"><x path="Int"/></offsetWidth>
		<offsetHeight public="1" set="null"><x path="Int"/></offsetHeight>
		<scrollTop public="1">
			<x path="Int"/>
			<haxe_doc>A `Number` representing number of pixels the top of the document is scrolled vertically.</haxe_doc>
		</scrollTop>
		<scrollLeft public="1">
			<x path="Int"/>
			<haxe_doc>Is a `Number` representing the left scroll offset of the element.</haxe_doc>
		</scrollLeft>
		<scrollWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view width of the element.</haxe_doc>
		</scrollWidth>
		<scrollHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view height of an element.</haxe_doc>
		</scrollHeight>
		<clientTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the top border of the element.</haxe_doc>
		</clientTop>
		<clientLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the left border of the element.</haxe_doc>
		</clientLeft>
		<clientWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner width of the element.</haxe_doc>
		</clientWidth>
		<clientHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner height of the element.</haxe_doc>
		</clientHeight>
		<scrollTopMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum top scroll offset possible for the element.</haxe_doc>
		</scrollTopMax>
		<scrollLeftMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum left scroll offset possible for the element.</haxe_doc>
		</scrollLeftMax>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element's content.</haxe_doc>
		</innerHTML>
		<outerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.</haxe_doc>
		</outerHTML>
		<shadowRoot public="1" set="null">
			<c path="js.html.ShadowRoot"/>
			<haxe_doc>Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.</haxe_doc>
		</shadowRoot>
		<assignedSlot public="1" set="null"><c path="js.html.SlotElement"/></assignedSlot>
		<slot public="1">
			<c path="String"/>
			<haxe_doc>Returns the name of the shadow DOM slot the element is inserted in.</haxe_doc>
		</slot>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handling code for the `wheel` event. This is now implemented on `GlobalEventHandlers.onwheel`.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `gotpointercapture` event type.</haxe_doc>
		</ongotpointercapture>
		<onlostpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `lostpointercapture` event type.</haxe_doc>
		</onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getAttributeNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of attribute names from the current element.</haxe_doc>
		</getAttributeNames>
		<getAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the named attribute from the current node and returns it as an `Object`.</haxe_doc>
		</getAttribute>
		<getAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an `Object`.</haxe_doc>
		</getAttributeNS>
		<toggleAttribute public="1" set="method">
			<f a="name:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.
		@throws DOMError</haxe_doc>
		</toggleAttribute>
		<setAttribute public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of a named attribute of the current node.
		@throws DOMError</haxe_doc>
		</setAttribute>
		<setAttributeNS public="1" set="method">
			<f a="namespace:name:value">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNS>
		<removeAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttribute>
		<removeAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNS>
		<hasAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute or not.</haxe_doc>
		</hasAttribute>
		<hasAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute, in the specified namespace, or not.</haxe_doc>
		</hasAttributeNS>
		<hasAttributes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has one or more HTML attributes present.</haxe_doc>
		</hasAttributes>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the `Element` which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.
		@throws DOMError</haxe_doc>
		</closest>
		<matches public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating whether or not the element would be selected by the specified selector string.
		@throws DOMError</haxe_doc>
		</matches>
		<webkitMatchesSelector public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</webkitMatchesSelector>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name and namespace, from the current element.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.</haxe_doc>
		</getElementsByClassName>
		<insertAdjacentElement public="1" set="method">
			<f a="where:element">
				<c path="String"/>
				<c path="js.html.Element"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Inserts a given element node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentElement>
		<insertAdjacentText public="1" set="method">
			<f a="where:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a given text node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentText>
		<setPointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Designates a specific element as the capture target of future pointer events.
		@throws DOMError</haxe_doc>
		</setPointerCapture>
		<releasePointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Releases (stops) pointer capture that was previously set for a specific `PointerEvent`.
		@throws DOMError</haxe_doc>
		</releasePointerCapture>
		<hasPointerCapture public="1" set="method"><f a="pointerId">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasPointerCapture>
		<setCapture public="1" set="method">
			<f a="?retargetToElement" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ retargetToElement : false }</e></m></meta>
			<haxe_doc>Sets up mouse event capture, redirecting all mouse events to this element.</haxe_doc>
		</setCapture>
		<releaseCapture public="1" set="method"><f a=""><x path="Void"/></f></releaseCapture>
		<getAttributeNode public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the named attribute from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNode>
		<setAttributeNode public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNode>
		<removeAttributeNode public="1" set="method">
			<f a="oldAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNode>
		<getAttributeNodeNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNodeNS>
		<setAttributeNodeNS public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNodeNS>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns the size of an element and its position relative to the viewport.</haxe_doc>
		</getBoundingClientRect>
		<scrollIntoView public="1" set="method">
			<f a="?arg">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
			<overloads><scrollIntoView public="1" set="method">
	<f a="?arg">
		<x path="Null"><t path="js.html.ScrollIntoViewOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
</scrollIntoView></overloads>
		</scrollIntoView>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<insertAdjacentHTML public="1" set="method">
			<f a="position:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.
		@throws DOMError</haxe_doc>
		</insertAdjacentHTML>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Node` which matches the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of nodes which match the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<attachShadow public="1" set="method">
			<f a="shadowRootInitDict">
				<t path="js.html.ShadowRootInit"/>
				<c path="js.html.ShadowRoot"/>
			</f>
			<haxe_doc>Attatches a shadow DOM tree to the specified element and returns a reference to its `ShadowRoot`.
		@throws DOMError</haxe_doc>
		</attachShadow>
		<requestFullscreen public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Asynchronously asks the browser to make the element full-screen.
		@throws DOMError</haxe_doc>
		</requestFullscreen>
		<requestPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Allows to asynchronously ask for the pointer to be locked on the given element.</haxe_doc>
		</requestPointerLock>
		<animate public="1" set="method">
			<f a="keyframes:?options">
				<d/>
				<x path="Float"/>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="keyframes:?options">
		<d/>
		<x path="Null"><t path="js.html.KeyframeAnimationOptions"/></x>
		<c path="js.html.Animation"/>
	</f>
	<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
</animate></overloads>
		</animate>
		<getAnimations public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.AnimationFilter"/></x>
				<c path="Array"><c path="js.html.Animation"/></c>
			</f>
			<haxe_doc>Returns an array of Animation objects currently active on the element.</haxe_doc>
		</getAnimations>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<haxe_doc><![CDATA[`Element` is the most general base class from which all objects in a `Document` inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from `Element`.

	Documentation [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Element$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Element>]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<click public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a mouse click event to the element.</haxe_doc>
		</click>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Makes the element the current keyboard focus.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes keyboard focus from the currently focused element.
		@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[The `HTMLElement` interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.

	Documentation [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLElement"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating where to display the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a comma-separated list of coordinates.</haxe_doc>
		</coords>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding of the linked resource.</haxe_doc>
		</charset>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the anchor name.</haxe_doc>
		</name>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the shape of the active area.</haxe_doc>
		</shape>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAnchorElement` interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface that they inherit from) for manipulating the layout and presentation of such elements.

	Documentation [HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.Animation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Animation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the `String` used to identify the animation.</haxe_doc>
		</id>
		<effect public="1">
			<c path="js.html.AnimationEffect"/>
			<haxe_doc>Gets and sets the `AnimationEffectReadOnly` associated with this animation. This will usually be a `KeyframeEffect` object.</haxe_doc>
		</effect>
		<timeline public="1">
			<c path="js.html.AnimationTimeline"/>
			<haxe_doc>Gets or sets the `AnimationTimeline` associated with this animation.</haxe_doc>
		</timeline>
		<startTime public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the scheduled time when an animation's playback should begin.</haxe_doc>
		</startTime>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `AnimationTimeline`, is inactive or hasn't been played yet, its value is `null`.</haxe_doc>
		</currentTime>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the playback rate of the animation.</haxe_doc>
		</playbackRate>
		<playState public="1" set="null">
			<x path="js.html.AnimationPlayState"/>
			<haxe_doc>Returns an enumerated value describing the playback state of an animation.</haxe_doc>
		</playState>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.</haxe_doc>
		</pending>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current ready Promise for this animation.</haxe_doc>
		</ready>
		<finished public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current finished Promise for this animation.</haxe_doc>
		</finished>
		<onfinish public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `finish` event.</haxe_doc>
		</onfinish>
		<oncancel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `cancel` event.</haxe_doc>
		</oncancel>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears all `KeyframeEffect` caused by this animation and aborts its playback.</haxe_doc>
		</cancel>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Seeks either end of an animation, depending on whether the animation is playing or reversing.
		@throws DOMError</haxe_doc>
		</finish>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Starts or resumes playing of an animation, or begins the animation again if it previously finished.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends playing of an animation.
		@throws DOMError</haxe_doc>
		</pause>
		<updatePlaybackRate public="1" set="method">
			<f a="playbackRate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the speed of an animation after first synchronizing its playback position.</haxe_doc>
		</updatePlaybackRate>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.
		@throws DOMError</haxe_doc>
		</reverse>
		<new public="1" set="method">
			<f a="?effect:?timeline">
				<c path="js.html.AnimationEffect"/>
				<c path="js.html.AnimationTimeline"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Animation` interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.

	Documentation [Animation](https://developer.mozilla.org/en-US/docs/Web/API/Animation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Animation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Animation>]]></haxe_doc>
		<meta><m n=":native"><e>"Animation"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffect" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AnimationEffect.hx" extern="1">
		<getTiming public="1" set="method"><f a=""><t path="js.html.EffectTiming"/></f></getTiming>
		<getComputedTiming public="1" set="method"><f a=""><t path="js.html.ComputedEffectTiming"/></f></getComputedTiming>
		<updateTiming public="1" set="method">
			<f a="?timing">
				<x path="Null"><t path="js.html.OptionalEffectTiming"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</updateTiming>
		<haxe_doc><![CDATA[The `AnimationEffect` interface of the Web Animations API defines current and future animation effects like `KeyframeEffect`, which can be passed to `Animation` objects for playing, and `KeyframeEffectReadOnly` (which is used by CSS Animations and Transitions).

	Documentation [AnimationEffect](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffect"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationFilter" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AnimationFilter.hx"><a><subtree>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</subtree></a></typedef>
	<abstract path="js.html.AnimationPlayState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AnimationPlayState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.AnimationTimeline" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AnimationTimeline.hx" extern="1">
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the time value in milliseconds for this timeline or `null` if this timeline is inactive.</haxe_doc>
		</currentTime>
		<haxe_doc><![CDATA[The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by `DocumentTimeline` and future timeline types) and is not itself directly used by developers. Anywhere you see `AnimationTimeline`, you should use `DocumentTimeline` or any other timeline type instead.

	Documentation [AnimationTimeline](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationTimeline"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute, containing alternative text for the element.</haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.</haxe_doc>
		</coords>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.</haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.</haxe_doc>
		</relList>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the area is inactive (`true`) or active (`false`).</haxe_doc>
		</noHref>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAreaElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.

	Documentation [HTMLAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.AssignedNodesOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AssignedNodesOptions.hx"><a><flatten>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</flatten></a></typedef>
	<class path="js.html.Attr" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the attribute.</haxe_doc>
		</localName>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The attribute's value.</haxe_doc>
		</value>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The attribute's name.</haxe_doc>
		</name>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace URI of the attribute, or `null` if there is no namespace.</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the attribute, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<specified public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property always returns `true`. Originally, it returned `true `if the attribute was explicitly specified in the source code or by a script, and `false` if its value came from the default one defined in the document's DTD.</haxe_doc>
		</specified>
		<ownerElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element holding the attribute.
		
			
			Note: DOM Level 4 removed this property. The assumption was that since you get an `Attr` object from an `Element`, you should already know the associated element.
		
			As that doesn't hold true in cases like `Attr` objects being returned by `Document.evaluate`, the DOM Living Standard reintroduced the property.
		
			Gecko outputs a deprecation note starting from Gecko 7.0 `7.0`. This note was removed again in Gecko 49.0 `49.0`.</haxe_doc>
		</ownerElement>
		<haxe_doc><![CDATA[This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., `Element.getAttribute()`, but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating give `Attr` types.

	Documentation [Attr](https://developer.mozilla.org/en-US/docs/Web/API/Attr) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Attr$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Attr>]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NETWORK_EMPTY public="1" get="inline" set="null" expr="0" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" expr="1" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" expr="2" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<HAVE_NOTHING public="1" get="inline" set="null" expr="0" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<HAVE_METADATA public="1" get="inline" set="null" expr="1" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" expr="2" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" expr="3" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" expr="4" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.</haxe_doc>
		</error>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.</haxe_doc>
		</src>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the absolute URL of the chosen media resource.</haxe_doc>
		</currentSrc>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the CORS setting for this media element.</haxe_doc>
		</crossOrigin>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.</haxe_doc>
		</networkState>
		<preload public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.</haxe_doc>
		</preload>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.</haxe_doc>
		</buffered>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the readiness state of the media.</haxe_doc>
		</readyState>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.</haxe_doc>
		</currentTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` indicating the length of the media in seconds, or 0 if no media data is available.</haxe_doc>
		</duration>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element is paused.</haxe_doc>
		</paused>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the default playback rate for the media.</haxe_doc>
		</defaultPlaybackRate>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` that indicates the rate at which the media is being played back. </haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element has finished playing.</haxe_doc>
		</ended>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
		 Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.</haxe_doc>
		</autoplay>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.</haxe_doc>
		</loop>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.</haxe_doc>
		</controls>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</haxe_doc>
		</volume>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.</haxe_doc>
		</muted>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.</haxe_doc>
		</defaultMuted>
		<audioTracks public="1" set="null">
			<c path="js.html.AudioTrackList"/>
			<haxe_doc>A `AudioTrackList` that lists the `AudioTrack` objects contained in the element.</haxe_doc>
		</audioTracks>
		<videoTracks public="1" set="null">
			<c path="js.html.VideoTrackList"/>
			<haxe_doc>Returns the list of `VideoTrack` objects contained in the element.

		 Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.</haxe_doc>
		</videoTracks>
		<textTracks public="1" set="null">
			<c path="js.html.TextTrackList"/>
			<haxe_doc>Returns the list of `TextTrack` objects contained in the element.</haxe_doc>
		</textTracks>
		<srcObject public="1">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.</haxe_doc>
		</srcObject>
		<mediaKeys public="1" set="null">
			<c path="js.html.eme.MediaKeys"/>
			<haxe_doc>Returns a `MediaKeys` object or `null`. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.</haxe_doc>
		</mediaKeys>
		<onencrypted public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the media is encrypted.</haxe_doc>
		</onencrypted>
		<onwaitingforkey public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when playback is blocked while waiting for an encryption key.</haxe_doc>
		</onwaitingforkey>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.</haxe_doc>
		</load>
		<canPlayType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Determines whether the specified media type can be played back.</haxe_doc>
		</canPlayType>
		<fastSeek public="1" set="method">
			<f a="time">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Directly seeks to the given time.
		@throws DOMError</haxe_doc>
		</fastSeek>
		<play public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Begins playback of the media.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses the media playback.
		@throws DOMError</haxe_doc>
		</pause>
		<addTextTrack public="1" set="method">
			<f a="kind:?label:?language" v=":&quot;&quot;:&quot;&quot;">
				<x path="js.html.TextTrackKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.TextTrack"/>
			</f>
			<meta><m n=":value"><e>{ language : "", label : "" }</e></m></meta>
			<haxe_doc>Adds a text track (such as a track for subtitles) to a media element.</haxe_doc>
		</addTextTrack>
		<setMediaKeys public="1" set="method">
			<f a="mediaKeys">
				<c path="js.html.eme.MediaKeys"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.</haxe_doc>
		</setMediaKeys>
		<haxe_doc><![CDATA[The `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.

	Documentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<haxe_doc><![CDATA[The `HTMLAudioElement` interface provides access to the properties of `audio` elements, as well as methods to manipulate them. It derives from the `HTMLMediaElement` interface.

	Documentation [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.Audio" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Audio.hx" extern="1">
		<extends path="js.html.AudioElement"/>
		<new public="1" set="method">
			<f a="?src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Audio"</e></m></meta>
	</class>
	<class path="js.html.MediaStreamTrack" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` set to `"audio"` if the track is an audio track and to `"video"`, if it is a video track. It doesn't change if the track is deassociated from its source.</haxe_doc>
		</kind>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a unique identifier (GUID) for the track; it is generated by the browser.</haxe_doc>
		</id>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a user agent-assigned label that identifies the track source, as in `"internal microphone"`. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.</haxe_doc>
		</label>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean whose value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`. The `muted` property refers to a condition in which there's no media because of a technical issue.</haxe_doc>
		</enabled>
		<muted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`, and unmute the media by setting it back to `true` again.</haxe_doc>
		</muted>
		<onmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `mute` event is fired on the object, that is when the streaming is terminating.</haxe_doc>
		</onmute>
		<onunmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `unmute` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onunmute>
		<readyState public="1" set="null">
			<x path="js.html.MediaStreamTrackState"/>
			<haxe_doc>Returns an enumerated value giving the status of the track. This will be one of the following values:

		  `"live"` which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the `MediaStreamTrack.enabled` attribute.
		  `"ended"` which indicates that the input is not giving any more data and will never provide new data.</haxe_doc>
		</readyState>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `ended_(MediaStream)` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onended>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStreamTrack"/></f>
			<haxe_doc>Returns a duplicate of the `MediaStreamTrack`.</haxe_doc>
		</clone>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to `ended`.</haxe_doc>
		</stop>
		<getConstraints public="1" set="method">
			<f a=""><t path="js.html.MediaTrackConstraints"/></f>
			<haxe_doc>Returns a `MediaTrackConstraints` object containing the currently set constraints for the track; the returned value matches the constraints last set using `MediaStreamTrack.applyConstraints`.</haxe_doc>
		</getConstraints>
		<getSettings public="1" set="method">
			<f a=""><t path="js.html.MediaTrackSettings"/></f>
			<haxe_doc>Returns a `MediaTrackSettings` object containing the current values of each of the `MediaStreamTrack`'s constrainable properties.</haxe_doc>
		</getSettings>
		<applyConstraints public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaTrackConstraints"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the `MediaStreamTrack`.
		@throws DOMError</haxe_doc>
		</applyConstraints>
		<haxe_doc><![CDATA[The `MediaStreamTrack` interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.

	Documentation [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioStreamTrack" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AudioStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"AudioStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrack" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AudioTrack.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling `AudioTrackList.getTrackById()`. The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.</haxe_doc>
		</id>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the category into which the track falls. For example, the main audio track would have a `kind` of `"main"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` providing a human-readable label for the track. For example, an audio commentary track for a movie might have a `label` of `"Commentary with director John Q. Public and actors John Doe and Jane Eod."` This string is empty if no label is provided.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 ({{RFC(5646)}}) language code, such as `"en-US"` or `"pt-BR"`.</haxe_doc>
		</language>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to `false` mutes the track's audio.</haxe_doc>
		</enabled>
		<haxe_doc><![CDATA[The `AudioTrack` interface represents a single audio track from one of the HTML media elements, `audio` or `video`. 

	Documentation [AudioTrack](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrackList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AudioTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of tracks in the list.</haxe_doc>
		</length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.AudioTrack"/>
</f></getTrackById>
		<haxe_doc><![CDATA[The `AudioTrackList` interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate `AudioTrack` object in the list.

	Documentation [AudioTrackList](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.AutoKeyword" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AutoKeyword.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AutoKeyword.AutoKeyword_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/AutoKeyword.hx" private="1" module="js.html.AutoKeyword" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.BRElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `HTMLBRElement` interface represents a HTML line break element (`br`). It inherits from `HTMLElement`.

	Documentation [HTMLBRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarProp" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/BarProp.hx" extern="1">
		<visible public="1"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarProp"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.</haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `HTMLBaseElement` interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.

	Documentation [HTMLBaseElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.Blob" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of the data contained in the `Blob` object.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty.</haxe_doc>
		</type>
		<slice public="1" set="method">
			<f a="?start:?end:?contentType">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.Blob"/>
			</f>
			<haxe_doc>Returns a new `Blob` object containing the data in the specified range of bytes of the source `Blob`.
		@throws DOMError</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a="?blobParts:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
				<x path="Null"><t path="js.html.BlobPropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `Blob` object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.

	Documentation [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Blob$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Blob>]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<typedef path="js.html.BlobPropertyBag" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/BlobPropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<endings>
		<x path="Null"><x path="js.html.EndingTypes"/></x>
		<meta><m n=":optional"/></meta>
	</endings>
</a></typedef>
	<class path="js.html.BodyElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</text>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of unvisited links.</haxe_doc>
		</link>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</vLink>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of active hyperlinks.</haxe_doc>
		</aLink>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the background color for the document.</haxe_doc>
		</bgColor>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.</haxe_doc>
		</background>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLBodyElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating body elements.

	Documentation [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.
		
			If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `form` element that owns this element.</haxe_doc>
		</formAction>
		<formEnctype public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the `enctype` attribute of the `form` element that owns this element.</haxe_doc>
		</formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `form` element that owns this element.</haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `form` element that owns this element.</haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `form` element that owns this element.</haxe_doc>
		</formTarget>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the object when submitted with a form. {{HTMLVersionInline(5)}} If specified, it must not be the empty string.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Is a `DOMString` indicating the behavior of the button. This is an enumerated attribute with the following possible values:
			
				`"submit"`: The button submits the form. This is the default value if the attribute is not specified, {{HTMLVersionInline(5)}} or if it is dynamically changed to an empty or invalid value.
				`"reset"`: The button resets the form.
				`"button"`: The button does nothing.
				`"menu"`: The button displays a menu. <em>(experimental)</em>]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the current form control value of the button.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Is a `ValidityState` representing the validity states that this button is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Is a `NodeList` that represents a list of `label` elements that are labels for this button.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLButtonElement` interface provides properties and methods (beyond the `button` object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.

	Documentation [HTMLButtonElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the textual data contained in this object.</haxe_doc>
		</data>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the size of the string contained in `CharacterData.data`.</haxe_doc>
		</length>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<substringData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the part of `CharacterData.data` of the specified length and starting at the specified offset.
		@throws DOMError</haxe_doc>
		</substringData>
		<appendData public="1" set="method">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the given `DOMString` to the `CharacterData.data` string; when this method returns, `data` contains the concatenated `DOMString`.
		@throws DOMError</haxe_doc>
		</appendData>
		<insertData public="1" set="method">
			<f a="offset:data">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the specified characters, at the specified offset, in the `CharacterData.data` string; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</insertData>
		<deleteData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified amount of characters, starting at the specified offset, from the `CharacterData.data` string; when this method returns, `data` contains the shortened `DOMString`.
		@throws DOMError</haxe_doc>
		</deleteData>
		<replaceData public="1" set="method">
			<f a="offset:count:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the specified amount of characters, starting at the specified offset, with the specified `DOMString`; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</replaceData>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `CharacterData` abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any object of type `CharacterData`: it is implemented by other interfaces, like `Text`, '. In XML, the character sequence '--' cannot be used within a comment.">`Comment`, or `ProcessingInstruction` which aren't abstract.

	Documentation [CharacterData](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CharacterData>]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order.</haxe_doc>
		</wholeText>
		<splitText public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</splitText>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Text` interface represents the textual content of `Element` or `Attr`.  If an element has no markup within its content, it has a single child implementing `Text` that contains the element's text.  However, if the element contains markup, it is parsed into information items and `Text` nodes that form its children.

	Documentation [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Text$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Text>]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[The `CDATASection` interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols `` and `&amp;` don’t need escaping as they normally do when inside a CDATA section.

	Documentation [CDATASection](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CDATASection>]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<abstract path="js.html.CSSBoxType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CSSBoxType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CSSBoxType.CSSBoxType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CSSBoxType.hx" private="1" module="js.html.CSSBoxType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CSSRule" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CSSRule.hx" extern="1">
		<STYLE_RULE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STYLE_RULE>
		<CHARSET_RULE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHARSET_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</IMPORT_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</FONT_FACE_RULE>
		<PAGE_RULE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PAGE_RULE>
		<NAMESPACE_RULE public="1" get="inline" set="null" expr="10" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</NAMESPACE_RULE>
		<KEYFRAMES_RULE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</KEYFRAMES_RULE>
		<KEYFRAME_RULE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</KEYFRAME_RULE>
		<COUNTER_STYLE_RULE public="1" get="inline" set="null" expr="11" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</COUNTER_STYLE_RULE>
		<SUPPORTS_RULE public="1" get="inline" set="null" expr="12" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SUPPORTS_RULE>
		<FONT_FEATURE_VALUES_RULE public="1" get="inline" set="null" expr="14" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</FONT_FEATURE_VALUES_RULE>
		<type public="1" set="null"><x path="Int"/></type>
		<cssText public="1"><c path="String"/></cssText>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<parentStyleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></parentStyleSheet>
		<haxe_doc><![CDATA[The `CSSRule` interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.

	Documentation [CSSRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A `CSSRuleList` is an (indirect-modify only) array-like object containing an ordered collection of `CSSRule` objects.

	Documentation [CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1"><c path="String"/></cssText>
		<length public="1" set="null"><x path="Int"/></length>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<alignContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-content" CSS property.</haxe_doc>
		</alignContent>
		<alignItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-items" CSS property.</haxe_doc>
		</alignItems>
		<alignSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-self" CSS property.</haxe_doc>
		</alignSelf>
		<alignmentAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-adjust" CSS property.</haxe_doc>
		</alignmentAdjust>
		<alignmentBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-baseline" CSS property.</haxe_doc>
		</alignmentBaseline>
		<all public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "all" CSS property.</haxe_doc>
		</all>
		<anchorPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "anchor-point" CSS property.</haxe_doc>
		</anchorPoint>
		<animation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation" CSS property.</haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-delay" CSS property.</haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-direction" CSS property.</haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-duration" CSS property.</haxe_doc>
		</animationDuration>
		<animationFillMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-fill-mode" CSS property.</haxe_doc>
		</animationFillMode>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-iteration-count" CSS property.</haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-name" CSS property.</haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-play-state" CSS property.</haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-timing-function" CSS property.</haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "azimuth" CSS property.</haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "backface-visibility" CSS property.</haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background" CSS property.</haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-attachment" CSS property.</haxe_doc>
		</backgroundAttachment>
		<backgroundBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-blend-mode" CSS property.</haxe_doc>
		</backgroundBlendMode>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-clip" CSS property.</haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-color" CSS property.</haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-image" CSS property.</haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-origin" CSS property.</haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position" CSS property.</haxe_doc>
		</backgroundPosition>
		<backgroundPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-x" CSS property.</haxe_doc>
		</backgroundPositionX>
		<backgroundPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-y" CSS property.</haxe_doc>
		</backgroundPositionY>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat" CSS property.</haxe_doc>
		</backgroundRepeat>
		<backgroundRepeatX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-x" CSS property.</haxe_doc>
		</backgroundRepeatX>
		<backgroundRepeatY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-y" CSS property.</haxe_doc>
		</backgroundRepeatY>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-size" CSS property.</haxe_doc>
		</backgroundSize>
		<baselineShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "baseline-shift" CSS property.</haxe_doc>
		</baselineShift>
		<binding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "binding" CSS property.</haxe_doc>
		</binding>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bleed" CSS property.</haxe_doc>
		</bleed>
		<blockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "block-size" CSS property.</haxe_doc>
		</blockSize>
		<bookmarkLabel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-label" CSS property.</haxe_doc>
		</bookmarkLabel>
		<bookmarkLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-level" CSS property.</haxe_doc>
		</bookmarkLevel>
		<bookmarkState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-state" CSS property.</haxe_doc>
		</bookmarkState>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border" CSS property.</haxe_doc>
		</border>
		<borderBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end" CSS property.</haxe_doc>
		</borderBlockEnd>
		<borderBlockEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-color" CSS property.</haxe_doc>
		</borderBlockEndColor>
		<borderBlockEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-style" CSS property.</haxe_doc>
		</borderBlockEndStyle>
		<borderBlockEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-width" CSS property.</haxe_doc>
		</borderBlockEndWidth>
		<borderBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start" CSS property.</haxe_doc>
		</borderBlockStart>
		<borderBlockStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-color" CSS property.</haxe_doc>
		</borderBlockStartColor>
		<borderBlockStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-style" CSS property.</haxe_doc>
		</borderBlockStartStyle>
		<borderBlockStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-width" CSS property.</haxe_doc>
		</borderBlockStartWidth>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom" CSS property.</haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-color" CSS property.</haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-left-radius" CSS property.</haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-right-radius" CSS property.</haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-style" CSS property.</haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-width" CSS property.</haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-collapse" CSS property.</haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-color" CSS property.</haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image" CSS property.</haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-outset" CSS property.</haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-repeat" CSS property.</haxe_doc>
		</borderImageRepeat>
		<borderImageSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-slice" CSS property.</haxe_doc>
		</borderImageSlice>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-source" CSS property.</haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-width" CSS property.</haxe_doc>
		</borderImageWidth>
		<borderInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end" CSS property.</haxe_doc>
		</borderInlineEnd>
		<borderInlineEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-color" CSS property.</haxe_doc>
		</borderInlineEndColor>
		<borderInlineEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-style" CSS property.</haxe_doc>
		</borderInlineEndStyle>
		<borderInlineEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-width" CSS property.</haxe_doc>
		</borderInlineEndWidth>
		<borderInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start" CSS property.</haxe_doc>
		</borderInlineStart>
		<borderInlineStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-color" CSS property.</haxe_doc>
		</borderInlineStartColor>
		<borderInlineStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-style" CSS property.</haxe_doc>
		</borderInlineStartStyle>
		<borderInlineStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-width" CSS property.</haxe_doc>
		</borderInlineStartWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left" CSS property.</haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-color" CSS property.</haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-style" CSS property.</haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-width" CSS property.</haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-radius" CSS property.</haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right" CSS property.</haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-color" CSS property.</haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-style" CSS property.</haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-width" CSS property.</haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-spacing" CSS property.</haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-style" CSS property.</haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top" CSS property.</haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-color" CSS property.</haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-left-radius" CSS property.</haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-right-radius" CSS property.</haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-style" CSS property.</haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-width" CSS property.</haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-width" CSS property.</haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bottom" CSS property.</haxe_doc>
		</bottom>
		<boxDecorationBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-decoration-break" CSS property.</haxe_doc>
		</boxDecorationBreak>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-shadow" CSS property.</haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-sizing" CSS property.</haxe_doc>
		</boxSizing>
		<boxSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-snap" CSS property.</haxe_doc>
		</boxSnap>
		<boxSuppress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-suppress" CSS property.</haxe_doc>
		</boxSuppress>
		<breakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-after" CSS property.</haxe_doc>
		</breakAfter>
		<breakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-before" CSS property.</haxe_doc>
		</breakBefore>
		<breakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-inside" CSS property.</haxe_doc>
		</breakInside>
		<bufferedRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "buffered-rendering" CSS property.</haxe_doc>
		</bufferedRendering>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caption-side" CSS property.</haxe_doc>
		</captionSide>
		<caretColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caret-color" CSS property.</haxe_doc>
		</caretColor>
		<chains public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "chains" CSS property.</haxe_doc>
		</chains>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clear" CSS property.</haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip" CSS property.</haxe_doc>
		</clip>
		<clipPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-path" CSS property.</haxe_doc>
		</clipPath>
		<clipRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-rule" CSS property.</haxe_doc>
		</clipRule>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color" CSS property.</haxe_doc>
		</color>
		<colorAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-adjust" CSS property.</haxe_doc>
		</colorAdjust>
		<colorInterpolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation" CSS property.</haxe_doc>
		</colorInterpolation>
		<colorInterpolationFilters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation-filters" CSS property.</haxe_doc>
		</colorInterpolationFilters>
		<colorRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-rendering" CSS property.</haxe_doc>
		</colorRendering>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-count" CSS property.</haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-fill" CSS property.</haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-gap" CSS property.</haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule" CSS property.</haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-color" CSS property.</haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-style" CSS property.</haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-width" CSS property.</haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-span" CSS property.</haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-width" CSS property.</haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "columns" CSS property.</haxe_doc>
		</columns>
		<contain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "contain" CSS property.</haxe_doc>
		</contain>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "content" CSS property.</haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-increment" CSS property.</haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-reset" CSS property.</haxe_doc>
		</counterReset>
		<counterSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-set" CSS property.</haxe_doc>
		</counterSet>
		<crop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "crop" CSS property.</haxe_doc>
		</crop>
		<cssFloat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "css-float" CSS property.</haxe_doc>
		</cssFloat>
		<cue public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue" CSS property.</haxe_doc>
		</cue>
		<cueAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-after" CSS property.</haxe_doc>
		</cueAfter>
		<cueBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-before" CSS property.</haxe_doc>
		</cueBefore>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cursor" CSS property.</haxe_doc>
		</cursor>
		<cx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cx" CSS property.</haxe_doc>
		</cx>
		<cy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cy" CSS property.</haxe_doc>
		</cy>
		<d public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "d" CSS property.</haxe_doc>
		</d>
		<direction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "direction" CSS property.</haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display" CSS property.</haxe_doc>
		</display>
		<displayInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-inside" CSS property.</haxe_doc>
		</displayInside>
		<displayList public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-list" CSS property.</haxe_doc>
		</displayList>
		<displayOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-outside" CSS property.</haxe_doc>
		</displayOutside>
		<dominantBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "dominant-baseline" CSS property.</haxe_doc>
		</dominantBaseline>
		<elevation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "elevation" CSS property.</haxe_doc>
		</elevation>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "empty-cells" CSS property.</haxe_doc>
		</emptyCells>
		<fill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill" CSS property.</haxe_doc>
		</fill>
		<fillOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-opacity" CSS property.</haxe_doc>
		</fillOpacity>
		<fillRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-rule" CSS property.</haxe_doc>
		</fillRule>
		<filter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "filter" CSS property.</haxe_doc>
		</filter>
		<flex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex" CSS property.</haxe_doc>
		</flex>
		<flexBasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-basis" CSS property.</haxe_doc>
		</flexBasis>
		<flexDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-direction" CSS property.</haxe_doc>
		</flexDirection>
		<flexFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-flow" CSS property.</haxe_doc>
		</flexFlow>
		<flexGrow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-grow" CSS property.</haxe_doc>
		</flexGrow>
		<flexShrink public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-shrink" CSS property.</haxe_doc>
		</flexShrink>
		<flexWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-wrap" CSS property.</haxe_doc>
		</flexWrap>
		<float public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float" CSS property.</haxe_doc>
		</float>
		<floatOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float-offset" CSS property.</haxe_doc>
		</floatOffset>
		<floodColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-color" CSS property.</haxe_doc>
		</floodColor>
		<floodOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-opacity" CSS property.</haxe_doc>
		</floodOpacity>
		<flowFrom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-from" CSS property.</haxe_doc>
		</flowFrom>
		<flowInto public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-into" CSS property.</haxe_doc>
		</flowInto>
		<font public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font" CSS property.</haxe_doc>
		</font>
		<fontDisplay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-display" CSS property.</haxe_doc>
		</fontDisplay>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-family" CSS property.</haxe_doc>
		</fontFamily>
		<fontFeatureSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-feature-settings" CSS property.</haxe_doc>
		</fontFeatureSettings>
		<fontKerning public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-kerning" CSS property.</haxe_doc>
		</fontKerning>
		<fontLanguageOverride public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-language-override" CSS property.</haxe_doc>
		</fontLanguageOverride>
		<fontOpticalSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-optical-sizing" CSS property.</haxe_doc>
		</fontOpticalSizing>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size" CSS property.</haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size-adjust" CSS property.</haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-stretch" CSS property.</haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-style" CSS property.</haxe_doc>
		</fontStyle>
		<fontSynthesis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-synthesis" CSS property.</haxe_doc>
		</fontSynthesis>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant" CSS property.</haxe_doc>
		</fontVariant>
		<fontVariantAlternates public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-alternates" CSS property.</haxe_doc>
		</fontVariantAlternates>
		<fontVariantCaps public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-caps" CSS property.</haxe_doc>
		</fontVariantCaps>
		<fontVariantEastAsian public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-east-asian" CSS property.</haxe_doc>
		</fontVariantEastAsian>
		<fontVariantLigatures public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-ligatures" CSS property.</haxe_doc>
		</fontVariantLigatures>
		<fontVariantNumeric public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-numeric" CSS property.</haxe_doc>
		</fontVariantNumeric>
		<fontVariantPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-position" CSS property.</haxe_doc>
		</fontVariantPosition>
		<fontVariationSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variation-settings" CSS property.</haxe_doc>
		</fontVariationSettings>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-weight" CSS property.</haxe_doc>
		</fontWeight>
		<gap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "gap" CSS property.</haxe_doc>
		</gap>
		<grid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid" CSS property.</haxe_doc>
		</grid>
		<gridArea public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-area" CSS property.</haxe_doc>
		</gridArea>
		<gridAutoColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-columns" CSS property.</haxe_doc>
		</gridAutoColumns>
		<gridAutoFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-flow" CSS property.</haxe_doc>
		</gridAutoFlow>
		<gridAutoRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-rows" CSS property.</haxe_doc>
		</gridAutoRows>
		<gridColumn public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column" CSS property.</haxe_doc>
		</gridColumn>
		<gridColumnEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-end" CSS property.</haxe_doc>
		</gridColumnEnd>
		<gridColumnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-gap" CSS property.</haxe_doc>
		</gridColumnGap>
		<gridColumnStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-start" CSS property.</haxe_doc>
		</gridColumnStart>
		<gridGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-gap" CSS property.</haxe_doc>
		</gridGap>
		<gridRow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row" CSS property.</haxe_doc>
		</gridRow>
		<gridRowEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-end" CSS property.</haxe_doc>
		</gridRowEnd>
		<gridRowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-gap" CSS property.</haxe_doc>
		</gridRowGap>
		<gridRowStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-start" CSS property.</haxe_doc>
		</gridRowStart>
		<gridTemplate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template" CSS property.</haxe_doc>
		</gridTemplate>
		<gridTemplateAreas public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-areas" CSS property.</haxe_doc>
		</gridTemplateAreas>
		<gridTemplateColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-columns" CSS property.</haxe_doc>
		</gridTemplateColumns>
		<gridTemplateRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-rows" CSS property.</haxe_doc>
		</gridTemplateRows>
		<hangingPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hanging-punctuation" CSS property.</haxe_doc>
		</hangingPunctuation>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "height" CSS property.</haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hyphens" CSS property.</haxe_doc>
		</hyphens>
		<icon public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "icon" CSS property.</haxe_doc>
		</icon>
		<imageOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-orientation" CSS property.</haxe_doc>
		</imageOrientation>
		<imageRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-rendering" CSS property.</haxe_doc>
		</imageRendering>
		<imageResolution public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-resolution" CSS property.</haxe_doc>
		</imageResolution>
		<imeMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ime-mode" CSS property.</haxe_doc>
		</imeMode>
		<initialLetters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "initial-letters" CSS property.</haxe_doc>
		</initialLetters>
		<inlineBoxAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-box-align" CSS property.</haxe_doc>
		</inlineBoxAlign>
		<inlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-size" CSS property.</haxe_doc>
		</inlineSize>
		<isolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "isolation" CSS property.</haxe_doc>
		</isolation>
		<justifyContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-content" CSS property.</haxe_doc>
		</justifyContent>
		<justifyItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-items" CSS property.</haxe_doc>
		</justifyItems>
		<justifySelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-self" CSS property.</haxe_doc>
		</justifySelf>
		<left public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "left" CSS property.</haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "letter-spacing" CSS property.</haxe_doc>
		</letterSpacing>
		<lightingColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "lighting-color" CSS property.</haxe_doc>
		</lightingColor>
		<lineBoxContain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-box-contain" CSS property.</haxe_doc>
		</lineBoxContain>
		<lineBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-break" CSS property.</haxe_doc>
		</lineBreak>
		<lineGrid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-grid" CSS property.</haxe_doc>
		</lineGrid>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-height" CSS property.</haxe_doc>
		</lineHeight>
		<lineSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-snap" CSS property.</haxe_doc>
		</lineSnap>
		<lineStacking public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking" CSS property.</haxe_doc>
		</lineStacking>
		<lineStackingRuby public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-ruby" CSS property.</haxe_doc>
		</lineStackingRuby>
		<lineStackingShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-shift" CSS property.</haxe_doc>
		</lineStackingShift>
		<lineStackingStrategy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-strategy" CSS property.</haxe_doc>
		</lineStackingStrategy>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style" CSS property.</haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-image" CSS property.</haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-position" CSS property.</haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-type" CSS property.</haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin" CSS property.</haxe_doc>
		</margin>
		<marginBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-end" CSS property.</haxe_doc>
		</marginBlockEnd>
		<marginBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-start" CSS property.</haxe_doc>
		</marginBlockStart>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-bottom" CSS property.</haxe_doc>
		</marginBottom>
		<marginInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-end" CSS property.</haxe_doc>
		</marginInlineEnd>
		<marginInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-start" CSS property.</haxe_doc>
		</marginInlineStart>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-left" CSS property.</haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-right" CSS property.</haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-top" CSS property.</haxe_doc>
		</marginTop>
		<marker public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker" CSS property.</haxe_doc>
		</marker>
		<markerEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-end" CSS property.</haxe_doc>
		</markerEnd>
		<markerMid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-mid" CSS property.</haxe_doc>
		</markerMid>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-offset" CSS property.</haxe_doc>
		</markerOffset>
		<markerSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-side" CSS property.</haxe_doc>
		</markerSide>
		<markerStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-start" CSS property.</haxe_doc>
		</markerStart>
		<marks public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marks" CSS property.</haxe_doc>
		</marks>
		<mask public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask" CSS property.</haxe_doc>
		</mask>
		<maskBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box" CSS property.</haxe_doc>
		</maskBox>
		<maskBoxOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-outset" CSS property.</haxe_doc>
		</maskBoxOutset>
		<maskBoxRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-repeat" CSS property.</haxe_doc>
		</maskBoxRepeat>
		<maskBoxSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-slice" CSS property.</haxe_doc>
		</maskBoxSlice>
		<maskBoxSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-source" CSS property.</haxe_doc>
		</maskBoxSource>
		<maskBoxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-width" CSS property.</haxe_doc>
		</maskBoxWidth>
		<maskClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-clip" CSS property.</haxe_doc>
		</maskClip>
		<maskComposite public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-composite" CSS property.</haxe_doc>
		</maskComposite>
		<maskImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-image" CSS property.</haxe_doc>
		</maskImage>
		<maskMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-mode" CSS property.</haxe_doc>
		</maskMode>
		<maskOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-origin" CSS property.</haxe_doc>
		</maskOrigin>
		<maskPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position" CSS property.</haxe_doc>
		</maskPosition>
		<maskPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-x" CSS property.</haxe_doc>
		</maskPositionX>
		<maskPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-y" CSS property.</haxe_doc>
		</maskPositionY>
		<maskRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-repeat" CSS property.</haxe_doc>
		</maskRepeat>
		<maskSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-size" CSS property.</haxe_doc>
		</maskSize>
		<maskSourceType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-source-type" CSS property.</haxe_doc>
		</maskSourceType>
		<maskType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-type" CSS property.</haxe_doc>
		</maskType>
		<maxBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-block-size" CSS property.</haxe_doc>
		</maxBlockSize>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-height" CSS property.</haxe_doc>
		</maxHeight>
		<maxInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-inline-size" CSS property.</haxe_doc>
		</maxInlineSize>
		<maxLines public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-lines" CSS property.</haxe_doc>
		</maxLines>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-width" CSS property.</haxe_doc>
		</maxWidth>
		<maxZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-zoom" CSS property.</haxe_doc>
		</maxZoom>
		<minBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-block-size" CSS property.</haxe_doc>
		</minBlockSize>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-height" CSS property.</haxe_doc>
		</minHeight>
		<minInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-inline-size" CSS property.</haxe_doc>
		</minInlineSize>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-width" CSS property.</haxe_doc>
		</minWidth>
		<minZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-zoom" CSS property.</haxe_doc>
		</minZoom>
		<mixBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mix-blend-mode" CSS property.</haxe_doc>
		</mixBlendMode>
		<moveTo public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "move-to" CSS property.</haxe_doc>
		</moveTo>
		<navDown public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-down" CSS property.</haxe_doc>
		</navDown>
		<navIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-index" CSS property.</haxe_doc>
		</navIndex>
		<navLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-left" CSS property.</haxe_doc>
		</navLeft>
		<navRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-right" CSS property.</haxe_doc>
		</navRight>
		<navUp public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-up" CSS property.</haxe_doc>
		</navUp>
		<objectFit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-fit" CSS property.</haxe_doc>
		</objectFit>
		<objectPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-position" CSS property.</haxe_doc>
		</objectPosition>
		<offset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset" CSS property.</haxe_doc>
		</offset>
		<offsetBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-end" CSS property.</haxe_doc>
		</offsetBlockEnd>
		<offsetBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-start" CSS property.</haxe_doc>
		</offsetBlockStart>
		<offsetDistance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-distance" CSS property.</haxe_doc>
		</offsetDistance>
		<offsetInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-end" CSS property.</haxe_doc>
		</offsetInlineEnd>
		<offsetInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-start" CSS property.</haxe_doc>
		</offsetInlineStart>
		<offsetPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-path" CSS property.</haxe_doc>
		</offsetPath>
		<offsetRotate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-rotate" CSS property.</haxe_doc>
		</offsetRotate>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "opacity" CSS property.</haxe_doc>
		</opacity>
		<order public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "order" CSS property.</haxe_doc>
		</order>
		<orientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orientation" CSS property.</haxe_doc>
		</orientation>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orphans" CSS property.</haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline" CSS property.</haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-color" CSS property.</haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-offset" CSS property.</haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-style" CSS property.</haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-width" CSS property.</haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow" CSS property.</haxe_doc>
		</overflow>
		<overflowAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-anchor" CSS property.</haxe_doc>
		</overflowAnchor>
		<overflowWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-wrap" CSS property.</haxe_doc>
		</overflowWrap>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-x" CSS property.</haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-y" CSS property.</haxe_doc>
		</overflowY>
		<overscrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior" CSS property.</haxe_doc>
		</overscrollBehavior>
		<overscrollBehaviorX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-x" CSS property.</haxe_doc>
		</overscrollBehaviorX>
		<overscrollBehaviorY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-y" CSS property.</haxe_doc>
		</overscrollBehaviorY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding" CSS property.</haxe_doc>
		</padding>
		<paddingBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-end" CSS property.</haxe_doc>
		</paddingBlockEnd>
		<paddingBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-start" CSS property.</haxe_doc>
		</paddingBlockStart>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-bottom" CSS property.</haxe_doc>
		</paddingBottom>
		<paddingInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-end" CSS property.</haxe_doc>
		</paddingInlineEnd>
		<paddingInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-start" CSS property.</haxe_doc>
		</paddingInlineStart>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-left" CSS property.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-right" CSS property.</haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-top" CSS property.</haxe_doc>
		</paddingTop>
		<page public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page" CSS property.</haxe_doc>
		</page>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-after" CSS property.</haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-before" CSS property.</haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-inside" CSS property.</haxe_doc>
		</pageBreakInside>
		<pagePolicy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-policy" CSS property.</haxe_doc>
		</pagePolicy>
		<paintOrder public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "paint-order" CSS property.</haxe_doc>
		</paintOrder>
		<pause public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause" CSS property.</haxe_doc>
		</pause>
		<pauseAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-after" CSS property.</haxe_doc>
		</pauseAfter>
		<pauseBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-before" CSS property.</haxe_doc>
		</pauseBefore>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective" CSS property.</haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective-origin" CSS property.</haxe_doc>
		</perspectiveOrigin>
		<pitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch" CSS property.</haxe_doc>
		</pitch>
		<pitchRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch-range" CSS property.</haxe_doc>
		</pitchRange>
		<placeContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-content" CSS property.</haxe_doc>
		</placeContent>
		<placeItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-items" CSS property.</haxe_doc>
		</placeItems>
		<placeSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-self" CSS property.</haxe_doc>
		</placeSelf>
		<playDuring public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "play-during" CSS property.</haxe_doc>
		</playDuring>
		<pointerEvents public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pointer-events" CSS property.</haxe_doc>
		</pointerEvents>
		<position public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "position" CSS property.</haxe_doc>
		</position>
		<presentationLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "presentation-level" CSS property.</haxe_doc>
		</presentationLevel>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "quotes" CSS property.</haxe_doc>
		</quotes>
		<r public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "r" CSS property.</haxe_doc>
		</r>
		<regionFragment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "region-fragment" CSS property.</haxe_doc>
		</regionFragment>
		<resize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "resize" CSS property.</haxe_doc>
		</resize>
		<rest public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest" CSS property.</haxe_doc>
		</rest>
		<restAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-after" CSS property.</haxe_doc>
		</restAfter>
		<restBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-before" CSS property.</haxe_doc>
		</restBefore>
		<richness public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "richness" CSS property.</haxe_doc>
		</richness>
		<right public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "right" CSS property.</haxe_doc>
		</right>
		<rotation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation" CSS property.</haxe_doc>
		</rotation>
		<rotationPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation-point" CSS property.</haxe_doc>
		</rotationPoint>
		<rowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "row-gap" CSS property.</haxe_doc>
		</rowGap>
		<rubyAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-align" CSS property.</haxe_doc>
		</rubyAlign>
		<rubyMerge public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-merge" CSS property.</haxe_doc>
		</rubyMerge>
		<rubyPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-position" CSS property.</haxe_doc>
		</rubyPosition>
		<rx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rx" CSS property.</haxe_doc>
		</rx>
		<ry public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ry" CSS property.</haxe_doc>
		</ry>
		<scrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-behavior" CSS property.</haxe_doc>
		</scrollBehavior>
		<scrollSnapCoordinate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-coordinate" CSS property.</haxe_doc>
		</scrollSnapCoordinate>
		<scrollSnapDestination public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-destination" CSS property.</haxe_doc>
		</scrollSnapDestination>
		<scrollSnapPointsX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-x" CSS property.</haxe_doc>
		</scrollSnapPointsX>
		<scrollSnapPointsY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-y" CSS property.</haxe_doc>
		</scrollSnapPointsY>
		<scrollSnapType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type" CSS property.</haxe_doc>
		</scrollSnapType>
		<scrollSnapTypeX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-x" CSS property.</haxe_doc>
		</scrollSnapTypeX>
		<scrollSnapTypeY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-y" CSS property.</haxe_doc>
		</scrollSnapTypeY>
		<shapeImageThreshold public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-image-threshold" CSS property.</haxe_doc>
		</shapeImageThreshold>
		<shapeMargin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-margin" CSS property.</haxe_doc>
		</shapeMargin>
		<shapeOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-outside" CSS property.</haxe_doc>
		</shapeOutside>
		<shapeRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-rendering" CSS property.</haxe_doc>
		</shapeRendering>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "size" CSS property.</haxe_doc>
		</size>
		<speak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak" CSS property.</haxe_doc>
		</speak>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-as" CSS property.</haxe_doc>
		</speakAs>
		<speakHeader public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-header" CSS property.</haxe_doc>
		</speakHeader>
		<speakNumeral public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-numeral" CSS property.</haxe_doc>
		</speakNumeral>
		<speakPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-punctuation" CSS property.</haxe_doc>
		</speakPunctuation>
		<speechRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speech-rate" CSS property.</haxe_doc>
		</speechRate>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "src" CSS property.</haxe_doc>
		</src>
		<stopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-color" CSS property.</haxe_doc>
		</stopColor>
		<stopOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-opacity" CSS property.</haxe_doc>
		</stopOpacity>
		<stress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stress" CSS property.</haxe_doc>
		</stress>
		<stringSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "string-set" CSS property.</haxe_doc>
		</stringSet>
		<stroke public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke" CSS property.</haxe_doc>
		</stroke>
		<strokeDasharray public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dasharray" CSS property.</haxe_doc>
		</strokeDasharray>
		<strokeDashoffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dashoffset" CSS property.</haxe_doc>
		</strokeDashoffset>
		<strokeLinecap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linecap" CSS property.</haxe_doc>
		</strokeLinecap>
		<strokeLinejoin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linejoin" CSS property.</haxe_doc>
		</strokeLinejoin>
		<strokeMiterlimit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-miterlimit" CSS property.</haxe_doc>
		</strokeMiterlimit>
		<strokeOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-opacity" CSS property.</haxe_doc>
		</strokeOpacity>
		<strokeWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-width" CSS property.</haxe_doc>
		</strokeWidth>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "tab-size" CSS property.</haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "table-layout" CSS property.</haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align" CSS property.</haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align-last" CSS property.</haxe_doc>
		</textAlignLast>
		<textAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-anchor" CSS property.</haxe_doc>
		</textAnchor>
		<textCombineUpright public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-combine-upright" CSS property.</haxe_doc>
		</textCombineUpright>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration" CSS property.</haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-color" CSS property.</haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-line" CSS property.</haxe_doc>
		</textDecorationLine>
		<textDecorationSkip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip" CSS property.</haxe_doc>
		</textDecorationSkip>
		<textDecorationSkipInk public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip-ink" CSS property.</haxe_doc>
		</textDecorationSkipInk>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-style" CSS property.</haxe_doc>
		</textDecorationStyle>
		<textEmphasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis" CSS property.</haxe_doc>
		</textEmphasis>
		<textEmphasisColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-color" CSS property.</haxe_doc>
		</textEmphasisColor>
		<textEmphasisPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-position" CSS property.</haxe_doc>
		</textEmphasisPosition>
		<textEmphasisStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-style" CSS property.</haxe_doc>
		</textEmphasisStyle>
		<textHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-height" CSS property.</haxe_doc>
		</textHeight>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-indent" CSS property.</haxe_doc>
		</textIndent>
		<textJustify public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-justify" CSS property.</haxe_doc>
		</textJustify>
		<textOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-orientation" CSS property.</haxe_doc>
		</textOrientation>
		<textOverflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-overflow" CSS property.</haxe_doc>
		</textOverflow>
		<textRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-rendering" CSS property.</haxe_doc>
		</textRendering>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-shadow" CSS property.</haxe_doc>
		</textShadow>
		<textSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-size-adjust" CSS property.</haxe_doc>
		</textSizeAdjust>
		<textSpaceCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-space-collapse" CSS property.</haxe_doc>
		</textSpaceCollapse>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-transform" CSS property.</haxe_doc>
		</textTransform>
		<textUnderlinePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-underline-position" CSS property.</haxe_doc>
		</textUnderlinePosition>
		<textWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-wrap" CSS property.</haxe_doc>
		</textWrap>
		<top public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "top" CSS property.</haxe_doc>
		</top>
		<touchAction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "touch-action" CSS property.</haxe_doc>
		</touchAction>
		<transform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform" CSS property.</haxe_doc>
		</transform>
		<transformBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-box" CSS property.</haxe_doc>
		</transformBox>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-origin" CSS property.</haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-style" CSS property.</haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition" CSS property.</haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-delay" CSS property.</haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-duration" CSS property.</haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-property" CSS property.</haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-timing-function" CSS property.</haxe_doc>
		</transitionTimingFunction>
		<unicodeBidi public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-bidi" CSS property.</haxe_doc>
		</unicodeBidi>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-range" CSS property.</haxe_doc>
		</unicodeRange>
		<userSelect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-select" CSS property.</haxe_doc>
		</userSelect>
		<userZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-zoom" CSS property.</haxe_doc>
		</userZoom>
		<vectorEffect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vector-effect" CSS property.</haxe_doc>
		</vectorEffect>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vertical-align" CSS property.</haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "visibility" CSS property.</haxe_doc>
		</visibility>
		<voiceBalance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-balance" CSS property.</haxe_doc>
		</voiceBalance>
		<voiceDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-duration" CSS property.</haxe_doc>
		</voiceDuration>
		<voiceFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-family" CSS property.</haxe_doc>
		</voiceFamily>
		<voicePitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-pitch" CSS property.</haxe_doc>
		</voicePitch>
		<voiceRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-range" CSS property.</haxe_doc>
		</voiceRange>
		<voiceRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-rate" CSS property.</haxe_doc>
		</voiceRate>
		<voiceStress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-stress" CSS property.</haxe_doc>
		</voiceStress>
		<voiceVolume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-volume" CSS property.</haxe_doc>
		</voiceVolume>
		<volume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "volume" CSS property.</haxe_doc>
		</volume>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "white-space" CSS property.</haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "widows" CSS property.</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "width" CSS property.</haxe_doc>
		</width>
		<willChange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "will-change" CSS property.</haxe_doc>
		</willChange>
		<wordBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-break" CSS property.</haxe_doc>
		</wordBreak>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-spacing" CSS property.</haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-wrap" CSS property.</haxe_doc>
		</wordWrap>
		<wrapFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-flow" CSS property.</haxe_doc>
		</wrapFlow>
		<wrapThrough public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-through" CSS property.</haxe_doc>
		</wrapThrough>
		<writingMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "writing-mode" CSS property.</haxe_doc>
		</writingMode>
		<x public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "x" CSS property.</haxe_doc>
		</x>
		<y public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "y" CSS property.</haxe_doc>
		</y>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "z-index" CSS property.</haxe_doc>
		</zIndex>
		<zoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "zoom" CSS property.</haxe_doc>
		</zoom>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<getPropertyValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyValue>
		<getPropertyPriority public="1" set="method"><f a="property">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<setProperty public="1" set="method">
			<f a="property:value:?priority" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setProperty>
		<removeProperty public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeProperty>
		<haxe_doc><![CDATA[`CSSStyleDeclaration` represents a collection of CSS property-value pairs. It is used in a few APIs:

	Documentation [CSSStyleDeclaration](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StyleSheet.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the style sheet language for this style sheet.</haxe_doc>
		</type>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the location of the stylesheet.</haxe_doc>
		</href>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` associating this style sheet with the current document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the advisory title of the current style sheet.</haxe_doc>
		</title>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Returns a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` representing whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<haxe_doc><![CDATA[An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.

	Documentation [StyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<ownerRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc>If this style sheet is imported into the document using an `@import` rule, the `ownerRule` property will return that `CSSImportRule`, otherwise it returns `null`.</haxe_doc>
		</ownerRule>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc>Returns a live `CSSRuleList`, listing the `CSSRule` objects in the style sheet.
		
		 This is normally used to access individual rules like this:
		
		 `   styleSheet.cssRules[i] // where i = 0..cssRules.length-1`
		
		 To add or remove items in `cssRules`, use the `CSSStyleSheet`'s `deleteRule()` and `insertRule()` methods, described below.</haxe_doc>
		</cssRules>
		<insertRule public="1" set="method">
			<f a="rule:?index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
			<haxe_doc>Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.
		@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a rule at the specified position from the style sheet.
		@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[The `CSSStyleSheet` interface represents a single CSS style sheet. It inherits properties and methods from its parent, `StyleSheet`.

	Documentation [CSSStyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.Cache" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Cache.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><match public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></match></overloads>
		</match>
		<matchAll public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
			</f>
			<overloads><matchAll public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
</f></matchAll></overloads>
		</matchAll>
		<add public="1" set="method">
			<f a="request">
				<c path="js.html.Request"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><add public="1" set="method"><f a="request">
	<c path="String"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></add></overloads>
		</add>
		<addAll public="1" set="method"><f a="requests">
	<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Request"/>
	<c path="String"/>
</x></c>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addAll>
		<put public="1" set="method">
			<f a="request:response">
				<c path="js.html.Request"/>
				<c path="js.html.Response"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><put public="1" set="method"><f a="request:response">
	<c path="String"/>
	<c path="js.html.Response"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></put></overloads>
		</put>
		<delete public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<overloads><delete public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><x path="Bool"/></c>
</f></delete></overloads>
		</delete>
		<keys public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
			</f>
			<overloads><keys public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
</f></keys></overloads>
		</keys>
		<haxe_doc><![CDATA[The `Cache` interface provides a storage mechanism for `Request` / `Response` object pairs that are cached, for example as part of the `ServiceWorker` life cycle. Note that the `Cache` interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.

	Documentation [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Cache$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Cache>]]></haxe_doc>
		<meta><m n=":native"><e>"Cache"</e></m></meta>
	</class>
	<typedef path="js.html.CacheQueryOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CacheQueryOptions.hx"><a>
	<ignoreVary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreVary>
	<ignoreSearch>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreSearch>
	<ignoreMethod>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreMethod>
	<cacheName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</cacheName>
</a></typedef>
	<class path="js.html.CacheStorage" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CacheStorage.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
			<overloads><match public="1" set="method">
	<f a="request:?options">
		<c path="String"/>
		<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
		<c path="js.lib.Promise"><c path="js.html.Response"/></c>
	</f>
	<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
</match></overloads>
		</match>
		<has public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if a `Cache` object matching the `cacheName` exists.</haxe_doc>
		</has>
		<open public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.Cache"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the `Cache` object matching the `cacheName` (a new cache is created if it doesn't already exist.)</haxe_doc>
		</open>
		<delete public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Finds the `Cache` object matching the `cacheName`, and if found, deletes the `Cache` object and returns a `Promise` that resolves to `true`. If no `Cache` object is found, it returns `false`.</haxe_doc>
		</delete>
		<keys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="String"/></c></c></f>
			<haxe_doc>Returns a `Promise` that will resolve with an array containing strings corresponding to all of the named `Cache` objects tracked by the `CacheStorage`. Use this method to iterate over a list of all the `Cache` objects.</haxe_doc>
		</keys>
		<new public="1" set="method">
			<f a="namespace:principal">
				<x path="js.html.CacheStorageNamespace"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `CacheStorage` interface represents the storage for `Cache` objects.

	Documentation [CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage>]]></haxe_doc>
		<meta><m n=":native"><e>"CacheStorage"</e></m></meta>
	</class>
	<abstract path="js.html.CacheStorageNamespace" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CacheStorageNamespace.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CacheStorageNamespace.CacheStorageNamespace_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CacheStorageNamespace.hx" private="1" module="js.html.CacheStorageNamespace" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaStream" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.</haxe_doc>
		</id>
		<active public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.</haxe_doc>
		</active>
		<onaddtrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `addtrack` event is fired when a new `MediaStreamTrack` object is added.</haxe_doc>
		</onaddtrack>
		<onremovetrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when a `removetrack` event is fired when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onremovetrack>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<getAudioTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.AudioStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the MediaStream` object that have their kind` attribute set to "audio"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getAudioTracks>
		<getVideoTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.VideoStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `"video"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getVideoTracks>
		<getTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.MediaStreamTrack"/></c></f>
			<haxe_doc>Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getTracks>
		<getTrackById public="1" set="method">
			<f a="trackId">
				<c path="String"/>
				<c path="js.html.MediaStreamTrack"/>
			</f>
			<haxe_doc>Returns the track whose ID corresponds to the one given in parameters, trackid`. If no parameter is given, or if no track with that ID does exist, it returns null`. If several tracks have the same ID, it returns the first one.</haxe_doc>
		</getTrackById>
		<addTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.</haxe_doc>
		</addTrack>
		<removeTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.</haxe_doc>
		</removeTrack>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStream"/></f>
			<haxe_doc>Returns a clone of the `MediaStream` object. The clone will, however, have a unique value for `MediaStream.id`.</haxe_doc>
		</clone>
		<new public="1" set="method">
			<f a="tracks">
				<c path="Array"><c path="js.html.MediaStreamTrack"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="stream">
						<c path="js.html.MediaStream"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.

	Documentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasCaptureMediaStream" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasCaptureMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<requestFrame public="1" set="method"><f a=""><x path="Void"/></f></requestFrame>
		<meta><m n=":native"><e>"CanvasCaptureMediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.</haxe_doc>
		</height>
		<getContext public="1" set="method">
			<f a="contextId:?contextOptions">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `"2d"` returns a `CanvasRenderingContext2D` object, whereas calling it with `"webgl"` (or `"experimental-webgl"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.
		@throws DOMError</haxe_doc>
		</getContext>
		<toDataURL public="1" set="method">
			<f a="?type:?encoderOptions" v="&quot;&quot;:">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Returns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.
		@throws DOMError</haxe_doc>
		</toDataURL>
		<toBlob public="1" set="method">
			<f a="callback:?type:?encoderOptions" v=":&quot;&quot;:">
				<f a="">
					<c path="js.html.Blob"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Creates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.
		@throws DOMError</haxe_doc>
		</toBlob>
		<captureStream public="1" set="method">
			<f a="?frameRate">
				<x path="Float"/>
				<c path="js.html.CanvasCaptureMediaStream"/>
			</f>
			<haxe_doc>Returns a `CanvasCaptureMediaStream` that is a real-time video capture of the surface of the canvas.
		@throws DOMError</haxe_doc>
		</captureStream>
		<getContext2d public="1" get="inline" set="null" line="73">
			<f a="?attribs">
				<a/>
				<c path="js.html.CanvasRenderingContext2D"/>
			</f>
			<haxe_doc>Shorthand for getting a CanvasRenderingContext2D.</haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="77">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.RenderingContext.</haxe_doc>
		</getContextWebGL>
		<getContextWebGL2 public="1" get="inline" set="null" line="81">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.WebGL2RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.WebGL2RenderingContext.</haxe_doc>
		</getContextWebGL2>
		<haxe_doc><![CDATA[The `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html.CanvasGradient" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method">
			<f a="offset:color">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new stop, defined by an `offset` and a `color`, to the gradient. If the offset is not between `0` and `1` an `INDEX_SIZE_ERR` is raised, if the color can't be parsed as a CSS `color`, a `SYNTAX_ERR` is raised.
		@throws DOMError</haxe_doc>
		</addColorStop>
		<haxe_doc><![CDATA[The `CanvasGradient` interface represents an opaque object describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.

	Documentation [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasPattern.hx" extern="1">
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies an `SVGMatrix` representing a linear transform to the pattern.</haxe_doc>
		</setTransform>
		<haxe_doc><![CDATA[The `CanvasPattern` interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the `CanvasRenderingContext2D.createPattern()` method.

	Documentation [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<globalAlpha public="1"><x path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<strokeStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></strokeStyle>
		<fillStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></fillStyle>
		<filter public="1"><c path="String"/></filter>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<shadowOffsetX public="1"><x path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><x path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><x path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<drawImage public="1" set="method">
			<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
				<c path="js.html.ImageElement"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<fill public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><fill public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</fill></overloads>
		</fill>
		<stroke public="1" set="method">
			<f a="path">
				<c path="js.html.Path2D"/>
				<x path="Void"/>
			</f>
			<overloads><stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke></overloads>
		</stroke>
		<clip public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><clip public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</clip></overloads>
		</clip>
		<isPointInPath public="1" set="method">
			<f a="path:x:y:?winding" v=":::NONZERO">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><isPointInPath public="1" set="method">
	<f a="x:y:?winding" v="::NONZERO">
		<x path="Float"/>
		<x path="Float"/>
		<x path="js.html.CanvasWindingRule"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</isPointInPath></overloads>
		</isPointInPath>
		<isPointInStroke public="1" set="method">
			<f a="path:x:y">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<overloads><isPointInStroke public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInStroke></overloads>
		</isPointInStroke>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method">
			<f a="x0:y0:r0:x1:y1:r1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CanvasGradient"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRadialGradient>
		<createPattern public="1" set="method">
			<f a="image:repetition">
				<c path="js.html.ImageElement"/>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.svg.ImageElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.CanvasElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.VideoElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.ImageBitmap"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
			</overloads>
		</createPattern>
		<addHitRegion public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.HitRegionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addHitRegion>
		<removeHitRegion public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></removeHitRegion>
		<clearHitRegions public="1" set="method"><f a=""><x path="Void"/></f></clearHitRegions>
		<createImageData public="1" set="method">
			<f a="imagedata">
				<c path="js.html.ImageData"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="sw:sh">
		<x path="Float"/>
		<x path="Float"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<getImageData public="1" set="method">
			<f a="sx:sy:sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getImageData>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</putImageData></overloads>
		</putImageData>
		<setLineDash public="1" set="method">
			<f a="segments">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setLineDash>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<fillText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fillText>
		<strokeText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</strokeText>
		<measureText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="js.html.TextMetrics"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</measureText>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotate>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</translate>
		<transform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transform>
		<setTransform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTransform>
		<resetTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resetTransform>
		<drawFocusIfNeeded public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</drawFocusIfNeeded>
		<drawCustomFocusRing public="1" set="method"><f a="element">
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></drawCustomFocusRing>
		<haxe_doc><![CDATA[To get an object of this interface, call `getContext()` on a `canvas element`, supplying "2d" as the argument:

	Documentation [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<abstract path="js.html.CanvasWindingRule" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasWindingRule.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CaretPosition" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CaretPosition.hx" extern="1">
		<offsetNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` containing the found node at the caret's position.</haxe_doc>
		</offsetNode>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the character offset in the caret position node.</haxe_doc>
		</offset>
		<getClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getClientRect>
		<haxe_doc><![CDATA[The `CaretPosition` interface represents the caret postion, an indicator for the text insertion point. You can get a `CaretPosition` using the `document.caretPositionFromPoint` method.

	Documentation [CaretPosition](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition>]]></haxe_doc>
		<meta><m n=":native"><e>"CaretPosition"</e></m></meta>
	</class>
	<typedef path="js.html.ChannelPixelLayout" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ChannelPixelLayout.hx"><a>
	<width><x path="Int"/></width>
	<stride><x path="Int"/></stride>
	<skip><x path="Int"/></skip>
	<offset><x path="Int"/></offset>
	<height><x path="Int"/></height>
	<dataType><x path="js.html.ChannelPixelLayoutDataType"/></dataType>
</a></typedef>
	<abstract path="js.html.ChannelPixelLayoutDataType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ChannelPixelLayoutDataType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ChannelPixelLayoutDataType.ChannelPixelLayoutDataType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ChannelPixelLayoutDataType.hx" private="1" module="js.html.ChannelPixelLayoutDataType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Clipboard" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Clipboard.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<read public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.DataTransfer"/></c></f>
			<haxe_doc>Requests arbitrary data (such as images) from the clipboard, returning a `Promise`. When the data has been retrieved, the promise is resolved with a `DataTransfer` object that provides the data.
		@throws DOMError</haxe_doc>
		</read>
		<readText public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>Requests text from the system clipboard; returns a `Promise` which is resolved with a `DOMString` containing the clipboard's text once it's available.
		@throws DOMError</haxe_doc>
		</readText>
		<write public="1" set="method">
			<f a="data">
				<c path="js.html.DataTransfer"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned `Promise`.
		@throws DOMError</haxe_doc>
		</write>
		<writeText public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes text to the system clipboard, returning a `Promise` which is resolved once the text is fully copied into the clipboard.
		@throws DOMError</haxe_doc>
		</writeText>
		<haxe_doc><![CDATA[The `Clipboard` interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.

	Documentation [Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clipboard>]]></haxe_doc>
		<meta><m n=":native"><e>"Clipboard"</e></m></meta>
	</class>
	<class path="js.html.Comment" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Comment` interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '`!--`' and '`--`'. In XML, the character sequence '`--`' cannot be used within a comment.

	Documentation [Comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Comment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Comment>]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<abstract path="js.html.CompositeOperation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ComputedEffectTiming" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ComputedEffectTiming.hx"><a>
	<progress>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</progress>
	<localTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</localTime>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endTime>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<currentIteration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</currentIteration>
	<activeDuration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</activeDuration>
</a></typedef>
	<class path="js.html.Console" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Console.hx" extern="1">
		<assert public="1" set="method" static="1">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method" static="1">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method" static="1">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [console](https://developer.mozilla.org/en-US/docs/Web/API/console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/console>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"console"</e></m>
		</meta>
	</class>
	<class path="js.html.ConsoleInstance" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ConsoleInstance.hx" extern="1" interface="1">
		<assert public="1" set="method">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [Console](https://developer.mozilla.org/en-US/docs/Web/API/Console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Console>]]></haxe_doc>
	</class>
	<typedef path="js.html.ConstrainBooleanParameters" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ConstrainBooleanParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDOMStringParameters" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ConstrainDOMStringParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDoubleRange" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ConstrainDoubleRange.hx"><a>
	<min>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainLongRange" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ConstrainLongRange.hx"><a>
	<min>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConvertCoordinateOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ConvertCoordinateOptions.hx"><a>
	<toBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</toBox>
	<fromBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</fromBox>
</a></typedef>
	<typedef path="js.html.Coordinates" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Coordinates.hx">
		<a>
			<speed set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the velocity of the device in meters per second. This value can be `null`.</haxe_doc>
			</speed>
			<longitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's longitude in decimal degrees.</haxe_doc>
			</longitude>
			<latitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's latitude in decimal degrees.</haxe_doc>
			</latitude>
			<heading set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.</haxe_doc>
			</heading>
			<altitudeAccuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null`.</haxe_doc>
			</altitudeAccuracy>
			<altitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's altitude in meters, relative to sea level. This value can be `null` if the implementation cannot provide the data.</haxe_doc>
			</altitude>
			<accuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.</haxe_doc>
			</accuracy>
		</a>
		<haxe_doc><![CDATA[The `Coordinates` interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.

	Documentation [Coordinates](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Coordinates>]]></haxe_doc>
	</typedef>
	<class path="js.html.Crypto" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Crypto.hx" extern="1">
		<subtle public="1" set="null">
			<c path="js.html.SubtleCrypto"/>
			<haxe_doc>Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption or decryption.</haxe_doc>
		</subtle>
		<getRandomValues public="1" set="method">
			<f a="array">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.ArrayBufferView"/>
			</f>
			<haxe_doc>Fills the passed `TypedArray` with cryptographically sound random values.
		@throws DOMError</haxe_doc>
		</getRandomValues>
		<haxe_doc><![CDATA[The `Crypto` interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.

	Documentation [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Crypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Crypto>]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.CryptoKey" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/CryptoKey.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns an enumerated value representing the type of the key, a secret key (for symmetric algorithm), a public or a private key (for an asymmetric algorithm)</haxe_doc>
		</type>
		<extractable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating if the raw information may be exported to the application or not.</haxe_doc>
		</extractable>
		<algorithm public="1" set="null">
			<d/>
			<haxe_doc>Returns an opaque object representing a particular cipher the key has to be used with.</haxe_doc>
		</algorithm>
		<usages public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Returns an array of enumerated values indicating what the key can be used for.</haxe_doc>
		</usages>
		<haxe_doc><![CDATA[The `CryptoKey` interface represents a cryptographic key derived from a specific key algorithm.

	Documentation [CryptoKey](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey>]]></haxe_doc>
		<meta><m n=":native"><e>"CryptoKey"</e></m></meta>
	</class>
	<class path="js.html.DListElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLDListElement` interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list elements.

	Documentation [HTMLDListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMException" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMException.hx" extern="1">
		<INDEX_SIZE_ERR public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" expr="13" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" expr="14" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" expr="15" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" expr="16" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" expr="17" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</TYPE_MISMATCH_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" expr="18" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</SECURITY_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" expr="19" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</NETWORK_ERR>
		<ABORT_ERR public="1" get="inline" set="null" expr="20" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</ABORT_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" expr="21" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</URL_MISMATCH_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" expr="22" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</QUOTA_EXCEEDED_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" expr="23" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</TIMEOUT_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" expr="24" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</INVALID_NODE_TYPE_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" expr="25" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DATA_CLONE_ERR>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains one of the strings associated with an error name.</haxe_doc>
		</name>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a message or description associated with the given error name.</haxe_doc>
		</message>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `short` that contains one of the `Error codes`, or `0` if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the `DOMException.name` attribute.</haxe_doc>
		</code>
		<result public="1" set="null"><x path="Int"/></result>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method">
			<f a="?message:?name" v="&quot;&quot;:">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMException` interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.

	Documentation [DOMException](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMException$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMException>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMImplementation.hx" extern="1">
		<hasFeature public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior.</haxe_doc>
		</hasFeature>
		<createDocumentType public="1" set="method">
			<f a="qualifiedName:publicId:systemId">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
			</f>
			<haxe_doc>Creates and returns a `DocumentType`.
		@throws DOMError</haxe_doc>
		</createDocumentType>
		<createDocument public="1" set="method">
			<f a="namespace:qualifiedName:?doctype">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an `XMLDocument`.
		@throws DOMError</haxe_doc>
		</createDocument>
		<createHTMLDocument public="1" set="method">
			<f a="?title">
				<c path="String"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an HTML `Document`.
		@throws DOMError</haxe_doc>
		</createHTMLDocument>
		<haxe_doc><![CDATA[The `DOMImplementation` interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.

	Documentation [DOMImplementation](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMPointReadOnly" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMPointReadOnly.hx" extern="1">
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPointReadOnly"/>
</f></fromPoint>
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's horizontal coordinate, `x`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's vertical coordinate, `y`.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's depth coordinate, `z`.</haxe_doc>
		</z>
		<w public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's perspective value, `w`.</haxe_doc>
		</w>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of the `DOMPointReadOnly` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMPointReadOnly` interface specifies the coordinate and perspective fields used by `DOMPoint` to define a 2D or 3D point in a coordinate system.

	Documentation [DOMPointReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPointReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMPoint" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMPoint.hx" extern="1">
		<extends path="js.html.DOMPointReadOnly"/>
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPoint"/>
</f></fromPoint>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMPoint` object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.

	Documentation [DOMPoint](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPoint"</e></m></meta>
	</class>
	<typedef path="js.html.DOMPointInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMPointInit.hx">
		<a>
			<z>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0.</haxe_doc>
			</z>
			<y>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0.</haxe_doc>
			</y>
			<x>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0.</haxe_doc>
			</x>
			<w>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The point's w perspective value given as an unrestricted floating-point number. The default is 1.</haxe_doc>
			</w>
		</a>
		<haxe_doc><![CDATA[The `DOMPointInit` dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a `DOMPoint` or `DOMPointReadOnly` object.

	Documentation [DOMPointInit](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit>]]></haxe_doc>
	</typedef>
	<class path="js.html.DOMQuad" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMQuad.hx" extern="1">
		<p1 public="1" set="null">
			<c path="js.html.DOMPoint"/>
			<haxe_doc>are `DOMPoint` objects for each of the `DOMQuad` object's four corners.</haxe_doc>
		</p1>
		<p2 public="1" set="null"><c path="js.html.DOMPoint"/></p2>
		<p3 public="1" set="null"><c path="js.html.DOMPoint"/></p3>
		<p4 public="1" set="null"><c path="js.html.DOMPoint"/></p4>
		<bounds public="1" set="null"><c path="js.html.DOMRectReadOnly"/></bounds>
		<getBounds public="1" set="method">
			<f a=""><c path="js.html.DOMRectReadOnly"/></f>
			<haxe_doc>Returns a `DOMRect` object with the coordinates and dimensions of the `DOMQuad` object.</haxe_doc>
		</getBounds>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.DOMQuadJSON"/></f>
			<haxe_doc>Returns a JSON representation of the `DOMQuad` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="rect">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?p1:?p2:?p3:?p4">
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral. Returning `DOMQuad`s lets `getBoxQuads()` return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy `bounds` attribute returning a `DOMRectReadOnly` for those cases where you just want an axis-aligned bounding rectangle.

	Documentation [DOMQuad](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMQuad"</e></m></meta>
	</class>
	<typedef path="js.html.DOMQuadJSON" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMQuadJSON.hx"><a>
	<p4>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p4>
	<p3>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p3>
	<p2>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p2>
	<p1>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p1>
</a></typedef>
	<class path="js.html.DOMRectReadOnly" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMRectReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMRect`'s origin.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMRect`'s origin.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The width of the `DOMRect`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The height of the `DOMRect`.</haxe_doc>
		</height>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the top coordinate value of the `DOMRect` (usually the same as `y`.)</haxe_doc>
		</top>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the right coordinate value of the `DOMRect` (usually the same as `x + width`).</haxe_doc>
		</right>
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the bottom coordinate value of the `DOMRect` (usually the same as y + height).</haxe_doc>
		</bottom>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the left coordinate value of the `DOMRect` (usually the same as `x`).</haxe_doc>
		</left>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle.

	Documentation [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMRect" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMRect.hx" extern="1">
		<extends path="js.html.DOMRectReadOnly"/>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMRect` represents a rectangle.

	Documentation [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRect>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRect"</e></m></meta>
	</class>
	<class path="js.html.DOMRectList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMRect"/>
</f></item>
		<meta><m n=":native"><e>"DOMRectList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the list,</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString`.</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `Boolean` indicating if the given string is in the list</haxe_doc>
		</contains>
		<haxe_doc><![CDATA[A type returned by some APIs which contains a list of DOMString (strings).

	Documentation [DOMStringList](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMStringMap.hx" extern="1">
		<haxe_doc><![CDATA[Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.

	Documentation [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringMap"</e></m></meta>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` representing the number of objects stored in the object.</haxe_doc>
		</length>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The value of the list as a `DOMString`.</haxe_doc>
		</value>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns an item in the list by its index (returns undefined if the number is greater than or equal to the length of the list).</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the list contains the given token, otherwise `false`.</haxe_doc>
		</contains>
		<add public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the given token to the list.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified token from the list.
		@throws DOMError</haxe_doc>
		</remove>
		<replace public="1" set="method">
			<f a="token:newToken">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Replaces an existing token with a new token.
		@throws DOMError</haxe_doc>
		</replace>
		<toggle public="1" set="method">
			<f a="token:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a given token from the list and returns false. If token doesn't exist it's added and the function returns `true`.
		@throws DOMError</haxe_doc>
		</toggle>
		<supports public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given token is in the associated attribute's supported tokens.
		@throws DOMError</haxe_doc>
		</supports>
		<haxe_doc><![CDATA[The `DOMTokenList` interface represents a set of space-separated tokens. Such a set is returned by `Element.classList`, `HTMLLinkElement.relList`, `HTMLAnchorElement.relList`, `HTMLAreaElement.relList`, `HTMLIframeElement.sandbox`, or `HTMLOutputElement.htmlFor`. It is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.

	Documentation [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a `HTMLCollection` representing a collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[The `HTMLDataListElement` interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `datalist` elements and their content.

	Documentation [HTMLDataListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransfer" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DataTransfer.hx" extern="1">
		<dropEffect public="1">
			<c path="String"/>
			<haxe_doc>Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.</haxe_doc>
		</dropEffect>
		<effectAllowed public="1">
			<c path="String"/>
			<haxe_doc>Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.</haxe_doc>
		</effectAllowed>
		<items public="1" set="null">
			<c path="js.html.DataTransferItemList"/>
			<haxe_doc>Gives a `DataTransferItemList` object which is a list of all of the drag data.</haxe_doc>
		</items>
		<types public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array of `DOMString` giving the formats that were set in the `dragstart` event.</haxe_doc>
		</types>
		<files public="1" set="null">
			<c path="js.html.FileList"/>
			<haxe_doc>Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.</haxe_doc>
		</files>
		<setDragImage public="1" set="method">
			<f a="image:x:y">
				<c path="js.html.Element"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the image to be used for dragging if a custom one is desired.</haxe_doc>
		</setDragImage>
		<getData public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.
		@throws DOMError</haxe_doc>
		</getData>
		<setData public="1" set="method">
			<f a="format:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.
		@throws DOMError</haxe_doc>
		</setData>
		<clearData public="1" set="method">
			<f a="?format">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.
		@throws DOMError</haxe_doc>
		</clearData>
		<addElement public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the drag source to the given element.
		@throws DOMError</haxe_doc>
		</addElement>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DataTransfer` object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.

	Documentation [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransfer"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItem" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DataTransferItem.hx" extern="1">
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>The kind of drag data item, `string` or `file`.</haxe_doc>
		</kind>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The drag data item's type, typically a MIME type.</haxe_doc>
		</type>
		<getAsString public="1" set="method">
			<f a="callback">
				<f a="">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Invokes the specified callback with the drag data item string as its argument.
		@throws DOMError</haxe_doc>
		</getAsString>
		<getAsFile public="1" set="method">
			<f a=""><c path="js.html.File"/></f>
			<haxe_doc>Returns the `File` object associated with the drag data item (or null if the drag item is not a file).
		@throws DOMError</haxe_doc>
		</getAsFile>
		<haxe_doc><![CDATA[The `DataTransferItem` object represents one drag data item. During a drag operation, each `drag event` has a `dataTransfer` property which contains a `list` of drag data items. Each item in the list is a `DataTransferItem` object.

	Documentation [DataTransferItem](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItem"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItemList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DataTransferItemList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` that is the number of drag items in the list.</haxe_doc>
		</length>
		<add public="1" set="method">
			<f a="data">
				<c path="js.html.File"/>
				<c path="js.html.DataTransferItem"/>
			</f>
			<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
			<overloads><add public="1" set="method">
	<f a="data:type">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.DataTransferItem"/>
	</f>
	<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
</add></overloads>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the drag item from the list at the given index.
		@throws DOMError</haxe_doc>
		</remove>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all of the drag items from the list.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `DataTransferItemList` object is a list of `DataTransferItem` objects representing items being dragged. During a drag operation, each `DragEvent` has a `dataTransfer` property and that property is a `DataTransferItemList`.

	Documentation [DataTransferItemList](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItemList"</e></m></meta>
	</class>
	<class path="js.html.DetailsElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DetailsElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` reflecting the `open` HTML attribute, indicating whether or not the element’s contents (not counting the `summary`) is to be shown to the user.</haxe_doc>
		</open>
		<haxe_doc><![CDATA[The `HTMLDetailsElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `details` elements.

	Documentation [HTMLDetailsElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDetailsElement"</e></m></meta>
	</class>
	<abstract path="js.html.DirectionSetting" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DirectionSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Directory" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Directory.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" set="null"><c path="String"/></path>
		<getFilesAndDirectories public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.File"/>
	<c path="js.html.Directory"/>
</x></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFilesAndDirectories>
		<getFiles public="1" set="method">
			<f a="?recursiveFlag" v="false">
				<x path="Bool"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.File"/></c></c>
			</f>
			<meta><m n=":value"><e>{ recursiveFlag : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFiles>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Directory"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<class path="js.html.DivElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLDivElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating div elements.

	Documentation [HTMLDivElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</URL>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</documentURI>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in quirks or strict mode.</haxe_doc>
		</compatMode>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</charset>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</inputEncoding>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the Content-Type from the MIME Header of the current document.</haxe_doc>
		</contentType>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `HTMLElement` element.</haxe_doc>
		</documentElement>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document.</haxe_doc>
		</readyState>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Sets or gets the title of the current document.</haxe_doc>
		</title>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document.</haxe_doc>
		</dir>
		<body public="1">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `body` or `frameset` node of the current document.</haxe_doc>
		</body>
		<head public="1" set="null">
			<c path="js.html.HeadElement"/>
			<haxe_doc>Returns the `head` element of the current document.</haxe_doc>
		</head>
		<images public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the images in the current document.</haxe_doc>
		</images>
		<embeds public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the embedded `embed` elements within the current document.</haxe_doc>
		</embeds>
		<plugins public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the available plugins.</haxe_doc>
		</plugins>
		<links public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all the hyperlinks in the document.</haxe_doc>
		</links>
		<forms public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the `form` elements within the current document.</haxe_doc>
		</forms>
		<scripts public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns all the `script` elements on the document.</haxe_doc>
		</scripts>
		<defaultView public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `readystatechange` event.</haxe_doc>
		</onreadystatechange>
		<onbeforescriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `beforescriptexecute` event.</haxe_doc>
		</onbeforescriptexecute>
		<onafterscriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `afterscriptexecute` event.</haxe_doc>
		</onafterscriptexecute>
		<onselectionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `selectionchange` event is raised.</haxe_doc>
		</onselectionchange>
		<currentScript public="1" set="null"><c path="js.html.Element"/></currentScript>
		<anchors public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all of the anchors in the document.</haxe_doc>
		</anchors>
		<applets public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns an ordered list of the applets within a document.</haxe_doc>
		</applets>
		<fullscreen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` when the document is in `Using_full-screen_mode`.</haxe_doc>
		</fullscreen>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<onfullscreenchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenchange` event is raised.</haxe_doc>
		</onfullscreenchange>
		<onfullscreenerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenerror` event is raised.</haxe_doc>
		</onfullscreenerror>
		<onpointerlockchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockchange` event.</haxe_doc>
		</onpointerlockchange>
		<onpointerlockerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockerror` event.</haxe_doc>
		</onpointerlockerror>
		<hidden public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>…</haxe_doc>
		</hidden>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Returns a `string` denoting the visibility state of the document. Possible values are `visible`,  `hidden`,  `prerender`, and `unloaded`.</haxe_doc>
		</visibilityState>
		<onvisibilitychange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `visibilitychange` event is raised.</haxe_doc>
		</onvisibilitychange>
		<selectedStyleSheetSet public="1">
			<c path="String"/>
			<haxe_doc>Returns which style sheet set is currently in use.</haxe_doc>
		</selectedStyleSheetSet>
		<lastStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `document.selectedStyleSheetSet`.</haxe_doc>
		</lastStyleSheetSet>
		<preferredStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the preferred style sheet set as specified by the page author.</haxe_doc>
		</preferredStyleSheetSet>
		<styleSheetSets public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a list of the style sheet sets available on the document.</haxe_doc>
		</styleSheetSets>
		<scrollingElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the `Element` that scrolls the document.</haxe_doc>
		</scrollingElement>
		<timeline public="1" set="null">
			<c path="js.html.DocumentTimeline"/>
			<haxe_doc>…</haxe_doc>
		</timeline>
		<rootElement public="1" set="null"><c path="js.html.svg.SVGElement"/></rootElement>
		<oncopy public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `copy` event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `cut` event.</haxe_doc>
		</oncut>
		<onpaste public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `paste` event.</haxe_doc>
		</onpaste>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element that's currently in full screen mode for this document.</haxe_doc>
		</fullscreenElement>
		<fonts public="1" set="null"><c path="js.html.FontFaceSet"/></fonts>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `wheel` event.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name and namespace.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given class name.</haxe_doc>
		</getElementsByClassName>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<createElement public="1" set="method">
			<f a="localName:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
			<overloads><createElement public="1" set="method">
	<f a="localName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
</createElement></overloads>
		</createElement>
		<createElementNS public="1" set="method">
			<f a="namespace:qualifiedName:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
			<overloads><createElementNS public="1" set="method">
	<f a="namespace:qualifiedName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
</createElementNS></overloads>
		</createElementNS>
		<createDocumentFragment public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Creates a new document fragment.</haxe_doc>
		</createDocumentFragment>
		<createTextNode public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>Creates a text node.</haxe_doc>
		</createTextNode>
		<createComment public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Comment"/>
			</f>
			<haxe_doc>Creates a new comment node and returns it.</haxe_doc>
		</createComment>
		<createProcessingInstruction public="1" set="method">
			<f a="target:data">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.ProcessingInstruction"/>
			</f>
			<haxe_doc>Creates a new `ProcessingInstruction` object.
		@throws DOMError</haxe_doc>
		</createProcessingInstruction>
		<importNode public="1" set="method">
			<f a="node:?deep" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Returns a clone of a node from an external document.
		@throws DOMError</haxe_doc>
		</importNode>
		<adoptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adopt node from an external document.
		@throws DOMError</haxe_doc>
		</adoptNode>
		<createEvent public="1" set="method">
			<f a="interface_">
				<c path="String"/>
				<c path="js.html.Event"/>
			</f>
			<haxe_doc>Creates an event object.
		@throws DOMError</haxe_doc>
		</createEvent>
		<createRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Creates a `Range` object.
		@throws DOMError</haxe_doc>
		</createRange>
		<createNodeIterator public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeIterator"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
			</overloads>
		</createNodeIterator>
		<createTreeWalker public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.TreeWalker"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
			</overloads>
		</createTreeWalker>
		<createCDATASection public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.CDATASection"/>
			</f>
			<haxe_doc>Creates a new CDATA node and returns it.
		@throws DOMError</haxe_doc>
		</createCDATASection>
		<createAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new `Attr` object and returns it.
		@throws DOMError</haxe_doc>
		</createAttribute>
		<createAttributeNS public="1" set="method">
			<f a="namespace:name">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new attribute node in a given namespace and returns it.
		@throws DOMError</haxe_doc>
		</createAttributeNS>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<hasFocus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the focus is currently located anywhere inside the specified document.
		@throws DOMError</haxe_doc>
		</hasFocus>
		<releaseCapture public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the current mouse capture if it's on an element in this document.</haxe_doc>
		</releaseCapture>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<exitPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the pointer lock.</haxe_doc>
		</exitPointerLock>
		<enableStyleSheetsForSet public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables the style sheets for the specified style sheet set.</haxe_doc>
		</enableStyleSheetsForSet>
		<caretPositionFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CaretPosition"/>
</f></caretPositionFromPoint>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the `document`.</haxe_doc>
		</getAnimations>
		<createTouch public="1" set="method">
			<f a="?view:?target:?identifier:?pageX:?pageY:?screenX:?screenY:?clientX:?clientY:?radiusX:?radiusY:?rotationAngle:?force" v="::0:0:0:0:0:0:0:0:0:0.0:0.0">
				<c path="js.html.Window"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Touch"/>
			</f>
			<meta><m n=":value"><e>{ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 }</e></m></meta>
			<haxe_doc>Creates a `Touch` object.</haxe_doc>
		</createTouch>
		<createTouchList public="1" set="method">
			<f a="touches">
				<c path="Array"><c path="js.html.Touch"/></c>
				<c path="js.html.TouchList"/>
			</f>
			<haxe_doc>Creates a `TouchList` object.</haxe_doc>
			<overloads>
				<createTouchList public="1" set="method">
					<f a="touch:touches">
						<c path="js.html.Touch"/>
						<x path="haxe.extern.Rest"><c path="js.html.Touch"/></x>
						<c path="js.html.TouchList"/>
					</f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
				<createTouchList public="1" set="method">
					<f a=""><c path="js.html.TouchList"/></f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
			</overloads>
		</createTouchList>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<createExpression public="1" set="method">
			<f a="expression:?resolver">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
			</overloads>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
				<c path="String"/>
				<c path="js.html.Node"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="haxe.Function"/>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
			</overloads>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.`HTMLElement`

	Documentation [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Document$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Document>]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the DocumentFragment`, in document order, that matches the specified ID.</haxe_doc>
		</getElementById>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of all the `Element` nodes within the `DocumentFragment` that match the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentFragment` interface represents a minimal document object that has no parent. It is used as a lightweight version of `Document` that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.

	Documentation [DocumentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentTimeline" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DocumentTimeline.hx" extern="1">
		<extends path="js.html.AnimationTimeline"/>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.DocumentTimelineOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentTimeline` interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).

	Documentation [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentTimeline"</e></m></meta>
	</class>
	<typedef path="js.html.DocumentTimelineOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DocumentTimelineOptions.hx"><a><originTime>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</originTime></a></typedef>
	<class path="js.html.DocumentType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"html"` for `!DOCTYPE HTML`.</haxe_doc>
		</name>
		<publicId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"-//W3C//DTD HTML 4.01//EN"`, empty string for HTML5.</haxe_doc>
		</publicId>
		<systemId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"http://www.w3.org/TR/html4/strict.dtd"`, empty string for HTML5.</haxe_doc>
		</systemId>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `DocumentType` interface represents a `Node` containing a doctype.

	Documentation [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentType>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<typedef path="js.html.EffectTiming" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EffectTiming.hx">
		<a>
			<iterations>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
			</iterations>
			<iterationStart>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
			</iterationStart>
			<fill>
				<x path="Null"><x path="js.html.FillMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
			</fill>
			<endDelay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
			</endDelay>
			<easing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
			</easing>
			<duration>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
			</duration>
			<direction>
				<x path="Null"><x path="js.html.PlaybackDirection"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
			</direction>
			<delay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
			</delay>
		</a>
		<haxe_doc><![CDATA[The `EffectTiming` dictionary, part of the Web Animations API, is used by `Element.animate()`, `KeyframeEffectReadOnly()`, and `KeyframeEffect()` to describe timing properties for animation effects. These properties are all optional, although without setting a `duration` the animation will not play.

	Documentation [EffectTiming](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.ElementCreationOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ElementCreationOptions.hx"><a><is>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</is></a></typedef>
	<class path="js.html.EmbedElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the resource.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, containing the type of the resource.</haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, containing the displayed width of the resource.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `height` HTML attribute, containing the displayed height of the resource.</haxe_doc>
		</height>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"center"`, and `"justify"`.</haxe_doc>
		</align>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the embedded object.</haxe_doc>
		</name>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLEmbedElement` interface, which provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `embed` elements.

	Documentation [HTMLEmbedElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<abstract path="js.html.EndingTypes" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EndingTypes.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._EndingTypes.EndingTypes_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EndingTypes.hx" private="1" module="js.html.EndingTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Event" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Event.hx" extern="1">
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<CAPTURING_PHASE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CAPTURING_PHASE>
		<AT_TARGET public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BUBBLING_PHASE>
		<ALT_MASK public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ALT_MASK>
		<CONTROL_MASK public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROL_MASK>
		<SHIFT_MASK public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHIFT_MASK>
		<META_MASK public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</META_MASK>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent; it's possible this has been changed along the way through retargeting.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<returnValue public="1">
			<x path="Bool"/>
			<haxe_doc>A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use `Event.preventDefault()` and `Event.defaultPrevented` instead, but you can use `returnValue` if you choose to do so.</haxe_doc>
		</returnValue>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not `event.preventDefault()` has been called on the event.</haxe_doc>
		</defaultPrevented>
		<composed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.</haxe_doc>
		</composed>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent).</haxe_doc>
		</isTrusted>
		<timeStamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time at which the event was created (in milliseconds). By specification, this value is time since epoch, but in reality browsers' definitions vary; in addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.</haxe_doc>
		</timeStamp>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>A historical alias to `Event.stopPropagation()`. Setting its value to `true` before returning from an event handler prevents propagation of the event.</haxe_doc>
		</cancelBubble>
		<originalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The original target of the event, before any retargetings (Mozilla-specific).</haxe_doc>
		</originalTarget>
		<explicitOriginalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The explicit original target of the event (Mozilla-specific).</haxe_doc>
		</explicitOriginalTarget>
		<composedPath public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.EventTarget"/></c></f>
			<haxe_doc>Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its `ShadowRoot.mode` closed.</haxe_doc>
		</composedPath>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the propagation of events further along in the DOM.</haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance)</haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels the event (if it is cancelable).</haxe_doc>
		</preventDefault>
		<initEvent public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
			<haxe_doc>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.EventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Event` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of events, some of which use other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.

	Documentation [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Event$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Event>]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<typedef path="js.html.EventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventListener" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EventListener.hx">
		<a><handleEvent set="method">
	<f a="event">
		<c path="js.html.Event"/>
		<x path="Void"/>
	</f>
	<haxe_doc>A function that is called whenever an event of the specified type occurs.</haxe_doc>
</handleEvent></a>
		<haxe_doc><![CDATA[The `EventListener` interface represents an object that can handle an event dispatched by an `EventTarget` object.

	Documentation [EventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventListener>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.EventListenerOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EventListenerOptions.hx"><a><capture>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</capture></a></typedef>
	<typedef path="js.html.EventModifierInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/EventModifierInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.FetchObserver" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FetchObserver.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null"><x path="js.html.FetchState"/></state>
		<onstatechange public="1"><x path="haxe.Function"/></onstatechange>
		<onrequestprogress public="1"><x path="haxe.Function"/></onrequestprogress>
		<onresponseprogress public="1"><x path="haxe.Function"/></onresponseprogress>
		<meta><m n=":native"><e>"FetchObserver"</e></m></meta>
	</class>
	<abstract path="js.html.FetchState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FetchState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FetchState.FetchState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FetchState.hx" private="1" module="js.html.FetchState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FieldSetElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, indicating whether the user can interact with the control.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormControlsCollection` or `HTMLCollection` referencing the containing form element, if this element is in a form.
		
		 If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of the field set, used for submitting the form.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"fieldset"`.</haxe_doc>
		</type>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.</haxe_doc>
		</elements>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` `false`, because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Always returns `true` because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLFieldSetElement` interface has special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.

	Documentation [HTMLFieldSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the file referenced by the `File` object.</haxe_doc>
		</name>
		<lastModified public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</haxe_doc>
		</lastModified>
		<new public="1" set="method">
			<f a="fileBits:fileName:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Blob"/>
		<c path="String"/>
	</x>
</x></c>
				<c path="String"/>
				<x path="Null"><t path="js.html.FilePropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `File` interface provides information about files and allows JavaScript in a web page to access their content.

	Documentation [File](https://developer.mozilla.org/en-US/docs/Web/API/File) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/File$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/File>]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<class path="js.html.FileList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[An object of this type is returned by the `files` property of the HTML `input` element; this lets you access the list of files selected with the `input type="file"` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.

	Documentation [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileList>]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<typedef path="js.html.FilePropertyBag" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FilePropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<lastModified>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<abstract path="js.html.FillMode" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FillMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FillMode.FillMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.</haxe_doc>
		</face>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `size` HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the `size` attribute of the `basefont` element, for example -2 or +1.</haxe_doc>
		</size>
		<haxe_doc><![CDATA[Implements the document object model (DOM) representation of the font element. The HTML Font Element `font` defines the font size, font face and color of text.

	Documentation [HTMLFontElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FontFace" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFace.hx" extern="1">
		<family public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the family of the font. It is equivalent to the `@font-face/font-family` descriptor.</haxe_doc>
		</family>
		<style public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the style of the font. It is equivalent to the `@font-face/font-style` descriptor.</haxe_doc>
		</style>
		<weight public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the weight of the font. It is equivalent to the `@font-face/font-weight` descriptor.</haxe_doc>
		</weight>
		<stretch public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains how the font stretches. It is equivalent to the `@font-face/font-stretch` descriptor.</haxe_doc>
		</stretch>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the range of code encompassed the font. It is equivalent to the `@font-face/unicode-range` descriptor.</haxe_doc>
		</unicodeRange>
		<variant public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the variant of the font. It is equivalent to the `@font-face/font-variant` descriptor.</haxe_doc>
		</variant>
		<featureSettings public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the features of the font. It is equivalent to the `@font-face/font-feature-settings`descriptor.</haxe_doc>
		</featureSettings>
		<status public="1" set="null">
			<x path="js.html.FontFaceLoadStatus"/>
			<haxe_doc>Returns an enumerated value indicating the status of the font. It can be one of the following: `"unloaded"`, `"loading"`, `"loaded"`, or `"error"`.</haxe_doc>
		</status>
		<loaded public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.</haxe_doc>
		</loaded>
		<load public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FontFace"/></c></f>
			<haxe_doc>Loads the font, returning a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.
		@throws DOMError</haxe_doc>
		</load>
		<new public="1" set="method">
			<f a="family:source:?descriptors">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `FontFace` interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.

	Documentation [FontFace](https://developer.mozilla.org/en-US/docs/Web/API/FontFace) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFace$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFace>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFace"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceDescriptors" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceDescriptors.hx"><a>
	<weight>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</weight>
	<variationSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variationSettings>
	<variant>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variant>
	<unicodeRange>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</unicodeRange>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<stretch>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</stretch>
	<featureSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</featureSettings>
	<display>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</display>
</a></typedef>
	<abstract path="js.html.FontFaceLoadStatus" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontFaceSet" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceSet.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<size public="1" set="null"><x path="Int"/></size>
		<onloading public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loading` is fired, indicating a font-face set has started loading.</haxe_doc>
		</onloading>
		<onloadingdone public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingdone` is fired, indicating that a font face set has finished loading.</haxe_doc>
		</onloadingdone>
		<onloadingerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingerror` is fired, indicating that an error occurred whilst loading a font-face set.</haxe_doc>
		</onloadingerror>
		<ready public="1" set="null"><c path="js.lib.Promise"><x path="Void"/></c></ready>
		<status public="1" set="null">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<haxe_doc>Indicates the font-face's loading status. It will be one of `'loading'` or `'loaded'`.</haxe_doc>
		</status>
		<add public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<has public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></has>
		<delete public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></delete>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<entries public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></entries>
		<values public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></values>
		<forEach public="1" set="method">
			<f a="cb:?thisArg">
				<f a="::">
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFaceSet"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<load public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.FontFace"/></c></c>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
		</load>
		<check public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</check>
		<haxe_doc><![CDATA[The `FontFaceSet` interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.

	Documentation [FontFaceSet](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSet"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetIterator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceSetIterator.hx"><a><next set="method">
	<f a=""><t path="js.html.FontFaceSetIteratorResult"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<typedef path="js.html.FontFaceSetIteratorResult" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceSetIteratorResult.hx"><a>
	<value><d/></value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.html.FontFaceSetLoadStatus" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceSetLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FormData" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FormData.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a key/value pair from a `FormData` object.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Blob"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Directory"/>
						<c path="String"/>
					</x>
				</x>
			</f>
			<haxe_doc>Returns the first value associated with a given key from within a `FormData` object.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Directory"/>
		<c path="String"/>
	</x>
</x></c>
			</f>
			<haxe_doc>Returns an array of all the values associated with a given key from within a `FormData`.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `FormData` object contains a certain key/value pair.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
</set></overloads>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?form">
				<c path="js.html.FormElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FormData` interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the `XMLHttpRequest.send()` method. It uses the same format a form would use if the encoding type were set to `"multipart/form-data"`.

	Documentation [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FormData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FormData>]]></haxe_doc>
		<meta><m n=":native"><e>"FormData"</e></m></meta>
	</class>
	<typedef path="js.html.FormDataIterator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FormDataIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.FormElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `accept-charset` HTML attribute, representing the character encoding that the server accepts.</haxe_doc>
		</acceptCharset>
		<action public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `action` HTML attribute, containing the URI of a program that processes the information submitted by the form.</haxe_doc>
		</action>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `autocomplete` HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.</haxe_doc>
		</autocomplete>
		<enctype public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</enctype>
		<encoding public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</encoding>
		<method public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `method` HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.</haxe_doc>
		</method>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `name` HTML attribute, containing the name of the form.</haxe_doc>
		</name>
		<noValidate public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the value of the form's  `novalidate` HTML attribute, indicating whether the form should not be validated.</haxe_doc>
		</noValidate>
		<target public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `target` HTML attribute, indicating where to display the results received from submitting the form.</haxe_doc>
		</target>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>A `HTMLFormControlsCollection` holding all form controls belonging to this form element.</haxe_doc>
		</elements>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting  the number of controls in the form.</haxe_doc>
		</length>
		<submit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Submits the form to the server.
		@throws DOMError</haxe_doc>
		</submit>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the form to its initial state.</haxe_doc>
		</reset>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls are subject to constraint validation and satisfy those contraints; returns `false` if some controls do not satisfy their constraints. Fires an event named `invalid` at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to `false`.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls satisfy their validation constraints. When `false` is returned, cancelable `invalid` events are fired for each invalid child and validation problems are reported to the user.</haxe_doc>
		</reportValidity>
		<haxe_doc><![CDATA[The `HTMLFormElement` interface represents a `form` element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.

	Documentation [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<scrolling public="1"><c path="String"/></scrolling>
		<src public="1"><c path="String"/></src>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<longDesc public="1"><c path="String"/></longDesc>
		<noResize public="1"><x path="Bool"/></noResize>
		<contentDocument public="1" set="null"><c path="js.html.HTMLDocument"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.Window"/></contentWindow>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the width of each column inside a frameset.</haxe_doc>
		</cols>
		<rows public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the height of each column inside a frameset.</haxe_doc>
		</rows>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLFrameSetElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `frameset` elements.

	Documentation [HTMLFrameSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<class path="js.html.Gamepad" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Gamepad.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing identifying information about the controller.</haxe_doc>
		</id>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer that is auto-incremented to be unique for each device currently connected to the system.</haxe_doc>
		</index>
		<mapping public="1" set="null">
			<x path="js.html.GamepadMappingType"/>
			<haxe_doc>A string indicating whether the browser has remapped the controls on the device to a known layout.</haxe_doc>
		</mapping>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the gamepad is still connected to the system.</haxe_doc>
		</connected>
		<buttons public="1" set="null">
			<c path="Array"><c path="js.html.GamepadButton"/></c>
			<haxe_doc>An array of `gamepadButton` objects representing the buttons present on the device.</haxe_doc>
		</buttons>
		<axes public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>An array representing the controls with axes present on the device (e.g. analog thumb sticks).</haxe_doc>
		</axes>
		<timestamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Gamepad` interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.

	Documentation [Gamepad](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Gamepad>]]></haxe_doc>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadButton" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/GamepadButton.hx" extern="1">
		<pressed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).</haxe_doc>
		</pressed>
		<touched public="1" set="null"><x path="Bool"/></touched>
		<value public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `GamepadButton` interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.

	Documentation [GamepadButton](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadButton"</e></m></meta>
	</class>
	<abstract path="js.html.GamepadMappingType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/GamepadMappingType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.Geolocation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Geolocation.hx">
		<a>
			<watchPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Int"/>
				</f>
				<haxe_doc>Returns a `long` value representing the newly established callback function to be invoked whenever the device location changes.
		@throws DOMError</haxe_doc>
			</watchPosition>
			<getCurrentPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Determines the device's current location and gives back a `Position` object with the data.
		@throws DOMError</haxe_doc>
			</getCurrentPosition>
			<clearWatch set="method">
				<f a="watchId">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes the particular handler previously installed using `watchPosition()`.</haxe_doc>
			</clearWatch>
		</a>
		<haxe_doc><![CDATA[The `Geolocation` interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.

	Documentation [Geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Geolocation>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.GetNotificationOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/GetNotificationOptions.hx"><a><tag>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</tag></a></typedef>
	<typedef path="js.html.GetRootNodeOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/GetRootNodeOptions.hx"><a><composed>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</composed></a></typedef>
	<class path="js.html.HRElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<color public="1"><c path="String"/></color>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1"><c path="String"/></size>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLHRElement` interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `hr` elements.

	Documentation [HTMLHRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Node"/>
					<c path="js.html.HTMLCollection"/>
				</x>
			</f>
			<overloads><item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item></overloads>
		</item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Node"/>
		<c path="js.html.HTMLCollection"/>
	</x>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of items in the collection.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.

	Documentation [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLDocument" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HTMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1"><c path="String"/></domain>
		<cookie public="1"><c path="String"/></cookie>
		<designMode public="1"><c path="String"/></designMode>
		<fgColor public="1"><c path="String"/></fgColor>
		<linkColor public="1"><c path="String"/></linkColor>
		<vlinkColor public="1"><c path="String"/></vlinkColor>
		<alinkColor public="1"><c path="String"/></alinkColor>
		<bgColor public="1"><c path="String"/></bgColor>
		<all public="1" set="null"><c path="js.html.HTMLAllCollection"/></all>
		<open public="1" set="method">
			<f a="url:name:features:?replace" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ replace : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="?type:?replace" v=":&quot;&quot;">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.HTMLDocument"/>
	</f>
	<meta><m n=":value"><e>{ replace : "" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<write public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<writeln public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</writeln>
		<execCommand public="1" set="method">
			<f a="commandId:?showUI:?value" v=":false:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ value : "", showUI : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</execCommand>
		<queryCommandEnabled public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandIndeterm>
		<queryCommandState public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="commandId">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandValue>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<createTableCellElement public="1" get="inline" set="null" line="70">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<td>` element.]]></haxe_doc>
		</createTableCellElement>
		<createSelectElement public="1" get="inline" set="null" line="72">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<select>` element.]]></haxe_doc>
		</createSelectElement>
		<createFontElement public="1" get="inline" set="null" line="74">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<font>` element.]]></haxe_doc>
		</createFontElement>
		<createDListElement public="1" get="inline" set="null" line="76">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dl>` element.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="78">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frame>` element.]]></haxe_doc>
		</createFrameElement>
		<createOListElement public="1" get="inline" set="null" line="80">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ol>` element.]]></haxe_doc>
		</createOListElement>
		<createLIElement public="1" get="inline" set="null" line="82">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<li>` element.]]></haxe_doc>
		</createLIElement>
		<createHRElement public="1" get="inline" set="null" line="84">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<hr>` element.]]></haxe_doc>
		</createHRElement>
		<createParamElement public="1" get="inline" set="null" line="86">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<param>` element.]]></haxe_doc>
		</createParamElement>
		<createLabelElement public="1" get="inline" set="null" line="88">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<label>` element.]]></haxe_doc>
		</createLabelElement>
		<createTrackElement public="1" get="inline" set="null" line="90">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<track>` element.]]></haxe_doc>
		</createTrackElement>
		<createDivElement public="1" get="inline" set="null" line="92">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<div>` element.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="94">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<title>` element.]]></haxe_doc>
		</createTitleElement>
		<createAnchorElement public="1" get="inline" set="null" line="96">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<a>` element.]]></haxe_doc>
		</createAnchorElement>
		<createStyleElement public="1" get="inline" set="null" line="98">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<style>` element.]]></haxe_doc>
		</createStyleElement>
		<createEmbedElement public="1" get="inline" set="null" line="100">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<embed>` element.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="102">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meter>` element.]]></haxe_doc>
		</createMeterElement>
		<createPictureElement public="1" get="inline" set="null" line="104">
			<f a=""><c path="js.html.PictureElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<picture>` element.]]></haxe_doc>
		</createPictureElement>
		<createPreElement public="1" get="inline" set="null" line="106">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<pre>` element.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="108">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<thead>` element.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="110">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<head>` element.]]></haxe_doc>
		</createHeadElement>
		<createOptGroupElement public="1" get="inline" set="null" line="112">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<optgroup>` element.]]></haxe_doc>
		</createOptGroupElement>
		<createAudioElement public="1" get="inline" set="null" line="114">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<audio>` element.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="116">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<video>` element.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="118">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<legend>` element.]]></haxe_doc>
		</createLegendElement>
		<createUListElement public="1" get="inline" set="null" line="120">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ul>` element.]]></haxe_doc>
		</createUListElement>
		<createDirectoryElement public="1" get="inline" set="null" line="122">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dir>` element.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="124">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<table>` element.]]></haxe_doc>
		</createTableElement>
		<createSlotElement public="1" get="inline" set="null" line="126">
			<f a=""><c path="js.html.SlotElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<slot>` element.]]></haxe_doc>
		</createSlotElement>
		<createSourceElement public="1" get="inline" set="null" line="128">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<source>` element.]]></haxe_doc>
		</createSourceElement>
		<createLinkElement public="1" get="inline" set="null" line="130">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<link>` element.]]></haxe_doc>
		</createLinkElement>
		<createIFrameElement public="1" get="inline" set="null" line="132">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<iframe>` element.]]></haxe_doc>
		</createIFrameElement>
		<createMediaElement public="1" get="inline" set="null" line="134">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<media>` element.]]></haxe_doc>
		</createMediaElement>
		<createMapElement public="1" get="inline" set="null" line="136">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<map>` element.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="138">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<form>` element.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="140">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<option>` element.]]></haxe_doc>
		</createOptionElement>
		<createMetaElement public="1" get="inline" set="null" line="142">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meta>` element.]]></haxe_doc>
		</createMetaElement>
		<createObjectElement public="1" get="inline" set="null" line="144">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<object>` element.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="146">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<caption>` element.]]></haxe_doc>
		</createTableCaptionElement>
		<createImageElement public="1" get="inline" set="null" line="148">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<img>` element.]]></haxe_doc>
		</createImageElement>
		<createTextAreaElement public="1" get="inline" set="null" line="150">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<textarea>` element.]]></haxe_doc>
		</createTextAreaElement>
		<createScriptElement public="1" get="inline" set="null" line="152">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<script>` element.]]></haxe_doc>
		</createScriptElement>
		<createDataListElement public="1" get="inline" set="null" line="154">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<datalist>` element.]]></haxe_doc>
		</createDataListElement>
		<createModElement public="1" get="inline" set="null" line="156">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<mod>` element.]]></haxe_doc>
		</createModElement>
		<createOutputElement public="1" get="inline" set="null" line="158">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<output>` element.]]></haxe_doc>
		</createOutputElement>
		<createAreaElement public="1" get="inline" set="null" line="160">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<area>` element.]]></haxe_doc>
		</createAreaElement>
		<createProgressElement public="1" get="inline" set="null" line="162">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<progress>` element.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="164">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<button>` element.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="166">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<fieldset>` element.]]></haxe_doc>
		</createFieldSetElement>
		<createMenuElement public="1" get="inline" set="null" line="168">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<menu>` element.]]></haxe_doc>
		</createMenuElement>
		<createBRElement public="1" get="inline" set="null" line="170">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<br>` element.]]></haxe_doc>
		</createBRElement>
		<createSpanElement public="1" get="inline" set="null" line="172">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<span>` element.]]></haxe_doc>
		</createSpanElement>
		<createDetailsElement public="1" get="inline" set="null" line="174">
			<f a=""><c path="js.html.DetailsElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<details>` element.]]></haxe_doc>
		</createDetailsElement>
		<createBodyElement public="1" get="inline" set="null" line="176">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<body>` element.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="178">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<input>` element.]]></haxe_doc>
		</createInputElement>
		<createBaseElement public="1" get="inline" set="null" line="180">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<base>` element.]]></haxe_doc>
		</createBaseElement>
		<createQuoteElement public="1" get="inline" set="null" line="182">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<quote>` element.]]></haxe_doc>
		</createQuoteElement>
		<createFrameSetElement public="1" get="inline" set="null" line="184">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frameset>` element.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="186">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<canvas>` element.]]></haxe_doc>
		</createCanvasElement>
		<createParagraphElement public="1" get="inline" set="null" line="188">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<p>` element.]]></haxe_doc>
		</createParagraphElement>
		<createTableColElement public="1" get="inline" set="null" line="190">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<col>` element.]]></haxe_doc>
		</createTableColElement>
		<createTableRowElement public="1" get="inline" set="null" line="192">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<tr>` element.]]></haxe_doc>
		</createTableRowElement>
		<createHtmlElement public="1" get="inline" set="null" line="194">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<html>` element.]]></haxe_doc>
		</createHtmlElement>
		<haxe_doc><![CDATA[`HTMLDocument` is an abstract interface which extends the `Document` interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides.

	Documentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDocument"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[`HTMLOptionsCollection` is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.

	Documentation [HTMLOptionsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLPropertiesCollection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HTMLPropertiesCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<names public="1" set="null"><c path="js.html.DOMStringList"/></names>
		<namedItem public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="js.html.PropertyNodeList"/>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLPropertiesCollection"</e></m></meta>
	</class>
	<class path="js.html.HeadElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLHeadElement` interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.Headers" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Headers.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a header from a `Headers` object.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `ByteString` sequence of all the values of a header within a `Headers` object with a given name.
		@throws DOMError</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `Headers` object contains a certain header.
		@throws DOMError</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes a provided function once for each array element.
		@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="js.html.Headers"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<c path="Array"><c path="Array"><c path="String"/></c></c>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Headers` interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.

	Documentation [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Headers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Headers>]]></haxe_doc>
		<meta><m n=":native"><e>"Headers"</e></m></meta>
	</class>
	<typedef path="js.html.HeadersIterator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HeadersIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.History" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `Integer` representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns `1`.</haxe_doc>
		</length>
		<scrollRestoration public="1">
			<x path="js.html.ScrollRestoration"/>
			<haxe_doc>Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either `auto` or `manual`.</haxe_doc>
		</scrollRestoration>
		<state public="1" set="null">
			<d/>
			<haxe_doc>Returns an `any` value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a `popstate` event.</haxe_doc>
		</state>
		<go public="1" set="method">
			<f a="?delta" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0 }</e></m></meta>
			<haxe_doc>Loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1  for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling `go()` without parameters or a value of 0 reloads the current page. Internet Explorer lets you also specify a string to go to a specific page in the history list.
		@throws DOMError</haxe_doc>
		</go>
		<back public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to `history.go(-1)`.
		 Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</back>
		<forward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to `history.go(1)`.
		 Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</forward>
		<pushState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes the given data onto the session history stack with the specified title and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</pushState>
		<replaceState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</replaceState>
		<haxe_doc><![CDATA[The `History` interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.

	Documentation [History](https://developer.mozilla.org/en-US/docs/Web/API/History) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/History$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/History>]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<typedef path="js.html.HitRegionOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HitRegionOptions.hx"><a>
	<path>
		<x path="Null"><c path="js.html.Path2D"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<control>
		<x path="Null"><c path="js.html.Element"/></x>
		<meta><m n=":optional"/></meta>
	</control>
</a></typedef>
	<class path="js.html.HtmlElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<version public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Simply omit it.</haxe_doc>
		</version>
		<haxe_doc><![CDATA[The `HTMLHtmlElement` interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the content to be embedded.</haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the content to display in the frame.</haxe_doc>
		</srcdoc>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing a name by which to refer to the frame.</haxe_doc>
		</name>
		<sandbox public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.</haxe_doc>
		</sandbox>
		<allowFullscreen public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details.</haxe_doc>
		</allowFullscreen>
		<allowPaymentRequest public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the Payment Request API may be invoked inside a cross-origin iframe.</haxe_doc>
		</allowPaymentRequest>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, indicating the width of the frame.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, indicating the height of the frame.</haxe_doc>
		</height>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document`, the active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy`, the window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<frameBorder public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether to create borders between frames.</haxe_doc>
		</frameBorder>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the width of the frame margin.</haxe_doc>
		</marginWidth>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLIFrameElement` interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.

	Documentation [HTMLIFrameElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageBitmap" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ImageBitmap.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the width, in CSS pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the height, in CSS pixels, of the `ImageData`.</haxe_doc>
		</height>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of all graphical resources associated with an `ImageBitmap`.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `ImageBitmap` interface represents a bitmap image which can be drawn to a `canvas` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.

	Documentation [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmap"</e></m></meta>
	</class>
	<abstract path="js.html.ImageBitmapFormat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ImageBitmapFormat.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ImageBitmapFormat.ImageBitmapFormat_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ImageBitmapFormat.hx" private="1" module="js.html.ImageBitmapFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ImageData" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ImageData.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual width, in pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual height, in pixels, of the `ImageData`.</haxe_doc>
		</height>
		<data public="1" set="null">
			<c path="js.lib.Uint8ClampedArray"/>
			<haxe_doc>Is a `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (included).</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:sw:?sh">
				<c path="js.lib.Uint8ClampedArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="sw:sh">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `ImageData` interface represents the underlying pixel data of an area of a `canvas` element. It is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.

	Documentation [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageData>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageData"</e></m></meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute,  thus indicating fallback context for the image.</haxe_doc>
		</alt>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the full URL of the image including base URI.</haxe_doc>
		</src>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the CORS setting for this image element. See CORS settings attributes for further details.</haxe_doc>
		</crossOrigin>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, containing a partial URL of a map element.</haxe_doc>
		</useMap>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use in order to fetch the image.</haxe_doc>
		</referrerPolicy>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map.</haxe_doc>
		</isMap>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.</haxe_doc>
		</height>
		<decoding public="1">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a hint given to the browser on how it should decode the image.</haxe_doc>
		</decoding>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`.</haxe_doc>
		</naturalWidth>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`.</haxe_doc>
		</naturalHeight>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no `HTMLImageElement.src` value.</haxe_doc>
		</complete>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the element.</haxe_doc>
		</name>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the alignment of the image with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space on either side of the image.</haxe_doc>
		</hspace>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space above and below the image.</haxe_doc>
		</vspace>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI of a long description of the image.</haxe_doc>
		</longDesc>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that is responsible for the width of the border surrounding the image. This is now deprecated and the CSS `border` property should be used instead.</haxe_doc>
		</border>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `sizes` HTML attribute.</haxe_doc>
		</sizes>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the URL to the currently displayed image (which may change, for example in response to media queries).</haxe_doc>
		</currentSrc>
		<lowsrc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that refers to a low-quality (but faster to load) copy of the image.</haxe_doc>
		</lowsrc>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the horizontal offset from the nearest layer. This property mimics an old Netscape 4 behavior.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the vertical offset from the nearest layer. This property is also similar to behavior of an old Netscape 4.</haxe_doc>
		</y>
		<haxe_doc><![CDATA[The `HTMLImageElement` interface provides special properties and methods  for manipulating the layout and presentation of `img` elements.

	Documentation [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1"><c path="String"/></accept>
		<alt public="1"><c path="String"/></alt>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<checked public="1"><x path="Bool"/></checked>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<files public="1"><c path="js.html.FileList"/></files>
		<formAction public="1"><c path="String"/></formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1"><c path="String"/></formMethod>
		<formNoValidate public="1"><x path="Bool"/></formNoValidate>
		<formTarget public="1"><c path="String"/></formTarget>
		<height public="1"><x path="Int"/></height>
		<indeterminate public="1"><x path="Bool"/></indeterminate>
		<list public="1" set="null"><c path="js.html.Element"/></list>
		<max public="1"><c path="String"/></max>
		<maxLength public="1"><x path="Int"/></maxLength>
		<min public="1"><c path="String"/></min>
		<minLength public="1"><x path="Int"/></minLength>
		<multiple public="1"><x path="Bool"/></multiple>
		<name public="1"><c path="String"/></name>
		<pattern public="1"><c path="String"/></pattern>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<size public="1"><x path="Int"/></size>
		<src public="1"><c path="String"/></src>
		<step public="1"><c path="String"/></step>
		<type public="1"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<valueAsDate public="1"><c path="Date"/></valueAsDate>
		<valueAsNumber public="1"><x path="Float"/></valueAsNumber>
		<width public="1"><x path="Int"/></width>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<align public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents the alignment of the element. Use CSS instead.</haxe_doc>
		</align>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents a client-side image map.</haxe_doc>
		</useMap>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<stepUp public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Increments the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value.,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`.
		 
		 
		@throws DOMError</haxe_doc>
		</stepUp>
		<stepDown public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Decrements the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`. 
		 
		 
		@throws DOMError</haxe_doc>
		</stepDown>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLInputElement` interface provides special properties and methods for manipulating the layout and presentation of input elements.

	Documentation [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<abstract path="js.html.IterationCompositeOperation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/IterationCompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.UIEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/UIEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<SCROLL_PAGE_UP public="1" get="inline" set="null" expr="-32768" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-32768</e></m></meta>
		</SCROLL_PAGE_UP>
		<SCROLL_PAGE_DOWN public="1" get="inline" set="null" expr="32768" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32768</e></m></meta>
		</SCROLL_PAGE_DOWN>
		<view public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` that contains the view that generated the event.</haxe_doc>
		</view>
		<detail public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` with details about the event, depending on the event type.</haxe_doc>
		</detail>
		<layerX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the current layer.</haxe_doc>
		</layerX>
		<layerY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the current layer.</haxe_doc>
		</layerY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the whole document.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the whole document.</haxe_doc>
		</pageY>
		<which public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the numeric `keyCode` of the key pressed, or the character code (`charCode`) for an alphanumeric key pressed.</haxe_doc>
		</which>
		<rangeParent public="1" set="null"><c path="js.html.Node"/></rangeParent>
		<rangeOffset public="1" set="null"><x path="Int"/></rangeOffset>
		<initUIEvent public="1" set="method">
			<f a="aType:?aCanBubble:?aCancelable:?aView:?aDetail" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ aDetail : 0, aCancelable : false, aCanBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `UIEvent` object. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initUIEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.UIEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `UIEvent` interface represents simple user interface events.

	Documentation [UIEvent](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/UIEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"UIEvent"</e></m></meta>
	</class>
	<class path="js.html.KeyboardEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/KeyboardEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<DOM_KEY_LOCATION_STANDARD public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_KEY_LOCATION_STANDARD>
		<DOM_KEY_LOCATION_LEFT public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_KEY_LOCATION_LEFT>
		<DOM_KEY_LOCATION_RIGHT public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_KEY_LOCATION_RIGHT>
		<DOM_KEY_LOCATION_NUMPAD public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_KEY_LOCATION_NUMPAD>
		<DOM_VK_CANCEL public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_VK_CANCEL>
		<DOM_VK_HELP public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</DOM_VK_HELP>
		<DOM_VK_BACK_SPACE public="1" get="inline" set="null" expr="8" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOM_VK_BACK_SPACE>
		<DOM_VK_TAB public="1" get="inline" set="null" expr="9" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOM_VK_TAB>
		<DOM_VK_CLEAR public="1" get="inline" set="null" expr="12" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</DOM_VK_CLEAR>
		<DOM_VK_RETURN public="1" get="inline" set="null" expr="13" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</DOM_VK_RETURN>
		<DOM_VK_SHIFT public="1" get="inline" set="null" expr="16" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOM_VK_SHIFT>
		<DOM_VK_CONTROL public="1" get="inline" set="null" expr="17" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</DOM_VK_CONTROL>
		<DOM_VK_ALT public="1" get="inline" set="null" expr="18" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</DOM_VK_ALT>
		<DOM_VK_PAUSE public="1" get="inline" set="null" expr="19" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</DOM_VK_PAUSE>
		<DOM_VK_CAPS_LOCK public="1" get="inline" set="null" expr="20" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</DOM_VK_CAPS_LOCK>
		<DOM_VK_KANA public="1" get="inline" set="null" expr="21" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_KANA>
		<DOM_VK_HANGUL public="1" get="inline" set="null" expr="21" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_HANGUL>
		<DOM_VK_EISU public="1" get="inline" set="null" expr="22" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</DOM_VK_EISU>
		<DOM_VK_JUNJA public="1" get="inline" set="null" expr="23" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</DOM_VK_JUNJA>
		<DOM_VK_FINAL public="1" get="inline" set="null" expr="24" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</DOM_VK_FINAL>
		<DOM_VK_HANJA public="1" get="inline" set="null" expr="25" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_HANJA>
		<DOM_VK_KANJI public="1" get="inline" set="null" expr="25" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_KANJI>
		<DOM_VK_ESCAPE public="1" get="inline" set="null" expr="27" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</DOM_VK_ESCAPE>
		<DOM_VK_CONVERT public="1" get="inline" set="null" expr="28" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</DOM_VK_CONVERT>
		<DOM_VK_NONCONVERT public="1" get="inline" set="null" expr="29" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</DOM_VK_NONCONVERT>
		<DOM_VK_ACCEPT public="1" get="inline" set="null" expr="30" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</DOM_VK_ACCEPT>
		<DOM_VK_MODECHANGE public="1" get="inline" set="null" expr="31" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</DOM_VK_MODECHANGE>
		<DOM_VK_SPACE public="1" get="inline" set="null" expr="32" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOM_VK_SPACE>
		<DOM_VK_PAGE_UP public="1" get="inline" set="null" expr="33" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</DOM_VK_PAGE_UP>
		<DOM_VK_PAGE_DOWN public="1" get="inline" set="null" expr="34" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</DOM_VK_PAGE_DOWN>
		<DOM_VK_END public="1" get="inline" set="null" expr="35" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</DOM_VK_END>
		<DOM_VK_HOME public="1" get="inline" set="null" expr="36" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</DOM_VK_HOME>
		<DOM_VK_LEFT public="1" get="inline" set="null" expr="37" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</DOM_VK_LEFT>
		<DOM_VK_UP public="1" get="inline" set="null" expr="38" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</DOM_VK_UP>
		<DOM_VK_RIGHT public="1" get="inline" set="null" expr="39" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</DOM_VK_RIGHT>
		<DOM_VK_DOWN public="1" get="inline" set="null" expr="40" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOM_VK_DOWN>
		<DOM_VK_SELECT public="1" get="inline" set="null" expr="41" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>41</e></m></meta>
		</DOM_VK_SELECT>
		<DOM_VK_PRINT public="1" get="inline" set="null" expr="42" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>42</e></m></meta>
		</DOM_VK_PRINT>
		<DOM_VK_EXECUTE public="1" get="inline" set="null" expr="43" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>43</e></m></meta>
		</DOM_VK_EXECUTE>
		<DOM_VK_PRINTSCREEN public="1" get="inline" set="null" expr="44" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44</e></m></meta>
		</DOM_VK_PRINTSCREEN>
		<DOM_VK_INSERT public="1" get="inline" set="null" expr="45" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</DOM_VK_INSERT>
		<DOM_VK_DELETE public="1" get="inline" set="null" expr="46" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DOM_VK_DELETE>
		<DOM_VK_0 public="1" get="inline" set="null" expr="48" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</DOM_VK_0>
		<DOM_VK_1 public="1" get="inline" set="null" expr="49" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</DOM_VK_1>
		<DOM_VK_2 public="1" get="inline" set="null" expr="50" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</DOM_VK_2>
		<DOM_VK_3 public="1" get="inline" set="null" expr="51" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</DOM_VK_3>
		<DOM_VK_4 public="1" get="inline" set="null" expr="52" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</DOM_VK_4>
		<DOM_VK_5 public="1" get="inline" set="null" expr="53" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</DOM_VK_5>
		<DOM_VK_6 public="1" get="inline" set="null" expr="54" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</DOM_VK_6>
		<DOM_VK_7 public="1" get="inline" set="null" expr="55" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</DOM_VK_7>
		<DOM_VK_8 public="1" get="inline" set="null" expr="56" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</DOM_VK_8>
		<DOM_VK_9 public="1" get="inline" set="null" expr="57" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</DOM_VK_9>
		<DOM_VK_COLON public="1" get="inline" set="null" expr="58" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>58</e></m></meta>
		</DOM_VK_COLON>
		<DOM_VK_SEMICOLON public="1" get="inline" set="null" expr="59" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>59</e></m></meta>
		</DOM_VK_SEMICOLON>
		<DOM_VK_LESS_THAN public="1" get="inline" set="null" expr="60" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</DOM_VK_LESS_THAN>
		<DOM_VK_EQUALS public="1" get="inline" set="null" expr="61" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>61</e></m></meta>
		</DOM_VK_EQUALS>
		<DOM_VK_GREATER_THAN public="1" get="inline" set="null" expr="62" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>62</e></m></meta>
		</DOM_VK_GREATER_THAN>
		<DOM_VK_QUESTION_MARK public="1" get="inline" set="null" expr="63" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>63</e></m></meta>
		</DOM_VK_QUESTION_MARK>
		<DOM_VK_AT public="1" get="inline" set="null" expr="64" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DOM_VK_AT>
		<DOM_VK_A public="1" get="inline" set="null" expr="65" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</DOM_VK_A>
		<DOM_VK_B public="1" get="inline" set="null" expr="66" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</DOM_VK_B>
		<DOM_VK_C public="1" get="inline" set="null" expr="67" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</DOM_VK_C>
		<DOM_VK_D public="1" get="inline" set="null" expr="68" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</DOM_VK_D>
		<DOM_VK_E public="1" get="inline" set="null" expr="69" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</DOM_VK_E>
		<DOM_VK_F public="1" get="inline" set="null" expr="70" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</DOM_VK_F>
		<DOM_VK_G public="1" get="inline" set="null" expr="71" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</DOM_VK_G>
		<DOM_VK_H public="1" get="inline" set="null" expr="72" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</DOM_VK_H>
		<DOM_VK_I public="1" get="inline" set="null" expr="73" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</DOM_VK_I>
		<DOM_VK_J public="1" get="inline" set="null" expr="74" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</DOM_VK_J>
		<DOM_VK_K public="1" get="inline" set="null" expr="75" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</DOM_VK_K>
		<DOM_VK_L public="1" get="inline" set="null" expr="76" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</DOM_VK_L>
		<DOM_VK_M public="1" get="inline" set="null" expr="77" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</DOM_VK_M>
		<DOM_VK_N public="1" get="inline" set="null" expr="78" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</DOM_VK_N>
		<DOM_VK_O public="1" get="inline" set="null" expr="79" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</DOM_VK_O>
		<DOM_VK_P public="1" get="inline" set="null" expr="80" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</DOM_VK_P>
		<DOM_VK_Q public="1" get="inline" set="null" expr="81" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</DOM_VK_Q>
		<DOM_VK_R public="1" get="inline" set="null" expr="82" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</DOM_VK_R>
		<DOM_VK_S public="1" get="inline" set="null" expr="83" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</DOM_VK_S>
		<DOM_VK_T public="1" get="inline" set="null" expr="84" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</DOM_VK_T>
		<DOM_VK_U public="1" get="inline" set="null" expr="85" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</DOM_VK_U>
		<DOM_VK_V public="1" get="inline" set="null" expr="86" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</DOM_VK_V>
		<DOM_VK_W public="1" get="inline" set="null" expr="87" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</DOM_VK_W>
		<DOM_VK_X public="1" get="inline" set="null" expr="88" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</DOM_VK_X>
		<DOM_VK_Y public="1" get="inline" set="null" expr="89" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</DOM_VK_Y>
		<DOM_VK_Z public="1" get="inline" set="null" expr="90" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</DOM_VK_Z>
		<DOM_VK_WIN public="1" get="inline" set="null" expr="91" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</DOM_VK_WIN>
		<DOM_VK_CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</DOM_VK_CONTEXT_MENU>
		<DOM_VK_SLEEP public="1" get="inline" set="null" expr="95" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>95</e></m></meta>
		</DOM_VK_SLEEP>
		<DOM_VK_NUMPAD0 public="1" get="inline" set="null" expr="96" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</DOM_VK_NUMPAD0>
		<DOM_VK_NUMPAD1 public="1" get="inline" set="null" expr="97" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</DOM_VK_NUMPAD1>
		<DOM_VK_NUMPAD2 public="1" get="inline" set="null" expr="98" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</DOM_VK_NUMPAD2>
		<DOM_VK_NUMPAD3 public="1" get="inline" set="null" expr="99" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</DOM_VK_NUMPAD3>
		<DOM_VK_NUMPAD4 public="1" get="inline" set="null" expr="100" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</DOM_VK_NUMPAD4>
		<DOM_VK_NUMPAD5 public="1" get="inline" set="null" expr="101" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</DOM_VK_NUMPAD5>
		<DOM_VK_NUMPAD6 public="1" get="inline" set="null" expr="102" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</DOM_VK_NUMPAD6>
		<DOM_VK_NUMPAD7 public="1" get="inline" set="null" expr="103" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</DOM_VK_NUMPAD7>
		<DOM_VK_NUMPAD8 public="1" get="inline" set="null" expr="104" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</DOM_VK_NUMPAD8>
		<DOM_VK_NUMPAD9 public="1" get="inline" set="null" expr="105" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</DOM_VK_NUMPAD9>
		<DOM_VK_MULTIPLY public="1" get="inline" set="null" expr="106" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</DOM_VK_MULTIPLY>
		<DOM_VK_ADD public="1" get="inline" set="null" expr="107" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</DOM_VK_ADD>
		<DOM_VK_SEPARATOR public="1" get="inline" set="null" expr="108" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</DOM_VK_SEPARATOR>
		<DOM_VK_SUBTRACT public="1" get="inline" set="null" expr="109" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</DOM_VK_SUBTRACT>
		<DOM_VK_DECIMAL public="1" get="inline" set="null" expr="110" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</DOM_VK_DECIMAL>
		<DOM_VK_DIVIDE public="1" get="inline" set="null" expr="111" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</DOM_VK_DIVIDE>
		<DOM_VK_F1 public="1" get="inline" set="null" expr="112" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</DOM_VK_F1>
		<DOM_VK_F2 public="1" get="inline" set="null" expr="113" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</DOM_VK_F2>
		<DOM_VK_F3 public="1" get="inline" set="null" expr="114" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</DOM_VK_F3>
		<DOM_VK_F4 public="1" get="inline" set="null" expr="115" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</DOM_VK_F4>
		<DOM_VK_F5 public="1" get="inline" set="null" expr="116" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</DOM_VK_F5>
		<DOM_VK_F6 public="1" get="inline" set="null" expr="117" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</DOM_VK_F6>
		<DOM_VK_F7 public="1" get="inline" set="null" expr="118" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</DOM_VK_F7>
		<DOM_VK_F8 public="1" get="inline" set="null" expr="119" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</DOM_VK_F8>
		<DOM_VK_F9 public="1" get="inline" set="null" expr="120" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</DOM_VK_F9>
		<DOM_VK_F10 public="1" get="inline" set="null" expr="121" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</DOM_VK_F10>
		<DOM_VK_F11 public="1" get="inline" set="null" expr="122" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</DOM_VK_F11>
		<DOM_VK_F12 public="1" get="inline" set="null" expr="123" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</DOM_VK_F12>
		<DOM_VK_F13 public="1" get="inline" set="null" expr="124" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</DOM_VK_F13>
		<DOM_VK_F14 public="1" get="inline" set="null" expr="125" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</DOM_VK_F14>
		<DOM_VK_F15 public="1" get="inline" set="null" expr="126" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</DOM_VK_F15>
		<DOM_VK_F16 public="1" get="inline" set="null" expr="127" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</DOM_VK_F16>
		<DOM_VK_F17 public="1" get="inline" set="null" expr="128" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</DOM_VK_F17>
		<DOM_VK_F18 public="1" get="inline" set="null" expr="129" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</DOM_VK_F18>
		<DOM_VK_F19 public="1" get="inline" set="null" expr="130" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</DOM_VK_F19>
		<DOM_VK_F20 public="1" get="inline" set="null" expr="131" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</DOM_VK_F20>
		<DOM_VK_F21 public="1" get="inline" set="null" expr="132" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</DOM_VK_F21>
		<DOM_VK_F22 public="1" get="inline" set="null" expr="133" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</DOM_VK_F22>
		<DOM_VK_F23 public="1" get="inline" set="null" expr="134" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</DOM_VK_F23>
		<DOM_VK_F24 public="1" get="inline" set="null" expr="135" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</DOM_VK_F24>
		<DOM_VK_NUM_LOCK public="1" get="inline" set="null" expr="144" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</DOM_VK_NUM_LOCK>
		<DOM_VK_SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</DOM_VK_SCROLL_LOCK>
		<DOM_VK_WIN_OEM_FJ_JISHO public="1" get="inline" set="null" expr="146" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>146</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_JISHO>
		<DOM_VK_WIN_OEM_FJ_MASSHOU public="1" get="inline" set="null" expr="147" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>147</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_MASSHOU>
		<DOM_VK_WIN_OEM_FJ_TOUROKU public="1" get="inline" set="null" expr="148" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>148</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_TOUROKU>
		<DOM_VK_WIN_OEM_FJ_LOYA public="1" get="inline" set="null" expr="149" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>149</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_LOYA>
		<DOM_VK_WIN_OEM_FJ_ROYA public="1" get="inline" set="null" expr="150" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>150</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_ROYA>
		<DOM_VK_CIRCUMFLEX public="1" get="inline" set="null" expr="160" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>160</e></m></meta>
		</DOM_VK_CIRCUMFLEX>
		<DOM_VK_EXCLAMATION public="1" get="inline" set="null" expr="161" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>161</e></m></meta>
		</DOM_VK_EXCLAMATION>
		<DOM_VK_DOUBLE_QUOTE public="1" get="inline" set="null" expr="162" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>162</e></m></meta>
		</DOM_VK_DOUBLE_QUOTE>
		<DOM_VK_HASH public="1" get="inline" set="null" expr="163" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>163</e></m></meta>
		</DOM_VK_HASH>
		<DOM_VK_DOLLAR public="1" get="inline" set="null" expr="164" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>164</e></m></meta>
		</DOM_VK_DOLLAR>
		<DOM_VK_PERCENT public="1" get="inline" set="null" expr="165" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>165</e></m></meta>
		</DOM_VK_PERCENT>
		<DOM_VK_AMPERSAND public="1" get="inline" set="null" expr="166" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>166</e></m></meta>
		</DOM_VK_AMPERSAND>
		<DOM_VK_UNDERSCORE public="1" get="inline" set="null" expr="167" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>167</e></m></meta>
		</DOM_VK_UNDERSCORE>
		<DOM_VK_OPEN_PAREN public="1" get="inline" set="null" expr="168" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>168</e></m></meta>
		</DOM_VK_OPEN_PAREN>
		<DOM_VK_CLOSE_PAREN public="1" get="inline" set="null" expr="169" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>169</e></m></meta>
		</DOM_VK_CLOSE_PAREN>
		<DOM_VK_ASTERISK public="1" get="inline" set="null" expr="170" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>170</e></m></meta>
		</DOM_VK_ASTERISK>
		<DOM_VK_PLUS public="1" get="inline" set="null" expr="171" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>171</e></m></meta>
		</DOM_VK_PLUS>
		<DOM_VK_PIPE public="1" get="inline" set="null" expr="172" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>172</e></m></meta>
		</DOM_VK_PIPE>
		<DOM_VK_HYPHEN_MINUS public="1" get="inline" set="null" expr="173" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>173</e></m></meta>
		</DOM_VK_HYPHEN_MINUS>
		<DOM_VK_OPEN_CURLY_BRACKET public="1" get="inline" set="null" expr="174" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>174</e></m></meta>
		</DOM_VK_OPEN_CURLY_BRACKET>
		<DOM_VK_CLOSE_CURLY_BRACKET public="1" get="inline" set="null" expr="175" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>175</e></m></meta>
		</DOM_VK_CLOSE_CURLY_BRACKET>
		<DOM_VK_TILDE public="1" get="inline" set="null" expr="176" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>176</e></m></meta>
		</DOM_VK_TILDE>
		<DOM_VK_VOLUME_MUTE public="1" get="inline" set="null" expr="181" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>181</e></m></meta>
		</DOM_VK_VOLUME_MUTE>
		<DOM_VK_VOLUME_DOWN public="1" get="inline" set="null" expr="182" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>182</e></m></meta>
		</DOM_VK_VOLUME_DOWN>
		<DOM_VK_VOLUME_UP public="1" get="inline" set="null" expr="183" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>183</e></m></meta>
		</DOM_VK_VOLUME_UP>
		<DOM_VK_COMMA public="1" get="inline" set="null" expr="188" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</DOM_VK_COMMA>
		<DOM_VK_PERIOD public="1" get="inline" set="null" expr="190" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</DOM_VK_PERIOD>
		<DOM_VK_SLASH public="1" get="inline" set="null" expr="191" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</DOM_VK_SLASH>
		<DOM_VK_BACK_QUOTE public="1" get="inline" set="null" expr="192" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</DOM_VK_BACK_QUOTE>
		<DOM_VK_OPEN_BRACKET public="1" get="inline" set="null" expr="219" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</DOM_VK_OPEN_BRACKET>
		<DOM_VK_BACK_SLASH public="1" get="inline" set="null" expr="220" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</DOM_VK_BACK_SLASH>
		<DOM_VK_CLOSE_BRACKET public="1" get="inline" set="null" expr="221" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</DOM_VK_CLOSE_BRACKET>
		<DOM_VK_QUOTE public="1" get="inline" set="null" expr="222" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</DOM_VK_QUOTE>
		<DOM_VK_META public="1" get="inline" set="null" expr="224" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>224</e></m></meta>
		</DOM_VK_META>
		<DOM_VK_ALTGR public="1" get="inline" set="null" expr="225" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>225</e></m></meta>
		</DOM_VK_ALTGR>
		<DOM_VK_WIN_ICO_HELP public="1" get="inline" set="null" expr="227" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>227</e></m></meta>
		</DOM_VK_WIN_ICO_HELP>
		<DOM_VK_WIN_ICO_00 public="1" get="inline" set="null" expr="228" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>228</e></m></meta>
		</DOM_VK_WIN_ICO_00>
		<DOM_VK_PROCESSKEY public="1" get="inline" set="null" expr="229" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>229</e></m></meta>
		</DOM_VK_PROCESSKEY>
		<DOM_VK_WIN_ICO_CLEAR public="1" get="inline" set="null" expr="230" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>230</e></m></meta>
		</DOM_VK_WIN_ICO_CLEAR>
		<DOM_VK_WIN_OEM_RESET public="1" get="inline" set="null" expr="233" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>233</e></m></meta>
		</DOM_VK_WIN_OEM_RESET>
		<DOM_VK_WIN_OEM_JUMP public="1" get="inline" set="null" expr="234" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234</e></m></meta>
		</DOM_VK_WIN_OEM_JUMP>
		<DOM_VK_WIN_OEM_PA1 public="1" get="inline" set="null" expr="235" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>235</e></m></meta>
		</DOM_VK_WIN_OEM_PA1>
		<DOM_VK_WIN_OEM_PA2 public="1" get="inline" set="null" expr="236" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>236</e></m></meta>
		</DOM_VK_WIN_OEM_PA2>
		<DOM_VK_WIN_OEM_PA3 public="1" get="inline" set="null" expr="237" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>237</e></m></meta>
		</DOM_VK_WIN_OEM_PA3>
		<DOM_VK_WIN_OEM_WSCTRL public="1" get="inline" set="null" expr="238" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>238</e></m></meta>
		</DOM_VK_WIN_OEM_WSCTRL>
		<DOM_VK_WIN_OEM_CUSEL public="1" get="inline" set="null" expr="239" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>239</e></m></meta>
		</DOM_VK_WIN_OEM_CUSEL>
		<DOM_VK_WIN_OEM_ATTN public="1" get="inline" set="null" expr="240" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>240</e></m></meta>
		</DOM_VK_WIN_OEM_ATTN>
		<DOM_VK_WIN_OEM_FINISH public="1" get="inline" set="null" expr="241" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>241</e></m></meta>
		</DOM_VK_WIN_OEM_FINISH>
		<DOM_VK_WIN_OEM_COPY public="1" get="inline" set="null" expr="242" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>242</e></m></meta>
		</DOM_VK_WIN_OEM_COPY>
		<DOM_VK_WIN_OEM_AUTO public="1" get="inline" set="null" expr="243" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>243</e></m></meta>
		</DOM_VK_WIN_OEM_AUTO>
		<DOM_VK_WIN_OEM_ENLW public="1" get="inline" set="null" expr="244" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>244</e></m></meta>
		</DOM_VK_WIN_OEM_ENLW>
		<DOM_VK_WIN_OEM_BACKTAB public="1" get="inline" set="null" expr="245" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245</e></m></meta>
		</DOM_VK_WIN_OEM_BACKTAB>
		<DOM_VK_ATTN public="1" get="inline" set="null" expr="246" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>246</e></m></meta>
		</DOM_VK_ATTN>
		<DOM_VK_CRSEL public="1" get="inline" set="null" expr="247" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>247</e></m></meta>
		</DOM_VK_CRSEL>
		<DOM_VK_EXSEL public="1" get="inline" set="null" expr="248" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>248</e></m></meta>
		</DOM_VK_EXSEL>
		<DOM_VK_EREOF public="1" get="inline" set="null" expr="249" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>249</e></m></meta>
		</DOM_VK_EREOF>
		<DOM_VK_PLAY public="1" get="inline" set="null" expr="250" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>250</e></m></meta>
		</DOM_VK_PLAY>
		<DOM_VK_ZOOM public="1" get="inline" set="null" expr="251" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>251</e></m></meta>
		</DOM_VK_ZOOM>
		<DOM_VK_PA1 public="1" get="inline" set="null" expr="253" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>253</e></m></meta>
		</DOM_VK_PA1>
		<DOM_VK_WIN_OEM_CLEAR public="1" get="inline" set="null" expr="254" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>254</e></m></meta>
		</DOM_VK_WIN_OEM_CLEAR>
		<charCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the Unicode reference number of the key; this attribute is used only by the `keypress` event. For keys whose `char` attribute contains multiple characters, this is the Unicode value of the first character in that attribute. In Firefox 26 this returns codes for printable characters.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</charCode>
		<keyCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</keyCode>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated.</haxe_doc>
		</altKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Ctrl key was active when the key event was generated.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Shift key was active when the key event was generated.</haxe_doc>
		</shiftKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.</haxe_doc>
		</metaKey>
		<location public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the location of the key on the keyboard or other input device.</haxe_doc>
		</location>
		<repeat public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the key is being held down such that it is automatically repeating.</haxe_doc>
		</repeat>
		<isComposing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the event is fired between after `compositionstart` and before `compositionend`.</haxe_doc>
		</isComposing>
		<key public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the key value of the key represented by the event.</haxe_doc>
		</key>
		<code public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the code value of the key represented by the event.</haxe_doc>
		</code>
		<getModifierState public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created.</haxe_doc>
		</getModifierState>
		<initKeyboardEvent public="1" set="method">
			<f a="typeArg:?bubblesArg:?cancelableArg:?viewArg:?keyArg:?locationArg:?ctrlKey:?altKey:?shiftKey:?metaKey" v=":false:false::&quot;&quot;:0:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, locationArg : 0, keyArg : "", cancelableArg : false, bubblesArg : false }</e></m></meta>
			<haxe_doc>Initializes a `KeyboardEvent` object. This is now deprecated. You should instead use the `KeyboardEvent.KeyboardEvent` constructor.
		@throws DOMError</haxe_doc>
		</initKeyboardEvent>
		<initKeyEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?ctrlKey:?altKey:?shiftKey:?metaKey:?keyCode:?charCode" v=":false:false::false:false:false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ charCode : 0, keyCode : 0, metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, cancelable : false, canBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `KeyboardEvent` object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the `KeyboardEvent.KeyboardEvent` constructor.</haxe_doc>
		</initKeyEvent>
		<new public="1" set="method">
			<f a="typeArg:?keyboardEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.KeyboardEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`KeyboardEvent` objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.

	Documentation [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyboardEvent"</e></m></meta>
	</class>
	<typedef path="js.html.KeyboardEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/KeyboardEventInit.hx"><a>
	<which>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</which>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<repeat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</repeat>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<location>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</location>
	<keyCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</keyCode>
	<key>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</key>
	<isComposing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isComposing>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<code>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</code>
	<charCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charCode>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.KeyframeAnimationOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/KeyframeAnimationOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<typedef path="js.html.KeyframeEffectOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/KeyframeEffectOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<class path="js.html.LIElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` indicating the ordinal position of the list element inside a given `ol`. It reflects the `value` attribute of the HTML `li` element, and can be smaller than `0`. If the `li` element is not a child of an `ol` element, the property has no meaning.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of the bullets, `"disc"`, `"square"` or `"circle"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLLIElement` interface exposes specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.

	Documentation [HTMLLIElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc>Is a string containing the ID of the labeled control. This reflects the `for` attribute.</haxe_doc>
		</htmlFor>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Is a `HTMLElement` representing the control with which the label is associated.</haxe_doc>
		</control>
		<haxe_doc><![CDATA[The `HTMLLabelElement` interface gives access to properties specific to `label` elements. It inherits methods and properties from the base `HTMLElement` interface.

	Documentation [HTMLLabelElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLLegendElement` is an interface allowing to access properties of the `legend` elements. It inherits properties and methods from the `HTMLElement` interface.

	Documentation [HTMLLegendElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<abstract path="js.html.LineAlignSetting" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/LineAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._LineAlignSetting.LineAlignSetting_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/LineAlignSetting.hx" private="1" module="js.html.LineAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.LinkElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` which represents whether the link is disabled; currently only used with style sheet links.</haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI for the target resource.</haxe_doc>
		</href>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that corresponds to the CORS setting for this link element. See CORS settings attributes for details.</haxe_doc>
		</crossOrigin>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the forward relationship of the linked resource from the document to the resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a list of one or more media formats to which the resource applies.</haxe_doc>
		</media>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the language code for the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the MIME type of the linked resource.</haxe_doc>
		</type>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<sizes public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.</haxe_doc>
		</sizes>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding for the target resource.</haxe_doc>
		</charset>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the reverse relationship of the linked resource from the resource to the document.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the target frame to which the resource applies.</haxe_doc>
		</target>
		<integrity public="1"><c path="String"/></integrity>
		<as public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of content being loaded by the HTML link.</haxe_doc>
		</as>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLLinkElement` interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLLinkElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.Location" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Location.hx" extern="1">
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the canonical form of the origin of the specific location.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters or "querystring" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.</haxe_doc>
		</search>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<assign public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loads the resource at the URL provided in parameter.
		@throws DOMError</haxe_doc>
		</assign>
		<replace public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the current resource with the one at the provided URL. The difference from the `assign()` method is that after using `replace()` the current page will not be saved in session `History`, meaning the user won't be able to use the back button to navigate to it.
		@throws DOMError</haxe_doc>
		</replace>
		<reload public="1" set="method">
			<f a="?forceget" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceget : false }</e></m></meta>
			<haxe_doc>Reloads the resource from the current URL. Its optional unique parameter is a `Boolean`, which, when it is `true`, causes the page to always be reloaded from the server. If it is `false` or not specified, the browser may reload the page from its cache.
		@throws DOMError</haxe_doc>
		</reload>
		<haxe_doc><![CDATA[The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.

	Documentation [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Location$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Location>]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the `map` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty.</haxe_doc>
		</name>
		<areas public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a live `HTMLCollection` representing the `area` elements associated to this `map`.</haxe_doc>
		</areas>
		<haxe_doc><![CDATA[The `HTMLMapElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.

	Documentation [HTMLMapElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MediaDeviceInfo" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaDeviceInfo.hx" extern="1">
		<deviceId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).</haxe_doc>
		</deviceId>
		<kind public="1" set="null">
			<x path="js.html.MediaDeviceKind"/>
			<haxe_doc>Returns an enumerated value that is either `"videoinput"`, `"audioinput"` or `"audiooutput"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a label describing this device (for example "External USB Webcam").</haxe_doc>
		</label>
		<groupId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.</haxe_doc>
		</groupId>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `MediaDevicesInfo` interface contains information that describes a single media input or output device.

	Documentation [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDeviceInfo"</e></m></meta>
	</class>
	<abstract path="js.html.MediaDeviceKind" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaDeviceKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaDeviceKind.MediaDeviceKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaDeviceKind.hx" private="1" module="js.html.MediaDeviceKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaDevices" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaDevices.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ondevicechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `devicechange` event. This event is delivered to the `MediaDevices` object when a media input or output device is attached to or removed from the user's computer.</haxe_doc>
		</ondevicechange>
		<getSupportedConstraints public="1" set="method"><f a=""><t path="js.html.MediaTrackSupportedConstraints"/></f></getSupportedConstraints>
		<enumerateDevices public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.MediaDeviceInfo"/></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</enumerateDevices>
		<getUserMedia public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaStreamConstraints"/></x>
				<c path="js.lib.Promise"><c path="js.html.MediaStream"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getUserMedia>
		<haxe_doc><![CDATA[The `MediaDevices` interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.

	Documentation [MediaDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDevices"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MEDIA_ERR_ABORTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIA_ERR_NETWORK>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MEDIA_ERR_DECODE>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number which represents the general type of error that occurred, as follows: `/en-US/docs/Web/API/MediaError/code`</haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't simply a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one `user agent` to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (`""`).</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `MediaError` interface represents an error which occurred while handling media in an HTML media element based on `HTMLMediaElement`, such as `audio` or `video`.

	Documentation [MediaError](https://developer.mozilla.org/en-US/docs/Web/API/MediaError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaError>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<typedef path="js.html.MediaKeyStatusMapIterator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaKeyStatusMapIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.MediaList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaList.hx" extern="1">
		<mediaText public="1"><c path="String"/></mediaText>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<deleteMedium public="1" set="method">
			<f a="oldMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteMedium>
		<appendMedium public="1" set="method">
			<f a="newMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendMedium>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaQueryList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc> A `DOMString` representing a serialized media query.</haxe_doc>
		</media>
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc> A `Boolean` that returns `true` if the `document` currently matches the media query list, or `false` if not.</haxe_doc>
		</matches>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc> An event handler property representing a function that is invoked when the `change` event fires, i.e when the status of media query support changes. The event object is a `MediaQueryListEvent` instance, which is recognised as a `MediaListQuery` instance in older browsers, for backwards compatibility purposes.</haxe_doc>
		</onchange>
		<addListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<addListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
			</overloads>
		</addListener>
		<removeListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<removeListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
			</overloads>
		</removeListener>
		<haxe_doc><![CDATA[A `MediaQueryList` object stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to `true`).

	Documentation [MediaQueryList](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<typedef path="js.html.MediaStreamConstraints" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaStreamConstraints.hx">
		<a>
			<video>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not a video track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the video track included in the returned `MediaStream`. If constraints are specified, a video track is inherently requested.</haxe_doc>
			</video>
			<picture>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</picture>
			<peerIdentity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` identifying the peer who has sole access to the stream. If this property is specified, only the indicated peer can receive and use the stream. Streams isolated in this way can only be displayed in a media element (`audio` or `video`) where the content is protected just as if `CORS` cross-origin rules were in effect. When a peer identity is set, `MediaStreamTrack`s from that peer have their `MediaStreamTrack.isolated` flag set to `true`.</haxe_doc>
			</peerIdentity>
			<fake>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</fake>
			<audio>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not an audio track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the audio track included in the returned `MediaStream`. If constraints are specified, an audio track is inherently requested.</haxe_doc>
			</audio>
		</a>
		<haxe_doc><![CDATA[The `MediaStreamConstraints` dictionary is used when calling `getUserMedia()` to specify what kinds of tracks should be included in the returned `MediaStream`, and, optionally, to establish constraints for those tracks' settings.

	Documentation [MediaStreamConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.MediaStreamTrackState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaStreamTrackState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaStreamTrackState.MediaStreamTrackState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaStreamTrackState.hx" private="1" module="js.html.MediaStreamTrackState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.MediaTrackConstraintSet" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaTrackConstraintSet.hx"><a>
	<width>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</width>
	<viewportWidth>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportWidth>
	<viewportOffsetY>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetY>
	<viewportOffsetX>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetX>
	<viewportHeight>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportHeight>
	<scrollWithPage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</scrollWithPage>
	<noiseSuppression>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</noiseSuppression>
	<mediaSource>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mediaSource>
	<height>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</height>
	<frameRate>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<facingMode>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</facingMode>
	<echoCancellation>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</echoCancellation>
	<deviceId>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</deviceId>
	<channelCount>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</channelCount>
	<browserWindow>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</browserWindow>
	<autoGainControl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</autoGainControl>
</a></typedef>
	<typedef path="js.html.MediaTrackConstraints" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaTrackConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</width>
			<viewportWidth>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</height>
			<frameRate>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</autoGainControl>
			<advanced>
				<x path="Null"><c path="Array"><t path="js.html.MediaTrackConstraintSet"/></c></x>
				<meta><m n=":optional"/></meta>
			</advanced>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackConstraints` dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.

	Documentation [MediaTrackConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSettings" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaTrackSettings.hx">
		<a>
			<width>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the `MediaTrackSettings.width` property, specifying the width of the track's video data in pixels.</haxe_doc>
			</width>
			<viewportWidth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.noiseSuppression` property, which is `true` if noise suppression is enabled and is `false` otherwise.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.height`` property, specifying the height of the track's video data in pixels.</haxe_doc>
			</height>
			<frameRate>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A double-precision floating point value indicating the current value of the ``MediaTrackConstraints.frameRate`` property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean indicating the current value of the ``MediaTrackConstraints.echoCancellation`` property, specifying `true` if echo cancellation is enabled, otherwise `false`.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` indicating the current value of the ``MediaTrackConstraints.deviceId`` property. The device ID is a origin-unique string identifying the source of the track; this is usually a `GUID`. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling `MediaDevices.getUserMedia()`.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.channelCount`` property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.autoGainControl` property, which is `true` if automatic gain control is enabled and is `false` otherwise.</haxe_doc>
			</autoGainControl>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSettings` dictionary is used to return the current values configured for each of a `MediaStreamTrack`'s settings. These values will adhere as closely as possible to any constraints previously described using a `MediaTrackConstraints` object and set using `applyConstraints()`, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.

	Documentation [MediaTrackSettings](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSupportedConstraints" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MediaTrackSupportedConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `width` constraint is supported in the current environment.</haxe_doc>
			</width>
			<volume>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `volume` constraint is supported in the current environment.</haxe_doc>
			</volume>
			<viewportWidth>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<sampleSize>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleSize` constraint is supported in the current environment.</haxe_doc>
			</sampleSize>
			<sampleRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleRate` constraint is supported in the current environment.</haxe_doc>
			</sampleRate>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `noiseSuppression` constraint is supported in the current environment.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<latency>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `latency` constraint is supported in the current environment.</haxe_doc>
			</latency>
			<height>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `height` constraint is supported in the current environment.</haxe_doc>
			</height>
			<groupId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `groupId` constraint is supported in the current environment.</haxe_doc>
			</groupId>
			<frameRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `frameRate` constraint is supported in the current environment.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `facingMode` constraint is supported in the current environment.</haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `echoCancellation` constraint is supported in the current environment.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `deviceId` constraint is supported in the current environment.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `channelCount` constraint is supported in the current environment.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `autoGainControl` constraint is supported in the current environment.</haxe_doc>
			</autoGainControl>
			<aspectRatio>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `aspectRatio` constraint is supported in the current environment.</haxe_doc>
			</aspectRatio>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSupportedConstraints` dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the `MediaStreamTrack` object. An object conforming to `MediaTrackSupportedConstraints` is returned by `MediaDevices.getSupportedConstraints()`.

	Documentation [MediaTrackSupportedConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MenuElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<httpEquiv public="1"><c path="String"/></httpEquiv>
		<content public="1"><c path="String"/></content>
		<scheme public="1"><c path="String"/></scheme>
		<haxe_doc><![CDATA[The `HTMLMetaElement` interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLMetaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the currrent value, reflecting the `value` attribute.</haxe_doc>
		</value>
		<min public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the minimum value, reflecting the `min` attribute.</haxe_doc>
		</min>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the maximum value, reflecting the `max` attribute.</haxe_doc>
		</max>
		<low public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the low boundary, reflecting the `low`attribute.</haxe_doc>
		</low>
		<high public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the high boundary, reflecting the `high` attribute.</haxe_doc>
		</high>
		<optimum public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the optimum, reflecting the `optimum` attribute.</haxe_doc>
		</optimum>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements that are associated with the element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The HTML `meter` elements expose the `HTMLMeterElement` interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `meter` elements.

	Documentation [HTMLMeterElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.MimeType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MimeType.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a description of the associated plugin or an empty string if there is none.</haxe_doc>
		</description>
		<enabledPlugin public="1" set="null">
			<c path="js.html.Plugin"/>
			<haxe_doc>Returns an instance of `Plugin` containing information about the plugin itself.</haxe_doc>
		</enabledPlugin>
		<suffixes public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list, but support more file extenions than can be anticipated. It might therefore return an empty string.</haxe_doc>
		</suffixes>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type of the associated plugin.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `MimeType` interface provides contains information about a MIME type associated with a particular plugin. `NavigatorPlugins.mimeTypes` returns an array of this object.

	Documentation [MimeType](https://developer.mozilla.org/en-US/docs/Web/API/MimeType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeType>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.MimeTypeArray" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MimeTypeArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of items in the array.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified index.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `MimeTypeArray` interface returns an array of `MimeType` instances, each of which contains information about a supported browser plugins. This object is returned by `NavigatorPlugins.mimeTypes`.

	Documentation [MimeTypeArray](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.</haxe_doc>
		</cite>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `datetime` HTML attribute, containing a date-and-time string representing a timestamp for the change.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLModElement` interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `del` and `ins`.

	Documentation [HTMLModElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<class path="js.html.MouseEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MouseEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientY>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Alias for `MouseEvent.clientX`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Alias for `MouseEvent.clientY`</haxe_doc>
		</y>
		<offsetX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetX>
		<offsetY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetY>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the control key was down when the mouse event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the shift key was down when the mouse event was fired.</haxe_doc>
		</shiftKey>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the alt key was down when the mouse event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the meta key was down when the mouse event was fired.</haxe_doc>
		</metaKey>
		<button public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The button number that was pressed (if applicable) when the mouse event was fired.</haxe_doc>
		</button>
		<buttons public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The buttons being depressed (if any) when the mouse event was fired.</haxe_doc>
		</buttons>
		<relatedTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The secondary target for the event, if there is one.</haxe_doc>
		</relatedTarget>
		<region public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the id of the hit region affected by the event. If no hit region is affected, `null` is returned.</haxe_doc>
		</region>
		<movementX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementX>
		<movementY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementY>
		<initMouseEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?detailArg:?screenXArg:?screenYArg:?clientXArg:?clientYArg:?ctrlKeyArg:?altKeyArg:?shiftKeyArg:?metaKeyArg:?buttonArg:?relatedTargetArg" v=":false:false::0:0:0:0:0:false:false:false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ buttonArg : 0, metaKeyArg : false, shiftKeyArg : false, altKeyArg : false, ctrlKeyArg : false, clientYArg : 0, clientXArg : 0, screenYArg : 0, screenXArg : 0, detailArg : 0, cancelableArg : false, canBubbleArg : false }</e></m></meta>
			<haxe_doc>Initializes the value of a `MouseEvent` created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initMouseEvent>
		<getModifierState public="1" set="method">
			<f a="keyArg">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns the current state of the specified modifier key. See the `KeyboardEvent.getModifierState`() for details.</haxe_doc>
		</getModifierState>
		<initNSMouseEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?detailArg:?screenXArg:?screenYArg:?clientXArg:?clientYArg:?ctrlKeyArg:?altKeyArg:?shiftKeyArg:?metaKeyArg:?buttonArg:?relatedTargetArg:?pressure:?inputSourceArg" v=":false:false::0:0:0:0:0:false:false:false:false:0::0.0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inputSourceArg : 0, pressure : 0.0, buttonArg : 0, metaKeyArg : false, shiftKeyArg : false, altKeyArg : false, ctrlKeyArg : false, clientYArg : 0, clientXArg : 0, screenYArg : 0, screenXArg : 0, detailArg : 0, cancelableArg : false, canBubbleArg : false }</e></m></meta>
		</initNSMouseEvent>
		<new public="1" set="method">
			<f a="typeArg:?mouseEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.MouseEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include `click`, `dblclick`, `mouseup`, `mousedown`.

	Documentation [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MouseEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MouseEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/MouseEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.NamedNodeMap" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of objects in the map.</haxe_doc>
		</length>
		<getNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr`, corresponding to the given name.</haxe_doc>
		</getNamedItem>
		<setNamedItem public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given name.
		@throws DOMError</haxe_doc>
		</setNamedItem>
		<removeNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given map.
		@throws DOMError</haxe_doc>
		</removeNamedItem>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.</haxe_doc>
		</item>
		<getNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr` identified by a namespace and related local name.</haxe_doc>
		</getNamedItemNS>
		<setNamedItemNS public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</setNamedItemNS>
		<removeNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</removeNamedItemNS>
		<haxe_doc><![CDATA[The `NamedNodeMap` interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.

	Documentation [NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap>]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Navigator.hx" extern="1">
		<permissions public="1" set="null">
			<c path="js.html.Permissions"/>
			<haxe_doc>Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.</haxe_doc>
		</permissions>
		<mimeTypes public="1" set="null"><c path="js.html.MimeTypeArray"/></mimeTypes>
		<plugins public="1" set="null"><c path="js.html.PluginArray"/></plugins>
		<doNotTrack public="1" set="null">
			<c path="String"/>
			<haxe_doc>Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.</haxe_doc>
		</doNotTrack>
		<maxTouchPoints public="1" set="null"><x path="Int"/></maxTouchPoints>
		<oscpu public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string that represents the current operating system.</haxe_doc>
		</oscpu>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g., "Netscape6").</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1").</haxe_doc>
		</vendorSub>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g., "20060909").</haxe_doc>
		</productSub>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if setting a cookie will be ignored and true otherwise.</haxe_doc>
		</cookieEnabled>
		<buildID public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build identifier of the browser (e.g., "2006090803").</haxe_doc>
		</buildID>
		<mediaDevices public="1" set="null">
			<c path="js.html.MediaDevices"/>
			<haxe_doc>Returns a reference to a `MediaDevices` object which can then be used to get information about available media devices (`MediaDevices.enumerateDevices()`), find out what constrainable properties are supported for media on the user's computer and user agent (`MediaDevices.getSupportedConstraints()`), and to request access to media using `MediaDevices.getUserMedia()`.</haxe_doc>
		</mediaDevices>
		<serviceWorker public="1" set="null">
			<c path="js.html.ServiceWorkerContainer"/>
			<haxe_doc>Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the associated document.</haxe_doc>
		</serviceWorker>
		<clipboard public="1" set="null"><c path="js.html.Clipboard"/></clipboard>
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<geolocation public="1" set="null">
			<t path="js.html.Geolocation"/>
			<haxe_doc>Returns a `Geolocation` object allowing accessing the location of the device.</haxe_doc>
		</geolocation>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<vibrate public="1" set="method">
			<f a="pattern">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<overloads><vibrate public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Bool"/>
</f></vibrate></overloads>
		</vibrate>
		<javaEnabled public="1" set="method"><f a=""><x path="Bool"/></f></javaEnabled>
		<getGamepads public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Gamepad"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getGamepads>
		<requestMIDIAccess public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.midi.MIDIOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.midi.MIDIAccess"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestMIDIAccess>
		<sendBeacon public="1" set="method">
			<f a="url:?data">
				<c path="String"/>
				<c path="js.html.Blob"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.FormData"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
			</overloads>
		</sendBeacon>
		<requestMediaKeySystemAccess public="1" set="method"><f a="keySystem:supportedConfigurations">
	<c path="String"/>
	<c path="Array"><t path="js.html.eme.MediaKeySystemConfiguration"/></c>
	<c path="js.lib.Promise"><c path="js.html.eme.MediaKeySystemAccess"/></c>
</f></requestMediaKeySystemAccess>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `Navigator` interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

	Documentation [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Navigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<class path="js.html.NodeFilter" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" expr="cast 4294967295" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</SHOW_ALL>
		<SHOW_ELEMENT public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" get="inline" set="null" expr="32" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" expr="64" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" get="inline" set="null" expr="128" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" expr="256" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" expr="512" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" expr="1024" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" get="inline" set="null" expr="2048" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2048</e></m></meta>
		</SHOW_NOTATION>
		<acceptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> that will be used to tell if a given <code>Node</code> must be accepted or not by the <code>NodeIterator</code> or <code>TreeWalker</code> iteration algorithm. This method is expected to be written by the user of a <code>NodeFilter</code>. Possible return values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>FILTER_ACCEPT</code></td>
						<td>Value returned by the <code>NodeFilter.acceptNode()</code> method when a node should be accepted.</td>
					</tr>
					<tr>
						<td><code>FILTER_REJECT</code></td>
						<td>Value to be returned by the <code>NodeFilter.acceptNode()</code> method when a node should be rejected. For <code>TreeWalker</code>, child nodes are also rejected. For <code>NodeIterator</code>, this flag is synonymous with FILTER_SKIP.</td>
					</tr>
					<tr>
						<td><code>FILTER_SKIP</code></td>
						<td>Value to be returned by <code>NodeFilter.acceptNode()</code> for nodes to be skipped by the <code>NodeIterator</code> or <code>TreeWalker</code> object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".</td>
					</tr>
				
			</table>]]></haxe_doc>
		</acceptNode>
		<haxe_doc><![CDATA[A `NodeFilter` interface represents an object used to filter the nodes in a `NodeIterator` or `TreeWalker`. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.

	Documentation [NodeFilter](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NodeIterator.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `NodeIterator` was created.</haxe_doc>
		</root>
		<referenceNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` to which the iterator is anchored.</haxe_doc>
		</referenceNode>
		<pointerBeforeReferenceNode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` flag that indicates whether the `NodeIterator` is anchored before, the flag being `true`, or after, the flag being `false`, the anchor node.</haxe_doc>
		</pointerBeforeReferenceNode>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Numerical value</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ALL</code></td>
						<td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
						<td>Shows all nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ATTRIBUTE</code> <em>(deprecated)</em></td>
						<td><code>2</code></td>
						<td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_CDATA_SECTION</code> <em>(deprecated)</em></td>
						<td><code>8</code></td>
						<td>Shows <code>CDATASection</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_COMMENT</code></td>
						<td><code>128</code></td>
						<td>Shows <code>Comment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT</code></td>
						<td><code>256</code></td>
						<td>Shows <code>Document</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
						<td><code>1024</code></td>
						<td>Shows <code>DocumentFragment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
						<td><code>512</code></td>
						<td>Shows <code>DocumentType</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ELEMENT</code></td>
						<td><code>1</code></td>
						<td>Shows <code>Element</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY</code> <em>(deprecated)</em></td>
						<td><code>32</code></td>
						<td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> <em>(deprecated)</em></td>
						<td><code>16</code></td>
						<td>Shows <code>EntityReference</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_NOTATION</code> <em>(deprecated)</em></td>
						<td><code>2048</code></td>
						<td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
						<td><code>64</code></td>
						<td>Shows <code>ProcessingInstruction</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_TEXT</code></td>
						<td><code>4</code></td>
						<td>Shows <code>Text</code> nodes.</td>
					</tr>
				
			</table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the next `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</nextNode>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the previous `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</previousNode>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the `NodeIterator` was no more used, but this is now useless.</haxe_doc>
		</detach>
		<haxe_doc><![CDATA[The `NodeIterator` interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.

	Documentation [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of nodes in the `NodeList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns an item in the list by its index, or `null` if the index is out-of-bounds; can be used as an alternative to simply accessing `nodeList[idx]` (which instead returns  `undefined` when `idx` is out-of-bounds).</haxe_doc>
		</item>
		<haxe_doc><![CDATA[`NodeList` objects are collections of nodes such as those returned by properties such as `Node.childNodes` and the `document.querySelectorAll()` method.

	Documentation [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<permission public="1" set="null" static="1">
			<x path="js.html.NotificationPermission"/>
			<haxe_doc>A string representing the current permission to display notifications. Possible values are:
		 
		  `denied` — The user refuses to have notifications displayed.
		  `granted` — The user accepts having notifications displayed.
		  `default` — The user choice is unknown and therefore the browser will act as if the value were denied.</haxe_doc>
		</permission>
		<onclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `click` event. It is triggered each time the user clicks on the notification.</haxe_doc>
		</onclick>
		<onshow public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `show` event. It is triggered when the notification is displayed.</haxe_doc>
		</onshow>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. It is triggered each time the notification encounters an error.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `close` event. It is triggered when the user closes the notification.</haxe_doc>
		</onclose>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>The title of the notification as specified in the first parameter of the constructor.</haxe_doc>
		</title>
		<dir public="1" set="null">
			<x path="js.html.NotificationDirection"/>
			<haxe_doc>The text direction of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</dir>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>The language code of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</lang>
		<body public="1" set="null">
			<c path="String"/>
			<haxe_doc>The body string of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</body>
		<tag public="1" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the notification (if any) as specified in the constructor's `options` parameter.</haxe_doc>
		</tag>
		<icon public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the image used as an icon of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</icon>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a structured clone of the notification’s data.</haxe_doc>
		</data>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Programmatically closes a notification.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Notification` interface of the Notifications API is used to configure and display desktop notifications to the user.

	Documentation [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Notification$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Notification>]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<abstract path="js.html.NotificationDirection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NotificationDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.NotificationOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NotificationOptions.hx"><a>
	<tag>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</tag>
	<requireInteraction>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</requireInteraction>
	<lang>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lang>
	<icon>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</icon>
	<dir>
		<x path="Null"><x path="js.html.NotificationDirection"/></x>
		<meta><m n=":optional"/></meta>
	</dir>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<body>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.NotificationPermission" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NotificationPermission.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OListElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the `start` and defining the value of the first number of the first element of the list.</haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:
		 
		  `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, …
		  `'a'` meaning that the lowercase latin alphabet is used:  `a`, `b`, `c`, `d`, `e`, …
		  `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, …
		  `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, …
		  `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, …</haxe_doc>
		</type>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLOListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.

	Documentation [HTMLOListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `data` HTML attribute, specifying the address of a resource's data.</haxe_doc>
		</data>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, specifying the MIME type of the resource.</haxe_doc>
		</type>
		<typeMustMatch public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `typeMustMatch` HTML attribute, indicating if the resource specified by `data` must only be played if it matches the `type` attribute.</haxe_doc>
		</typeMustMatch>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, specifying the name of the browsing context.</haxe_doc>
		</name>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, specifying a `map` element to use.</haxe_doc>
		</useMap>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Retuns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentWindow>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` with the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.</haxe_doc>
		</code>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.</haxe_doc>
		</declare>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</hspace>
		<standby public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `standby` HTML attribute, specifying a message to display while the object loads.</haxe_doc>
		</standby>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</vspace>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.</haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codetype` HTML attribute, specifying the content type of the data.</haxe_doc>
		</codeType>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `border` HTML attribute, specifying the width of a border around the object.</haxe_doc>
		</border>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Retuns a `Boolean` that always is `true`, because `object` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLObjectElement` interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `object` element, representing external resources.

	Documentation [HTMLObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<typedef path="js.html.ObserverCallback" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ObserverCallback.hx"><a><handleEvent set="method"><f a="observer">
	<c path="js.html.FetchObserver"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.OptGroupElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` representing whether or not the whole list of children `option` is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the label for the group.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[The `HTMLOptGroupElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `optgroup` elements.

	Documentation [HTMLOptGroupElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<label public="1"><c path="String"/></label>
		<defaultSelected public="1"><x path="Bool"/></defaultSelected>
		<selected public="1"><x path="Bool"/></selected>
		<value public="1"><c path="String"/></value>
		<text public="1"><c path="String"/></text>
		<index public="1" set="null"><x path="Int"/></index>
		<haxe_doc><![CDATA[The `HTMLOptionElement` interface represents `option` elements and inherits all classes and methods of the `HTMLElement` interface.

	Documentation [HTMLOptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<typedef path="js.html.OptionalEffectTiming" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OptionalEffectTiming.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delay>
</a></typedef>
	<abstract path="js.html.OrientationLockType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OrientationLockType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.OrientationType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OrientationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OutputElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<htmlFor public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>A `DOMTokenList` reflecting the `for` HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated `value`.</haxe_doc>
		</htmlFor>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` indicating the form associated with the control, reflecting the `form` HTML attribute if it is defined.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name for the control that is submitted with form data.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"output"`.</haxe_doc>
		</type>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the default value of the element, initially the empty string.</haxe_doc>
		</defaultValue>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the value of the contents of the elements. Behaves like the `Node.textContent` property.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the element is a candidate for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks the validity of the element and returns a `Boolean` holding the check result.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Triggers an `invalid` event and evaluates its result. if the result is `true`, then the problems with the constraints of this element are reported to the user. When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.</haxe_doc>
		</reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLOutputElement` interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `output` elements.

	Documentation [HTMLOutputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLParagraphElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `p` elements.

	Documentation [HTMLParagraphElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the parameter. It reflects the `name` attribute.</haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value associated to the parameter. It reflects the `value` attribute.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the parameter when `valueType` has the `"ref"` value. It reflects the `type` attribute.</haxe_doc>
		</type>
		<valueType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the `value`. It reflects the ``valuetype`` attribute and has one of the values: `"data"`, `"ref"`, or `"object"`.</haxe_doc>
		</valueType>
		<haxe_doc><![CDATA[The `HTMLParamElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `param` elements, representing a pair of a key and a value that acts as a parameter for an `object` element.

	Documentation [HTMLParamElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Path2D" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Path2D.hx" extern="1">
		<addPath public="1" set="method">
			<f a="path:?transformation">
				<c path="js.html.Path2D"/>
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a path to the current path.</haxe_doc>
		</addPath>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<new public="1" set="method">
			<f a="pathString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.Path2D"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Path2D` interface of the Canvas 2D API is used to declare paths that are then later used on `CanvasRenderingContext2D` objects. The path methods of the `CanvasRenderingContext2D` interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.

	Documentation [Path2D](https://developer.mozilla.org/en-US/docs/Web/API/Path2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Path2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Path2D>]]></haxe_doc>
		<meta><m n=":native"><e>"Path2D"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Performance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<timeOrigin public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the high resolution timestamp of the start time of the performance measurement.</haxe_doc>
		</timeOrigin>
		<timing public="1" set="null">
			<c path="js.html.PerformanceTiming"/>
			<haxe_doc>A `PerformanceTiming` object containing latency-related performance information</haxe_doc>
		</timing>
		<navigation public="1" set="null">
			<c path="js.html.PerformanceNavigation"/>
			<haxe_doc>A `PerformanceNavigation` object that provides useful context about the operations included in the times listed in `timing`, including whether the page was a load or a refresh, how many redirections occurred, and so forth.</haxe_doc>
		</navigation>
		<onresourcetimingbufferfull public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventTarget` which is a callback that will be called when the `resourcetimingbufferfull` event is fired.</haxe_doc>
		</onresourcetimingbufferfull>
		<now public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a `DOMHighResTimeStamp` representing the number of milliseconds elapsed since a reference instant.</haxe_doc>
		</now>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `Performance` object.</haxe_doc>
		</toJSON>
		<getEntries public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PerformanceEntry"/></c></f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given filter.</haxe_doc>
		</getEntries>
		<getEntriesByType public="1" set="method">
			<f a="entryType">
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects of the given entry type.</haxe_doc>
		</getEntriesByType>
		<getEntriesByName public="1" set="method">
			<f a="name:?entryType">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given name and entry type.</haxe_doc>
		</getEntriesByName>
		<clearResourceTimings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all `PerformanceEntry` with a `PerformanceEntry.entryType` of "`resource`" from the browser's performance data buffer.</haxe_doc>
		</clearResourceTimings>
		<setResourceTimingBufferSize public="1" set="method">
			<f a="maxSize">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the browser's resource timing buffer size to the specified number of "`resource`" `PerformanceEntry.entryType` `PerformanceEntry` objects.</haxe_doc>
		</setResourceTimingBufferSize>
		<mark public="1" set="method">
			<f a="markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a `DOMHighResTimeStamp` in the browser's performance entry buffer with the given name.
		@throws DOMError</haxe_doc>
		</mark>
		<clearMarks public="1" set="method">
			<f a="?markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given mark from the browser's performance entry buffer.</haxe_doc>
		</clearMarks>
		<measure public="1" set="method">
			<f a="measureName:?startMark:?endMark">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a named `DOMHighResTimeStamp` in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).
		@throws DOMError</haxe_doc>
		</measure>
		<clearMeasures public="1" set="method">
			<f a="?measureName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given measure from the browser's performance entry buffer.</haxe_doc>
		</clearMeasures>
		<haxe_doc><![CDATA[The `Performance` interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.

	Documentation [Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Performance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Performance>]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceEntry" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PerformanceEntry.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A value that further specifies the value returned by the `PerformanceEntry.entryType` property. The value of both depends on the subtype. See property page for valid values.</haxe_doc>
		</name>
		<entryType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of performance metric such as, for example, "`mark`". See property page for valid values.</haxe_doc>
		</entryType>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the starting time for the performance metric.</haxe_doc>
		</startTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value of the duration of the performance event.</haxe_doc>
		</duration>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `PerformanceEntry` object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance `mark` or `measure` (for example by calling the `mark()` method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).

	Documentation [PerformanceEntry](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceEntry"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_NAVIGATE public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TYPE_RELOAD>
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TYPE_BACK_FORWARD>
		<TYPE_RESERVED public="1" get="inline" set="null" expr="255" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</TYPE_RESERVED>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc></haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned short` representing the number of REDIRECTs done before reaching the page.</haxe_doc>
		</redirectCount>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `PerformanceNavigation` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The legacy `PerformanceNavigation` interface represents information about how the navigation to the current document was done.

	Documentation [PerformanceNavigation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PerformanceTiming.hx" extern="1">
		<navigationStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</navigationStart>
		<unloadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventEnd>
		<redirectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.</haxe_doc>
		</connectEnd>
		<secureConnectionStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the secure connection handshake starts. If no such connection is requested, it returns `0`.</haxe_doc>
		</secureConnectionStart>
		<requestStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the first byte of the response, from the server from a cache, or from a local resource.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.</haxe_doc>
		</responseEnd>
		<domLoading public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domLoading>
		<domInteractive public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing have been executed.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`</haxe_doc>
		</loadEventEnd>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON object representing this `PerformanceTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceTiming` interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a `PerformanceTiming` object describing your page using the `window.performance.timing` property.

	Documentation [PerformanceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming>]]></haxe_doc>
		<meta>
			<m n=":deprecated"><e>"PerformanceTiming is deprecated, use the PerformanceNavigationTiming interface instead"</e></m>
			<m n=":native"><e>"PerformanceTiming"</e></m>
		</meta>
	</class>
	<abstract path="js.html.PermissionState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PermissionStatus" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PermissionStatus.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null">
			<x path="js.html.PermissionState"/>
			<haxe_doc>Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.</haxe_doc>
		</state>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event called whenever `PermissionStatus.status` changes.</haxe_doc>
		</onchange>
		<haxe_doc><![CDATA[The `PermissionStatus` interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.

	Documentation [PermissionStatus](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus>]]></haxe_doc>
		<meta><m n=":native"><e>"PermissionStatus"</e></m></meta>
	</class>
	<class path="js.html.Permissions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Permissions.hx" extern="1">
		<query public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.lib.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>Returns the user permission status for a given API.
		@throws DOMError</haxe_doc>
		</query>
		<haxe_doc><![CDATA[Documentation [Permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Permissions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Permissions>]]></haxe_doc>
		<meta><m n=":native"><e>"Permissions"</e></m></meta>
	</class>
	<class path="js.html.PictureElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PictureElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLPictureElement` interface represents a `picture` HTML element. It doesn't implement specific properties or methods.

	Documentation [HTMLPictureElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPictureElement"</e></m></meta>
	</class>
	<abstract path="js.html.PlaybackDirection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PlaybackDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Plugin" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Plugin.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human readable description of the plugin.</haxe_doc>
		</description>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>The filename of the plugin file.</haxe_doc>
		</filename>
		<version public="1" set="null">
			<c path="String"/>
			<haxe_doc>The plugin's version number string.</haxe_doc>
		</version>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the plugin.</haxe_doc>
		</name>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The `Plugin` interface provides information about a browser plugin.

	Documentation [Plugin](https://developer.mozilla.org/en-US/docs/Web/API/Plugin) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Plugin$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Plugin>]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.PluginArray" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PluginArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of plugins in the array.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Plugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Plugin"/>
</f></namedItem>
		<refresh public="1" set="method">
			<f a="?reloadDocuments" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reloadDocuments : false }</e></m></meta>
		</refresh>
		<haxe_doc><![CDATA[The `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `window.navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem("name")` methods.

	Documentation [PluginArray](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PluginArray>]]></haxe_doc>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<class path="js.html.PointerEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PointerEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<pointerId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A unique identifier for the pointer causing the event.</haxe_doc>
		</pointerId>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.</haxe_doc>
		</height>
		<pressure public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.</haxe_doc>
		</pressure>
		<tangentialPressure public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.</haxe_doc>
		</tangentialPressure>
		<tiltX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis.</haxe_doc>
		</tiltX>
		<tiltY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis.</haxe_doc>
		</tiltY>
		<twist public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The clockwise rotation of the transducer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.</haxe_doc>
		</twist>
		<pointerType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates the device type that caused the event (mouse, pen, touch, etc.)</haxe_doc>
		</pointerType>
		<isPrimary public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if the pointer represents the primary pointer of this pointer type.</haxe_doc>
		</isPrimary>
		<getCoalescedEvents public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PointerEvent"/></c></f>
			<haxe_doc>Returns a sequence of all `PointerEvent` instances that were coalesced into the dispatched `pointermove` event.</haxe_doc>
		</getCoalescedEvents>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.PointerEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PointerEvent` interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.

	Documentation [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PointerEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PointerEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PointerEventInit.hx"><a>
	<width>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</width>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<twist>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</twist>
	<tiltY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</tiltY>
	<tiltX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</tiltX>
	<tangentialPressure>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</tangentialPressure>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<pressure>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</pressure>
	<pointerType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</pointerType>
	<pointerId>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pointerId>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<isPrimary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isPrimary>
	<height>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</height>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<coalescedEvents>
		<x path="Null"><c path="Array"><c path="js.html.PointerEvent"/></c></x>
		<meta><m n=":optional"/></meta>
	</coalescedEvents>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.Position" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Position.hx">
		<a>
			<timestamp set="null">
				<x path="Int"/>
				<haxe_doc>Returns a `DOMTimeStamp` representing the time at which the location was retrieved.</haxe_doc>
			</timestamp>
			<coords set="null">
				<t path="js.html.Coordinates"/>
				<haxe_doc>Returns a `Coordinates` object defining the current location.</haxe_doc>
			</coords>
		</a>
		<haxe_doc><![CDATA[The `Position` interface represents the position of the concerned device at a given time. The position, represented by a `Coordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.

	Documentation [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Position$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Position>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.PositionAlignSetting" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PositionAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PositionAlignSetting.PositionAlignSetting_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PositionAlignSetting.hx" private="1" module="js.html.PositionAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PositionError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TIMEOUT>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the error code. The following values are possible:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Associated constant
		    Description
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>PERMISSION_DENIED</code></td>
		    <td>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>POSITION_UNAVAILABLE</code></td>
		    <td>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</td>
		   </tr>
		   <tr>
		    <td><code>3</code></td>
		    <td><code>TIMEOUT</code></td>
		    <td>The time allowed to acquire the geolocation, defined by <code>PositionOptions.timeout</code> information was reached before the information was obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable `DOMString` describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `PositionError` interface represents the reason of an error occurring when using the geolocating device.

	Documentation [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionError>]]></haxe_doc>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PositionOptions.hx">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is `Infinity`, meaning that `getCurrentPosition()` won't return until the position is available.</haxe_doc>
			</timeout>
			<maximumAge>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to `0`, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to `Infinity` the device must return a cached position regardless of its age. Default: 0.</haxe_doc>
			</maximumAge>
			<enableHighAccuracy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a `Boolean` that indicates the application would like to receive the best possible results. If `true` and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if `false`, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: `false`.</haxe_doc>
			</enableHighAccuracy>
		</a>
		<haxe_doc><![CDATA[The `PositionOptions` interface describes an object containing option properties to pass as a parameter of `Geolocation.getCurrentPosition()` and `Geolocation.watchPosition()`.

	Documentation [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.PreElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `pre` element.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `HTMLPreElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating block of preformatted text.

	Documentation [HTMLPreElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<target public="1" set="null"><c path="String"/></target>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.

	Documentation [ProcessingInstruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction>]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`.</haxe_doc>
		</value>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.</haxe_doc>
		</max>
		<position public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.</haxe_doc>
		</position>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns `NodeList` containing the list of `label` elements that are labels for this element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The `HTMLProgressElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `progress` elements.

	Documentation [HTMLProgressElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.PropertyNodeList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/PropertyNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<getValues public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getValues>
		<meta><m n=":native"><e>"PropertyNodeList"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URL for the source of the quotation.</haxe_doc>
		</cite>
		<haxe_doc><![CDATA[The `HTMLQuoteElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `blockquote` and `q`, but not the `cite` element.

	Documentation [HTMLQuoteElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Range.hx" extern="1">
		<START_TO_START public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START_TO_START>
		<START_TO_END public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</START_TO_END>
		<END_TO_END public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</END_TO_END>
		<END_TO_START public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</END_TO_START>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` starts.</haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `startContainer` the `Range` starts.</haxe_doc>
		</startOffset>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` ends.</haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `endContainer` the `Range` ends.</haxe_doc>
		</endOffset>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the range's start and end points are at the same position.</haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.</haxe_doc>
		</commonAncestorContainer>
		<setStart public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range`.
		@throws DOMError</haxe_doc>
		</setStart>
		<setEnd public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range`.
		@throws DOMError</haxe_doc>
		</setEnd>
		<setStartBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartBefore>
		<setStartAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartAfter>
		<setEndBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndBefore>
		<setEndAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndAfter>
		<collapse public="1" set="method">
			<f a="?toStart" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toStart : false }</e></m></meta>
			<haxe_doc>Collapses the `Range` to one of its boundary points.</haxe_doc>
		</collapse>
		<selectNode public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the `Node` and its contents.
		@throws DOMError</haxe_doc>
		</selectNode>
		<selectNodeContents public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the contents of a `Node`.
		@throws DOMError</haxe_doc>
		</selectNodeContents>
		<compareBoundaryPoints public="1" set="method">
			<f a="how:sourceRange">
				<x path="Int"/>
				<c path="js.html.Range"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the boundary points of the `Range` with another `Range`.
		@throws DOMError</haxe_doc>
		</compareBoundaryPoints>
		<deleteContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the contents of a `Range` from the `Document`.
		@throws DOMError</haxe_doc>
		</deleteContents>
		<extractContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Moves contents of a `Range` from the document tree into a `DocumentFragment`.
		@throws DOMError</haxe_doc>
		</extractContents>
		<cloneContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Returns a `DocumentFragment` copying the nodes of a `Range`.
		@throws DOMError</haxe_doc>
		</cloneContents>
		<insertNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a `Node` at the start of a `Range`.
		@throws DOMError</haxe_doc>
		</insertNode>
		<surroundContents public="1" set="method">
			<f a="newParent">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves content of a `Range` into a new `Node`.
		@throws DOMError</haxe_doc>
		</surroundContents>
		<cloneRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Returns a `Range` object with boundary points identical to the cloned `Range`.</haxe_doc>
		</cloneRange>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the `Range` from use to improve performance.</haxe_doc>
		</detach>
		<isPointInRange public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given point is in the `Range`.
		@throws DOMError</haxe_doc>
		</isPointInRange>
		<comparePoint public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the `Range`.
		@throws DOMError</haxe_doc>
		</comparePoint>
		<intersectsNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given node intersects the `Range`.
		@throws DOMError</haxe_doc>
		</intersectsNode>
		<createContextualFragment public="1" set="method">
			<f a="fragment">
				<c path="String"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>Returns a `DocumentFragment` created from a given string of code.
		@throws DOMError</haxe_doc>
		</createContextualFragment>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a list of `DOMRect` objects that aggregates the results of `Element.getClientRects()` for all the elements in the `Range`.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns a `DOMRect` object which bounds the entire contents of the `Range`; this would be the union of all the rectangles returned by `range.getClientRects()`.</haxe_doc>
		</getBoundingClientRect>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Range` interface represents a fragment of a document that can contain nodes and parts of text nodes.

	Documentation [Range](https://developer.mozilla.org/en-US/docs/Web/API/Range) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Range$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Range>]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<abstract path="js.html.ReferrerPolicy" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ReferrerPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RegistrationOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RegistrationOptions.hx"><a>
	<updateViaCache>
		<x path="Null"><x path="js.html.ServiceWorkerUpdateViaCache"/></x>
		<meta><m n=":optional"/></meta>
	</updateViaCache>
	<scope>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</scope>
</a></typedef>
	<class path="js.html.Request" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Request.hx" extern="1">
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the request's method (`GET`, `POST`, etc.)</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the request.</haxe_doc>
		</url>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the associated `Headers` object of the request.</haxe_doc>
		</headers>
		<destination public="1" set="null">
			<x path="js.html.RequestDestination"/>
			<haxe_doc>Returns a string from the `RequestDestination` enum describing the request's destination. This is a string indicating the type of content being requested.</haxe_doc>
		</destination>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the referrer of the request (e.g., `client`).</haxe_doc>
		</referrer>
		<referrerPolicy public="1" set="null">
			<x path="js.html.ReferrerPolicy"/>
			<haxe_doc>Contains the referrer policy of the request (e.g., `no-referrer`).</haxe_doc>
		</referrerPolicy>
		<mode public="1" set="null">
			<x path="js.html.RequestMode"/>
			<haxe_doc>Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)</haxe_doc>
		</mode>
		<credentials public="1" set="null">
			<x path="js.html.RequestCredentials"/>
			<haxe_doc>Contains the credentials of the request (e.g., `"omit"`, `"same-origin"`, `"include"`). The default is `"same-origin"`.</haxe_doc>
		</credentials>
		<cache public="1" set="null">
			<x path="js.html.RequestCache"/>
			<haxe_doc>Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).</haxe_doc>
		</cache>
		<redirect public="1" set="null">
			<x path="js.html.RequestRedirect"/>
			<haxe_doc>Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.</haxe_doc>
		</redirect>
		<integrity public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the subresource integrity value of the request (e.g., `sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=`).</haxe_doc>
		</integrity>
		<signal public="1" set="null"><c path="js.html.AbortSignal"/></signal>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Request"/></f>
			<haxe_doc>Creates a copy of the current `Request` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="input:?init">
		<c path="String"/>
		<x path="Null"><t path="js.html.RequestInit"/></x>
		<c path="js.html.Request"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `Request` interface of the Fetch API represents a resource request.

	Documentation [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Request$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Request>]]></haxe_doc>
		<meta><m n=":native"><e>"Request"</e></m></meta>
	</class>
	<abstract path="js.html.RequestCache" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestCredentials" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestCredentials.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestDestination" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestDestination.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `RequestDestination` enumerated type contains the permitted values for a request's `destination`. These string values indicate potential types of content that a request may try to retrieve.

	Documentation [RequestDestination](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestDestination.RequestDestination_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestDestination.hx" private="1" module="js.html.RequestDestination" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RequestInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestInit.hx"><a>
	<signal>
		<x path="Null"><c path="js.html.AbortSignal"/></x>
		<meta><m n=":optional"/></meta>
	</signal>
	<referrerPolicy>
		<x path="Null"><x path="js.html.ReferrerPolicy"/></x>
		<meta><m n=":optional"/></meta>
	</referrerPolicy>
	<referrer>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</referrer>
	<redirect>
		<x path="Null"><x path="js.html.RequestRedirect"/></x>
		<meta><m n=":optional"/></meta>
	</redirect>
	<observe>
		<x path="Null"><x path="haxe.extern.EitherType">
	<f a="">
		<c path="js.html.FetchObserver"/>
		<x path="Void"/>
	</f>
	<t path="js.html.ObserverCallback"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</observe>
	<mode>
		<x path="Null"><x path="js.html.RequestMode"/></x>
		<meta><m n=":optional"/></meta>
	</mode>
	<method>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</method>
	<integrity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</integrity>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
	<credentials>
		<x path="Null"><x path="js.html.RequestCredentials"/></x>
		<meta><m n=":optional"/></meta>
	</credentials>
	<cache>
		<x path="Null"><x path="js.html.RequestCache"/></x>
		<meta><m n=":optional"/></meta>
	</cache>
	<body>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<x path="haxe.extern.EitherType">
			<c path="js.lib.ArrayBufferView"/>
			<c path="js.lib.ArrayBuffer"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="js.html.FormData"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.URLSearchParams"/>
				<c path="String"/>
			</x>
		</x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.RequestMode" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestRedirect" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestRedirect.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Response" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Response.hx" extern="1">
		<error public="1" set="method" static="1">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Returns a new `Response` object associated with a network error.</haxe_doc>
		</error>
		<redirect public="1" set="method" static="1">
			<f a="url:?status" v=":302">
				<c path="String"/>
				<x path="Int"/>
				<c path="js.html.Response"/>
			</f>
			<meta><m n=":value"><e>{ status : 302 }</e></m></meta>
			<haxe_doc>Creates a new response with a different URL.
		@throws DOMError</haxe_doc>
		</redirect>
		<type public="1" set="null">
			<x path="js.html.ResponseType"/>
			<haxe_doc>Contains the type of the response (e.g., `basic`, `cors`).</haxe_doc>
		</type>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the response.</haxe_doc>
		</url>
		<redirected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.</haxe_doc>
		</redirected>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Contains the status code of the response (e.g., `200` for a success).</haxe_doc>
		</status>
		<ok public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Contains a boolean stating whether the response was successful (status in the range 200-299) or not.</haxe_doc>
		</ok>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the status message corresponding to the status code (e.g., `OK` for `200`).</haxe_doc>
		</statusText>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the `Headers` object associated with the response.</haxe_doc>
		</headers>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Creates a clone of a `Response` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="?body:?init">
				<c path="js.html.Blob"/>
				<x path="Null"><t path="js.html.ResponseInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.FormData"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.URLSearchParams"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<d/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="String"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Response` interface of the Fetch API represents the response to a request.

	Documentation [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Response$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Response>]]></haxe_doc>
		<meta><m n=":native"><e>"Response"</e></m></meta>
	</class>
	<typedef path="js.html.ResponseInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ResponseInit.hx"><a>
	<statusText>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusText>
	<status>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</status>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
</a></typedef>
	<abstract path="js.html.ResponseType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Screen" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Screen.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<availWidth public="1" set="null"><x path="Int"/></availWidth>
		<availHeight public="1" set="null"><x path="Int"/></availHeight>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<colorDepth public="1" set="null"><x path="Int"/></colorDepth>
		<pixelDepth public="1" set="null"><x path="Int"/></pixelDepth>
		<top public="1" set="null"><x path="Int"/></top>
		<left public="1" set="null"><x path="Int"/></left>
		<availTop public="1" set="null"><x path="Int"/></availTop>
		<availLeft public="1" set="null"><x path="Int"/></availLeft>
		<orientation public="1" set="null"><c path="js.html.ScreenOrientation"/></orientation>
		<haxe_doc><![CDATA[The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using `window.screen`.

	Documentation [Screen](https://developer.mozilla.org/en-US/docs/Web/API/Screen) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Screen$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Screen>]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScreenOrientation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScreenOrientation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<type public="1" set="null">
			<x path="js.html.OrientationType"/>
			<haxe_doc>Returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".</haxe_doc>
		</type>
		<angle public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the document's current orientation angle.</haxe_doc>
		</angle>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever is the `EventHandler` called when the screen changes orientation.</haxe_doc>
		</onchange>
		<lock public="1" set="method">
			<f a="orientation">
				<x path="js.html.OrientationLockType"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Locks the orientation of the containing document to its default orientation and returns a `Promise`. 
		@throws DOMError</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unlocks the orientation of the containing document from its default orientation.
		@throws DOMError</haxe_doc>
		</unlock>
		<haxe_doc><![CDATA[The `ScreenOrientation` interface of the the Screen Orientation API provides information about the current orientation of the document.

	Documentation [ScreenOrientation](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation>]]></haxe_doc>
		<meta><m n=":native"><e>"ScreenOrientation"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1"><c path="String"/></src>
		<type public="1"><c path="String"/></type>
		<charset public="1"><c path="String"/></charset>
		<async public="1"><x path="Bool"/></async>
		<defer public="1"><x path="Bool"/></defer>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<text public="1"><c path="String"/></text>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<integrity public="1"><c path="String"/></integrity>
		<haxe_doc><![CDATA[HTML `script` elements expose the `HTMLScriptElement` interface, which provides special properties and methods for manipulating the behavior and execution of `script` elements (beyond the inherited `HTMLElement` interface).

	Documentation [HTMLScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<abstract path="js.html.ScrollBehavior" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollBehavior.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollBehavior.ScrollBehavior_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollBehavior.hx" private="1" module="js.html.ScrollBehavior" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollIntoViewOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollIntoViewOptions.hx"><a>
	<inline_>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"inline"</e></m>
		</meta>
	</inline_>
	<block>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta><m n=":optional"/></meta>
	</block>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<abstract path="js.html.ScrollLogicalPosition" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollLogicalPosition.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollLogicalPosition.ScrollLogicalPosition_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollLogicalPosition.hx" private="1" module="js.html.ScrollLogicalPosition" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollOptions.hx"><a><behavior>
	<x path="Null"><x path="js.html.ScrollBehavior"/></x>
	<meta><m n=":optional"/></meta>
</behavior></a></typedef>
	<abstract path="js.html.ScrollRestoration" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollRestoration.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ScrollSetting" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollSetting.ScrollSetting_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollSetting.hx" private="1" module="js.html.ScrollSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollToOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ScrollToOptions.hx"><a>
	<top>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</top>
	<left>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</left>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<class path="js.html.SelectElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. `2.0`</haxe_doc>
		</autofocus>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` referencing the form that this element is associated with. If the element is not associated with of a `form` element, then it returns `null`.</haxe_doc>
		</form>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `multiple` HTML attribute, which indicates whether multiple items can be selected.</haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.</haxe_doc>
		</name>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form. `2.0`</haxe_doc>
		</required>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is true, in which case it is 4.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` represeting the form control's type. When `multiple` is `true`, it returns `"select-multiple"`; otherwise, it returns `"select-one"`.</haxe_doc>
		</type>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc>An `HTMLOptionsCollection` representing the set of `option` elements contained by this element.</haxe_doc>
		</options>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>An `unsigned long `The number of `option` elements in this `select` element.</haxe_doc>
		</length>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>An `HTMLCollection` representing the set of `option` elements that are selected.</haxe_doc>
		</selectedOptions>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the index of the first selected `option` element. The value `-1` indicates no element is selected.</haxe_doc>
		</selectedIndex>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form control (the first selected option). Returns the value attribute of the option element or if it is missing, the text attribute.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` reflecting the validity state that this control is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Gets an item from the options collection for this `select` element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.OptionElement"/>
			</f>
			<haxe_doc>Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</namedItem>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element to the collection of `option` elements for this `select` element.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
			<overloads><remove public="1" set="method">
	<f a="index">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
</remove></overloads>
		</remove>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLSelectElement` interface represents a `select` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.

	Documentation [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.Selection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Selection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.</haxe_doc>
		</anchorOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` describing the type of the current selection.</haxe_doc>
		</type>
		<caretBidiLevel public="1"><x path="Int"/></caretBidiLevel>
		<getRangeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Range"/>
			</f>
			<haxe_doc>Returns a `Range` object representing one of the ranges currently selected.
		@throws DOMError</haxe_doc>
		</getRangeAt>
		<addRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A `Range` object that will be added to the selection.
		@throws DOMError</haxe_doc>
		</addRange>
		<removeRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a range from the selection.
		@throws DOMError</haxe_doc>
		</removeRange>
		<removeAllRanges public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all ranges from the selection.
		@throws DOMError</haxe_doc>
		</removeAllRanges>
		<empty public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</empty>
		<collapse public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Collapses the current selection to a single point.
		@throws DOMError</haxe_doc>
		</collapse>
		<setPosition public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setPosition>
		<collapseToStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the start of the first range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToStart>
		<collapseToEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the end of the last range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToEnd>
		<extend public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Moves the focus of the selection to a specified point.
		@throws DOMError</haxe_doc>
		</extend>
		<setBaseAndExtent public="1" set="method">
			<f a="anchorNode:anchorOffset:focusNode:focusOffset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.
		@throws DOMError</haxe_doc>
		</setBaseAndExtent>
		<selectAllChildren public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds all the children of the specified node to the selection.
		@throws DOMError</haxe_doc>
		</selectAllChildren>
		<deleteFromDocument public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deletes the selection's content from the document.
		@throws DOMError</haxe_doc>
		</deleteFromDocument>
		<containsNode public="1" set="method">
			<f a="node:?allowPartialContainment" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allowPartialContainment : false }</e></m></meta>
			<haxe_doc>Indicates if a certain node is part of the selection.
		@throws DOMError</haxe_doc>
		</containsNode>
		<modify public="1" set="method">
			<f a="alter:direction:granularity">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current selection.
		@throws DOMError</haxe_doc>
		</modify>
		<haxe_doc><![CDATA[A `Selection` object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call `window.getSelection()`.

	Documentation [Selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Selection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Selection>]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<abstract path="js.html.SelectionMode" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SelectionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ServiceWorker" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<scriptURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scriptURL>
		<state public="1" set="null">
			<x path="js.html.ServiceWorkerState"/>
			<haxe_doc>Returns the state of the service worker. It returns one of the following values: `installing`, `installed,` `activating`, `activated`, or `redundant`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `statechange` is fired; it is basically fired anytime the `ServiceWorker.state` changes.</haxe_doc>
		</onstatechange>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `ServiceWorker` interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.

	Documentation [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorker"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerContainer" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorkerContainer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<controller public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a `ServiceWorker` object if its state is `activated` (the same object returned by `ServiceWorkerRegistration.active`). This property returns `null` during a force-refresh request (Shift + refresh) or if there is no active worker.</haxe_doc>
		</controller>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
			<haxe_doc>Provides a way of delaying code execution until a service worker is active. It returns a `Promise` that will never reject, and which waits indefinitely until the `ServiceWorkerRegistration` associated with the current page has an `ServiceWorkerRegistration.active` worker. Once that condition is met, it resolves with the `ServiceWorkerRegistration`.</haxe_doc>
		</ready>
		<oncontrollerchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `controllerchange` event occurs — when the document's associated `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</oncontrollerchange>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever an `error` event occurs in the associated service workers.</haxe_doc>
		</onerror>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `message` event occurs — when incoming messages are received to the `ServiceWorkerContainer` object (e.g. via a `MessagePort.postMessage()` call.)</haxe_doc>
		</onmessage>
		<register public="1" set="method"><f a="scriptURL:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.RegistrationOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
</f></register>
		<getRegistration public="1" set="method">
			<f a="?documentURL" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<meta><m n=":value"><e>{ documentURL : "" }</e></m></meta>
			<haxe_doc>Gets a `ServiceWorkerRegistration` object whose scope matches the provided document URL.  If the method can't return a `ServiceWorkerRegistration`, it returns a `Promise`. </haxe_doc>
		</getRegistration>
		<getRegistrations public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.ServiceWorkerRegistration"/></c></c></f>
			<haxe_doc>Returns all `ServiceWorkerRegistration` objects associated with a `ServiceWorkerContainer` in an array.  If the method can't return `ServiceWorkerRegistration` objects, it returns a `Promise`. </haxe_doc>
		</getRegistrations>
		<haxe_doc><![CDATA[The `ServiceWorkerContainer` interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.

	Documentation [ServiceWorkerContainer](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerContainer"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerRegistration" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorkerRegistration.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<installing public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installing`. This is initially set to `null`.</haxe_doc>
		</installing>
		<waiting public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `waiting`. This is initially set to `null`.</haxe_doc>
		</waiting>
		<active public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is either `activating` or `activated`. This is initially set to `null`. An active worker will control a `ServiceWorkerClient` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)</haxe_doc>
		</active>
		<scope public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scope>
		<updateViaCache public="1" set="null"><x path="js.html.ServiceWorkerUpdateViaCache"/></updateViaCache>
		<onupdatefound public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `updatefound` is fired; it is fired any time the `ServiceWorkerRegistration.installing` property acquires a new service worker.</haxe_doc>
		</onupdatefound>
		<pushManager public="1" set="null">
			<c path="js.html.push.PushManager"/>
			<haxe_doc>Returns a reference to the `PushManager` interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.</haxe_doc>
		</pushManager>
		<update public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Checks the server for an updated version of the service worker without consulting caches.
		@throws DOMError</haxe_doc>
		</update>
		<unregister public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Unregisters the service worker registration and returns a `Promise`. The service worker will finish any ongoing operations before it is unregistered.
		@throws DOMError</haxe_doc>
		</unregister>
		<showNotification public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Displays the notification with the requested title.
		@throws DOMError</haxe_doc>
		</showNotification>
		<getNotifications public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.GetNotificationOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Notification"/></c></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to an array of `Notification` objects.
		@throws DOMError</haxe_doc>
		</getNotifications>
		<haxe_doc><![CDATA[The `ServiceWorkerRegistration` interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.

	Documentation [ServiceWorkerRegistration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerRegistration"</e></m></meta>
	</class>
	<abstract path="js.html.ServiceWorkerState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorkerState.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `ServiceWorkerState` is associated with its `ServiceWorker`'s state.

	Documentation [ServiceWorkerState](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ServiceWorkerUpdateViaCache" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorkerUpdateViaCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerUpdateViaCache.ServiceWorkerUpdateViaCache_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ServiceWorkerUpdateViaCache.hx" private="1" module="js.html.ServiceWorkerUpdateViaCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ShadowRoot" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ShadowRoot.hx" extern="1">
		<extends path="js.html.DocumentFragment"/>
		<mode public="1" set="null">
			<x path="js.html.ShadowRootMode"/>
			<haxe_doc>The mode of the `ShadowRoot` — either `open` or `closed`. This defines whether or not the shadow root's internal features are accessible from JavaScript.</haxe_doc>
		</mode>
		<host public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the DOM element the `ShadowRoot` is attached to.</haxe_doc>
		</host>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Sets or returns a reference to the DOM tree inside the `ShadowRoot`.</haxe_doc>
		</innerHTML>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<getElementById public="1" set="method" override="1"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="namespace:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<haxe_doc><![CDATA[The `ShadowRoot` interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.

	Documentation [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot>]]></haxe_doc>
		<meta><m n=":native"><e>"ShadowRoot"</e></m></meta>
	</class>
	<typedef path="js.html.ShadowRootInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ShadowRootInit.hx"><a><mode><x path="js.html.ShadowRootMode"/></mode></a></typedef>
	<abstract path="js.html.ShadowRootMode" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ShadowRootMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ShadowRootMode.ShadowRootMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ShadowRootMode.hx" private="1" module="js.html.ShadowRootMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.SlotElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SlotElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>`DOMString`: Can be used to get and set the slot's name.</haxe_doc>
		</name>
		<assignedNodes public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.AssignedNodesOptions"/></x>
				<c path="Array"><c path="js.html.Node"/></c>
			</f>
			<haxe_doc>Returns the sequence of elements assigned to this slot, or alternatively the slot's fallback content.</haxe_doc>
		</assignedNodes>
		<haxe_doc><![CDATA[The `HTMLSlotElement` interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `slot` element.

	Documentation [HTMLSlotElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSlotElement"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `source` element is nested in a media element that is a `video` or an `audio` element. It has no meaning and is ignored when it is nested in a `picture` element. 
		 Note: If the `src` property is updated (along with any siblings), the parent `HTMLMediaElement`'s `load` method should be called when done, since `source` elements are not re-scanned automatically.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `type` HTML attribute, containing the type of the media resource.</haxe_doc>
		</type>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing image sizes between breakpoints</haxe_doc>
		</sizes>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `media` HTML attribute, containing the intended type of the media resource.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `HTMLSourceElement` interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `source` elements.

	Documentation [HTMLSourceElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLSpanElement` interface represents a `span` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesis" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SpeechSynthesis.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the utterance queue contains as-yet-unspoken utterances.</haxe_doc>
		</pending>
		<speaking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a paused state.</haxe_doc>
		</speaking>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the `SpeechSynthesis` object is in a paused state.</haxe_doc>
		</paused>
		<onvoiceschanged public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the list of `SpeechSynthesisVoice` objects that would be returned by the `SpeechSynthesis.getVoices()` method has changed.</haxe_doc>
		</onvoiceschanged>
		<speak public="1" set="method">
			<f a="utterance">
				<c path="js.html.SpeechSynthesisUtterance"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an `SpeechSynthesisUtterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.</haxe_doc>
		</speak>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all utterances from the utterance queue.</haxe_doc>
		</cancel>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a paused state.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.</haxe_doc>
		</resume>
		<getVoices public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.SpeechSynthesisVoice"/></c></f>
			<haxe_doc>Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.</haxe_doc>
		</getVoices>
		<haxe_doc><![CDATA[The `SpeechSynthesis` interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.

	Documentation [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesis"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisUtterance" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SpeechSynthesisUtterance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the text that will be synthesised when the utterance is spoken.</haxe_doc>
		</text>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the language of the utterance.</haxe_doc>
		</lang>
		<voice public="1">
			<c path="js.html.SpeechSynthesisVoice"/>
			<haxe_doc>Gets and sets the voice that will be used to speak the utterance.</haxe_doc>
		</voice>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the volume that the utterance will be spoken at.</haxe_doc>
		</volume>
		<rate public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the speed at which the utterance will be spoken at.</haxe_doc>
		</rate>
		<pitch public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the pitch at which the utterance will be spoken at.</haxe_doc>
		</pitch>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has begun to be spoken.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has finished being spoken.</haxe_doc>
		</onend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when an error occurs that prevents the utterance from being succesfully spoken.</haxe_doc>
		</onerror>
		<onpause public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance is paused part way through.</haxe_doc>
		</onpause>
		<onresume public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a paused utterance is resumed.</haxe_doc>
		</onresume>
		<onmark public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a named SSML "mark" tag.</haxe_doc>
		</onmark>
		<onboundary public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a word or sentence boundary.</haxe_doc>
		</onboundary>
		<new public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisUtterance` interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)

	Documentation [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisUtterance"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisVoice" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SpeechSynthesisVoice.hx" extern="1">
		<voiceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the type of URI and location of the speech synthesis service for this voice.</haxe_doc>
		</voiceURI>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable name that represents the voice.</haxe_doc>
		</name>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a BCP 47 language tag indicating the language of the voice.</haxe_doc>
		</lang>
		<localService public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)</haxe_doc>
		</localService>
		<default_ public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>A `Boolean` indicating whether the voice is the default voice for the current app language (`true`), or not (`false`.)</haxe_doc>
		</default_>
		<haxe_doc><![CDATA[The `SpeechSynthesisVoice` interface of the Web Speech API represents a voice that the system supports. Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.

	Documentation [SpeechSynthesisVoice](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisVoice"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of data items stored in the `Storage` object.</haxe_doc>
		</length>
		<key public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a number n, this method will return the name of the nth key in the storage.
		@throws DOMError</haxe_doc>
		</key>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a key name, will return that key's value.
		@throws DOMError</haxe_doc>
		</getItem>
		<setItem public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
		@throws DOMError</haxe_doc>
		</setItem>
		<removeItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name, will remove that key from the storage.
		@throws DOMError</haxe_doc>
		</removeItem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When invoked, will empty all keys out of the storage.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `Storage` interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.

	Documentation [Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Storage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Storage>]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEstimate" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StorageEstimate.hx">
		<a>
			<usage>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by `quota`.</haxe_doc>
			</usage>
			<quota>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case.</haxe_doc>
			</quota>
		</a>
		<haxe_doc><![CDATA[The `StorageEstimate` dictionary is used by the `StorageManager` to provide estimates of the size of a site's or application's data store and how much of it is in use. The `estimate()` method returns an object that conforms to this dictionary when its `Promise` resolves.

	Documentation [StorageEstimate](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate>]]></haxe_doc>
	</typedef>
	<class path="js.html.StorageManager" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StorageManager.hx" extern="1">
		<persisted public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if persistence has already been granted for your site's storage.
		@throws DOMError</haxe_doc>
		</persisted>
		<persist public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if the user agent is able to persist your site's storage.
		@throws DOMError</haxe_doc>
		</persist>
		<estimate public="1" set="method">
			<f a=""><c path="js.lib.Promise"><t path="js.html.StorageEstimate"/></c></f>
			<haxe_doc>Returns a `StorageEstimate` object containing usage and quota numbers for your origin.
		@throws DOMError</haxe_doc>
		</estimate>
		<haxe_doc><![CDATA[The `StorageManager` interface of the the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either `navigator.storage` or `WorkerNavigator.storage`.

	Documentation [StorageManager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageManager>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageManager"</e></m></meta>
	</class>
	<abstract path="js.html.StorageType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StorageType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._StorageType.StorageType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StorageType.hx" private="1" module="js.html.StorageType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.StyleElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value representing whether or not the stylesheet is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of style being applied by this statement.</haxe_doc>
		</type>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLStyleElement` interface represents a `style` element. It inherits properties and methods from its parent, `HTMLElement`, and from `LinkStyle`.

	Documentation [HTMLStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<haxe_doc><![CDATA[The `StyleSheetList` interface represents a list of `StyleSheet`.

	Documentation [StyleSheetList](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.SubtleCrypto" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/SubtleCrypto.hx" extern="1">
		<encrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the encrypted data corresponding to the clear text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</encrypt>
		<decrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the clear data corresponding to the encrypted text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</decrypt>
		<sign public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the signature corresponding to the text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</sign>
		<verify public="1" set="method">
			<f a="algorithm:key:signature:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `Boolean` value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.
		@throws DOMError</haxe_doc>
		</verify>
		<digest public="1" set="method">
			<f a="algorithm:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a digest generated from the algorithm and text given as parameters.
		@throws DOMError</haxe_doc>
		</digest>
		<generateKey public="1" set="method">
			<f a="algorithm:extractable:keyUsages">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><generateKey public="1" set="method">
	<f a="algorithm:extractable:keyUsages">
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</generateKey></overloads>
		</generateKey>
		<deriveKey public="1" set="method">
			<f a="algorithm:baseKey:derivedKeyType:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey` derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
		</deriveKey>
		<deriveBits public="1" set="method">
			<f a="algorithm:baseKey:length">
				<d/>
				<c path="js.html.CryptoKey"/>
				<x path="Int"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><deriveBits public="1" set="method">
	<f a="algorithm:baseKey:length">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<x path="Int"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
</deriveBits></overloads>
		</deriveBits>
		<importKey public="1" set="method">
			<f a="format:keyData:algorithm:extractable:keyUsages">
				<c path="String"/>
				<d/>
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><importKey public="1" set="method">
	<f a="format:keyData:algorithm:extractable:keyUsages">
		<c path="String"/>
		<d/>
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</importKey></overloads>
		</importKey>
		<exportKey public="1" set="method">
			<f a="format:key">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a buffer containing the key in the format requested.
		@throws DOMError</haxe_doc>
		</exportKey>
		<wrapKey public="1" set="method">
			<f a="format:key:wrappingKey:wrapAlgorithm">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.html.CryptoKey"/>
				<d/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
			<overloads><wrapKey public="1" set="method">
	<f a="format:key:wrappingKey:wrapAlgorithm">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<c path="js.html.CryptoKey"/>
		<c path="String"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
</wrapKey></overloads>
		</wrapKey>
		<unwrapKey public="1" set="method">
			<f a="format:wrappedKey:unwrappingKey:unwrapAlgorithm:unwrappedKeyAlgorithm:extractable:keyUsages">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the wrapped key given in parameter.
		@throws DOMError</haxe_doc>
		</unwrapKey>
		<haxe_doc><![CDATA[The `SubtleCrypto` interface represents a set of cryptographic primitives. It is available via the `Crypto.subtle` properties available in a window context (via `Window.crypto`).

	Documentation [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto>]]></haxe_doc>
		<meta><m n=":native"><e>"SubtleCrypto"</e></m></meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` which represents an enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLTableCaptionElement` interface special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table caption elements.

	Documentation [HTMLTableCaptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<colSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the `colspan` attribute.</haxe_doc>
		</colSpan>
		<rowSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the `rowspan` attribute.</haxe_doc>
		</rowSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMSettableTokenList` describing a list of `id` of `th` elements that represents headers associated with the cell. It reflects the `headers` attribute.</haxe_doc>
		</headers>
		<cellIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A long integer representing the cell's position in the `HTMLTableRowElement.cells` collection of the `tr` the cell is contained within. If the cell doesn't belong to a `tr`, it returns `-1`.</haxe_doc>
		</cellIndex>
		<abbr public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` which can be used on `th` elements (not on `td`), specifying an alternative label for the header cell.. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of `abbr` is an abbreviation or acronym, but can be any text that's appropriate contextually.</haxe_doc>
		</abbr>
		<scope public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</scope>
		<align public="1"><c path="String"/></align>
		<axis public="1"><c path="String"/></axis>
		<height public="1"><c path="String"/></height>
		<width public="1"><c path="String"/></width>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<noWrap public="1"><x path="Bool"/></noWrap>
		<vAlign public="1"><c path="String"/></vAlign>
		<bgColor public="1"><c path="String"/></bgColor>
		<haxe_doc><![CDATA[The `HTMLTableCellElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.

	Documentation [HTMLTableCellElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<span public="1"><x path="Int"/></span>
		<align public="1"><c path="String"/></align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLTableColElement` interface provides special properties (beyond the `HTMLElement` interface it also has available to it inheritance) for manipulating single or grouped table column elements.

	Documentation [HTMLTableColElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc>Is a `HTMLTableCaptionElement` representing the first `caption` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `caption`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `caption` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</caption>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `thead` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `thead`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element, and the first `thead` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tHead>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `tfoot` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `tfoot`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element, and the first `tfoot` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tFoot>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the `tbody` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</tBodies>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the rows of the element, that is all `tr` that are a child of the element, or a child or one of its `thead`, `tbody` and `tfoot` children. The rows members of a `thead` appear first, in tree order, and those members of a `tbody` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.</haxe_doc>
		</border>
		<frame public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `"void"`, `"above"`, `"below"`, `"hsides"`, `"vsides"`, `"lhs"`, `"rhs"`, `"box"`, or `"border"`.</haxe_doc>
		</frame>
		<rules public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `"none"`, `"groups"`, `"rows"`, `"cols"`, or `"all"`.</haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.</haxe_doc>
		</summary>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.</haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.</haxe_doc>
		</cellSpacing>
		<createCaption public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `caption` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `table` element.</haxe_doc>
		</createCaption>
		<deleteCaption public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `caption` that is a child of the element.</haxe_doc>
		</deleteCaption>
		<createTHead public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `thead` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element.</haxe_doc>
		</createTHead>
		<deleteTHead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `thead` that is a child of the element.</haxe_doc>
		</deleteTHead>
		<createTFoot public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `tfoot` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element.</haxe_doc>
		</createTFoot>
		<deleteTFoot public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `tfoot` that is a child of the element.</haxe_doc>
		</deleteTFoot>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Returns an `HTMLTableRowElement` representing a new row of the table. It inserts it in the rows collection immediately before the `tr` element at the given `index` position. If necessary a `tbody` is created. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the row corresponding to the `index` given in parameter. If the `index` value is `-1` the last row is removed; if it smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.

	Documentation [HTMLTableElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.</haxe_doc>
		</sectionRowIndex>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.</haxe_doc>
		</cells>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<insertCell public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new cell just before the given position in the row. If the given position is not given or is `-1`, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value. Returns a reference to a HTMLTableCellElement [en-US].
		@throws DOMError</haxe_doc>
		</insertCell>
		<deleteCell public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteCell>
		<haxe_doc><![CDATA[The `HTMLTableRowElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.

	Documentation [HTMLTableRowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new row just before the given position in the section. If the given position is not given or is `-1`, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableSectionElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.

	Documentation [HTMLTableSectionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<cols public="1"><x path="Int"/></cols>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<maxLength public="1"><x path="Int"/></maxLength>
		<minLength public="1"><x path="Int"/></minLength>
		<name public="1"><c path="String"/></name>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<rows public="1"><x path="Int"/></rows>
		<wrap public="1"><c path="String"/></wrap>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLTextAreaElement` interface provides special properties and methods for manipulating the layout and presentation of `textarea` elements.

	Documentation [HTMLTextAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `double` giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `TextMetrics` interface represents the dimension of a text in the canvas, as created by the `CanvasRenderingContext2D.measureText()` method.

	Documentation [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics>]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<x path="js.html.TextTrackKind"/>
			<haxe_doc>Returns a `DOMString` indicating what kind of text track the `TextTrack` describes. The value must be one of those in the TextTrackKind enum.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human-readable `DOMString` which contains the text track's label, if one is present; otherwise, this is an empty string (`""`), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML `lang` attribute. For example, this can be `"en-US"` for United States English or `"pt-BR"` for Brazilian Portuguese.</haxe_doc>
		</language>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (`""`). If the `TextTrack` is associated with a `track` element, then the track's ID matches the element's ID.</haxe_doc>
		</id>
		<inBandMetadataTrackDispatchType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` which indicates the track's in-band metadata track dispatch type. needs details</haxe_doc>
		</inBandMetadataTrackDispatchType>
		<mode public="1">
			<x path="js.html.TextTrackMode"/>
			<haxe_doc>A `DOMString` specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants.</haxe_doc>
		</mode>
		<cues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` which contains all of the track's cues.</haxe_doc>
		</cues>
		<activeCues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times.</haxe_doc>
		</activeCues>
		<oncuechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A `EventHandler` specifying a function to be called when a `cuechange` event occurs. Handling these events lets you know when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited.</haxe_doc>
		</oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.VTTCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method">
			<f a="cue">
				<c path="js.html.VTTCue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeCue>
		<haxe_doc><![CDATA[This interface also inherits properties from `EventTarget`.

	Documentation [TextTrack](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<id public="1"><c path="String"/></id>
		<startTime public="1"><x path="Float"/></startTime>
		<endTime public="1"><x path="Float"/></endTime>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<onenter public="1"><x path="haxe.Function"/></onenter>
		<onexit public="1"><x path="haxe.Function"/></onexit>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VTTCue"/>
</f></getCueById>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackKind" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TextTrackList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackMode" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TimeRanges" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the number of time ranges represented by the time range object.</haxe_doc>
		</length>
		<start public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the start of the range with the specified index.
		@throws DOMError</haxe_doc>
		</start>
		<end public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the end of the specified range.
		@throws DOMError</haxe_doc>
		</end>
		<haxe_doc><![CDATA[The `TimeRanges` interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the `audio` and `video` elements.

	Documentation [TimeRanges](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the text of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `HTMLTitleElement` interface contains the title for a document. This element inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Touch.hx" extern="1">
		<identifier public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a unique identifier for this `Touch` object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.</haxe_doc>
		</identifier>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Returns the `Element` on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.</haxe_doc>
		</target>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the screen.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the screen.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the document. Unlike `clientX`, this value includes the horizontal scroll offset, if any.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top of the document. Unlike `clientY,` this value includes the vertical scroll offset, if any.</haxe_doc>
		</pageY>
		<radiusX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenX`.</haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenY`.</haxe_doc>
		</radiusY>
		<rotationAngle public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.</haxe_doc>
		</rotationAngle>
		<force public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the amount of pressure being applied to the surface by the user, as a `float` between `0.0` (no pressure) and `1.0` (maximum pressure).</haxe_doc>
		</force>
		<new public="1" set="method">
			<f a="touchInitDict">
				<t path="js.html.TouchInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Touch` interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.

	Documentation [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Touch$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Touch>]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<class path="js.html.TouchEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TouchEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<touches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects representing all current points of contact with the surface, regardless of target or changed status.</haxe_doc>
		</touches>
		<targetTouches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event.</haxe_doc>
		</targetTouches>
		<changedTouches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects representing individual points of contact whose states changed between the previous touch event and this one.</haxe_doc>
		</changedTouches>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the alt key was down when the touch event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the meta key was down when the touch event was fired.</haxe_doc>
		</metaKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the control key was down when the touch event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the shift key was down when the touch event was fired.</haxe_doc>
		</shiftKey>
		<initTouchEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?detail:?ctrlKey:?altKey:?shiftKey:?metaKey:?touches:?targetTouches:?changedTouches" v=":false:false::0:false:false:false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.TouchList"/>
				<c path="js.html.TouchList"/>
				<c path="js.html.TouchList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, detail : 0, cancelable : false, canBubble : false }</e></m></meta>
		</initTouchEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.TouchEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `TouchEvent` interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.

	Documentation [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TouchEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TouchEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<touches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</touches>
	<targetTouches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</targetTouches>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<changedTouches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</changedTouches>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.TouchInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TouchInit.hx"><a>
	<target><c path="js.html.EventTarget"/></target>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<rotationAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rotationAngle>
	<radiusY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusY>
	<radiusX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusX>
	<pageY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageY>
	<pageX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageX>
	<identifier><x path="Int"/></identifier>
	<force>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</force>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
</a></typedef>
	<class path="js.html.TouchList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of `Touch` objects in the `TouchList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the `Touch` object at the specified index in the list.</haxe_doc>
		</item>
		<haxe_doc><![CDATA[The `TouchList` interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.

	Documentation [TouchList](https://developer.mozilla.org/en-US/docs/Web/API/TouchList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchList>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<LOADING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ERROR>
		<kind public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, metadata.</haxe_doc>
		</kind>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, indicating the address of the text track data.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `srclang` HTML attribute, indicating the language of the text track data.</haxe_doc>
		</srclang>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `label` HTML attribute, indicating a user-readable title for the track.</haxe_doc>
		</label>
		<default_ public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>Is a `Boolean` reflects the `default` HTML attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.</haxe_doc>
		</default_>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns  an <code>unsigned short</code> that show the readiness state of the track:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NONE</code></td>
		    <td>0</td>
		    <td>Indicates that the text track's cues have not been obtained.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td>1</td>
		    <td>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</td>
		   </tr>
		   <tr>
		    <td><code>LOADED</code></td>
		    <td>2</td>
		    <td>Indicates that the text track has been loaded with no fatal errors.</td>
		   </tr>
		   <tr>
		    <td><code>ERROR</code></td>
		    <td>3</td>
		    <td>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<track public="1" set="null">
			<c path="js.html.TextTrack"/>
			<haxe_doc>Returns `TextTrack` is the track element's text track data.</haxe_doc>
		</track>
		<haxe_doc><![CDATA[The `HTMLTrackElement`

	Documentation [HTMLTrackElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TreeWalker" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/TreeWalker.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `TreeWalker` was created.</haxe_doc>
		</root>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> {{deprecated_inline}}</td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Attr</code> node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> {{deprecated_inline}}</td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> {{deprecated_inline}}</td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> {{deprecated_inline}}</td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> {{deprecated_inline}}</td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Is the `Node` on which the `TreeWalker` is currently pointing at.</haxe_doc>
		</currentNode>
		<parentNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</parentNode>
		<firstChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</firstChild>
		<lastChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its previous sibling, if any, and returns the found sibling. If there is no such node, return `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its next sibling, if any, and returns the found sibling. If there is no such node, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextSibling>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousNode>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextNode>
		<haxe_doc><![CDATA[The `TreeWalker` object represents the nodes of a document subtree and a position within them.

	Documentation [TreeWalker](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker>]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<typedef path="js.html.UIEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/UIEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.UListElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLUListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list elements.

	Documentation [HTMLUListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParams" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a specified key/value pair as a new search parameter.</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the given search parameter, and its associated value, from the list of all search parameters.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the first value associated to the given search parameter.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the values associated with a given search parameter.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if such a search parameter exists.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.</haxe_doc>
		</set>
		<sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sorts all key/value pairs, if any, by their keys.
		@throws DOMError</haxe_doc>
		</sort>
		<entries public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="Array"><c path="Array"><c path="String"/></c></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.URLSearchParams"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init" v="&quot;&quot;">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
					</f>
					<meta><m n=":value"><e>{ init : "" }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` interface defines utility methods to work with the query string of a URL.

	Documentation [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams>]]></haxe_doc>
		<meta><m n=":native"><e>"URLSearchParams"</e></m></meta>
	</class>
	<typedef path="js.html.URLSearchParamsIterator" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/URLSearchParamsIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.VTTCue" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VTTCue.hx" extern="1">
		<extends path="js.html.TextTrackCue"/>
		<region public="1"><c path="js.html.VTTRegion"/></region>
		<vertical public="1"><x path="js.html.DirectionSetting"/></vertical>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<line public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></line>
		<lineAlign public="1"><x path="js.html.LineAlignSetting"/></lineAlign>
		<position public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></position>
		<positionAlign public="1"><x path="js.html.PositionAlignSetting"/></positionAlign>
		<size public="1"><x path="Float"/></size>
		<align public="1"><x path="js.html.AlignSetting"/></align>
		<text public="1"><c path="String"/></text>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method">
			<f a="startTime:endTime:text">
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[VTTCues represent a cue in a text track.

	Documentation [VTTCue](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VTTCue>]]></haxe_doc>
		<meta><m n=":native"><e>"VTTCue"</e></m></meta>
	</class>
	<class path="js.html.VTTRegion" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VTTRegion.hx" extern="1">
		<id public="1"><c path="String"/></id>
		<width public="1"><x path="Float"/></width>
		<lines public="1"><x path="Int"/></lines>
		<regionAnchorX public="1"><x path="Float"/></regionAnchorX>
		<regionAnchorY public="1"><x path="Float"/></regionAnchorY>
		<viewportAnchorX public="1"><x path="Float"/></viewportAnchorX>
		<viewportAnchorY public="1"><x path="Float"/></viewportAnchorY>
		<scroll public="1"><x path="js.html.ScrollSetting"/></scroll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTRegion"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/ValidityState.hx" extern="1">
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element has a `required` attribute, but no value.</haxe_doc>
		</valueMissing>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is not in the required syntax (when `type` is `email` or `url`).</haxe_doc>
		</typeMismatch>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not match the specified `pattern`.</haxe_doc>
		</patternMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value exceeds the specified `maxlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects. Note: This will never be `true` in Gecko, because elements' values are prevented from being longer than `maxlength`.</haxe_doc>
		</tooLong>
		<tooShort public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value fails to meet the specified `minlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects.</haxe_doc>
		</tooShort>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is less than the minimum specified by the `min` attribute.</haxe_doc>
		</rangeUnderflow>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is greater than the maximum specified by the `max` attribute.</haxe_doc>
		</rangeOverflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not fit the rules determined by the `step` attribute (that is, it's not evenly divisible by the step value).</haxe_doc>
		</stepMismatch>
		<badInput public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the user has provided input that the browser is unable to convert.</haxe_doc>
		</badInput>
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element's custom validity message has been set to a non-empty string by calling the element's `setCustomValidity()` method.</haxe_doc>
		</customError>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element meets all constraint validations, and is therefore considered to be valid.</haxe_doc>
		</valid>
		<haxe_doc><![CDATA[The `ValidityState` interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.

	Documentation [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ValidityState>]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.</haxe_doc>
		</height>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoWidth>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoHeight>
		<poster public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.</haxe_doc>
		</poster>
		<getVideoPlaybackQuality public="1" set="method">
			<f a=""><c path="js.html.VideoPlaybackQuality"/></f>
			<haxe_doc>Returns a `VideoPlaybackQuality` objects that contains the current playback metrics.</haxe_doc>
		</getVideoPlaybackQuality>
		<haxe_doc><![CDATA[The `HTMLVideoElement` interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.

	Documentation [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<class path="js.html.VideoPlaybackQuality" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VideoPlaybackQuality.hx" extern="1">
		<creationTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` containing the time in miliseconds since the start of the navigation and the creation of the object.</haxe_doc>
		</creationTime>
		<totalVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames created and dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</totalVideoFrames>
		<droppedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</droppedVideoFrames>
		<corruptedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames corrupted since the creation of the associated `HTMLVideoElement`. A corrupted frame may be created or dropped.</haxe_doc>
		</corruptedVideoFrames>
		<haxe_doc><![CDATA[The `VideoPlaybackQuality` interface represents the set of metrics describing the playback quality of a video.

	Documentation [VideoPlaybackQuality](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality>]]></haxe_doc>
		<meta><m n=":native"><e>"VideoPlaybackQuality"</e></m></meta>
	</class>
	<class path="js.html.VideoStreamTrack" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VideoStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"VideoStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrack" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VideoTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<selected public="1"><x path="Bool"/></selected>
		<meta><m n=":native"><e>"VideoTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrackList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VideoTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<selectedIndex public="1" set="null"><x path="Int"/></selectedIndex>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VideoTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"VideoTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.VisibilityState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VisibilityState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.WheelEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/WheelEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<DOM_DELTA_PIXEL public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_DELTA_PIXEL>
		<DOM_DELTA_LINE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_DELTA_LINE>
		<DOM_DELTA_PAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_DELTA_PAGE>
		<deltaX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the horizontal scroll amount.</haxe_doc>
		</deltaX>
		<deltaY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the vertical scroll amount.</haxe_doc>
		</deltaY>
		<deltaZ public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the scroll amount for the z-axis.</haxe_doc>
		</deltaZ>
		<deltaMode public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> representing the unit of the delta values scroll amount. Permitted values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PIXEL</code></td>
		    <td><code>0x00</code></td>
		    <td>The delta values are specified in pixels.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_LINE</code></td>
		    <td><code>0x01</code></td>
		    <td>The delta values are specified in lines.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PAGE</code></td>
		    <td><code>0x02</code></td>
		    <td>The delta values are specified in pages.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</deltaMode>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.WheelEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `WheelEvent` interface represents events that occur due to the user moving a mouse wheel or similar input device.

	Documentation [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WheelEvent"</e></m></meta>
	</class>
	<typedef path="js.html.WheelEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/WheelEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<deltaZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaZ>
	<deltaY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaY>
	<deltaX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaX>
	<deltaMode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</deltaMode>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.Window" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/Window.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<window public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the current window.</haxe_doc>
		</window>
		<self public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<document public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<locationbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<personalbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<scrollbars public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<statusbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<toolbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current window is closed or not.</haxe_doc>
		</closed>
		<event public="1" set="null">
			<d/>
			<haxe_doc>Returns the current event, which is the event currently being handled by the JavaScript code's context, or `undefined` if no event is currently being handled. The `Event` object passed directly to event handlers should be used instead whenever possible.</haxe_doc>
		</event>
		<frames public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of frames in the window. See also `window.frames`.</haxe_doc>
		</length>
		<top public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the topmost window in the window hierarchy. This property is read only.</haxe_doc>
		</top>
		<opener public="1">
			<d/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<parent public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<console public="1" set="null">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Returns a reference to the console object which provides access to the browser's debugging console.</haxe_doc>
		</console>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<innerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<scrollX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<pageXOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollX`.</haxe_doc>
		</pageXOffset>
		<scrollY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<pageYOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollY`</haxe_doc>
		</pageYOffset>
		<screenX public="1">
			<d/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1">
			<d/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<outerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<outerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns a `Performance` object, which includes the `Performance.timing` and `Performance.navigation` attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.</haxe_doc>
		</performance>
		<devicePixelRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio between physical pixels and device independent pixels in the current display.</haxe_doc>
		</devicePixelRatio>
		<scrollMaxX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.</haxe_doc>
		</scrollMaxX>
		<scrollMaxY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).</haxe_doc>
		</scrollMaxY>
		<fullScreen public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the window is displayed in full screen or not.</haxe_doc>
		</fullScreen>
		<ondevicemotion public="1"><x path="haxe.Function"/></ondevicemotion>
		<ondeviceorientation public="1"><x path="haxe.Function"/></ondeviceorientation>
		<onabsolutedeviceorientation public="1"><x path="haxe.Function"/></onabsolutedeviceorientation>
		<ondeviceproximity public="1"><x path="haxe.Function"/></ondeviceproximity>
		<onuserproximity public="1"><x path="haxe.Function"/></onuserproximity>
		<ondevicelight public="1"><x path="haxe.Function"/></ondevicelight>
		<content public="1" set="null">
			<d/>
			<haxe_doc>Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.</haxe_doc>
		</content>
		<orientation public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.</haxe_doc>
		</orientation>
		<onorientationchange public="1"><x path="haxe.Function"/></onorientationchange>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><f a="::::">
	<x path="haxe.extern.EitherType">
		<c path="js.html.Event"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<d/>
</f></onerror>
		<speechSynthesis public="1" set="null">
			<c path="js.html.SpeechSynthesis"/>
			<haxe_doc>Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.</haxe_doc>
		</speechSynthesis>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</localStorage>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether a context is capable of using features that require secure contexts.</haxe_doc>
		</isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</sessionStorage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the current window.
		@throws DOMError</haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method stops window loading.
		@throws DOMError</haxe_doc>
		</stop>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus on the current window.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus away from the window.
		@throws DOMError</haxe_doc>
		</blur>
		<open public="1" set="method">
			<f a="?url:?target:?features" v="&quot;&quot;:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ features : "", target : "", url : "" }</e></m></meta>
			<haxe_doc>Opens a new window.
		@throws DOMError</haxe_doc>
		</open>
		<alert public="1" set="method">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
			<overloads><alert public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
</alert></overloads>
		</alert>
		<confirm public="1" set="method">
			<f a="?message" v="&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>Displays a dialog with a message that the user needs to respond to.
		@throws DOMError</haxe_doc>
		</confirm>
		<prompt public="1" set="method">
			<f a="?message:?default_" v="&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ default_ : "", message : "" }</e></m></meta>
			<haxe_doc>Returns the text entered by the user in a prompt dialog.
		@throws DOMError</haxe_doc>
		</prompt>
		<print public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Opens the Print Dialog to print the current document.
		@throws DOMError</haxe_doc>
		</print>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:?transfer">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.
		@throws DOMError</haxe_doc>
		</postMessage>
		<captureEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Registers the window to capture all events of the specified type.</haxe_doc>
		</captureEvents>
		<releaseEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the window from trapping events of a specific type.</haxe_doc>
		</releaseEvents>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>Returns the selection object representing the selected item(s).
		@throws DOMError</haxe_doc>
		</getSelection>
		<getComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.
		@throws DOMError</haxe_doc>
		</getComputedStyle>
		<matchMedia public="1" set="method">
			<f a="query">
				<c path="String"/>
				<c path="js.html.MediaQueryList"/>
			</f>
			<haxe_doc>Returns a `MediaQueryList` object representing the specified media query string.
		@throws DOMError</haxe_doc>
		</matchMedia>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the window to the specified coordinates.
		@throws DOMError</haxe_doc>
		</moveTo>
		<moveBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the current window by a specified amount.
		@throws DOMError</haxe_doc>
		</moveBy>
		<resizeTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Dynamically resizes window.
		@throws DOMError</haxe_doc>
		</resizeTo>
		<resizeBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resizes the current window by a certain amount.
		@throws DOMError</haxe_doc>
		</resizeBy>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
			<overloads><scroll public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
</scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
			<overloads><scrollTo public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
</scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
			<overloads><scrollBy public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
</scrollBy></overloads>
		</scrollBy>
		<requestAnimationFrame public="1" set="method">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.
		@throws DOMError</haxe_doc>
		</requestAnimationFrame>
		<cancelAnimationFrame public="1" set="method">
			<f a="handle">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables you to cancel a callback previously scheduled with `Window.requestAnimationFrame`.
		@throws DOMError</haxe_doc>
		</cancelAnimationFrame>
		<getDefaultComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets default computed style for the specified element, ignoring author stylesheets.
		@throws DOMError</haxe_doc>
		</getDefaultComputedStyle>
		<scrollByLines public="1" set="method">
			<f a="numLines:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document by the given number of lines.</haxe_doc>
		</scrollByLines>
		<scrollByPages public="1" set="method">
			<f a="numPages:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the current document by the specified number of pages.</haxe_doc>
		</scrollByPages>
		<sizeToContent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sizes the window according to its content.
		@throws DOMError</haxe_doc>
		</sizeToContent>
		<updateCommands public="1" set="method">
			<f a="action:?sel:?reason" v="::0">
				<c path="String"/>
				<c path="js.html.Selection"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reason : 0 }</e></m></meta>
			<haxe_doc>Updates the state of commands of the current chrome window (UI).</haxe_doc>
		</updateCommands>
		<find public="1" set="method">
			<f a="?str:?caseSensitive:?backwards:?wrapAround:?wholeWord:?searchInFrames:?showDialog" v="&quot;&quot;:false:false:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ showDialog : false, searchInFrames : false, wholeWord : false, wrapAround : false, backwards : false, caseSensitive : false, str : "" }</e></m></meta>
			<haxe_doc>Searches for a given string in a window.
		@throws DOMError</haxe_doc>
		</find>
		<dump public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes a message to the console.</haxe_doc>
		</dump>
		<setResizable public="1" set="method">
			<f a="resizable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggles a user's ability to resize a window.</haxe_doc>
		</setResizable>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `Window` interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.

	Documentation [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Window$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Window>]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.XPathExpression" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method">
			<f a="contextNode:?type:?result" v=":0:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>provide a context node/document, `XPathResult` constant, and `XPathResult` to store the query or null to return a new XPathResult.
		@throws DOMError</haxe_doc>
		</evaluate>
		<haxe_doc><![CDATA[An `XPathExpression` is a compiled XPath query returned from `document.createExpression()`. It has a method `evaluate()` which can be used to execute the compiled XPath.

	Documentation [XPathExpression](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<typedef path="js.html.XPathNSResolver" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/XPathNSResolver.hx"><a><lookupNamespaceURI set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI></a></typedef>
	<class path="js.html.XPathResult" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANY_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NUMBER_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STRING_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BOOLEAN_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ANY_UNORDERED_NODE_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</FIRST_ORDERED_NODE_TYPE>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>integer (short)</haxe_doc>
		</resultType>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>float</haxe_doc>
		</numberValue>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>String</haxe_doc>
		</stringValue>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</booleanValue>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Node</haxe_doc>
		</singleNodeValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</invalidIteratorState>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Integer</haxe_doc>
		</snapshotLength>
		<iterateNext public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</iterateNext>
		<snapshotItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</snapshotItem>
		<haxe_doc><![CDATA[The `XPathResult` interface represents the results generated by evaluating an XPath 1.0 expression within the context of a given node.

	Documentation [XPathResult](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathResult>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeyError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeyError.hx" extern="1">
		<extends path="js.html.Event"/>
		<systemCode public="1" set="null"><x path="Int"/></systemCode>
		<meta><m n=":native"><e>"MediaKeyError"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySession" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeySession.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<error public="1" set="null"><c path="js.html.eme.MediaKeyError"/></error>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.</haxe_doc>
		</sessionId>
		<expiration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time after which the keys in the current session can no longer be used to decrypt media data, or `NaN` if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.</haxe_doc>
		</expiration>
		<closed public="1" set="null">
			<c path="js.lib.Promise"><x path="Void"/></c>
			<haxe_doc>Returns a `Promise` signaling when a `MediaKeySession` closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data. </haxe_doc>
		</closed>
		<keyStatuses public="1" set="null">
			<c path="js.html.eme.MediaKeyStatusMap"/>
			<haxe_doc>Contains a reference to a read-only `MediaKeyStatusMap` of the current session's keys and their statuses.</haxe_doc>
		</keyStatuses>
		<onkeystatuseschange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when there has been a change in the keys in a session or their statuses.</haxe_doc>
		</onkeystatuseschange>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the content decryption module has generated a message for the session.</haxe_doc>
		</onmessage>
		<generateRequest public="1" set="method">
			<f a="initDataType:initData">
				<c path="String"/>
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
			<overloads><generateRequest public="1" set="method">
	<f a="initDataType:initData">
		<c path="String"/>
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
</generateRequest></overloads>
		</generateRequest>
		<load public="1" set="method">
			<f a="sessionId">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to a boolean value after loading data for a specified session object. </haxe_doc>
		</load>
		<update public="1" set="method">
			<f a="response">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
			<overloads><update public="1" set="method">
	<f a="response">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
</update></overloads>
		</update>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.</haxe_doc>
		</close>
		<remove public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after removing any session data associated with the current object.</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[The `MediaKeySession` interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).

	Documentation [MediaKeySession](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySession"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeySessionType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeySessionType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeySessionType.MediaKeySessionType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeySessionType.hx" private="1" module="js.html.eme.MediaKeySessionType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.eme.MediaKeyStatusMap" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeyStatusMap.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of key/value pars in the status map.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
			<overloads><has public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
</has></overloads>
		</has>
		<get public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<d/>
			</f>
			<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<d/>
	</f>
	<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
</get></overloads>
		</get>
		<entries public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing keys for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing values for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair in the status map, in insertion order. If `argument` is present it will be passed to the callback.
		@throws DOMError</haxe_doc>
		</forEach>
		<haxe_doc><![CDATA[The `MediaKeyStatusMap` interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.

	Documentation [MediaKeyStatusMap](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeyStatusMap"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySystemAccess" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeySystemAccess.hx" extern="1">
		<keySystem public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` identifying the key system being used.</haxe_doc>
		</keySystem>
		<getConfiguration public="1" set="method">
			<f a=""><t path="js.html.eme.MediaKeySystemConfiguration"/></f>
			<haxe_doc>Returns a `MediaKeySystemConfiguration` object with the supported combination of configuration options.</haxe_doc>
		</getConfiguration>
		<createMediaKeys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.eme.MediaKeys"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to a new `MediaKeys` object.</haxe_doc>
		</createMediaKeys>
		<haxe_doc><![CDATA[The `MediaKeySystemAccess` interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the `Navigator.requestMediaKeySystemAccess` method.

	Documentation [MediaKeySystemAccess](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySystemAccess"</e></m></meta>
	</class>
	<typedef path="js.html.eme.MediaKeySystemConfiguration" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeySystemConfiguration.hx">
		<a>
			<videoCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported video type and capability pairs.</haxe_doc>
			</videoCapabilities>
			<sessionTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</sessionTypes>
			<persistentState>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether the ability to persist state is required.</haxe_doc>
			</persistentState>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</label>
			<initDataTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.</haxe_doc>
			</initDataTypes>
			<distinctiveIdentifier>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether a persistent distinctive identifier is required.</haxe_doc>
			</distinctiveIdentifier>
			<audioCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported audio type and capability pairs.</haxe_doc>
			</audioCapabilities>
		</a>
		<haxe_doc><![CDATA[The `MediaKeySystemConfiguration` interface Encrypted Media Extensions API provides configuration information about the media key system.

	Documentation [MediaKeySystemConfiguration](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.eme.MediaKeySystemMediaCapability" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeySystemMediaCapability.hx"><a>
	<robustness>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</robustness>
	<contentType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contentType>
</a></typedef>
	<class path="js.html.eme.MediaKeys" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeys.hx" extern="1">
		<keySystem public="1" set="null"><c path="String"/></keySystem>
		<createSession public="1" set="method">
			<f a="?sessionType" v="TEMPORARY">
				<x path="js.html.eme.MediaKeySessionType"/>
				<c path="js.html.eme.MediaKeySession"/>
			</f>
			<meta><m n=":value"><e>{ sessionType : TEMPORARY }</e></m></meta>
			<haxe_doc>Returns a new `MediaKeySession` object, which represents a context for message exchange with a content decryption module (CDM).
		@throws DOMError</haxe_doc>
		</createSession>
		<setServerCertificate public="1" set="method">
			<f a="serverCertificate">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
			<overloads><setServerCertificate public="1" set="method">
	<f a="serverCertificate">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
</setServerCertificate></overloads>
		</setServerCertificate>
		<haxe_doc><![CDATA[The `MediaKeys` interface of EncryptedMediaExtensions API the represents a set of keys that an associated `HTMLMediaElement` can use for decryption of media data during playback.

	Documentation [MediaKeys](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeys"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeysRequirement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeysRequirement.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeysRequirement.MediaKeysRequirement_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/eme/MediaKeysRequirement.hx" private="1" module="js.html.eme.MediaKeysRequirement" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Cursor" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/Cursor.hx" extern="1">
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<c path="js.html.idb.Index"/>
			</x>
			<haxe_doc>Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.</haxe_doc>
		</source>
		<direction public="1" set="null">
			<x path="js.html.idb.CursorDirection"/>
			<haxe_doc>Returns the direction of traversal of the cursor. See Constants for possible values.</haxe_doc>
		</direction>
		<key public="1" set="null">
			<d/>
			<haxe_doc>Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.</haxe_doc>
		</key>
		<primaryKey public="1" set="null">
			<d/>
			<haxe_doc>Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.</haxe_doc>
		</primaryKey>
		<update public="1" set="method">
			<f a="value">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records.
		@throws DOMError</haxe_doc>
		</update>
		<advance public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the number times a cursor should move its position forward.
		@throws DOMError</haxe_doc>
		</advance>
		<continue_ public="1" set="method">
			<f a="?key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>Advances the cursor to the next position along its direction, to the item whose key matches the optional `key` parameter.
		@throws DOMError</haxe_doc>
		</continue_>
		<continuePrimaryKey public="1" set="method">
			<f a="key:primaryKey">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the cursor to the given index key and primary key given as arguments.
		@throws DOMError</haxe_doc>
		</continuePrimaryKey>
		<delete public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.
		@throws DOMError</haxe_doc>
		</delete>
		<haxe_doc><![CDATA[The `IDBCursor` interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.

	Documentation [IDBCursor](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursor"</e></m></meta>
	</class>
	<abstract path="js.html.idb.CursorDirection" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/CursorDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Database" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` that contains the name of the connected database.</haxe_doc>
		</name>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.</haxe_doc>
		</version>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.</haxe_doc>
		</objectStoreNames>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access of the database is aborted.</haxe_doc>
		</onabort>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when the `close` event occurs; this happens when the database is unexpectedly closed, such as during application shutdown.</haxe_doc>
		</onclose>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access to the database fails.</haxe_doc>
		</onerror>
		<onversionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when a database structure change (`IDBOpenDBRequest.onupgradeneeded` event or` ``IDBFactory.deleteDatabase()` was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see `IDBVersionChangeEvent`), but it is related.</haxe_doc>
		</onversionchange>
		<createObjectStore public="1" set="method">
			<f a="name:?optionalParameters">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.ObjectStoreParameters"/></x>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>Creates and returns a new object store or index.
		@throws DOMError</haxe_doc>
		</createObjectStore>
		<deleteObjectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the object store with the given name in the connected database, along with any indexes that reference it.
		@throws DOMError</haxe_doc>
		</deleteObjectStore>
		<transaction public="1" set="method">
			<f a="storeNames:?mode" v=":READONLY">
				<c path="String"/>
				<x path="js.html.idb.TransactionMode"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
			<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
			<overloads><transaction public="1" set="method">
	<f a="storeNames:?mode" v=":READONLY">
		<c path="Array"><c path="String"/></c>
		<x path="js.html.idb.TransactionMode"/>
		<c path="js.html.idb.Transaction"/>
	</f>
	<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
	<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
</transaction></overloads>
		</transaction>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Returns immediately and closes the connection to a database in a separate thread.</haxe_doc>
		</close>
		<createMutableFile public="1" set="method">
			<f a="name:?type">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMutableFile>
		<haxe_doc><![CDATA[The `IDBDatabase` interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.

	Documentation [IDBDatabase](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/Factory.hx" extern="1">
		<open public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="name:version">
		<c path="String"/>
		<x path="Int"/>
		<c path="js.html.idb.OpenDBRequest"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<deleteDatabase public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteDatabase>
		<cmp public="1" set="method">
			<f a="first:second">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cmp>
		<haxe_doc><![CDATA[In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBFactory](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/Index.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this index.</haxe_doc>
		</name>
		<objectStore public="1" set="null">
			<c path="js.html.idb.ObjectStore"/>
			<haxe_doc>The name of the object store referenced by this index.</haxe_doc>
		</objectStore>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this index. If null, this index is not auto-populated.</haxe_doc>
		</keyPath>
		<multiEntry public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.</haxe_doc>
		</multiEntry>
		<unique public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>If `true`, this index does not allow duplicate values for a key.</haxe_doc>
		</unique>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range.
		@throws DOMError</haxe_doc>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the given key or the primary key, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getKey>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and in a separate thread, returns the number of records within a key range.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<haxe_doc><![CDATA[`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.

	Documentation [IDBIndex](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<typedef path="js.html.idb.IndexParameters" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/IndexParameters.hx"><a>
	<unique>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unique>
	<multiEntry>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</multiEntry>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.idb.ObjectStore" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/ObjectStore.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.</haxe_doc>
		</keyPath>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A list of the names of indexes on objects in this object store.</haxe_doc>
		</indexNames>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The `IDBTransaction` object to which this object store belongs.</haxe_doc>
		</transaction>
		<autoIncrement public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The value of the auto increment flag for this object store.</haxe_doc>
		</autoIncrement>
		<put public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is `readwrite`.
		@throws DOMError</haxe_doc>
		</put>
		<add public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for adding new records to an object store.
		@throws DOMError</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>returns an `IDBRequest` object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.
		@throws DOMError</haxe_doc>
		</getKey>
		<clear public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Creates and immediately returns an `IDBRequest` object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.
		@throws DOMError</haxe_doc>
		</clear>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursorWithValue` object. Used for iterating through an object store by primary key with a cursor.
		@throws DOMError</haxe_doc>
		</openCursor>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?optionalParameters">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?optionalParameters">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
</createIndex></overloads>
		</createIndex>
		<index public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.
		@throws DOMError</haxe_doc>
		</index>
		<deleteIndex public="1" set="method">
			<f a="indexName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the specified index in the connected database, used during a version upgrade.
		@throws DOMError</haxe_doc>
		</deleteIndex>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the total number of records that match the provided key or `IDBKeyRange`. If no arguments are provided, it returns the total number of records in the store.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursor`. Used for iterating through an object store with a key.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<haxe_doc><![CDATA[This example shows a variety of different uses of object stores, from updating the data structure with `IDBObjectStore.createIndex` inside an `onupgradeneeded` function, to adding a new item to our object store with `IDBObjectStore.add`. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBObjectStore](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<typedef path="js.html.idb.ObjectStoreParameters" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/ObjectStoreParameters.hx"><a>
	<keyPath>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</keyPath>
	<autoIncrement>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoIncrement>
</a></typedef>
	<typedef path="js.html.idb.OpenDBOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/OpenDBOptions.hx"><a>
	<version>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</version>
	<storage>
		<x path="Null"><x path="js.html.StorageType"/></x>
		<meta><m n=":optional"/></meta>
	</storage>
</a></typedef>
	<class path="js.html.idb.Request" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<result public="1" set="null">
			<d/>
			<haxe_doc>Returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` in the event of an unsuccessful request, indicating what went wrong.</haxe_doc>
		</error>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.idb.Index"/>
					<c path="js.html.idb.Cursor"/>
				</x>
			</x>
			<haxe_doc>The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.</haxe_doc>
		</source>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).</haxe_doc>
		</transaction>
		<readyState public="1" set="null">
			<x path="js.html.idb.RequestReadyState"/>
			<haxe_doc>The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.</haxe_doc>
		</readyState>
		<onsuccess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the success event.</haxe_doc>
		</onsuccess>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the error event.</haxe_doc>
		</onerror>
		<haxe_doc><![CDATA[The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.

	Documentation [IDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the blocked event. This event is triggered when the `upgradeneeded` event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the `versionchange` event was sent.</haxe_doc>
		</onblocked>
		<onupgradeneeded public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `upgradeneeded` event, fired when a database of a bigger version number than the existing stored database is loaded.</haxe_doc>
		</onupgradeneeded>
		<haxe_doc><![CDATA[Also inherits methods from its parents `IDBRequest` and `EventTarget`.

	Documentation [IDBOpenDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<abstract path="js.html.idb.RequestReadyState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/RequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Transaction" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1" set="null">
			<x path="js.html.idb.TransactionMode"/>
			<haxe_doc>The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see the Constants section below. The default value is `readonly`.</haxe_doc>
		</mode>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection with which this transaction is associated.</haxe_doc>
		</db>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` indicating the type of error that occured when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with `IDBTransaction.abort` function.</haxe_doc>
		</error>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `abort` event, fired when the transaction is aborted. This can happen due to:
		 
		  bad requests, e.g. trying to add() the same key twice, or put() with the same index key with a uniqueness constraint and there is no error handler on the request to call preventDefault() on the event,
		  an explicit abort() call from script
		  uncaught exception in request's success/error handler,
		  an I/O error (actual failure to write to disk, e.g. disk detached, or other OS/hardware failure), or
		  quota exceeded.</haxe_doc>
		</onabort>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `complete` event, thrown when the transaction completes successfully.</haxe_doc>
		</oncomplete>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `error` event, thrown when the transaction fails to complete.</haxe_doc>
		</onerror>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a `DOMStringList` of the names of `IDBObjectStore` objects.</haxe_doc>
		</objectStoreNames>
		<objectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</objectStore>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<haxe_doc><![CDATA[Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a `readwrite` transaction `IDBTransaction.oncomplete` was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the `complete` event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The `complete` event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.

	Documentation [IDBTransaction](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<abstract path="js.html.idb.TransactionMode" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/TransactionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.midi.MIDIAccess" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/midi/MIDIAccess.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<inputs public="1" set="null">
			<c path="js.html.midi.MIDIInputMap"/>
			<haxe_doc>Returns an instance of `MIDIInputMap` which provides access to any available MIDI input ports.</haxe_doc>
		</inputs>
		<outputs public="1" set="null">
			<c path="js.html.midi.MIDIOutputMap"/>
			<haxe_doc>Returns an instance of `MIDIOutputMap` which provides access to any available MIDI output ports.</haxe_doc>
		</outputs>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Called whenever a new MIDI port is added or an existing port changes state.</haxe_doc>
		</onstatechange>
		<sysexEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.</haxe_doc>
		</sysexEnabled>
		<haxe_doc><![CDATA[The `MIDIAccess` interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.

	Documentation [MIDIAccess](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIAccess"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIInputMap" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/midi/MIDIInputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIInputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIInputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIInputMap"</e></m></meta>
	</class>
	<typedef path="js.html.midi.MIDIOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/midi/MIDIOptions.hx"><a>
	<sysex>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</sysex>
	<software>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</software>
</a></typedef>
	<class path="js.html.midi.MIDIOutputMap" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/midi/MIDIOutputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIOutputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIOutputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIOutputMap"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushEncryptionKeyName" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushEncryptionKeyName.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushEncryptionKeyName.PushEncryptionKeyName_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushEncryptionKeyName.hx" private="1" module="js.html.push.PushEncryptionKeyName" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushManager" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushManager.hx" extern="1">
		<subscribe public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c>
			</f>
			<haxe_doc>Subscribes to a push service. It returns a `Promise` that resolves to a `PushSubscription` object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.
		@throws DOMError</haxe_doc>
		</subscribe>
		<getSubscription public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c></f>
			<haxe_doc>Retrieves an existing push subscription. It returns a `Promise` that resolves to a `PushSubscription` object containing details of an existing subscription. If no existing subscription exists, this resolves to a `null` value.
		@throws DOMError</haxe_doc>
		</getSubscription>
		<permissionState public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><x path="js.html.push.PushPermissionState"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the permission state of the current `PushManager`, which will be one of `'granted'`, `'denied'`, or `'prompt'`.
		@throws DOMError</haxe_doc>
		</permissionState>
		<new public="1" set="method">
			<f a="scope">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushManager` interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.

	Documentation [PushManager](https://developer.mozilla.org/en-US/docs/Web/API/PushManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushManager>]]></haxe_doc>
		<meta><m n=":native"><e>"PushManager"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushPermissionState" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushPermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushPermissionState.PushPermissionState_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushPermissionState.hx" private="1" module="js.html.push.PushPermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushSubscription" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushSubscription.hx" extern="1">
		<endpoint public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` containing the endpoint associated with the push subscription.</haxe_doc>
		</endpoint>
		<options public="1" set="null">
			<c path="js.html.push.PushSubscriptionOptions"/>
			<haxe_doc>An object containing the options used to create the subscription.</haxe_doc>
		</options>
		<getKey public="1" set="method">
			<f a="name">
				<x path="js.html.push.PushEncryptionKeyName"/>
				<c path="js.lib.ArrayBuffer"/>
			</f>
			<haxe_doc>Returns an `ArrayBuffer` which contains the client's public key, which can then be sent to a server and used in encrypting push message data.
		@throws DOMError</haxe_doc>
		</getKey>
		<unsubscribe public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Starts the asynchronous process of unsubscribing from the push service, returning a `Promise` that resolves to a `Boolean` when the current subscription is successfully unregistered.
		@throws DOMError</haxe_doc>
		</unsubscribe>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.push.PushSubscriptionJSON"/></f>
			<haxe_doc>Standard serializer — returns a JSON representation of the subscription properties.
		@throws DOMError</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="initDict">
				<t path="js.html.push.PushSubscriptionInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushSubscription` interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.

	Documentation [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription>]]></haxe_doc>
		<meta><m n=":native"><e>"PushSubscription"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushSubscriptionInit.hx"><a>
	<scope><c path="String"/></scope>
	<p256dhKey>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</p256dhKey>
	<endpoint><c path="String"/></endpoint>
	<authSecret>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</authSecret>
	<appServerKey>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBufferView"/>
	<c path="js.lib.ArrayBuffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</appServerKey>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionJSON" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushSubscriptionJSON.hx"><a>
	<keys>
		<x path="Null"><t path="js.html.push.PushSubscriptionKeys"/></x>
		<meta><m n=":optional"/></meta>
	</keys>
	<endpoint>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</endpoint>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionKeys" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushSubscriptionKeys.hx"><a>
	<p256dh>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</p256dh>
	<auth>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</auth>
</a></typedef>
	<class path="js.html.push.PushSubscriptionOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushSubscriptionOptions.hx" extern="1">
		<applicationServerKey public="1" set="null"><c path="js.lib.ArrayBuffer"/></applicationServerKey>
		<meta><m n=":native"><e>"PushSubscriptionOptions"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionOptionsInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/push/PushSubscriptionOptionsInit.hx"><a><applicationServerKey>
	<x path="Null"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<c path="String"/>
</x></x>
	<meta><m n=":optional"/></meta>
</applicationServerKey></a></typedef>
	<abstract path="js.html.rtc.PriorityType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/rtc/PriorityType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._PriorityType.PriorityType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/rtc/PriorityType.hx" private="1" module="js.html.rtc.PriorityType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.svg.Angle" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Some unknown type of value.</haxe_doc>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>A unitless `number` interpreted as a value in degrees.</haxe_doc>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
			<haxe_doc>An `angle` with a `deg` unit.</haxe_doc>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" expr="3" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
			<haxe_doc>An `angle` with a `rad` unit.</haxe_doc>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" expr="4" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
			<haxe_doc>An `angle` with a `grad` unit.</haxe_doc>
		</SVG_ANGLETYPE_GRAD>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the `SVG_ANGLETYPE_*` constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in user units. Setting this attribute will cause `valueInSpecifiedUnits` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</value>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in the units expressed by `unitType`. Setting this attribute will cause `value` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueInSpecifiedUnits>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc>The value as a `DOMString` value, in the units expressed by `unitType`. Setting this attribute will cause `value`, `valueInSpecifiedUnits` and `unitType` to be updated automatically to reflect this setting.
		
		 Exceptions on setting:
		 a `DOMException` with code `SYNTAX_ERR` is raised if the assigned string cannot be parsed as a valid `angle`. a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGAngle` interface is used to represent a value that can be an `angle` or `number` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.

	Documentation [SVGAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/AnimatedLength.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Length"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Length"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLength` interface is used for attributes of basic type length which can be animated.

	Documentation [SVGAnimatedLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.

	Documentation [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/AnimatedRect.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Rect"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Rect"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.

	Documentation [SVGAnimatedRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedString" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/AnimatedString.hx" extern="1">
		<baseVal public="1">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.</haxe_doc>
		</baseVal>
		<animVal public="1" set="null">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.</haxe_doc>
		</animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedString` interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.

	Documentation [SVGAnimatedString](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedString"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedTransformList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/AnimatedTransformList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.TransformList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.TransformList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedTransformList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.BoundingBoxOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/BoundingBoxOptions.hx"><a>
	<stroke>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stroke>
	<markers>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</markers>
	<fill>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<clipped>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</clipped>
</a></typedef>
	<class path="js.html.svg.Element" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<ownerSVGElement public="1" set="null">
			<c path="js.html.svg.SVGElement"/>
			<haxe_doc>An `SVGSVGElement` referring to the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</ownerSVGElement>
		<viewportElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc>The `SVGElement`, which established the current viewport. Often, the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</viewportElement>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.

	Documentation [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GraphicsElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/GraphicsElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<transform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>An `SVGAnimatedTransformList` reflecting the computed value of the `transform` property and its corresponding `transform` attribute of the given element.</haxe_doc>
		</transform>
		<nearestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></nearestViewportElement>
		<farthestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></farthestViewportElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getBBox public="1" set="method">
			<f a="?aOptions">
				<x path="Null"><t path="js.html.svg.BoundingBoxOptions"/></x>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>Returns a `DOMRect` representing the computed bounding box of the current element.
		@throws DOMError</haxe_doc>
		</getBBox>
		<getCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.</haxe_doc>
		</getCTM>
		<getScreenCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.</haxe_doc>
		</getScreenCTM>
		<getTransformToElement public="1" set="method">
			<f a="element">
				<c path="js.html.svg.GraphicsElement"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getTransformToElement>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGGraphicsElement` interface represents SVG elements whose primary purpose is to directly render graphics into a group.

	Documentation [SVGGraphicsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGraphicsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ImageElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/ImageElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `image` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `image` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `image` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `image` element.</haxe_doc>
		</height>
		<preserveAspectRatio public="1" set="null">
			<c path="js.html.svg.AnimatedPreserveAspectRatio"/>
			<haxe_doc>An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given `image` element.</haxe_doc>
		</preserveAspectRatio>
		<decoding public="1"><c path="String"/></decoding>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGImageElement` interface corresponds to the `image` element.

	Documentation [SVGImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_LENGTHTYPE_UNKNOWN>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_LENGTHTYPE_PC>
		<unitType public="1" set="null"><x path="Int"/></unitType>
		<value public="1"><x path="Float"/></value>
		<valueInSpecifiedUnits public="1"><x path="Float"/></valueInSpecifiedUnits>
		<valueAsString public="1"><c path="String"/></valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGLength` interface correspond to the length basic data type.

	Documentation [SVGLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the a component of the matrix.</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the b component of the matrix.</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the c component of the matrix.</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the d component of the matrix.</haxe_doc>
		</d>
		<e public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the e component of the matrix.</haxe_doc>
		</e>
		<f public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the f component of the matrix.</haxe_doc>
		</f>
		<multiply public="1" set="method">
			<f a="secondMatrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as `SVGMatrix`.</haxe_doc>
		</multiply>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns the inverse matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</inverse>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scaleFactor">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scale>
		<scaleNonUniform public="1" set="method">
			<f a="scaleFactorX:scaleFactorY">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used.
		@throws DOMError</haxe_doc>
		</rotateFromVector>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipY>
		<skewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewY>
		<haxe_doc><![CDATA[Many of SVG's graphics operations utilize 2x3 matrices of the form:

	Documentation [SVGMatrix](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Number.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the number.
		 Note: If the `SVGNumber` is read-only, a `DOMException` with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `SVGNumber` interface corresponds to the `number` basic data type.

	Documentation [SVGNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<haxe_doc><![CDATA[An `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.

	Documentation [SVGPoint](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" expr="0" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MEETORSLICE_SLICE>
		<align public="1"><x path="Int"/></align>
		<meetOrSlice public="1"><x path="Int"/></meetOrSlice>
		<haxe_doc><![CDATA[The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.

	Documentation [SVGPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Rect.hx" extern="1">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element.If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>This represents the width of the rectangle.A value that is negative results to an error. A value of zero disables rendering of the element</haxe_doc>
		</width>
		<height public="1"><x path="Float"/></height>
		<haxe_doc><![CDATA[The `SVGRect` represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.

	Documentation [SVGRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `svg` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `svg` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `svg` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `svg` element.</haxe_doc>
		</height>
		<useCurrentView public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view, i.e., based on attributes on the `svg` element such as `viewBox`) or on a "custom" view (i.e., a hyperlink into a particular `view` or other element). If the initial view is the "standard" view, then this attribute is `false`. If the initial view is a "custom" view, then this attribute is `true`.</haxe_doc>
		</useCurrentView>
		<currentScale public="1">
			<x path="Float"/>
			<haxe_doc>On an outermost `svg` element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes `currentScale` and `currentTranslate` are equivalent to the 2x3 matrix `[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]`. If "magnification" is enabled (i.e., `zoomAndPan="magnify"`), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost `svg` element).</haxe_doc>
		</currentScale>
		<currentTranslate public="1" set="null">
			<c path="js.html.svg.Point"/>
			<haxe_doc>An `SVGPoint` representing the translation factor that takes into account user "magnification" corresponding to an outermost `svg` element. The behavior is undefined for svg elements that are not at the outermost level.</haxe_doc>
		</currentTranslate>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<suspendRedraw public="1" set="method">
			<f a="maxWaitMilliseconds">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Takes a time-out value which indicates that redraw shall not occur until:
		 the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out.
		
		 In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to `suspendRedraw()` and `unsuspendRedraw()` should, but need not be, made in balanced pairs.
		
		 To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:
		
		 suspendHandleID = suspendRedraw(maxWaitMilliseconds);
		
		 and follow the changes with a method call similar to:
		
		 unsuspendRedraw(suspendHandleID);
		
		 Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls.</haxe_doc>
		</suspendRedraw>
		<unsuspendRedraw public="1" set="method">
			<f a="suspendHandleID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a specified `suspendRedraw()` by providing a unique suspend handle ID that was returned by a previous `suspendRedraw()` call.</haxe_doc>
		</unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels all currently active `suspendRedraw()` method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending `suspendRedraw()` method calls have been cancelled.</haxe_doc>
		</unsuspendRedrawAll>
		<forceRedraw public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</haxe_doc>
		</forceRedraw>
		<pauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this `svg` element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.</haxe_doc>
		</pauseAnimations>
		<unpauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.</haxe_doc>
		</unpauseAnimations>
		<animationsPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this SVG document fragment is in a paused state.</haxe_doc>
		</animationsPaused>
		<getCurrentTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then 0 is returned.</haxe_doc>
		</getCurrentTime>
		<setCurrentTime public="1" set="method">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adjusts the clock for this SVG document fragment, establishing a new current time. If `setCurrentTime` is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.</haxe_doc>
		</setCurrentTime>
		<deselectAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unselects any selected objects, including any selections of text strings and type-in bars.</haxe_doc>
		</deselectAll>
		<createSVGNumber public="1" set="method">
			<f a=""><c path="js.html.svg.Number"/></f>
			<haxe_doc>Creates an `SVGNumber` object outside of any document trees. The object is initialized to a value of zero.</haxe_doc>
		</createSVGNumber>
		<createSVGLength public="1" set="method">
			<f a=""><c path="js.html.svg.Length"/></f>
			<haxe_doc>Creates an `SVGLength` object outside of any document trees. The object is initialized to a value of zero user units.</haxe_doc>
		</createSVGLength>
		<createSVGAngle public="1" set="method">
			<f a=""><c path="js.html.svg.Angle"/></f>
			<haxe_doc>Creates an `SVGAngle` object outside of any document trees. The object is initialized to a value of zero degrees (unitless).</haxe_doc>
		</createSVGAngle>
		<createSVGPoint public="1" set="method">
			<f a=""><c path="js.html.svg.Point"/></f>
			<haxe_doc>Creates an `SVGPoint` object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system.</haxe_doc>
		</createSVGPoint>
		<createSVGMatrix public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Creates an `SVGMatrix` object outside of any document trees. The object is initialized to the identity matrix.</haxe_doc>
		</createSVGMatrix>
		<createSVGRect public="1" set="method">
			<f a=""><c path="js.html.svg.Rect"/></f>
			<haxe_doc>Creates an `SVGRect` object outside of any document trees. The object is initialized such that all values are set to 0 user units.</haxe_doc>
		</createSVGRect>
		<createSVGTransform public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to an identity matrix transform (`SVG_TRANSFORM_MATRIX`).</haxe_doc>
		</createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to the given matrix transform (i.e., `SVG_TRANSFORM_MATRIX`). The values from the parameter matrix are copied, the matrix parameter is not adopted as `SVGTransform::matrix`.</haxe_doc>
		</createSVGTransformFromMatrix>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id.</haxe_doc>
		</getElementById>
		<haxe_doc><![CDATA[The `SVGSVGElement` interface provides access to the properties of `svg` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.

	Documentation [SVGSVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StringList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/StringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGStringList` defines a list of `DOMString` objects.

	Documentation [SVGStringList](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStringList"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TRANSFORM_UNKNOWN>
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_TRANSFORM_SKEWY>
		<type public="1" set="null"><x path="Int"/></type>
		<matrix public="1" set="null"><c path="js.html.svg.Matrix"/></matrix>
		<angle public="1" set="null"><x path="Float"/></angle>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrix>
		<setTranslate public="1" set="method">
			<f a="tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTranslate>
		<setScale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setScale>
		<setRotate public="1" set="method">
			<f a="angle:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRotate>
		<setSkewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewX>
		<setSkewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewY>
		<haxe_doc><![CDATA[`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a `transform` attribute.

	Documentation [SVGTransform](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<consolidate public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</consolidate>
		<haxe_doc><![CDATA[The `SVGTransformList` defines a list of `SVGTransform` objects.

	Documentation [SVGTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only size of the requested variable.</haxe_doc>
		</size>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only type of the requested variable.</haxe_doc>
		</type>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The read-only name of the requested variable.</haxe_doc>
		</name>
		<haxe_doc><![CDATA[The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.

	Documentation [WebGLActiveInfo](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Buffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.

	Documentation [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<powerPreference>
		<x path="Null"><x path="js.html.webgl.PowerPreference"/></x>
		<meta><m n=":optional"/></meta>
	</powerPreference>
	<failIfMajorPerformanceCaveat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</failIfMajorPerformanceCaveat>
	<depth>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<class path="js.html.webgl.ContextEvent" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/ContextEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<statusMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A read-only property containing additional information about the event.</haxe_doc>
		</statusMessage>
		<new public="1" set="method">
			<f a="type:?eventInit">
				<c path="String"/>
				<x path="Null"><t path="js.html.webgl.ContextEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.

	Documentation [WebGLContextEvent](https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLContextEvent"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextEventInit" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/ContextEventInit.hx"><a>
	<statusMessage>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusMessage>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.webgl.Extension" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Extension.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._Extension.Extension_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Extension.hx" private="1" module="js.html.webgl.Extension" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Framebuffer" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Framebuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.

	Documentation [WebGLFramebuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta>
	</class>
	<abstract path="js.html.webgl.PowerPreference" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/PowerPreference.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._PowerPreference.PowerPreference_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/PowerPreference.hx" private="1" module="js.html.webgl.PowerPreference" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Program" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Program.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLProgram is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.

	Documentation [WebGLProgram](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLProgram"</e></m></meta>
	</class>
	<class path="js.html.webgl.Query" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Query.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLQuery` interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.

	Documentation [WebGLQuery](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLQuery"</e></m></meta>
	</class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Renderbuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.

	Documentation [WebGLRenderbuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta>
	</class>
	<class path="js.html.webgl.RenderingContext" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/RenderingContext.hx" extern="1">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<canvas public="1" set="null">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `canvas` element.</haxe_doc>
		</canvas>
		<drawingBufferWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.</haxe_doc>
		</drawingBufferWidth>
		<drawingBufferHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.</haxe_doc>
		</drawingBufferHeight>
		<bufferData public="1" set="method">
			<f a="target:data:usage">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
			<overloads><bufferSubData public="1" set="method">
	<f a="target:offset:data">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
</bufferSubData></overloads>
		</bufferSubData>
		<compressedTexImage2D public="1" set="method">
			<f a="target:level:internalformat:width:height:border:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image in a compressed format.</haxe_doc>
		</compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:width:height:format:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture sub-image in a compressed format.</haxe_doc>
		</compressedTexSubImage2D>
		<readPixels public="1" set="method">
			<f a="x:y:width:height:format:type:pixels">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Reads a block of pixels from the `WebGLFrameBuffer`.
		@throws DOMError</haxe_doc>
		</readPixels>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform4iv></overloads>
		</uniform4iv>
		<uniformMatrix2fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix2fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix3fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix4fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<getContextAttributes public="1" set="method">
			<f a=""><t path="js.html.webgl.ContextAttributes"/></f>
			<haxe_doc>Returns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.</haxe_doc>
		</getContextAttributes>
		<isContextLost public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the context is lost, otherwise returns `false`.</haxe_doc>
		</isContextLost>
		<getSupportedExtensions public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an `Array` of `DOMString` elements with all the supported WebGL extensions.</haxe_doc>
		</getSupportedExtensions>
		<getExtension public="1" params="T" set="method">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>Returns an extension object.
		@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method">
			<f a="texture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects the active texture unit.</haxe_doc>
		</activeTexture>
		<attachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLShader` to a `WebGLProgram`.</haxe_doc>
		</attachShader>
		<bindAttribLocation public="1" set="method">
			<f a="program:index:name">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a generic vertex index to a named attribute variable.</haxe_doc>
		</bindAttribLocation>
		<bindBuffer public="1" set="method">
			<f a="target:buffer">
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLBuffer` object to a given target.</haxe_doc>
		</bindBuffer>
		<bindFramebuffer public="1" set="method">
			<f a="target:framebuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLFrameBuffer` object to a given target.</haxe_doc>
		</bindFramebuffer>
		<bindRenderbuffer public="1" set="method">
			<f a="target:renderbuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLRenderBuffer` object to a given target.</haxe_doc>
		</bindRenderbuffer>
		<bindTexture public="1" set="method">
			<f a="target:texture">
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLTexture` object to a given target.</haxe_doc>
		</bindTexture>
		<blendColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source and destination blending factors.</haxe_doc>
		</blendColor>
		<blendEquation public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the RGB blend equation and alpha blend equation to a single equation.</haxe_doc>
		</blendEquation>
		<blendEquationSeparate public="1" set="method">
			<f a="modeRGB:modeAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the RGB blend equation and alpha blend equation separately.</haxe_doc>
		</blendEquationSeparate>
		<blendFunc public="1" set="method">
			<f a="sfactor:dfactor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic.</haxe_doc>
		</blendFunc>
		<blendFuncSeparate public="1" set="method">
			<f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.</haxe_doc>
		</blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the status of the framebuffer.</haxe_doc>
		</checkFramebufferStatus>
		<clear public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears specified buffers to preset values.</haxe_doc>
		</clear>
		<clearColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the color values used when clearing color buffers.</haxe_doc>
		</clearColor>
		<clearDepth public="1" set="method">
			<f a="depth">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth value used when clearing the depth buffer.</haxe_doc>
		</clearDepth>
		<clearStencil public="1" set="method">
			<f a="s">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the stencil value used when clearing the stencil buffer.</haxe_doc>
		</clearStencil>
		<colorMask public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.</haxe_doc>
		</colorMask>
		<compileShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Compiles a `WebGLShader`.</haxe_doc>
		</compileShader>
		<copyTexImage2D public="1" set="method">
			<f a="target:level:internalformat:x:y:width:height:border">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture image.</haxe_doc>
		</copyTexImage2D>
		<copyTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture sub-image.</haxe_doc>
		</copyTexSubImage2D>
		<createBuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Buffer"/></f>
			<haxe_doc>Creates a `WebGLBuffer` object.</haxe_doc>
		</createBuffer>
		<createFramebuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Framebuffer"/></f>
			<haxe_doc>Creates a `WebGLFrameBuffer` object.</haxe_doc>
		</createFramebuffer>
		<createProgram public="1" set="method">
			<f a=""><c path="js.html.webgl.Program"/></f>
			<haxe_doc>Creates a `WebGLProgram`.</haxe_doc>
		</createProgram>
		<createRenderbuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Renderbuffer"/></f>
			<haxe_doc>Creates a `WebGLRenderBuffer` object.</haxe_doc>
		</createRenderbuffer>
		<createShader public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="js.html.webgl.Shader"/>
			</f>
			<haxe_doc>Creates a `WebGLShader`.</haxe_doc>
		</createShader>
		<createTexture public="1" set="method">
			<f a=""><c path="js.html.webgl.Texture"/></f>
			<haxe_doc>Creates a `WebGLTexture` object.</haxe_doc>
		</createTexture>
		<cullFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether or not front- and/or back-facing polygons can be culled.</haxe_doc>
		</cullFace>
		<deleteBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLBuffer` object.</haxe_doc>
		</deleteBuffer>
		<deleteFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLFrameBuffer` object.</haxe_doc>
		</deleteFramebuffer>
		<deleteProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLProgram`.</haxe_doc>
		</deleteProgram>
		<deleteRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLRenderBuffer` object.</haxe_doc>
		</deleteRenderbuffer>
		<deleteShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLShader`.</haxe_doc>
		</deleteShader>
		<deleteTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLTexture` object.</haxe_doc>
		</deleteTexture>
		<depthFunc public="1" set="method">
			<f a="func">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a function that compares incoming pixel depth to the current depth buffer value.</haxe_doc>
		</depthFunc>
		<depthMask public="1" set="method">
			<f a="flag">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets whether writing into the depth buffer is enabled or disabled.</haxe_doc>
		</depthMask>
		<depthRange public="1" set="method">
			<f a="zNear:zFar">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.</haxe_doc>
		</depthRange>
		<detachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Detaches a `WebGLShader`.</haxe_doc>
		</detachShader>
		<disable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables specific WebGL capabilities for this context.</haxe_doc>
		</disable>
		<disableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables a vertex attribute array at a given position.</haxe_doc>
		</disableVertexAttribArray>
		<drawArrays public="1" set="method">
			<f a="mode:first:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data.</haxe_doc>
		</drawArrays>
		<drawElements public="1" set="method">
			<f a="mode:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from element array data.</haxe_doc>
		</drawElements>
		<enable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables specific WebGL capabilities for this context.</haxe_doc>
		</enable>
		<enableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables a vertex attribute array at a given position.</haxe_doc>
		</enableVertexAttribArray>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Blocks execution until all previously called commands are finished.</haxe_doc>
		</finish>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties different buffer commands, causing all commands to be executed as quickly as possible.</haxe_doc>
		</flush>
		<framebufferRenderbuffer public="1" set="method">
			<f a="target:attachment:renderbuffertarget:renderbuffer">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method">
			<f a="target:attachment:textarget:texture:level">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a textures image to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferTexture2D>
		<frontFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether polygons are front- or back-facing by setting a winding orientation.</haxe_doc>
		</frontFace>
		<generateMipmap public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Generates a set of mipmaps for a `WebGLTexture` object.</haxe_doc>
		</generateMipmap>
		<getActiveAttrib public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active attribute variable.</haxe_doc>
		</getActiveAttrib>
		<getActiveUniform public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active uniform variable.</haxe_doc>
		</getActiveUniform>
		<getAttachedShaders public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="js.html.webgl.Shader"/></c>
			</f>
			<haxe_doc>Returns a list of `WebGLShader` objects attached to a `WebGLProgram`.</haxe_doc>
		</getAttachedShaders>
		<getAttribLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the location of an attribute variable.</haxe_doc>
		</getAttribLocation>
		<getBufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the buffer.</haxe_doc>
		</getBufferParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a value for the passed parameter name.
		@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns error information.</haxe_doc>
		</getError>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the framebuffer.
		@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method">
			<f a="program:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the program.</haxe_doc>
		</getProgramParameter>
		<getProgramInfoLog public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLProgram` object.</haxe_doc>
		</getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the renderbuffer.</haxe_doc>
		</getRenderbufferParameter>
		<getShaderParameter public="1" set="method">
			<f a="shader:pname">
				<c path="js.html.webgl.Shader"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the shader.</haxe_doc>
		</getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method">
			<f a="shadertype:precisiontype">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.ShaderPrecisionFormat"/>
			</f>
			<haxe_doc>Returns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.</haxe_doc>
		</getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLShader` object.</haxe_doc>
		</getShaderInfoLog>
		<getShaderSource public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the source code of a `WebGLShader` as a string.</haxe_doc>
		</getShaderSource>
		<getTexParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the texture.</haxe_doc>
		</getTexParameter>
		<getUniform public="1" set="method">
			<f a="program:location">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.UniformLocation"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of a uniform variable at a given location.</haxe_doc>
		</getUniform>
		<getUniformLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<c path="js.html.webgl.UniformLocation"/>
			</f>
			<haxe_doc>Returns the location of a uniform variable.</haxe_doc>
		</getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a vertex attribute at a given position.
		@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the address of a given vertex attribute.</haxe_doc>
		</getVertexAttribOffset>
		<hint public="1" set="method">
			<f a="target:mode">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.</haxe_doc>
		</hint>
		<isBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed buffer is valid.</haxe_doc>
		</isBuffer>
		<isEnabled public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether a specific WebGL capability is enabled or not for this context.</haxe_doc>
		</isEnabled>
		<isFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.</haxe_doc>
		</isFramebuffer>
		<isProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLProgram` is valid.</haxe_doc>
		</isProgram>
		<isRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.</haxe_doc>
		</isRenderbuffer>
		<isShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLShader` is valid.</haxe_doc>
		</isShader>
		<isTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLTexture` is valid.</haxe_doc>
		</isTexture>
		<lineWidth public="1" set="method">
			<f a="width">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the line width of rasterized lines.</haxe_doc>
		</lineWidth>
		<linkProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Links the passed `WebGLProgram` object.</haxe_doc>
		</linkProgram>
		<pixelStorei public="1" set="method">
			<f a="pname:param">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the pixel storage modes</haxe_doc>
		</pixelStorei>
		<polygonOffset public="1" set="method">
			<f a="factor:units">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the scale factors and units to calculate depth values.</haxe_doc>
		</polygonOffset>
		<renderbufferStorage public="1" set="method">
			<f a="target:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a renderbuffer data store.</haxe_doc>
		</renderbufferStorage>
		<sampleCoverage public="1" set="method">
			<f a="value:invert">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies multi-sample coverage parameters for anti-aliasing effects.</haxe_doc>
		</sampleCoverage>
		<scissor public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the scissor box.</haxe_doc>
		</scissor>
		<shaderSource public="1" set="method">
			<f a="shader:source">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source code in a `WebGLShader`.</haxe_doc>
		</shaderSource>
		<stencilFunc public="1" set="method">
			<f a="func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the both front and back function and reference value for stencil testing.</haxe_doc>
		</stencilFunc>
		<stencilFuncSeparate public="1" set="method">
			<f a="face:func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back function and reference value for stencil testing.</haxe_doc>
		</stencilFuncSeparate>
		<stencilMask public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMask>
		<stencilMaskSeparate public="1" set="method">
			<f a="face:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMaskSeparate>
		<stencilOp public="1" set="method">
			<f a="fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the front and back-facing stencil test actions.</haxe_doc>
		</stencilOp>
		<stencilOpSeparate public="1" set="method">
			<f a="face:fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back-facing stencil test actions.</haxe_doc>
		</stencilOpSeparate>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses the specified `WebGLProgram` as part the current rendering state.</haxe_doc>
		</useProgram>
		<validateProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Validates a `WebGLProgram`.</haxe_doc>
		</validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method">
			<f a="indx:size:type:normalized:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribPointer>
		<viewport public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the viewport.</haxe_doc>
		</viewport>
		<haxe_doc><![CDATA[The `WebGLRenderingContext` interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sampler" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Sampler.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSampler` interface is part of the WebGL 2 API and stores sampling parameters for `WebGLTexture` access inside of a shader.

	Documentation [WebGLSampler](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSampler"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Shader.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.

	Documentation [WebGLShader](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShader"</e></m></meta>
	</class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<rangeMin public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the minimum value that can be represented.</haxe_doc>
		</rangeMin>
		<rangeMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the maximum value that can be represented.</haxe_doc>
		</rangeMax>
		<precision public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bits of precision that can be represented. For integer formats this value is always 0.</haxe_doc>
		</precision>
		<haxe_doc><![CDATA[The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.

	Documentation [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sync" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Sync.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSync` interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.

	Documentation [WebGLSync](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSync"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/Texture.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.

	Documentation [WebGLTexture](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTexture"</e></m></meta>
	</class>
	<class path="js.html.webgl.TransformFeedback" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/TransformFeedback.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLTransformFeedback` interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.

	Documentation [WebGLTransformFeedback](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTransformFeedback"</e></m></meta>
	</class>
	<class path="js.html.webgl.UniformLocation" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/UniformLocation.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.

	Documentation [WebGLUniformLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta>
	</class>
	<class path="js.html.webgl.VertexArrayObject" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/VertexArrayObject.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLVertexArrayObject` interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.

	Documentation [WebGLVertexArrayObject](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLVertexArrayObject"</e></m></meta>
	</class>
	<class path="js.html.webgl.WebGL2RenderingContext" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/WebGL2RenderingContext.hx" extern="1">
		<extends path="js.html.webgl.RenderingContext"/>
		<READ_BUFFER public="1" get="inline" set="null" expr="3074" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3074</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="inline" set="null" expr="3314" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3314</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="inline" set="null" expr="3315" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3315</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3316" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3316</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="inline" set="null" expr="3330" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3330</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="inline" set="null" expr="3331" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3331</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3332" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3332</e></m></meta>
		</PACK_SKIP_PIXELS>
		<COLOR public="1" get="inline" set="null" expr="6144" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6144</e></m></meta>
		</COLOR>
		<DEPTH public="1" get="inline" set="null" expr="6145" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6145</e></m></meta>
		</DEPTH>
		<STENCIL public="1" get="inline" set="null" expr="6146" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6146</e></m></meta>
		</STENCIL>
		<RED public="1" get="inline" set="null" expr="6403" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6403</e></m></meta>
		</RED>
		<RGB8 public="1" get="inline" set="null" expr="32849" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32849</e></m></meta>
		</RGB8>
		<RGBA8 public="1" get="inline" set="null" expr="32856" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32856</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" get="inline" set="null" expr="32857" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32857</e></m></meta>
		</RGB10_A2>
		<TEXTURE_BINDING_3D public="1" get="inline" set="null" expr="32874" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32874</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="inline" set="null" expr="32877" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32877</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="inline" set="null" expr="32878" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32878</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<TEXTURE_3D public="1" get="inline" set="null" expr="32879" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32879</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="inline" set="null" expr="32882" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32882</e></m></meta>
		</TEXTURE_WRAP_R>
		<MAX_3D_TEXTURE_SIZE public="1" get="inline" set="null" expr="32883" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32883</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="33640" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33640</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<MAX_ELEMENTS_VERTICES public="1" get="inline" set="null" expr="33000" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33000</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="inline" set="null" expr="33001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33001</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<TEXTURE_MIN_LOD public="1" get="inline" set="null" expr="33082" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33082</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="inline" set="null" expr="33083" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33083</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="33084" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33084</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="33085" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33085</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<MIN public="1" get="inline" set="null" expr="32775" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
		</MIN>
		<MAX public="1" get="inline" set="null" expr="32776" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="33190" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33190</e></m></meta>
		</DEPTH_COMPONENT24>
		<MAX_TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="34045" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34045</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<TEXTURE_COMPARE_MODE public="1" get="inline" set="null" expr="34892" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34892</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="inline" set="null" expr="34893" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34893</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<CURRENT_QUERY public="1" get="inline" set="null" expr="34917" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" get="inline" set="null" expr="34918" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="inline" set="null" expr="34919" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<STREAM_READ public="1" get="inline" set="null" expr="35041" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35041</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" get="inline" set="null" expr="35042" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35042</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" get="inline" set="null" expr="35045" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35045</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" get="inline" set="null" expr="35046" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35046</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" get="inline" set="null" expr="35049" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35049</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="inline" set="null" expr="35050" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35050</e></m></meta>
		</DYNAMIC_COPY>
		<MAX_DRAW_BUFFERS public="1" get="inline" set="null" expr="34852" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="inline" set="null" expr="34853" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="inline" set="null" expr="34854" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="inline" set="null" expr="34855" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="inline" set="null" expr="34856" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="inline" set="null" expr="34857" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="inline" set="null" expr="34858" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="inline" set="null" expr="34859" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="inline" set="null" expr="34860" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="inline" set="null" expr="34861" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="inline" set="null" expr="34862" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="inline" set="null" expr="34863" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="inline" set="null" expr="34864" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="inline" set="null" expr="34865" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="inline" set="null" expr="34866" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="inline" set="null" expr="34867" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="inline" set="null" expr="34868" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35657" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35657</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35658" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35658</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<SAMPLER_3D public="1" get="inline" set="null" expr="35679" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35679</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="inline" set="null" expr="35682" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35682</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="inline" set="null" expr="35723" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<PIXEL_PACK_BUFFER public="1" get="inline" set="null" expr="35051" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35051</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="inline" set="null" expr="35052" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35052</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35053" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35053</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35055" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35055</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="inline" set="null" expr="35685" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35685</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="inline" set="null" expr="35686" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35686</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="inline" set="null" expr="35687" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35687</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="inline" set="null" expr="35688" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35688</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="inline" set="null" expr="35689" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35689</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="inline" set="null" expr="35690" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35690</e></m></meta>
		</FLOAT_MAT4x3>
		<SRGB public="1" get="inline" set="null" expr="35904" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="35905" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35905</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" get="inline" set="null" expr="35907" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="inline" set="null" expr="34894" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34894</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="inline" set="null" expr="34836" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" get="inline" set="null" expr="34837" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" get="inline" set="null" expr="34842" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" get="inline" set="null" expr="34843" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
		</RGB16F>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="inline" set="null" expr="35069" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35069</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="inline" set="null" expr="35071" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35071</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35076" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35076</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35077" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35077</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="inline" set="null" expr="35659" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35659</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="35866" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35866</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="inline" set="null" expr="35869" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35869</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="35898" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35898</e></m></meta>
		</R11F_G11F_B10F>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="35899" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35899</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<RGB9_E5 public="1" get="inline" set="null" expr="35901" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35901</e></m></meta>
		</RGB9_E5>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="inline" set="null" expr="35902" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35902</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="inline" set="null" expr="35967" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35967</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="inline" set="null" expr="35968" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35968</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="inline" set="null" expr="35971" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35971</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="inline" set="null" expr="35972" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35972</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="inline" set="null" expr="35973" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35973</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="inline" set="null" expr="35976" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35976</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<RASTERIZER_DISCARD public="1" get="inline" set="null" expr="35977" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35977</e></m></meta>
		</RASTERIZER_DISCARD>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="inline" set="null" expr="35978" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35978</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35979" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35979</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="inline" set="null" expr="35980" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35980</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35981" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35981</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="inline" set="null" expr="35982" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35982</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35983" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35983</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<RGBA32UI public="1" get="inline" set="null" expr="36208" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36208</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" get="inline" set="null" expr="36209" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36209</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" get="inline" set="null" expr="36214" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36214</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" get="inline" set="null" expr="36215" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36215</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" get="inline" set="null" expr="36220" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36220</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" get="inline" set="null" expr="36221" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36221</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" get="inline" set="null" expr="36226" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36226</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" get="inline" set="null" expr="36227" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36227</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" get="inline" set="null" expr="36232" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36232</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" get="inline" set="null" expr="36233" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36233</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" get="inline" set="null" expr="36238" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36238</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" get="inline" set="null" expr="36239" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36239</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" get="inline" set="null" expr="36244" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36244</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" get="inline" set="null" expr="36248" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36248</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" get="inline" set="null" expr="36249" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36249</e></m></meta>
		</RGBA_INTEGER>
		<SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36289" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36289</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="inline" set="null" expr="36292" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36292</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="inline" set="null" expr="36293" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36293</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<UNSIGNED_INT_VEC2 public="1" get="inline" set="null" expr="36294" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36294</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="inline" set="null" expr="36295" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36295</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="inline" set="null" expr="36296" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36296</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<INT_SAMPLER_2D public="1" get="inline" set="null" expr="36298" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36298</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="inline" set="null" expr="36299" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36299</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36300" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36300</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36303" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36303</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="inline" set="null" expr="36306" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36306</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="inline" set="null" expr="36307" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36307</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36308" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36308</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36311" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36311</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<DEPTH_COMPONENT32F public="1" get="inline" set="null" expr="36012" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36012</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="inline" set="null" expr="36013" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36013</e></m></meta>
		</DEPTH32F_STENCIL8>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="inline" set="null" expr="36269" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36269</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="inline" set="null" expr="33296" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="inline" set="null" expr="33297" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="inline" set="null" expr="33298" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33298</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="inline" set="null" expr="33299" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33299</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="inline" set="null" expr="33300" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33300</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="inline" set="null" expr="33301" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33301</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="inline" set="null" expr="33302" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33302</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="inline" set="null" expr="33303" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33303</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="inline" set="null" expr="33304" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33304</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<UNSIGNED_INT_24_8 public="1" get="inline" set="null" expr="34042" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
		</UNSIGNED_INT_24_8>
		<DEPTH24_STENCIL8 public="1" get="inline" set="null" expr="35056" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35056</e></m></meta>
		</DEPTH24_STENCIL8>
		<UNSIGNED_NORMALIZED public="1" get="inline" set="null" expr="35863" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="inline" set="null" expr="36008" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36008</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="inline" set="null" expr="36009" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36009</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36010" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36010</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="inline" set="null" expr="36011" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36011</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="inline" set="null" expr="36052" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36052</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<MAX_COLOR_ATTACHMENTS public="1" get="inline" set="null" expr="36063" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="inline" set="null" expr="36065" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="inline" set="null" expr="36066" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="inline" set="null" expr="36067" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="inline" set="null" expr="36068" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="inline" set="null" expr="36069" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="inline" set="null" expr="36070" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="inline" set="null" expr="36071" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="inline" set="null" expr="36072" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="inline" set="null" expr="36073" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="inline" set="null" expr="36074" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="inline" set="null" expr="36075" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="inline" set="null" expr="36076" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="inline" set="null" expr="36077" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="inline" set="null" expr="36078" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="inline" set="null" expr="36079" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="inline" set="null" expr="36182" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36182</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<MAX_SAMPLES public="1" get="inline" set="null" expr="36183" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36183</e></m></meta>
		</MAX_SAMPLES>
		<HALF_FLOAT public="1" get="inline" set="null" expr="5131" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5131</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" get="inline" set="null" expr="33319" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33319</e></m></meta>
		</RG>
		<RG_INTEGER public="1" get="inline" set="null" expr="33320" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33320</e></m></meta>
		</RG_INTEGER>
		<R8 public="1" get="inline" set="null" expr="33321" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33321</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="33323" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33323</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="33325" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33325</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="33326" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33326</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="33327" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33327</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="33328" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33328</e></m></meta>
		</RG32F>
		<R8I public="1" get="inline" set="null" expr="33329" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33329</e></m></meta>
		</R8I>
		<R8UI public="1" get="inline" set="null" expr="33330" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33330</e></m></meta>
		</R8UI>
		<R16I public="1" get="inline" set="null" expr="33331" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33331</e></m></meta>
		</R16I>
		<R16UI public="1" get="inline" set="null" expr="33332" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33332</e></m></meta>
		</R16UI>
		<R32I public="1" get="inline" set="null" expr="33333" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33333</e></m></meta>
		</R32I>
		<R32UI public="1" get="inline" set="null" expr="33334" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33334</e></m></meta>
		</R32UI>
		<RG8I public="1" get="inline" set="null" expr="33335" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33335</e></m></meta>
		</RG8I>
		<RG8UI public="1" get="inline" set="null" expr="33336" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33336</e></m></meta>
		</RG8UI>
		<RG16I public="1" get="inline" set="null" expr="33337" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33337</e></m></meta>
		</RG16I>
		<RG16UI public="1" get="inline" set="null" expr="33338" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33338</e></m></meta>
		</RG16UI>
		<RG32I public="1" get="inline" set="null" expr="33339" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33339</e></m></meta>
		</RG32I>
		<RG32UI public="1" get="inline" set="null" expr="33340" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33340</e></m></meta>
		</RG32UI>
		<VERTEX_ARRAY_BINDING public="1" get="inline" set="null" expr="34229" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<R8_SNORM public="1" get="inline" set="null" expr="36756" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36756</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" get="inline" set="null" expr="36757" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36757</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" get="inline" set="null" expr="36758" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36758</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" get="inline" set="null" expr="36759" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36759</e></m></meta>
		</RGBA8_SNORM>
		<SIGNED_NORMALIZED public="1" get="inline" set="null" expr="36764" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36764</e></m></meta>
		</SIGNED_NORMALIZED>
		<COPY_READ_BUFFER public="1" get="inline" set="null" expr="36662" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="inline" set="null" expr="36663" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="inline" set="null" expr="36662" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="inline" set="null" expr="36663" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="35345" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35345</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="inline" set="null" expr="35368" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35368</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="inline" set="null" expr="35369" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35369</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="inline" set="null" expr="35370" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35370</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35371" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35371</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35373" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35373</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35374" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35374</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="inline" set="null" expr="35375" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35375</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="inline" set="null" expr="35376" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35376</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35377" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35377</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35379" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35379</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="inline" set="null" expr="35380" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35380</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35382" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35382</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="inline" set="null" expr="35383" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35383</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="inline" set="null" expr="35384" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35384</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="inline" set="null" expr="35386" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35386</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="inline" set="null" expr="35387" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35387</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="inline" set="null" expr="35388" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35388</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="inline" set="null" expr="35389" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35389</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="inline" set="null" expr="35390" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35390</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="inline" set="null" expr="35391" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35391</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="inline" set="null" expr="35392" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35392</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35394" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35394</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="inline" set="null" expr="35395" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35395</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="inline" set="null" expr="35396" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35396</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="inline" set="null" expr="35398" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35398</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<INVALID_INDEX public="1" get="inline" set="null" expr="cast 4294967295" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</INVALID_INDEX>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="inline" set="null" expr="37154" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37154</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="inline" set="null" expr="37157" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37157</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="inline" set="null" expr="37137" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37137</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<OBJECT_TYPE public="1" get="inline" set="null" expr="37138" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37138</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="inline" set="null" expr="37139" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37139</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" get="inline" set="null" expr="37140" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37140</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" get="inline" set="null" expr="37141" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37141</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" get="inline" set="null" expr="37142" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37142</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="inline" set="null" expr="37143" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37143</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="inline" set="null" expr="37144" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37144</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" get="inline" set="null" expr="37145" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37145</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" get="inline" set="null" expr="37146" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37146</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="inline" set="null" expr="37147" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37147</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="inline" set="null" expr="37148" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37148</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="inline" set="null" expr="37149" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37149</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="inline" set="null" expr="1" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="inline" set="null" expr="35070" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<ANY_SAMPLES_PASSED public="1" get="inline" set="null" expr="35887" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35887</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="inline" set="null" expr="36202" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36202</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<SAMPLER_BINDING public="1" get="inline" set="null" expr="35097" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35097</e></m></meta>
		</SAMPLER_BINDING>
		<RGB10_A2UI public="1" get="inline" set="null" expr="36975" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36975</e></m></meta>
		</RGB10_A2UI>
		<INT_2_10_10_10_REV public="1" get="inline" set="null" expr="36255" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36255</e></m></meta>
		</INT_2_10_10_10_REV>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="36386" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36386</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="inline" set="null" expr="36387" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36387</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="inline" set="null" expr="36388" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36388</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="inline" set="null" expr="36389" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36389</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="inline" set="null" expr="37167" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37167</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<MAX_ELEMENT_INDEX public="1" get="inline" set="null" expr="36203" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36203</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="inline" set="null" expr="33503" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33503</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<TIMEOUT_IGNORED public="1" get="inline" set="null" expr="-1" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="inline" set="null" expr="37447" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37447</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="334" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="335" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="336" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="337" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="338" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="339" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="340" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="341" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="342" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="343" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="344" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="345" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="346" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="347" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="348" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="349" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="350" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="351" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="352" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="353" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="354" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="361" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="362" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="363" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="364" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="365" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="366" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="367" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="368" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="369" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="370" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="371" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="372" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="373" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="374" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="375" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="376" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="377" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="378" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="379" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="380" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="391" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="392" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="393" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="395" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="396" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="397" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="398" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="399" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="400" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="401" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="402" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="403" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="404" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="405" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="406" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="407" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="408" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="409" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="410" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="411" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="412" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="413" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="414" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="415" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="416" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="417" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="418" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="419" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="420" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="421" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="422" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="423" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="424" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="425" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="427" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="428" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="429" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="430" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="431" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="432" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="433" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="434" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="435" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="436" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="437" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="438" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="439" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="440" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="441" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="442" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="443" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="444" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="445" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="446" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="447" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="448" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="449" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="450" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="451" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="452" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="453" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="454" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="455" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="456" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="457" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="458" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="459" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="460" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="461" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="462" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="463" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="464" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="465" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="466" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="467" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="468" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="469" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="470" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="471" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="472" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="473" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="474" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="475" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="476" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="477" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="478" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="479" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="481" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="482" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="483" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="484" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="485" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="486" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="487" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="488" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="489" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="490" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="491" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="492" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="493" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="494" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="495" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="496" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="497" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="498" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="500" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="501" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="502" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="503" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="504" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="505" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="506" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="507" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="508" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="509" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="510" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="511" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="512" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="513" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="514" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="515" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="516" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="517" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="518" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="519" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="520" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="521" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="523" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="524" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="525" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="526" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="539" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="540" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="541" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="542" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="543" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="544" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="545" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="546" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="547" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="548" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="549" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="550" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="551" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="552" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="553" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="554" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="555" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="556" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="557" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="558" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="559" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="560" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="561" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="562" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="563" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="564" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="565" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="566" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="567" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="568" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="569" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="570" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="571" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="572" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="573" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="574" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="575" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="576" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="577" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="578" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="579" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="580" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="581" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="582" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="583" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="584" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="585" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="586" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="587" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="588" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="589" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="590" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="591" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="592" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="593" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="594" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<bufferData public="1" set="method" override="1">
			<f a="target:srcData:usage:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method" override="1">
			<f a="target:dstByteOffset:srcData:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
			<overloads>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
			</overloads>
		</bufferSubData>
		<copyBufferSubData public="1" set="method">
			<f a="readTarget:writeTarget:readOffset:writeOffset:size">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies part of the data of a buffer to another buffer.</haxe_doc>
		</copyBufferSubData>
		<getBufferSubData public="1" set="method">
			<f a="target:srcByteOffset:dstData:?dstOffset:?length" v=":::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, dstOffset : 0 }</e></m></meta>
			<haxe_doc>Reads data from a buffer and writes them to an `ArrayBuffer` or `SharedArrayBuffer`.</haxe_doc>
		</getBufferSubData>
		<blitFramebuffer public="1" set="method">
			<f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transfers a block of pixels from the read framebuffer to the draw framebuffer.</haxe_doc>
		</blitFramebuffer>
		<framebufferTextureLayer public="1" set="method">
			<f a="target:attachment:texture:level:layer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a single layer of a texture to a framebuffer.</haxe_doc>
		</framebufferTextureLayer>
		<invalidateFramebuffer public="1" set="method">
			<f a="target:attachments">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates the contents of attachments in a framebuffer.
		@throws DOMError</haxe_doc>
		</invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" set="method">
			<f a="target:attachments:x:y:width:height">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates portions of the contents of attachments in a framebuffer
		@throws DOMError</haxe_doc>
		</invalidateSubFramebuffer>
		<readBuffer public="1" set="method">
			<f a="src">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects a color buffer as the source for pixels.</haxe_doc>
		</readBuffer>
		<getInternalformatParameter public="1" set="method">
			<f a="target:internalformat:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about implementation-dependent support for internal formats.
		@throws DOMError</haxe_doc>
		</getInternalformatParameter>
		<renderbufferStorageMultisample public="1" set="method">
			<f a="target:samples:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.</haxe_doc>
		</renderbufferStorageMultisample>
		<texStorage2D public="1" set="method">
			<f a="target:levels:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of two-dimensional texture storage.</haxe_doc>
		</texStorage2D>
		<texStorage3D public="1" set="method">
			<f a="target:levels:internalformat:width:height:depth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of a three-dimensional texture or two-dimensional array texture.</haxe_doc>
		</texStorage3D>
		<texImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<texImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
			</overloads>
		</texImage3D>
		<texSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v=":::::::::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
			</overloads>
		</texSubImage3D>
		<copyTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies pixels from the current `WebGLFramebuffer` into an existing 3D texture sub-image.</haxe_doc>
		</copyTexSubImage3D>
		<compressedTexImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexImage2D></overloads>
		</compressedTexImage2D>
		<compressedTexImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexImage3D public="1" set="method">
	<f a="target:level:internalformat:width:height:depth:border:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
</compressedTexImage3D></overloads>
		</compressedTexImage3D>
		<compressedTexSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexSubImage2D></overloads>
		</compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexSubImage3D public="1" set="method">
	<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
</compressedTexSubImage3D></overloads>
		</compressedTexSubImage3D>
		<getFragDataLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the binding of color numbers to user-defined varying out variables.</haxe_doc>
		</getFragDataLocation>
		<uniform1ui public="1" set="method"><f a="location:v0">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform2ui public="1" set="method"><f a="location:v0:v1">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform3ui public="1" set="method"><f a="location:v0:v1:v2">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform4ui public="1" set="method"><f a="location:v0:v1:v2:v3">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform1fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4iv></overloads>
		</uniform4iv>
		<uniform1uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1uiv></overloads>
		</uniform1uiv>
		<uniform2uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2uiv></overloads>
		</uniform2uiv>
		<uniform3uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3uiv></overloads>
		</uniform3uiv>
		<uniform4uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4uiv></overloads>
		</uniform4uiv>
		<uniformMatrix2fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x2fv></overloads>
		</uniformMatrix3x2fv>
		<uniformMatrix4x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x2fv></overloads>
		</uniformMatrix4x2fv>
		<uniformMatrix2x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x3fv></overloads>
		</uniformMatrix2x3fv>
		<uniformMatrix3fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x3fv></overloads>
		</uniformMatrix4x3fv>
		<uniformMatrix2x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x4fv></overloads>
		</uniformMatrix2x4fv>
		<uniformMatrix3x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x4fv></overloads>
		</uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<vertexAttribI4i public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4iv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4iv></overloads>
		</vertexAttribI4iv>
		<vertexAttribI4ui public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4uiv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4uiv></overloads>
		</vertexAttribI4uiv>
		<vertexAttribIPointer public="1" set="method">
			<f a="index:size:type:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies integer data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribIPointer>
		<vertexAttribDivisor public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `WebGL2RenderingContext.drawArraysInstanced()` and `WebGL2RenderingContext.drawElementsInstanced()`.</haxe_doc>
		</vertexAttribDivisor>
		<drawArraysInstanced public="1" set="method">
			<f a="mode:first:count:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.</haxe_doc>
		</drawArraysInstanced>
		<drawElementsInstanced public="1" set="method">
			<f a="mode:count:type:offset:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.</haxe_doc>
		</drawElementsInstanced>
		<drawRangeElements public="1" set="method">
			<f a="mode:start:end:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data in a given range.</haxe_doc>
		</drawRangeElements>
		<readPixels public="1" set="method" override="1">
			<f a="x:y:width:height:format:type:dstData:dstOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:dstData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:offset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
			</overloads>
		</readPixels>
		<drawBuffers public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a list of color buffers to be drawn into.</haxe_doc>
		</drawBuffers>
		<clearBufferfv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferfv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferfv></overloads>
		</clearBufferfv>
		<clearBufferiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferiv></overloads>
		</clearBufferiv>
		<clearBufferuiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferuiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferuiv></overloads>
		</clearBufferuiv>
		<clearBufferfi public="1" set="method"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<createQuery public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery` object.</haxe_doc>
		</createQuery>
		<deleteQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery` object.</haxe_doc>
		</deleteQuery>
		<isQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLQuery` object.</haxe_doc>
		</isQuery>
		<beginQuery public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Begins an asynchronous query.</haxe_doc>
		</beginQuery>
		<endQuery public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Marks the end of an asynchronous query.</haxe_doc>
		</endQuery>
		<getQuery public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a `WebGLQuery` object for a given target.</haxe_doc>
		</getQuery>
		<getQueryParameter public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query.</haxe_doc>
		</getQueryParameter>
		<createSampler public="1" set="method">
			<f a=""><c path="js.html.webgl.Sampler"/></f>
			<haxe_doc>Creates a new `WebGLSampler` object.</haxe_doc>
		</createSampler>
		<deleteSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSampler` object.</haxe_doc>
		</deleteSampler>
		<isSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLSampler` object.</haxe_doc>
		</isSampler>
		<bindSampler public="1" set="method">
			<f a="unit:sampler">
				<x path="Int"/>
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLSampler` to a texture unit.</haxe_doc>
		</bindSampler>
		<samplerParameteri public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<samplerParameterf public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<getSamplerParameter public="1" set="method">
			<f a="sampler:pname">
				<c path="js.html.webgl.Sampler"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns sampler parameter information.</haxe_doc>
		</getSamplerParameter>
		<fenceSync public="1" set="method">
			<f a="condition:flags">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Sync"/>
			</f>
			<haxe_doc>Creates a new `WebGLSync` object and inserts it into the GL command stream.</haxe_doc>
		</fenceSync>
		<isSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLSync` object.</haxe_doc>
		</isSync>
		<deleteSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSync` object.</haxe_doc>
		</deleteSync>
		<clientWaitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Blocks and waits for a `WebGLSync` object to become signaled or a given timeout to be passed.</haxe_doc>
		</clientWaitSync>
		<waitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns immediately, but waits on the GL server until the given `WebGLSync` object is signaled.</haxe_doc>
		</waitSync>
		<getSyncParameter public="1" set="method">
			<f a="sync:pname">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns parameter information of a `WebGLSync` object.</haxe_doc>
		</getSyncParameter>
		<createTransformFeedback public="1" set="method">
			<f a=""><c path="js.html.webgl.TransformFeedback"/></f>
			<haxe_doc>Creates and initializes `WebGLTransformFeedback` objects.</haxe_doc>
		</createTransformFeedback>
		<deleteTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLTransformFeedback` object.</haxe_doc>
		</deleteTransformFeedback>
		<isTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLTransformFeedback` object.</haxe_doc>
		</isTransformFeedback>
		<bindTransformFeedback public="1" set="method">
			<f a="target:tf">
				<x path="Int"/>
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a passed `WebGLTransformFeedback` object to the current GL state.</haxe_doc>
		</bindTransformFeedback>
		<beginTransformFeedback public="1" set="method">
			<f a="primitiveMode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a transform feedback operation.</haxe_doc>
		</beginTransformFeedback>
		<endTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ends a transform feedback operation.</haxe_doc>
		</endTransformFeedback>
		<transformFeedbackVaryings public="1" set="method">
			<f a="program:varyings:bufferMode">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies values to record in `WebGLTransformFeedback` buffers.</haxe_doc>
		</transformFeedbackVaryings>
		<getTransformFeedbackVarying public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about varying variables from `WebGLTransformFeedback` buffers.</haxe_doc>
		</getTransformFeedbackVarying>
		<pauseTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses a transform feedback operation.</haxe_doc>
		</pauseTransformFeedback>
		<resumeTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resumes a transform feedback operation.</haxe_doc>
		</resumeTransformFeedback>
		<bindBufferBase public="1" set="method">
			<f a="target:index:buffer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferBase>
		<bindBufferRange public="1" set="method">
			<f a="target:index:buffer:offset:size">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a range of a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferRange>
		<getIndexedParameter public="1" set="method">
			<f a="target:index">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns the indexed value for the given `target`.
		@throws DOMError</haxe_doc>
		</getIndexedParameter>
		<getUniformIndices public="1" set="method">
			<f a="program:uniformNames">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Retrieves the indices of a number of uniforms within a `WebGLProgram`.</haxe_doc>
		</getUniformIndices>
		<getActiveUniforms public="1" set="method">
			<f a="program:uniformIndices:pname">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about active uniforms within a `WebGLProgram`.</haxe_doc>
		</getActiveUniforms>
		<getUniformBlockIndex public="1" set="method">
			<f a="program:uniformBlockName">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Retrieves the index of a uniform block within a `WebGLProgram`.</haxe_doc>
		</getUniformBlockIndex>
		<getActiveUniformBlockParameter public="1" set="method">
			<f a="program:uniformBlockIndex:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about an active uniform block within a `WebGLProgram`.
		@throws DOMError</haxe_doc>
		</getActiveUniformBlockParameter>
		<getActiveUniformBlockName public="1" set="method">
			<f a="program:uniformBlockIndex">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the name of the active uniform block at a given index within a `WebGLProgram`.</haxe_doc>
		</getActiveUniformBlockName>
		<uniformBlockBinding public="1" set="method">
			<f a="program:uniformBlockIndex:uniformBlockBinding">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Assigns binding points for active uniform blocks.</haxe_doc>
		</uniformBlockBinding>
		<createVertexArray public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArray>
		<deleteVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArray>
		<isVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArray>
		<bindVertexArray public="1" set="method">
			<f a="array">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArray>
		<getContextAttributes public="1" set="method" override="1"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<isContextLost public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isContextLost>
		<getSupportedExtensions public="1" set="method" override="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getExtension public="1" params="T" set="method" override="1">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method" override="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" override="1"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" override="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" override="1"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" override="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" override="1"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" override="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" override="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" override="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" override="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" override="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<copyTexImage2D public="1" set="method" override="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" override="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" override="1"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" override="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" override="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" override="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" override="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" override="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" override="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" override="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" override="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="Array"><c path="js.html.webgl.Shader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getParameter public="1" set="method" override="1">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method" override="1"><f a=""><x path="Int"/></f></getError>
		<getFramebufferAttachmentParameter public="1" set="method" override="1">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method" override="1"><f a="program:pname">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getProgramInfoLog public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderParameter public="1" set="method" override="1"><f a="shader:pname">
	<c path="js.html.webgl.Shader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" override="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderSource public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getTexParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" override="1"><f a="program:location">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.UniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" override="1">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" override="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" override="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" override="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method" override="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" override="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<renderbufferStorage public="1" set="method" override="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" override="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" override="1"><f a="shader:source">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" override="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" override="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" override="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" override="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" override="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texParameterf public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" override="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" override="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" override="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" override="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" override="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<haxe_doc><![CDATA[The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGL2RenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.ANGLEInstancedArrays" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/ANGLEInstancedArrays.hx" extern="1">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" get="inline" set="null" expr="35070" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
			<haxe_doc>Returns a `GLint` describing the frequency divisor used for instanced rendering when used in the `WebGLRenderingContext.getVertexAttrib()` as the `pname` parameter.</haxe_doc>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method">
			<f a="mode:first:count:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawArrays()` except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</haxe_doc>
		</drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method">
			<f a="mode:count:type:offset:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawElements()` except that multiple instances of the set of elements are executed and the instance advances between each set.</haxe_doc>
		</drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `ANGLE_instanced_arrays.drawArraysInstancedANGLE()` and `ANGLE_instanced_arrays.drawElementsInstancedANGLE()`.</haxe_doc>
		</vertexAttribDivisorANGLE>
		<haxe_doc><![CDATA[The `ANGLE_instanced_arrays` extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.

	Documentation [ANGLE_instanced_arrays](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays>]]></haxe_doc>
		<meta><m n=":native"><e>"ANGLE_instanced_arrays"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTBlendMinmax" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTBlendMinmax.hx" extern="1">
		<MIN_EXT public="1" get="inline" set="null" expr="32775" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
			<haxe_doc>Produces the minimum color components of the source and destination colors.</haxe_doc>
		</MIN_EXT>
		<MAX_EXT public="1" get="inline" set="null" expr="32776" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
			<haxe_doc>Produces the maximum color components of the source and destination colors.</haxe_doc>
		</MAX_EXT>
		<haxe_doc><![CDATA[The `EXT_blend_minmax` extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.

	Documentation [EXT_blend_minmax](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_blend_minmax"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTColorBufferFloat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTColorBufferFloat.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTColorBufferHalfFloat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTColorBufferHalfFloat.hx" extern="1">
		<RGBA16F_EXT public="1" get="inline" set="null" expr="34842" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
			<haxe_doc>RGBA 16-bit floating-point color-renderable format.</haxe_doc>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" get="inline" set="null" expr="34843" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
			<haxe_doc>RGB 16-bit floating-point color-renderable format.</haxe_doc>
		</RGB16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `EXT_color_buffer_half_float` extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.

	Documentation [EXT_color_buffer_half_float](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_color_buffer_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTDisjointTimerQuery" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTDisjointTimerQuery.hx" extern="1">
		<QUERY_COUNTER_BITS_EXT public="1" get="inline" set="null" expr="34916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34916</e></m></meta>
			<haxe_doc>A `GLint` indicating the number of bits used to hold the query result for the given target.</haxe_doc>
		</QUERY_COUNTER_BITS_EXT>
		<CURRENT_QUERY_EXT public="1" get="inline" set="null" expr="34917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
			<haxe_doc>A `WebGLQuery` object, which is the currently active query for the given target.</haxe_doc>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" get="inline" set="null" expr="34918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
			<haxe_doc>A `GLuint64EXT` containing the query result.</haxe_doc>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" get="inline" set="null" expr="34919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not a query result is available.</haxe_doc>
		</QUERY_RESULT_AVAILABLE_EXT>
		<TIME_ELAPSED_EXT public="1" get="inline" set="null" expr="35007" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35007</e></m></meta>
			<haxe_doc>Elapsed time (in nanoseconds).</haxe_doc>
		</TIME_ELAPSED_EXT>
		<TIMESTAMP_EXT public="1" get="inline" set="null" expr="36392" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36392</e></m></meta>
			<haxe_doc>The current time.</haxe_doc>
		</TIMESTAMP_EXT>
		<GPU_DISJOINT_EXT public="1" get="inline" set="null" expr="36795" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36795</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not the GPU performed any disjoint operation.</haxe_doc>
		</GPU_DISJOINT_EXT>
		<createQueryEXT public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery`.</haxe_doc>
		</createQueryEXT>
		<deleteQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery`.</haxe_doc>
		</deleteQueryEXT>
		<isQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLQuery`.</haxe_doc>
		</isQueryEXT>
		<beginQueryEXT public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer starts when all commands prior to `beginQueryEXT` have been fully executed.</haxe_doc>
		</beginQueryEXT>
		<endQueryEXT public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer stops when all commands prior to `endQueryEXT` have been fully executed.</haxe_doc>
		</endQueryEXT>
		<queryCounterEXT public="1" set="method">
			<f a="query:target">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Records the current time into the corresponding query object.</haxe_doc>
		</queryCounterEXT>
		<getQueryEXT public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query target.</haxe_doc>
		</getQueryEXT>
		<getQueryObjectEXT public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Return the state of a query object.</haxe_doc>
		</getQueryObjectEXT>
		<haxe_doc><![CDATA[The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.

	Documentation [EXT_disjoint_timer_query](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_disjoint_timer_query"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTFragDepth" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTFragDepth.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.EXTShaderTextureLod" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTShaderTextureLod.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTSrgb" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTSrgb.hx" extern="1">
		<SRGB_EXT public="1" get="inline" set="null" expr="35904" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
			<haxe_doc>Unsized sRGB format that leaves the precision up to the driver.</haxe_doc>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" get="inline" set="null" expr="35906" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35906</e></m></meta>
			<haxe_doc>Unsized sRGB format with unsized alpha component.</haxe_doc>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" get="inline" set="null" expr="35907" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
			<haxe_doc>Sized (8-bit) sRGB and alpha formats.</haxe_doc>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" get="inline" set="null" expr="33296" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
			<haxe_doc>Returns the framebuffer color encoding (`gl.LINEAR` or `ext.SRGB_EXT`).</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<haxe_doc><![CDATA[The `EXT_sRGB` extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.

	Documentation [EXT_sRGB](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_sRGB"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTTextureFilterAnisotropic" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/EXTTextureFilterAnisotropic.hx" extern="1">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34046" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34046</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getTexParameter` and `WebGLRenderingContext.texParameterf` / `WebGLRenderingContext.texParameteri` calls and sets the desired maximum anisotropy for a texture.</haxe_doc>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34047" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34047</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getParameter` call, and it returns the maximum available anisotropy.</haxe_doc>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<haxe_doc><![CDATA[The `EXT_texture_filter_anisotropic` extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).

	Documentation [EXT_texture_filter_anisotropic](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_texture_filter_anisotropic"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESElementIndexUint" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESElementIndexUint.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESStandardDerivatives" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESStandardDerivatives.hx" extern="1">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" get="inline" set="null" expr="35723" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
			<haxe_doc>A `Glenum` indicating the accuracy of the derivative calculation for the GLSL built-in functions: `dFdx`, `dFdy`, and `fwidth`.</haxe_doc>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<haxe_doc><![CDATA[The `OES_standard_derivatives` extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.

	Documentation [OES_standard_derivatives](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_standard_derivatives"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureFloat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESTextureFloat.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.OESTextureFloatLinear" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESTextureFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESTextureHalfFloat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESTextureHalfFloat.hx" extern="1">
		<HALF_FLOAT_OES public="1" get="inline" set="null" expr="36193" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36193</e></m></meta>
			<haxe_doc>Half floating-point type (16-bit).</haxe_doc>
		</HALF_FLOAT_OES>
		<haxe_doc><![CDATA[The `OES_texture_half_float` extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.

	Documentation [OES_texture_half_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureHalfFloatLinear" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESTextureHalfFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESVertexArrayObject" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/OESVertexArrayObject.hx" extern="1">
		<VERTEX_ARRAY_BINDING_OES public="1" get="inline" set="null" expr="34229" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
			<haxe_doc>Returns a `WebGLVertexArrayObject` object when used in the `WebGLRenderingContext.getParameter()` method as the `pname` parameter.</haxe_doc>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArrayOES>
		<haxe_doc><![CDATA[The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.

	Documentation [OES_vertex_array_object](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_vertex_array_object"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLColorBufferFloat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLColorBufferFloat.hx" extern="1">
		<RGBA32F_EXT public="1" get="inline" set="null" expr="34836" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
			<haxe_doc>RGBA 32-bit floating-point color-renderable format.</haxe_doc>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" get="inline" set="null" expr="34837" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
			<haxe_doc>RGB 32-bit floating-point color-renderable format.</haxe_doc>
		</RGB32F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `WEBGL_color_buffer_float` extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.

	Documentation [WEBGL_color_buffer_float](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_color_buffer_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAstc" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTextureAstc.hx" extern="1">
		<COMPRESSED_RGBA_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37808" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37808</e></m></meta>
		</COMPRESSED_RGBA_ASTC_4x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37809" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37809</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37810" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37810</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37811" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37811</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37812" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37812</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37813" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37813</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x5_KHR>
		<COMPRESSED_RGBA_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37814" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37814</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37815" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37815</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37816" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37816</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x5_KHR>
		<COMPRESSED_RGBA_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37817" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37817</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x6_KHR>
		<COMPRESSED_RGBA_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37818" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37818</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37819" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37819</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37820" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37820</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37821" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37821</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x12_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37840" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37840</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37841" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37841</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37842" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37842</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37843" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37843</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37844" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37844</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37845" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37845</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37846" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37846</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37847" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37847</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37848" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37848</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37849" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37849</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37850" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37850</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37851" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37851</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37852" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37852</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37853" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37853</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
		<getSupportedProfiles public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedProfiles>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_astc` extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.

	Documentation [WEBGL_compressed_texture_astc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_astc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAtc" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTextureAtc.hx" extern="1">
		<COMPRESSED_RGB_ATC_WEBGL public="1" get="inline" set="null" expr="35986" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35986</e></m></meta>
			<haxe_doc>Compresses RGB textures with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ATC_WEBGL>
		<COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL public="1" get="inline" set="null" expr="35987" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35987</e></m></meta>
			<haxe_doc>Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).</haxe_doc>
		</COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL>
		<COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL public="1" get="inline" set="null" expr="34798" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34798</e></m></meta>
			<haxe_doc>Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).</haxe_doc>
		</COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_atc` extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.

	Documentation [WEBGL_compressed_texture_atc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_atc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTextureEtc.hx" extern="1">
		<COMPRESSED_R11_EAC public="1" get="inline" set="null" expr="37488" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37488</e></m></meta>
			<haxe_doc>One-channel (red) unsigned format compression.</haxe_doc>
		</COMPRESSED_R11_EAC>
		<COMPRESSED_SIGNED_R11_EAC public="1" get="inline" set="null" expr="37489" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37489</e></m></meta>
			<haxe_doc>One-channel (red) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_R11_EAC>
		<COMPRESSED_RG11_EAC public="1" get="inline" set="null" expr="37490" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37490</e></m></meta>
			<haxe_doc>Two-channel (red and green) unsigned format compression.</haxe_doc>
		</COMPRESSED_RG11_EAC>
		<COMPRESSED_SIGNED_RG11_EAC public="1" get="inline" set="null" expr="37491" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37491</e></m></meta>
			<haxe_doc>Two-channel (red and green) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_RG11_EAC>
		<COMPRESSED_RGB8_ETC2 public="1" get="inline" set="null" expr="37492" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37492</e></m></meta>
			<haxe_doc>Compresses RGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB8_ETC2>
		<COMPRESSED_SRGB8_ETC2 public="1" get="inline" set="null" expr="37493" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37493</e></m></meta>
			<haxe_doc>Compresses sRGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_SRGB8_ETC2>
		<COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37494" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37494</e></m></meta>
			<haxe_doc>Similar to `RGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37495" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37495</e></m></meta>
			<haxe_doc>Similar to `SRGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_RGBA8_ETC2_EAC public="1" get="inline" set="null" expr="37496" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37496</e></m></meta>
			<haxe_doc>Compresses RGBA8 data. The RGB part is encoded the same as `RGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_RGBA8_ETC2_EAC>
		<COMPRESSED_SRGB8_ALPHA8_ETC2_EAC public="1" get="inline" set="null" expr="37497" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37497</e></m></meta>
			<haxe_doc>Compresses sRGBA8 data. The sRGB part is encoded the same as `SRGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc` extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.

	Documentation [WEBGL_compressed_texture_etc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc1" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTextureEtc1.hx" extern="1">
		<COMPRESSED_RGB_ETC1_WEBGL public="1" get="inline" set="null" expr="36196" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36196</e></m></meta>
			<haxe_doc>Compresses 24-bit RGB data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ETC1_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc1` extension is part of the WebGL API and exposes the ETC1 compressed texture format.

	Documentation [WEBGL_compressed_texture_etc1](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc1"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTexturePvrtc.hx" extern="1">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35840" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35840</e></m></meta>
			<haxe_doc>RGB compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35841" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35841</e></m></meta>
			<haxe_doc>RGB compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35842" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35842</e></m></meta>
			<haxe_doc>RGBA compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35843" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35843</e></m></meta>
			<haxe_doc>RGBA compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_pvrtc` extension is part of the WebGL API and exposes four PVRTC compressed texture formats.

	Documentation [WEBGL_compressed_texture_pvrtc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_pvrtc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tc" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTextureS3tc.hx" extern="1">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33776" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33776</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format.</haxe_doc>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33777" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33777</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="33778" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33778</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="33779" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33779</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc` extension is part of the WebGL API and exposes four S3TC compressed texture formats.

	Documentation [WEBGL_compressed_texture_s3tc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLCompressedTextureS3tcSrgb.hx" extern="1">
		<COMPRESSED_SRGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35916</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format.</haxe_doc>
		</COMPRESSED_SRGB_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35917</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="35918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35918</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="35919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35919</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc_srgb` extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.

	Documentation [WEBGL_compressed_texture_s3tc_srgb](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc_srgb"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDebugRendererInfo" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLDebugRendererInfo.hx" extern="1">
		<UNMASKED_VENDOR_WEBGL public="1" get="inline" set="null" expr="37445" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37445</e></m></meta>
		</UNMASKED_VENDOR_WEBGL>
		<UNMASKED_RENDERER_WEBGL public="1" get="inline" set="null" expr="37446" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37446</e></m></meta>
		</UNMASKED_RENDERER_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_debug_renderer_info` extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.

	Documentation [WEBGL_debug_renderer_info](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_renderer_info"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLDebugShaders" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLDebugShaders.hx"><a><getTranslatedShaderSource set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getTranslatedShaderSource></a></typedef>
	<class path="js.html.webgl.extension.WEBGLDepthTexture" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLDepthTexture.hx" extern="1">
		<UNSIGNED_INT_24_8_WEBGL public="1" get="inline" set="null" expr="34042" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
			<haxe_doc>Unsigned integer type for 24-bit depth texture data.</haxe_doc>
		</UNSIGNED_INT_24_8_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_depth_texture` extension is part of the WebGL API and defines 2D depth and depth-stencil textures.

	Documentation [WEBGL_depth_texture](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_depth_texture"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDrawBuffers" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLDrawBuffers.hx" extern="1">
		<COLOR_ATTACHMENT0_WEBGL public="1" get="inline" set="null" expr="36064" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
			<haxe_doc>A `GLenum` specifying a color buffer.</haxe_doc>
		</COLOR_ATTACHMENT0_WEBGL>
		<COLOR_ATTACHMENT1_WEBGL public="1" get="inline" set="null" expr="36065" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1_WEBGL>
		<COLOR_ATTACHMENT2_WEBGL public="1" get="inline" set="null" expr="36066" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2_WEBGL>
		<COLOR_ATTACHMENT3_WEBGL public="1" get="inline" set="null" expr="36067" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3_WEBGL>
		<COLOR_ATTACHMENT4_WEBGL public="1" get="inline" set="null" expr="36068" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4_WEBGL>
		<COLOR_ATTACHMENT5_WEBGL public="1" get="inline" set="null" expr="36069" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5_WEBGL>
		<COLOR_ATTACHMENT6_WEBGL public="1" get="inline" set="null" expr="36070" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6_WEBGL>
		<COLOR_ATTACHMENT7_WEBGL public="1" get="inline" set="null" expr="36071" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7_WEBGL>
		<COLOR_ATTACHMENT8_WEBGL public="1" get="inline" set="null" expr="36072" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8_WEBGL>
		<COLOR_ATTACHMENT9_WEBGL public="1" get="inline" set="null" expr="36073" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9_WEBGL>
		<COLOR_ATTACHMENT10_WEBGL public="1" get="inline" set="null" expr="36074" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10_WEBGL>
		<COLOR_ATTACHMENT11_WEBGL public="1" get="inline" set="null" expr="36075" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11_WEBGL>
		<COLOR_ATTACHMENT12_WEBGL public="1" get="inline" set="null" expr="36076" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12_WEBGL>
		<COLOR_ATTACHMENT13_WEBGL public="1" get="inline" set="null" expr="36077" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13_WEBGL>
		<COLOR_ATTACHMENT14_WEBGL public="1" get="inline" set="null" expr="36078" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14_WEBGL>
		<COLOR_ATTACHMENT15_WEBGL public="1" get="inline" set="null" expr="36079" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15_WEBGL>
		<DRAW_BUFFER0_WEBGL public="1" get="inline" set="null" expr="34853" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
			<haxe_doc>A `GLenum` returning a draw buffer.</haxe_doc>
		</DRAW_BUFFER0_WEBGL>
		<DRAW_BUFFER1_WEBGL public="1" get="inline" set="null" expr="34854" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1_WEBGL>
		<DRAW_BUFFER2_WEBGL public="1" get="inline" set="null" expr="34855" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2_WEBGL>
		<DRAW_BUFFER3_WEBGL public="1" get="inline" set="null" expr="34856" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3_WEBGL>
		<DRAW_BUFFER4_WEBGL public="1" get="inline" set="null" expr="34857" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4_WEBGL>
		<DRAW_BUFFER5_WEBGL public="1" get="inline" set="null" expr="34858" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5_WEBGL>
		<DRAW_BUFFER6_WEBGL public="1" get="inline" set="null" expr="34859" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6_WEBGL>
		<DRAW_BUFFER7_WEBGL public="1" get="inline" set="null" expr="34860" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7_WEBGL>
		<DRAW_BUFFER8_WEBGL public="1" get="inline" set="null" expr="34861" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8_WEBGL>
		<DRAW_BUFFER9_WEBGL public="1" get="inline" set="null" expr="34862" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9_WEBGL>
		<DRAW_BUFFER10_WEBGL public="1" get="inline" set="null" expr="34863" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10_WEBGL>
		<DRAW_BUFFER11_WEBGL public="1" get="inline" set="null" expr="34864" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11_WEBGL>
		<DRAW_BUFFER12_WEBGL public="1" get="inline" set="null" expr="34865" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12_WEBGL>
		<DRAW_BUFFER13_WEBGL public="1" get="inline" set="null" expr="34866" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13_WEBGL>
		<DRAW_BUFFER14_WEBGL public="1" get="inline" set="null" expr="34867" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14_WEBGL>
		<DRAW_BUFFER15_WEBGL public="1" get="inline" set="null" expr="34868" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15_WEBGL>
		<MAX_COLOR_ATTACHMENTS_WEBGL public="1" get="inline" set="null" expr="36063" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of framebuffer color attachment points.</haxe_doc>
		</MAX_COLOR_ATTACHMENTS_WEBGL>
		<MAX_DRAW_BUFFERS_WEBGL public="1" get="inline" set="null" expr="34852" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of draw buffers.</haxe_doc>
		</MAX_DRAW_BUFFERS_WEBGL>
		<drawBuffersWEBGL public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the draw buffers to which all fragment colors are written. (When using `WebGL2RenderingContext`, this method is available as `WebGL2RenderingContext.drawBuffers()` by default).</haxe_doc>
		</drawBuffersWEBGL>
		<haxe_doc><![CDATA[The `WEBGL_draw_buffers` extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.

	Documentation [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_draw_buffers"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLLoseContext" params="" file="/home/runner/haxe/versions/4.1.3/std/js/html/webgl/extension/WEBGLLoseContext.hx"><a>
	<restoreContext set="method"><f a=""><x path="Void"/></f></restoreContext>
	<loseContext set="method"><f a=""><x path="Void"/></f></loseContext>
</a></typedef>
	<class path="js.lib.Uint8Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint8Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Error" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/home/runner/haxe/versions/4.1.3/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Object" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" params="TOut" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="catchError.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="catchError.TOut"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
		</catchError>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<class path="js.lib.RegExpMatch" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="66">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/home/runner/haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<typedef path="js.node.Buffer" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Buffer.hx"><c path="js.node.buffer.Buffer"/></typedef>
	<typedef path="js.node.FsPath" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<t path="js.node.Buffer"/>
		</x>
		<haxe_doc>Most FS functions now support passing `String` and `Buffer`.
	This type is used for path arguments and allows passing either of those.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsWatchFileOptions" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<persistent>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>indicates whether the process should continue to run as long as files are being watched
		default: true</haxe_doc>
			</persistent>
			<interval>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>indicates how often the target should be polled, in milliseconds
		default: 5007</haxe_doc>
			</interval>
		</a>
		<haxe_doc>Possible options for `Fs.watchFile`.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsMode" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<x path="haxe.extern.EitherType">
			<x path="Int"/>
			<c path="String"/>
		</x>
		<haxe_doc>The `mode` argument used by `Fs.open` and related functions
	can be either an integer or a string with octal number.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsWriteFileOptions" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<mode>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default = 438 (aka 0666 in Octal)</haxe_doc>
			</mode>
			<flag>
				<x path="Null"><x path="js.node.FsOpenFlag"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 'w' for `Fs.writeFile`, 'a' for `Fs.appendFile`</haxe_doc>
			</flag>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Encoding for writing strings.
		Defaults to 'utf8'.
		Ignored if data is a buffer</haxe_doc>
			</encoding>
		</a>
		<haxe_doc>Possible options for `Fs.writeFile` and `Fs.appendFile`.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsCreateReadStreamOptions" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<start>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Start of the range of bytes to read</haxe_doc>
			</start>
			<mode>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 0666</haxe_doc>
			</mode>
			<flags>
				<x path="Null"><x path="js.node.FsOpenFlag"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 'r'</haxe_doc>
			</flags>
			<fd>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: null</haxe_doc>
			</fd>
			<end>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>End of the range of bytes to read</haxe_doc>
			</end>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>can be 'utf8', 'ascii', or 'base64'.
		default: null</haxe_doc>
			</encoding>
			<autoClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If autoClose is false, then the file descriptor won't be closed, even if there's an error.
		It is your responsiblity to close it and make sure there's no file descriptor leak.

		If autoClose is set to true (default behavior), on error or end the file
		descriptor will be closed automatically.</haxe_doc>
			</autoClose>
		</a>
		<haxe_doc>Defaults:
	{ flags: 'r',
	  encoding: null,
	  fd: null,
	  mode: 0666,
	  autoClose: true
	}</haxe_doc>
	</typedef>
	<typedef path="js.node.FsCreateWriteStreamOptions" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<start>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>position to write data the beginning of the file.</haxe_doc>
			</start>
			<mode>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 0666</haxe_doc>
			</mode>
			<flags>
				<x path="Null"><x path="js.node.FsOpenFlag"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 'w'</haxe_doc>
			</flags>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: null</haxe_doc>
			</encoding>
		</a>
		<haxe_doc>Options for `Fs.createWriteStream`.</haxe_doc>
	</typedef>
	<abstract path="js.node.SymlinkType" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible symlink types</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Fs.SymlinkType_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
	<Dir public="1" get="inline" set="null" expr="cast &quot;dir&quot;" line="172" static="1">
		<x path="js.node.SymlinkType"/>
		<meta>
			<m n=":value"><e>cast "dir"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Dir>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="173" static="1">
		<x path="js.node.SymlinkType"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Junction public="1" get="inline" set="null" expr="cast &quot;junction&quot;" line="174" static="1">
		<x path="js.node.SymlinkType"/>
		<meta>
			<m n=":value"><e>cast "junction"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Junction>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Fs.SymlinkType_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
		<Dir public="1" get="inline" set="null" expr="cast &quot;dir&quot;" line="172" static="1">
			<x path="js.node.SymlinkType"/>
			<meta>
				<m n=":value"><e>cast "dir"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Dir>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="173" static="1">
			<x path="js.node.SymlinkType"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Junction public="1" get="inline" set="null" expr="cast &quot;junction&quot;" line="174" static="1">
			<x path="js.node.SymlinkType"/>
			<meta>
				<m n=":value"><e>cast "junction"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Junction>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.FsOpenFlag" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible flags for opening file.

	The exclusive flag 'x' (O_EXCL flag in open(2)) ensures that path is newly created.
	On POSIX systems, path is considered to exist even if it is a symlink to a non-existent file.
	The exclusive flag may or may not work with network file systems.

	On Linux, positional writes don't work when the file is opened in append mode.
	The kernel ignores the position argument and always appends the data to the end of the file.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Fs.FsOpenFlag_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
	<Read public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="192" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "r"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading.
		An exception occurs if the file does not exist.</haxe_doc>
	</Read>
	<ReadWrite public="1" get="inline" set="null" expr="cast &quot;r+&quot;" line="198" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "r+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and writing.
		An exception occurs if the file does not exist.</haxe_doc>
	</ReadWrite>
	<ReadSync public="1" get="inline" set="null" expr="cast &quot;rs&quot;" line="209" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "rs"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache.

		This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache.
		It has a very real impact on I/O performance so don't use this flag unless you need it.

		Note that this doesn't turn `Fs.open` into a synchronous blocking call.
		If that's what you want then you should be using `Fs.openSync`</haxe_doc>
	</ReadSync>
	<ReadWriteSync public="1" get="inline" set="null" expr="cast &quot;rs+&quot;" line="215" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "rs+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and writing, telling the OS to open it synchronously.
		See notes for `ReadSync` about using this with caution.</haxe_doc>
	</ReadWriteSync>
	<WriteCreate public="1" get="inline" set="null" expr="cast &quot;w&quot;" line="221" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "w"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
	</WriteCreate>
	<WriteCheck public="1" get="inline" set="null" expr="cast &quot;wx&quot;" line="226" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "wx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `WriteCreate` but fails if path exists.</haxe_doc>
	</WriteCheck>
	<WriteReadCreate public="1" get="inline" set="null" expr="cast &quot;w+&quot;" line="232" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "w+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
	</WriteReadCreate>
	<WriteReadCheck public="1" get="inline" set="null" expr="cast &quot;wx+&quot;" line="237" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "wx+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `WriteReadCreate` but fails if path exists.</haxe_doc>
	</WriteReadCheck>
	<AppendCreate public="1" get="inline" set="null" expr="cast &quot;a&quot;" line="243" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "a"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for appending.
		The file is created if it does not exist.</haxe_doc>
	</AppendCreate>
	<AppendCheck public="1" get="inline" set="null" expr="cast &quot;ax&quot;" line="248" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "ax"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `AppendCreate` but fails if path exists.</haxe_doc>
	</AppendCheck>
	<AppendReadCreate public="1" get="inline" set="null" expr="cast &quot;a+&quot;" line="254" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "a+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and appending.
		The file is created if it does not exist.</haxe_doc>
	</AppendReadCreate>
	<AppendReadCheck public="1" get="inline" set="null" expr="cast &quot;ax+&quot;" line="259" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "ax+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `AppendReadCreate` but fails if path exists.</haxe_doc>
	</AppendReadCheck>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Fs.FsOpenFlag_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
		<Read public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="192" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "r"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading.
		An exception occurs if the file does not exist.</haxe_doc>
		</Read>
		<ReadWrite public="1" get="inline" set="null" expr="cast &quot;r+&quot;" line="198" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "r+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and writing.
		An exception occurs if the file does not exist.</haxe_doc>
		</ReadWrite>
		<ReadSync public="1" get="inline" set="null" expr="cast &quot;rs&quot;" line="209" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "rs"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache.

		This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache.
		It has a very real impact on I/O performance so don't use this flag unless you need it.

		Note that this doesn't turn `Fs.open` into a synchronous blocking call.
		If that's what you want then you should be using `Fs.openSync`</haxe_doc>
		</ReadSync>
		<ReadWriteSync public="1" get="inline" set="null" expr="cast &quot;rs+&quot;" line="215" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "rs+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and writing, telling the OS to open it synchronously.
		See notes for `ReadSync` about using this with caution.</haxe_doc>
		</ReadWriteSync>
		<WriteCreate public="1" get="inline" set="null" expr="cast &quot;w&quot;" line="221" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "w"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
		</WriteCreate>
		<WriteCheck public="1" get="inline" set="null" expr="cast &quot;wx&quot;" line="226" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "wx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `WriteCreate` but fails if path exists.</haxe_doc>
		</WriteCheck>
		<WriteReadCreate public="1" get="inline" set="null" expr="cast &quot;w+&quot;" line="232" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "w+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
		</WriteReadCreate>
		<WriteReadCheck public="1" get="inline" set="null" expr="cast &quot;wx+&quot;" line="237" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "wx+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `WriteReadCreate` but fails if path exists.</haxe_doc>
		</WriteReadCheck>
		<AppendCreate public="1" get="inline" set="null" expr="cast &quot;a&quot;" line="243" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "a"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for appending.
		The file is created if it does not exist.</haxe_doc>
		</AppendCreate>
		<AppendCheck public="1" get="inline" set="null" expr="cast &quot;ax&quot;" line="248" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "ax"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `AppendCreate` but fails if path exists.</haxe_doc>
		</AppendCheck>
		<AppendReadCreate public="1" get="inline" set="null" expr="cast &quot;a+&quot;" line="254" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "a+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and appending.
		The file is created if it does not exist.</haxe_doc>
		</AppendReadCreate>
		<AppendReadCheck public="1" get="inline" set="null" expr="cast &quot;ax+&quot;" line="259" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "ax+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `AppendReadCreate` but fails if path exists.</haxe_doc>
		</AppendReadCheck>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.FsConstants" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<X_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file can be executed by the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</X_OK>
			<W_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file can be written by the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</W_OK>
			<S_IXUSR>
				<x path="Int"/>
				<haxe_doc>File mode indicating executable by owner.</haxe_doc>
			</S_IXUSR>
			<S_IXOTH>
				<x path="Int"/>
				<haxe_doc>File mode indicating executable by others.</haxe_doc>
			</S_IXOTH>
			<S_IXGRP>
				<x path="Int"/>
				<haxe_doc>File mode indicating executable by group.</haxe_doc>
			</S_IXGRP>
			<S_IWUSR>
				<x path="Int"/>
				<haxe_doc>File mode indicating writable by owner.</haxe_doc>
			</S_IWUSR>
			<S_IWOTH>
				<x path="Int"/>
				<haxe_doc>File mode indicating writable by others.</haxe_doc>
			</S_IWOTH>
			<S_IWGRP>
				<x path="Int"/>
				<haxe_doc>File mode indicating writable by group.</haxe_doc>
			</S_IWGRP>
			<S_IRWXU>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable, writable and executable by owner.</haxe_doc>
			</S_IRWXU>
			<S_IRWXO>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable, writable and executable by others.</haxe_doc>
			</S_IRWXO>
			<S_IRWXG>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable, writable and executable by group.</haxe_doc>
			</S_IRWXG>
			<S_IRUSR>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable by owner.</haxe_doc>
			</S_IRUSR>
			<S_IROTH>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable by others.</haxe_doc>
			</S_IROTH>
			<S_IRGRP>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable by group.</haxe_doc>
			</S_IRGRP>
			<S_IFSOCK>
				<x path="Int"/>
				<haxe_doc>File type constant for a socket.</haxe_doc>
			</S_IFSOCK>
			<S_IFREG>
				<x path="Int"/>
				<haxe_doc>File type constant for a regular file.</haxe_doc>
			</S_IFREG>
			<S_IFMT>
				<x path="Int"/>
				<haxe_doc>Bit mask used to extract the file type code.</haxe_doc>
			</S_IFMT>
			<S_IFLNK>
				<x path="Int"/>
				<haxe_doc>File type constant for a symbolic link.</haxe_doc>
			</S_IFLNK>
			<S_IFIFO>
				<x path="Int"/>
				<haxe_doc>File type constant for a FIFO/pipe.</haxe_doc>
			</S_IFIFO>
			<S_IFDIR>
				<x path="Int"/>
				<haxe_doc>File type constant for a directory.</haxe_doc>
			</S_IFDIR>
			<S_IFCHR>
				<x path="Int"/>
				<haxe_doc>File type constant for a character-oriented device file.</haxe_doc>
			</S_IFCHR>
			<S_IFBLK>
				<x path="Int"/>
				<haxe_doc>File type constant for a block-oriented device file.</haxe_doc>
			</S_IFBLK>
			<R_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file can be read by the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</R_OK>
			<O_WRONLY>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open a file for write-only access.</haxe_doc>
			</O_WRONLY>
			<O_TRUNC>
				<x path="Int"/>
				<haxe_doc>Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero.</haxe_doc>
			</O_TRUNC>
			<O_SYNC>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file is opened for synchronous I/O.</haxe_doc>
			</O_SYNC>
			<O_SYMLINK>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open the symbolic link itself rather than the resource it is pointing to.</haxe_doc>
			</O_SYMLINK>
			<O_RDWR>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open a file for read-write access.</haxe_doc>
			</O_RDWR>
			<O_RDONLY>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open a file for read-only access.</haxe_doc>
			</O_RDONLY>
			<O_NONBLOCK>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open the file in nonblocking mode when possible.</haxe_doc>
			</O_NONBLOCK>
			<O_NOFOLLOW>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the open should fail if the path is a symbolic link.</haxe_doc>
			</O_NOFOLLOW>
			<O_NOCTTY>
				<x path="Int"/>
				<haxe_doc>Flag indicating that if path identifies a terminal device, opening the path shall not cause that terminal to become the controlling terminal for the process (if the process does not already have one).</haxe_doc>
			</O_NOCTTY>
			<O_NOATIME>
				<x path="Int"/>
				<haxe_doc>Flag indicating reading accesses to the file system will no longer result in an update to the atime information associated with the file. This flag is available on Linux operating systems only.</haxe_doc>
			</O_NOATIME>
			<O_EXCL>
				<x path="Int"/>
				<haxe_doc>Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists.</haxe_doc>
			</O_EXCL>
			<O_DIRECTORY>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the open should fail if the path is not a directory.</haxe_doc>
			</O_DIRECTORY>
			<O_DIRECT>
				<x path="Int"/>
				<haxe_doc>When set, an attempt will be made to minimize caching effects of file I/O.</haxe_doc>
			</O_DIRECT>
			<O_CREAT>
				<x path="Int"/>
				<haxe_doc>Flag indicating to create the file if it does not already exist.</haxe_doc>
			</O_CREAT>
			<O_APPEND>
				<x path="Int"/>
				<haxe_doc>Flag indicating that data will be appended to the end of the file.</haxe_doc>
			</O_APPEND>
			<F_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file is visible to the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</F_OK>
		</a>
		<haxe_doc>Constants for use in `Fs` module.

	Note: Not every constant will be available on every operating system.</haxe_doc>
	</typedef>
	<class path="js.node.Fs" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Fs.hx" extern="1">
		<constants public="1" set="null" static="1">
			<t path="js.node.FsConstants"/>
			<haxe_doc>An object containing commonly used constants for file system operations.</haxe_doc>
		</constants>
		<rename public="1" set="method" static="1">
			<f a="oldPath:newPath:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous rename(2).</haxe_doc>
		</rename>
		<renameSync public="1" set="method" static="1">
			<f a="oldPath:newPath">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous rename(2).</haxe_doc>
		</renameSync>
		<ftruncate public="1" set="method" static="1">
			<f a="fd:len:callback">
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous ftruncate(2).</haxe_doc>
		</ftruncate>
		<ftruncateSync public="1" set="method" static="1">
			<f a="fd:len">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous ftruncate(2).</haxe_doc>
		</ftruncateSync>
		<truncate public="1" set="method" static="1">
			<f a="path:len:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous truncate(2).</haxe_doc>
		</truncate>
		<truncateSync public="1" set="method" static="1">
			<f a="path:len">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous truncate(2).</haxe_doc>
		</truncateSync>
		<chown public="1" set="method" static="1">
			<f a="path:uid:gid:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous chown(2).</haxe_doc>
		</chown>
		<chownSync public="1" set="method" static="1">
			<f a="path:uid:gid">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous chown(2).</haxe_doc>
		</chownSync>
		<fchown public="1" set="method" static="1">
			<f a="fd:uid:gid:callback">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fchown(2).</haxe_doc>
		</fchown>
		<fchownSync public="1" set="method" static="1">
			<f a="fd:uid:gid">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous fchown(2).</haxe_doc>
		</fchownSync>
		<lchown public="1" set="method" static="1">
			<f a="path:uid:gid:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous lchown(2).</haxe_doc>
		</lchown>
		<lchownSync public="1" set="method" static="1">
			<f a="path:uid:gid">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous lchown(2).</haxe_doc>
		</lchownSync>
		<chmod public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous chmod(2).</haxe_doc>
		</chmod>
		<chmodSync public="1" set="method" static="1">
			<f a="path:mode">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous chmod(2).</haxe_doc>
		</chmodSync>
		<fchmod public="1" set="method" static="1">
			<f a="fd:mode:callback">
				<x path="Int"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fchmod(2).</haxe_doc>
		</fchmod>
		<fchmodSync public="1" set="method" static="1">
			<f a="fd:mode">
				<x path="Int"/>
				<t path="js.node.FsMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous fchmod(2).</haxe_doc>
		</fchmodSync>
		<lchmod public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous lchmod(2).
		Only available on Mac OS X.</haxe_doc>
		</lchmod>
		<lchmodSync public="1" set="method" static="1">
			<f a="path:mode">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous lchmod(2).</haxe_doc>
		</lchmodSync>
		<stat public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous stat(2).</haxe_doc>
		</stat>
		<lstat public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous lstat(2).

		lstat() is identical to stat(), except that if path is a symbolic link,
		then the link itself is stat-ed, not the file that it refers to.</haxe_doc>
		</lstat>
		<fstat public="1" set="method" static="1">
			<f a="fd:callback">
				<x path="Int"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fstat(2).

		fstat() is identical to stat(), except that the file to be stat-ed
		is specified by the file descriptor fd.</haxe_doc>
		</fstat>
		<statSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="js.node.fs.Stats"/>
			</f>
			<haxe_doc>Synchronous stat(2).</haxe_doc>
		</statSync>
		<lstatSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="js.node.fs.Stats"/>
			</f>
			<haxe_doc>Synchronous lstat(2).</haxe_doc>
		</lstatSync>
		<fstatSync public="1" set="method" static="1">
			<f a="fd">
				<x path="Int"/>
				<c path="js.node.fs.Stats"/>
			</f>
			<haxe_doc>Synchronous fstat(2).</haxe_doc>
		</fstatSync>
		<link public="1" set="method" static="1">
			<f a="srcpath:dstpath:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous link(2).</haxe_doc>
		</link>
		<linkSync public="1" set="method" static="1">
			<f a="srcpath:dstpath">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous link(2).</haxe_doc>
		</linkSync>
		<symlink public="1" set="method" static="1">
			<f a="srcpath:dstpath:type:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="js.node.SymlinkType"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous symlink(2).

		The `type` argument can be set to 'dir', 'file', or 'junction' (default is 'file')
		and is only available on Windows (ignored on other platforms). Note that Windows junction
		points require the destination path to be absolute. When using 'junction', the destination
		argument will automatically be normalized to absolute path.</haxe_doc>
			<overloads><symlink public="1" set="method">
	<f a="srcpath:dstpath:callback">
		<t path="js.node.FsPath"/>
		<t path="js.node.FsPath"/>
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous symlink(2).

		The `type` argument can be set to 'dir', 'file', or 'junction' (default is 'file')
		and is only available on Windows (ignored on other platforms). Note that Windows junction
		points require the destination path to be absolute. When using 'junction', the destination
		argument will automatically be normalized to absolute path.</haxe_doc>
</symlink></overloads>
		</symlink>
		<symlinkSync public="1" set="method" static="1">
			<f a="srcpath:dstpath:type">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="js.node.SymlinkType"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous symlink(2).</haxe_doc>
			<overloads><symlinkSync public="1" set="method">
	<f a="srcpath:dstpath">
		<t path="js.node.FsPath"/>
		<t path="js.node.FsPath"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Synchronous symlink(2).</haxe_doc>
</symlinkSync></overloads>
		</symlinkSync>
		<readlink public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous readlink(2).</haxe_doc>
		</readlink>
		<readlinkSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="String"/>
			</f>
			<haxe_doc>Synchronous readlink(2).
		Returns the symbolic link's string value.</haxe_doc>
		</readlinkSync>
		<realpath public="1" set="method" static="1">
			<f a="path:cache:callback">
				<t path="js.node.FsPath"/>
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous realpath(2).

		The callback gets two arguments (err, resolvedPath).

		May use process.cwd to resolve relative paths.

		`cache` is an object literal of mapped paths that can be used to force a specific path resolution
		or avoid additional `stat` calls for known real paths.</haxe_doc>
			<overloads><realpath public="1" set="method">
	<f a="path:callback">
		<t path="js.node.FsPath"/>
		<f a=":">
			<c path="js.lib.Error"/>
			<c path="String"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous realpath(2).

		The callback gets two arguments (err, resolvedPath).

		May use process.cwd to resolve relative paths.

		`cache` is an object literal of mapped paths that can be used to force a specific path resolution
		or avoid additional `stat` calls for known real paths.</haxe_doc>
</realpath></overloads>
		</realpath>
		<realpathSync public="1" set="method" static="1">
			<f a="path:cache">
				<t path="js.node.FsPath"/>
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Synchronous realpath(2).
		Returns the resolved path.</haxe_doc>
			<overloads><realpathSync public="1" set="method">
	<f a="path">
		<t path="js.node.FsPath"/>
		<c path="String"/>
	</f>
	<haxe_doc>Synchronous realpath(2).
		Returns the resolved path.</haxe_doc>
</realpathSync></overloads>
		</realpathSync>
		<unlink public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous unlink(2).</haxe_doc>
		</unlink>
		<unlinkSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous unlink(2).</haxe_doc>
		</unlinkSync>
		<rmdir public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous rmdir(2).</haxe_doc>
		</rmdir>
		<rmdirSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous rmdir(2).</haxe_doc>
		</rmdirSync>
		<mkdir public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous mkdir(2).
		`mode` defaults to 0777.</haxe_doc>
			<overloads><mkdir public="1" set="method">
	<f a="path:callback">
		<t path="js.node.FsPath"/>
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous mkdir(2).
		`mode` defaults to 0777.</haxe_doc>
</mkdir></overloads>
		</mkdir>
		<mkdirSync public="1" set="method" static="1">
			<f a="path:?mode">
				<t path="js.node.FsPath"/>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous mkdir(2).</haxe_doc>
		</mkdirSync>
		<mkdtemp public="1" set="method" static="1">
			<f a="prefix:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a unique temporary directory.

		Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.

		The created folder path is passed as a string to the `callback`'s second parameter.</haxe_doc>
		</mkdtemp>
		<mkdtempSync public="1" set="method" static="1">
			<f a="template">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The synchronous version of `mkdtemp`.

		Returns the created folder path.</haxe_doc>
		</mkdtempSync>
		<readdir public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous readdir(3).
		Reads the contents of a directory.

		The callback gets two arguments (err, files) where files is an array of the
		names of the files in the directory excluding '.' and '..'.</haxe_doc>
		</readdir>
		<readdirSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Synchronous readdir(3).
		Returns an array of filenames excluding '.' and '..'.</haxe_doc>
		</readdirSync>
		<close public="1" set="method" static="1">
			<f a="fd:callback">
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous close(2).</haxe_doc>
		</close>
		<closeSync public="1" set="method" static="1">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous close(2).</haxe_doc>
		</closeSync>
		<open public="1" set="method" static="1">
			<f a="path:flags:mode:callback">
				<t path="js.node.FsPath"/>
				<x path="js.node.FsOpenFlag"/>
				<t path="js.node.FsMode"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous file open. See open(2).

		See `FsOpenFlag` for description of possible `flags`.

		`mode` sets the file mode (permission and sticky bits), but only if the file was created.
		It defaults to 0666, readable and writeable.

		The `callback` gets two arguments (err, fd).</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="path:flags:callback">
		<t path="js.node.FsPath"/>
		<x path="js.node.FsOpenFlag"/>
		<f a=":">
			<c path="js.lib.Error"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous file open. See open(2).

		See `FsOpenFlag` for description of possible `flags`.

		`mode` sets the file mode (permission and sticky bits), but only if the file was created.
		It defaults to 0666, readable and writeable.

		The `callback` gets two arguments (err, fd).</haxe_doc>
</open></overloads>
		</open>
		<openSync public="1" set="method" static="1">
			<f a="path:flags:mode">
				<t path="js.node.FsPath"/>
				<x path="js.node.FsOpenFlag"/>
				<t path="js.node.FsMode"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Synchronous version of open().</haxe_doc>
			<overloads><openSync public="1" set="method">
	<f a="path:flags">
		<t path="js.node.FsPath"/>
		<x path="js.node.FsOpenFlag"/>
		<x path="Int"/>
	</f>
	<haxe_doc>Synchronous version of open().</haxe_doc>
</openSync></overloads>
		</openSync>
		<utimes public="1" set="method" static="1">
			<f a="path:atime:mtime:callback">
				<t path="js.node.FsPath"/>
				<c path="Date"/>
				<c path="Date"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Change file timestamps of the file referenced by the supplied path.</haxe_doc>
		</utimes>
		<utimesSync public="1" set="method" static="1">
			<f a="path:atime:mtime">
				<t path="js.node.FsPath"/>
				<c path="Date"/>
				<c path="Date"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change file timestamps of the file referenced by the supplied path.</haxe_doc>
		</utimesSync>
		<futimes public="1" set="method" static="1">
			<f a="fd:atime:mtime:callback">
				<x path="Int"/>
				<c path="Date"/>
				<c path="Date"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the file timestamps of a file referenced by the supplied file descriptor.</haxe_doc>
		</futimes>
		<futimesSync public="1" set="method" static="1">
			<f a="fd:atime:mtime">
				<x path="Int"/>
				<c path="Date"/>
				<c path="Date"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the file timestamps of a file referenced by the supplied file descriptor.</haxe_doc>
		</futimesSync>
		<fsync public="1" set="method" static="1">
			<f a="fd:callback">
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fsync(2).</haxe_doc>
		</fsync>
		<fsyncSync public="1" set="method" static="1">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous fsync(2).</haxe_doc>
		</fsyncSync>
		<write public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:position:callback">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="::">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<t path="js.node.Buffer"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
			<overloads>
				<write public="1" set="method">
					<f a="fd:data:position:encoding:callback">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<c path="String"/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="fd:data:position:callback">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="fd:data:callback">
						<x path="Int"/>
						<d/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="fd:buffer:offset:length:callback">
						<x path="Int"/>
						<t path="js.node.Buffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<t path="js.node.Buffer"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
			</overloads>
		</write>
		<writeSync public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:?position">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Synchronous version of `write`. Returns the number of bytes written.</haxe_doc>
			<overloads>
				<writeSync public="1" set="method">
					<f a="fd:data:position:encoding">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Synchronous version of `write`. Returns the number of bytes written.</haxe_doc>
				</writeSync>
				<writeSync public="1" set="method">
					<f a="fd:data:?position">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Synchronous version of `write`. Returns the number of bytes written.</haxe_doc>
				</writeSync>
			</overloads>
		</writeSync>
		<read public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:position:callback">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<f a="::">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<t path="js.node.Buffer"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Read data from the file specified by `fd`.

		`buffer` is the buffer that the data will be written to.

		`offset` is the offset in the `buffer` to start writing at.

		`length` is an integer specifying the number of bytes to read.

		`position` is an integer specifying where to begin reading from in the file.
		If position is null, data will be read from the current file position.

		The `callback` is given the three arguments, (err, bytesRead, buffer).</haxe_doc>
		</read>
		<readSync public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:position">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Synchronous version of `read`. Returns the number of bytes read.</haxe_doc>
		</readSync>
		<readFile public="1" set="method" static="1">
			<f a="filename:options:callback">
				<t path="js.node.FsPath"/>
				<a>
					<flag>
						<x path="Null"><x path="js.node.FsOpenFlag"/></x>
						<meta><m n=":optional"/></meta>
					</flag>
					<encoding><c path="String"/></encoding>
				</a>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
			<overloads>
				<readFile public="1" set="method">
					<f a="filename:callback">
						<t path="js.node.FsPath"/>
						<f a=":">
							<c path="js.lib.Error"/>
							<t path="js.node.Buffer"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
				</readFile>
				<readFile public="1" set="method">
					<f a="filename:options:callback">
						<t path="js.node.FsPath"/>
						<a><flag><x path="js.node.FsOpenFlag"/></flag></a>
						<f a=":">
							<c path="js.lib.Error"/>
							<t path="js.node.Buffer"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
				</readFile>
				<readFile public="1" set="method">
					<f a="filename:options:callback">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<f a=":">
							<c path="js.lib.Error"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
				</readFile>
			</overloads>
		</readFile>
		<readFileSync public="1" set="method" static="1">
			<f a="filename:options">
				<t path="js.node.FsPath"/>
				<a>
					<flag>
						<x path="Null"><x path="js.node.FsOpenFlag"/></x>
						<meta><m n=":optional"/></meta>
					</flag>
					<encoding><c path="String"/></encoding>
				</a>
				<c path="String"/>
			</f>
			<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
			<overloads>
				<readFileSync public="1" set="method">
					<f a="filename">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
					</f>
					<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
				</readFileSync>
				<readFileSync public="1" set="method">
					<f a="filename:options">
						<t path="js.node.FsPath"/>
						<a><flag><x path="js.node.FsOpenFlag"/></flag></a>
						<t path="js.node.Buffer"/>
					</f>
					<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
				</readFileSync>
				<readFileSync public="1" set="method">
					<f a="filename:options">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
				</readFileSync>
			</overloads>
		</readFileSync>
		<writeFile public="1" set="method" static="1">
			<f a="filename:data:options:callback">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
			<overloads>
				<writeFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
				</writeFile>
				<writeFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
				</writeFile>
				<writeFile public="1" set="method">
					<f a="filename:data:options:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
				</writeFile>
			</overloads>
		</writeFile>
		<writeFileSync public="1" set="method" static="1">
			<f a="filename:data:options">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
			<overloads>
				<writeFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
				</writeFileSync>
				<writeFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
				</writeFileSync>
				<writeFileSync public="1" set="method">
					<f a="filename:data:options">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
				</writeFileSync>
			</overloads>
		</writeFileSync>
		<appendFile public="1" set="method" static="1">
			<f a="filename:data:options:callback">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
			<overloads>
				<appendFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
				</appendFile>
				<appendFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
				</appendFile>
				<appendFile public="1" set="method">
					<f a="filename:data:options:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
				</appendFile>
			</overloads>
		</appendFile>
		<appendFileSync public="1" set="method" static="1">
			<f a="filename:data:options">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
			<overloads>
				<appendFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
				</appendFileSync>
				<appendFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
				</appendFileSync>
				<appendFileSync public="1" set="method">
					<f a="filename:data:options">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
				</appendFileSync>
			</overloads>
		</appendFileSync>
		<watchFile public="1" set="method" static="1">
			<f a="filename:options:listener">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsWatchFileOptions"/>
				<f a=":">
					<c path="js.node.fs.Stats"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Unstable. Use `watch` instead, if possible.

		Watch for changes on `filename`.
		The callback `listener` will be called each time the file is accessed.

		The `options` if provided should be an object containing two members:
			- `persistent` indicates whether the process should continue to run as long as files are being watched.
			- `interval` indicates how often the target should be polled, in milliseconds.
		The default is { persistent: true, interval: 5007 }.

		The `listener` gets two arguments: the current stat object and the previous stat object.</haxe_doc>
			<overloads><watchFile public="1" set="method">
	<f a="filename:listener">
		<t path="js.node.FsPath"/>
		<f a=":">
			<c path="js.node.fs.Stats"/>
			<c path="js.node.fs.Stats"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Unstable. Use `watch` instead, if possible.

		Watch for changes on `filename`.
		The callback `listener` will be called each time the file is accessed.

		The `options` if provided should be an object containing two members:
			- `persistent` indicates whether the process should continue to run as long as files are being watched.
			- `interval` indicates how often the target should be polled, in milliseconds.
		The default is { persistent: true, interval: 5007 }.

		The `listener` gets two arguments: the current stat object and the previous stat object.</haxe_doc>
</watchFile></overloads>
		</watchFile>
		<unwatchFile public="1" set="method" static="1">
			<f a="filename:?listener">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.node.fs.Stats"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Unstable. Use `watch` instead, if possible.

		Stop watching for changes on filename.
		If `listener` is specified, only that particular listener is removed.
		Otherwise, all listeners are removed and you have effectively stopped watching filename.
		Calling `unwatchFile` with a `filename` that is not being watched is a no-op, not an error.</haxe_doc>
		</unwatchFile>
		<watch public="1" set="method" static="1">
			<f a="filename:listener">
				<t path="js.node.FsPath"/>
				<f a=":">
					<x path="js.node.fs.FSWatcherChangeType"/>
					<t path="js.node.FsPath"/>
					<x path="Void"/>
				</f>
				<c path="js.node.fs.FSWatcher"/>
			</f>
			<haxe_doc>Watch for changes on `filename`, where filename is either a file or a directory.

		`persistent` indicates whether the process should continue to run as long as files are being watched. Default is `true`.

		The `listener` callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename
		is the name of the file which triggered the event.</haxe_doc>
			<overloads>
				<watch public="1" set="method">
					<f a="filename">
						<t path="js.node.FsPath"/>
						<c path="js.node.fs.FSWatcher"/>
					</f>
					<haxe_doc>Watch for changes on `filename`, where filename is either a file or a directory.

		`persistent` indicates whether the process should continue to run as long as files are being watched. Default is `true`.

		The `listener` callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename
		is the name of the file which triggered the event.</haxe_doc>
				</watch>
				<watch public="1" set="method">
					<f a="filename:options:listener">
						<t path="js.node.FsPath"/>
						<a>
							<recursive>
								<x path="Null"><x path="Bool"/></x>
								<meta><m n=":optional"/></meta>
							</recursive>
							<persistent><x path="Bool"/></persistent>
						</a>
						<f a=":">
							<x path="js.node.fs.FSWatcherChangeType"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<c path="js.node.fs.FSWatcher"/>
					</f>
					<haxe_doc>Watch for changes on `filename`, where filename is either a file or a directory.

		`persistent` indicates whether the process should continue to run as long as files are being watched. Default is `true`.

		The `listener` callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename
		is the name of the file which triggered the event.</haxe_doc>
				</watch>
			</overloads>
		</watch>
		<exists public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a="">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use Fs.stat or Fs.access instead"</e></m></meta>
			<haxe_doc>Test whether or not the given `path` exists by checking with the file system.
		Then call the `callback` argument with either `true` or `false`.

		`exists` is an anachronism and exists only for historical reasons.
		There should almost never be a reason to use it in your own code.

		In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions:
		another process may remove the file between the calls to `exists` and `open`.

		Just open the file and handle the error when it's not there.</haxe_doc>
		</exists>
		<existsSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Synchronous version of `exists`.</haxe_doc>
		</existsSync>
		<access public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Tests a user's permissions for the file or directory specified by `path`.

		The `mode` argument is an optional integer that specifies the accessibility checks to be performed.
		The following constants define the possible values of `mode`. It is possible to create a mask consisting
		of the bitwise OR of two or more values.

		* `Fs.constants.F_OK` - path is visible to the calling process. This is useful for determining if a file exists,
		  but says nothing about `rwx` permissions. Default if no `mode` is specified.
		* `Fs.constants.R_OK` - path can be read by the calling process.
		* `Fs.constants.W_OK` - path can be written by the calling process.
		* `Fs.constants.X_OK` - path can be executed by the calling process.
		  This has no effect on Windows (will behave like `Fs.constants.F_OK`).

		The final argument, `callback`, is a callback function that is invoked with a possible error argument.
		If any of the accessibility checks fail, the error argument will be populated.</haxe_doc>
			<overloads><access public="1" set="method">
	<f a="path:callback">
		<t path="js.node.FsPath"/>
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Tests a user's permissions for the file or directory specified by `path`.

		The `mode` argument is an optional integer that specifies the accessibility checks to be performed.
		The following constants define the possible values of `mode`. It is possible to create a mask consisting
		of the bitwise OR of two or more values.

		* `Fs.constants.F_OK` - path is visible to the calling process. This is useful for determining if a file exists,
		  but says nothing about `rwx` permissions. Default if no `mode` is specified.
		* `Fs.constants.R_OK` - path can be read by the calling process.
		* `Fs.constants.W_OK` - path can be written by the calling process.
		* `Fs.constants.X_OK` - path can be executed by the calling process.
		  This has no effect on Windows (will behave like `Fs.constants.F_OK`).

		The final argument, `callback`, is a callback function that is invoked with a possible error argument.
		If any of the accessibility checks fail, the error argument will be populated.</haxe_doc>
</access></overloads>
		</access>
		<F_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File is visible to the calling process.
		This is useful for determining if a file exists, but says nothing about rwx permissions.</haxe_doc>
		</F_OK>
		<R_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File can be read by the calling process.</haxe_doc>
		</R_OK>
		<W_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File can be written by the calling process.</haxe_doc>
		</W_OK>
		<X_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File can be executed by the calling process.
		This has no effect on Windows.</haxe_doc>
		</X_OK>
		<accessSync public="1" set="method" static="1">
			<f a="path:?mode">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous version of `access`.
		This throws if any accessibility checks fail, and does nothing otherwise.</haxe_doc>
		</accessSync>
		<createReadStream public="1" set="method" static="1">
			<f a="path:?options">
				<t path="js.node.FsPath"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsCreateReadStreamOptions"/>
				</x>
				<c path="js.node.fs.ReadStream"/>
			</f>
			<haxe_doc>Returns a new ReadStream object (See Readable Stream).

		`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.
		Both `start` and `end` are inclusive and start at 0.

		The encoding can be 'utf8', 'ascii', or 'base64'.

		If `autoClose` is `false`, then the file descriptor won't be closed, even if there's an error.
		It is your responsiblity to close it and make sure there's no file descriptor leak.
		If `autoClose` is set to true (default behavior), on error or end the file descriptor will be closed automatically.</haxe_doc>
		</createReadStream>
		<createWriteStream public="1" set="method" static="1">
			<f a="path:?options">
				<t path="js.node.FsPath"/>
				<x path="Null"><t path="js.node.FsCreateWriteStreamOptions"/></x>
				<c path="js.node.fs.WriteStream"/>
			</f>
			<haxe_doc>Returns a new WriteStream object (See Writable Stream).

		`options` may also include a `start` option to allow writing data at some position past the beginning of the file.

		Modifying a file rather than replacing it may require a flags mode of r+ rather than the default mode w.</haxe_doc>
		</createWriteStream>
		<haxe_doc>File I/O is provided by simple wrappers around standard POSIX functions.
	All the methods have asynchronous and synchronous forms.

	The asynchronous form always take a completion callback as its last argument.
	The arguments passed to the completion callback depend on the method,
	but the first argument is always reserved for an exception.

	If the operation was completed successfully, then the first argument will be null.

	When using the synchronous form any exceptions are immediately thrown.
	You can use try/catch to handle exceptions or allow them to bubble up.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"fs"</e></m>
		</meta>
	</class>
	<typedef path="js.node.Iterator" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Iterator.hx"><t path="js.lib.Iterator"><c path="js.node.Iterator.T"/></t></typedef>
	<typedef path="js.node.IteratorStep" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Iterator.hx" module="js.node.Iterator"><t path="js.lib.IteratorStep"><c path="js.node.IteratorStep.T"/></t></typedef>
	<abstract path="js.node.KeyValue" params="K:V" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.node._KeyValue.KeyValue_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/KeyValue.hx" private="1" module="js.node.KeyValue" final="1">
	<key public="1" get="accessor" set="null" static="1">
		<c path="js.node.KeyValue.K"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<c path="js.node.KeyValue.V"/>
		<meta><m n=":impl"/></meta>
	</value>
	<get_key get="inline" set="null" line="32" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="js.node.KeyValue.K"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_key>
	<get_value get="inline" set="null" line="36" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="js.node.KeyValue.V"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_value>
</class></impl>
	</abstract>
	<class path="js.node._KeyValue.KeyValue_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/KeyValue.hx" private="1" module="js.node.KeyValue" final="1">
		<key public="1" get="accessor" set="null" static="1">
			<c path="js.node.KeyValue.K"/>
			<meta><m n=":impl"/></meta>
		</key>
		<value public="1" get="accessor" set="null" static="1">
			<c path="js.node.KeyValue.V"/>
			<meta><m n=":impl"/></meta>
		</value>
		<get_key get="inline" set="null" line="32" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="js.node.KeyValue.K"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_key>
		<get_value get="inline" set="null" line="36" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="js.node.KeyValue.V"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_value>
	</class>
	<class path="js.node.Path" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Path.hx" extern="1">
		<basename public="1" set="method" static="1">
			<f a="path:?ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.basename()` methods returns the last portion of a `path`, similar to the Unix `basename` command. Trailing directory separators are ignored, see path.sep.

		@see https://nodejs.org/api/path.html#path_path_basename_path_ext</haxe_doc>
		</basename>
		<delimiter public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>Platform-specific path delimiter:

		`;` for Windows
		`:` for POSIX
		@see https://nodejs.org/api/path.html#path_path_delimiter</haxe_doc>
		</delimiter>
		<dirname public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.dirname()` method returns the directory name of a `path`, similar to the Unix `dirname` command. Trailing directory separators are ignored, see path.sep.

		@see https://nodejs.org/api/path.html#path_path_dirname_path</haxe_doc>
		</dirname>
		<extname public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.extname()` method returns the extension of the `path`, from the last occurrence of the `.` (period) character to end of string in the last portion of the `path`.
		If there is no `.` in the last portion of the `path`, or if there are no `.` characters other than the first character of the basename of `path` (see `path.basename()`) ,
		an empty string is returned.

		@see https://nodejs.org/api/path.html#path_path_extname_path</haxe_doc>
		</extname>
		<format public="1" set="method" static="1">
			<f a="pathObject">
				<t path="js.node.PathObject"/>
				<c path="String"/>
			</f>
			<haxe_doc>The path.format() method returns a path string from an object. This is the opposite of path.parse().

		@see https://nodejs.org/api/path.html#path_path_format_pathobject</haxe_doc>
		</format>
		<isAbsolute public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `path.isAbsolute()` method determines if `path` is an absolute path.

		@see https://nodejs.org/api/path.html#path_path_isabsolute_path</haxe_doc>
		</isAbsolute>
		<join public="1" set="method" static="1">
			<f a="paths">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.join()` method joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.

		@see https://nodejs.org/api/path.html#path_path_join_paths</haxe_doc>
		</join>
		<normalize public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.normalize()` method normalizes the given `path`, resolving `'..'` and `'.'` segments.

		@see https://nodejs.org/api/path.html#path_path_normalize_path</haxe_doc>
		</normalize>
		<parse public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<t path="js.node.PathObject"/>
			</f>
			<haxe_doc>The `path.parse()` method returns an object whose properties represent significant elements of the `path`. Trailing directory separators are ignored, see path.sep.

		@see https://nodejs.org/api/path.html#path_path_parse_path</haxe_doc>
		</parse>
		<posix public="1" set="null" static="1">
			<t path="js.node._Path.PathModule"/>
			<haxe_doc>The `path.posix` property provides access to POSIX specific implementations of the `path` methods.

		@see https://nodejs.org/api/path.html#path_path_posix</haxe_doc>
		</posix>
		<relative public="1" set="method" static="1">
			<f a="from:to">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.relative()` method returns the relative path from `from` to `to` based on the current working directory.
		If `from` and `to` each resolve to the same path (after calling path.resolve() on each), a zero-length string is returned.

		@see https://nodejs.org/api/path.html#path_path_relative_from_to</haxe_doc>
		</relative>
		<resolve public="1" set="method" static="1">
			<f a="paths">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.resolve()` method resolves a sequence of paths or path segments into an absolute path.

		@see https://nodejs.org/api/path.html#path_path_resolve_paths</haxe_doc>
		</resolve>
		<sep public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>Provides the platform-specific path segment separator:

		`\` on Windows
		`/` on POSIX

		@see https://nodejs.org/api/path.html#path_path_sep</haxe_doc>
		</sep>
		<toNamespacedPath public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>On Windows systems only, returns an equivalent namespace-prefixed path for the given `path`. If `path` is not a string, `path` will be returned without modifications.

		@see https://nodejs.org/api/path.html#path_path_tonamespacedpath_path</haxe_doc>
		</toNamespacedPath>
		<win32 public="1" set="null" static="1">
			<t path="js.node._Path.PathModule"/>
			<haxe_doc>The path.win32 property provides access to Windows-specific implementations of the path methods.

		@see https://nodejs.org/api/path.html#path_path_win32</haxe_doc>
		</win32>
		<haxe_doc>The `path` module provides utilities for working with file and directory paths.

	@see https://nodejs.org/api/path.html#path_path</haxe_doc>
		<meta><m n=":jsRequire"><e>"path"</e></m></meta>
	</class>
	<typedef path="js.node.PathObject" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Path.hx" module="js.node.Path">
		<a>
			<root>
				<c path="String"/>
				<haxe_doc>E.g. "C:\" for "C:\path\dir\index.html"</haxe_doc>
			</root>
			<name>
				<c path="String"/>
				<haxe_doc>E.g. "index" for "C:\path\dir\index.html"</haxe_doc>
			</name>
			<ext>
				<c path="String"/>
				<haxe_doc>E.g. ".html" for "C:\path\dir\index.html"</haxe_doc>
			</ext>
			<dir>
				<c path="String"/>
				<haxe_doc>E.g. "C:\path\dir" for "C:\path\dir\index.html"</haxe_doc>
			</dir>
			<base>
				<c path="String"/>
				<haxe_doc>E.g. "index.html" for "C:\path\dir\index.html"</haxe_doc>
			</base>
		</a>
		<haxe_doc>Path object returned from `Path.parse` and taken by `Path.format`.

	@see https://nodejs.org/api/path.html#path_path_format_pathobject</haxe_doc>
	</typedef>
	<typedef path="js.node._Path.PathModule" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Path.hx" private="1" module="js.node.Path"><a>
	<sep set="null"><c path="String"/></sep>
	<resolve set="method"><f a="paths">
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></resolve>
	<relative set="method"><f a="from:to">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></relative>
	<parse set="method"><f a="pathString">
	<c path="String"/>
	<t path="js.node.PathObject"/>
</f></parse>
	<normalize set="method"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></normalize>
	<join set="method"><f a="paths">
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></join>
	<isAbsolute set="method"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isAbsolute>
	<format set="method"><f a="pathObject">
	<t path="js.node.PathObject"/>
	<c path="String"/>
</f></format>
	<extname set="method"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></extname>
	<dirname set="method"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></dirname>
	<delimiter set="null"><c path="String"/></delimiter>
	<basename set="method"><f a="path:?ext">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></basename>
</a></typedef>
	<class path="js.node.events.IEventEmitter" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter" extern="1" interface="1">
		<addListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="addListener.T"/></x>
	<c path="addListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></addListener>
		<emit public="1" params="T" set="method"><f a="eventName:args">
	<x path="js.node.events.Event"><c path="emit.T"/></x>
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Bool"/>
</f></emit>
		<eventNames public="1" set="method"><f a=""><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="js.lib.Symbol"/>
</x></c></f></eventNames>
		<getMaxListeners public="1" set="method"><f a=""><x path="Int"/></f></getMaxListeners>
		<listenerCount public="1" params="T" set="method"><f a="eventName">
	<x path="js.node.events.Event"><c path="listenerCount.T"/></x>
	<x path="Int"/>
</f></listenerCount>
		<listeners public="1" params="T" set="method"><f a="eventName">
	<x path="js.node.events.Event"><c path="listeners.T"/></x>
	<c path="Array"><c path="listeners.T"/></c>
</f></listeners>
		<off public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="off.T"/></x>
	<c path="off.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></off>
		<on public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="on.T"/></x>
	<c path="on.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></on>
		<once public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="once.T"/></x>
	<c path="once.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></once>
		<prependListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="prependListener.T"/></x>
	<c path="prependListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></prependListener>
		<prependOnceListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="prependOnceListener.T"/></x>
	<c path="prependOnceListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></prependOnceListener>
		<removeAllListeners public="1" params="T" set="method"><f a="?eventName">
	<x path="js.node.events.Event"><c path="removeAllListeners.T"/></x>
	<c path="js.node.events.IEventEmitter"/>
</f></removeAllListeners>
		<removeListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="removeListener.T"/></x>
	<c path="removeListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></removeListener>
		<setMaxListeners public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></setMaxListeners>
		<rawListeners public="1" params="T" set="method"><f a="eventName">
	<x path="js.node.events.Event"><c path="rawListeners.T"/></x>
	<c path="Array"><c path="rawListeners.T"/></c>
</f></rawListeners>
		<haxe_doc>`IEventEmitter` interface is used as "any EventEmitter".

	See `EventEmitter` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.events.EventEmitter" params="TSelf" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" extern="1">
		<defaultMaxListeners public="1" static="1">
			<x path="Int"/>
			<haxe_doc>By default, a maximum of `10` listeners can be registered for any single
		event. This limit can be changed for individual `EventEmitter` instances
		using the `emitter.setMaxListeners(n)` method. To change the default
		for all `EventEmitter` instances, the `EventEmitter.defaultMaxListeners`
		property can be used. If this value is not a positive number, a `TypeError`
		will be thrown.

		@see https://nodejs.org/api/events.html#events_eventemitter_defaultmaxlisteners</haxe_doc>
		</defaultMaxListeners>
		<addListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="addListener.T"/></x>
				<c path="addListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Alias for `emitter.on(eventName, listener)`.

		@see https://nodejs.org/api/events.html#events_emitter_addlistener_eventname_listener</haxe_doc>
		</addListener>
		<emit public="1" params="T" set="method">
			<f a="eventName:args">
				<x path="js.node.events.Event"><c path="emit.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Synchronously calls each of the listeners registered for the event named
		`eventName`, in the order they were registered, passing the supplied arguments
		to each.

		@see https://nodejs.org/api/events.html#events_emitter_emit_eventname_args</haxe_doc>
		</emit>
		<eventNames public="1" set="method">
			<f a=""><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="js.lib.Symbol"/>
</x></c></f>
			<haxe_doc>Returns an array listing the events for which the emitter has registered
		listeners. The values in the array will be strings or `Symbol`s.

		@see https://nodejs.org/api/events.html#events_emitter_eventnames</haxe_doc>
		</eventNames>
		<getMaxListeners public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the current max listener value for the `EventEmitter` which is either
		set by `emitter.setMaxListeners(n)` or defaults to
		`EventEmitter.defaultMaxListeners`.

		@see https://nodejs.org/api/events.html#events_emitter_getmaxlisteners</haxe_doc>
		</getMaxListeners>
		<listenerCount public="1" params="T" set="method">
			<f a="eventName">
				<x path="js.node.events.Event"><c path="listenerCount.T"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of listeners listening to the event named `eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_listenercount_eventname</haxe_doc>
		</listenerCount>
		<listeners public="1" params="T" set="method">
			<f a="eventName">
				<x path="js.node.events.Event"><c path="listeners.T"/></x>
				<c path="Array"><c path="listeners.T"/></c>
			</f>
			<haxe_doc>Returns a copy of the array of listeners for the event named `eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_listeners_eventname</haxe_doc>
		</listeners>
		<off public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="off.T"/></x>
				<c path="off.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Alias for `emitter.removeListener()`.

		@see https://nodejs.org/api/events.html#events_emitter_off_eventname_listener</haxe_doc>
		</off>
		<on public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="on.T"/></x>
				<c path="on.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds the `listener` function to the end of the listeners array for the
		event named `eventName`. No checks are made to see if the `listener` has
		already been added. Multiple calls passing the same combination of `eventName`
		and `listener` will result in the `listener` being added, and called, multiple
		times.

		@see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener</haxe_doc>
		</on>
		<once public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="once.T"/></x>
				<c path="once.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds a one-time `listener` function for the event named `eventName`. The
		next time `eventName` is triggered, this listener is removed and then invoked.

		@see https://nodejs.org/api/events.html#events_emitter_once_eventname_listener</haxe_doc>
		</once>
		<prependListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="prependListener.T"/></x>
				<c path="prependListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds the `listener` function to the beginning of the listeners array for the
		event named `eventName`. No checks are made to see if the `listener` has
		already been added. Multiple calls passing the same combination of `eventName`
		and `listener` will result in the `listener` being added, and called, multiple
		times.

		@see https://nodejs.org/api/events.html#events_emitter_prependlistener_eventname_listener</haxe_doc>
		</prependListener>
		<prependOnceListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="prependOnceListener.T"/></x>
				<c path="prependOnceListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds a one-time `listener` function for the event named `eventName` to the
		beginning of the listeners array. The next time `eventName` is triggered, this
		listener is removed, and then invoked.

		@see https://nodejs.org/api/events.html#events_emitter_prependoncelistener_eventname_listener</haxe_doc>
		</prependOnceListener>
		<removeAllListeners public="1" params="T" set="method">
			<f a="?eventName">
				<x path="js.node.events.Event"><c path="removeAllListeners.T"/></x>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Removes all listeners, or those of the specified `eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_removealllisteners_eventname</haxe_doc>
		</removeAllListeners>
		<removeListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="removeListener.T"/></x>
				<c path="removeListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Removes the specified `listener` from the listener array for the event named
		`eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener</haxe_doc>
		</removeListener>
		<setMaxListeners public="1" set="method">
			<f a="n">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>By default `EventEmitter`s will print a warning if more than `10` listeners are
		added for a particular event. This is a useful default that helps finding
		memory leaks. Obviously, not all events should be limited to just 10 listeners.
		The `emitter.setMaxListeners()` method allows the limit to be modified for this
		specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`)
		to indicate an unlimited number of listeners.

		@see https://nodejs.org/api/events.html#events_emitter_setmaxlisteners_n</haxe_doc>
		</setMaxListeners>
		<rawListeners public="1" params="T" set="method">
			<f a="eventName">
				<x path="js.node.events.Event"><c path="rawListeners.T"/></x>
				<c path="Array"><c path="rawListeners.T"/></c>
			</f>
			<haxe_doc>Returns a copy of the array of listeners for the event named `eventName`,
		including any wrappers (such as those created by `.once()`).

		@see https://nodejs.org/api/events.html#events_emitter_rawlisteners_eventname</haxe_doc>
		</rawListeners>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The `EventEmitter` class is defined and exposed by the `events` module:

	@see https://nodejs.org/api/events.html#events_class_eventemitter</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"events"</e>
	<e>"EventEmitter"</e>
</m></meta>
	</class>
	<class path="js.node.IStream" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Stream.hx" module="js.node.Stream" extern="1" interface="1">
		<haxe_doc>`IStream` interface is used as "any Stream".

	See `Stream` for actual class.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.Stream" params="TSelf" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Stream.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.Stream.TSelf"/></extends>
		<pipeline public="1" set="method" static="1">
			<f a="readable:streams">
				<c path="js.node.stream.IReadable"/>
				<x path="haxe.extern.Rest"><c path="js.node.stream.IWritable"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
			<overloads>
				<pipeline public="1" set="method">
					<f a="readable:callback">
						<c path="js.node.stream.IReadable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:writable6:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:writable6:writable7:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:writable6:writable7:writable8:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
			</overloads>
		</pipeline>
		<new set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Base class for all streams.</haxe_doc>
		<meta><m n=":jsRequire"><e>"stream"</e></m></meta>
	</class>
	<class path="js.node.buffer.Buffer" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx" extern="1">
		<extends path="js.lib.Uint8Array"/>
		<alloc public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
			<overloads>
				<alloc public="1" set="method">
					<f a="size:fill:?encoding">
						<x path="Int"/>
						<c path="String"/>
						<c path="String"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
				</alloc>
				<alloc public="1" set="method">
					<f a="size:fill">
						<x path="Int"/>
						<c path="js.lib.Uint8Array"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
				</alloc>
				<alloc public="1" set="method">
					<f a="size:fill">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
				</alloc>
			</overloads>
		</alloc>
		<allocUnsafe public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `size` is larger than
		`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`
		is thrown. A zero-length `Buffer` is created if `size` is 0.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size</haxe_doc>
		</allocUnsafe>
		<allocUnsafeSlow public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `size` is larger than
		`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`
		is thrown. A zero-length `Buffer` is created if `size` is 0.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size</haxe_doc>
		</allocUnsafeSlow>
		<byteLength public="1" set="method" static="1">
			<f a="string">
				<c path="js.node.buffer.Buffer"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
			<overloads>
				<byteLength public="1" set="method">
					<f a="string:?encoding">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
				</byteLength>
				<byteLength public="1" set="method">
					<f a="string">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
				</byteLength>
				<byteLength public="1" set="method">
					<f a="string">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
				</byteLength>
			</overloads>
		</byteLength>
		<_byteLength public="1" get="inline" set="null" line="108" static="1">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"In haxe 3.3+, use Buffer.byteLength instead!"</e></m>
			</meta>
		</_byteLength>
		<compareBuffers public="1" set="method" static="1">
			<f a="buf1:buf2">
				<c path="js.lib.Uint8Array"/>
				<c path="js.lib.Uint8Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"compare"</e></m></meta>
			<haxe_doc>Compares `buf1` to `buf2` typically for the purpose of sorting arrays of
		`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2</haxe_doc>
		</compareBuffers>
		<concat public="1" params="T" set="method" static="1">
			<f a="list:?totalLength">
				<c path="Array"><c path="concat.T"/></c>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength</haxe_doc>
		</concat>
		<from public="1" set="method" static="1">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
			<overloads>
				<from public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="arrayBuffer:?byteOffset:?length">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="buffer">
						<c path="js.lib.Uint8Array"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="object:?offset:?length">
						<a/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="object:?encoding:?length">
						<a/>
						<c path="String"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
			</overloads>
		</from>
		<isBuffer public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `obj` is a `Buffer`, `false` otherwise.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj</haxe_doc>
		</isBuffer>
		<isEncoding public="1" set="method" static="1">
			<f a="encoding">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `encoding` contains a supported character encoding, or `false` otherwise.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding</haxe_doc>
		</isEncoding>
		<poolSize public="1" static="1">
			<x path="Int"/>
			<haxe_doc>This is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.

		@see https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize</haxe_doc>
		</poolSize>
		<byteOffset public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>When setting `byteOffset` in `Buffer.from(ArrayBuffer, byteOffset, length)`
		or sometimes when allocating a buffer smaller than `Buffer.poolSize` the
		buffer doesn't start from a zero offset on the underlying `ArrayBuffer`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_byteoffset</haxe_doc>
		</byteOffset>
		<INSPECT_MAX_BYTES public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Default: `50`

		Returns the maximum number of bytes that will be returned when `buf.inspect()` is called.
		This can be overridden by user modules.
		See `util.inspect()` for more details on `buf.inspect()` behavior.

		This is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes</haxe_doc>
		</INSPECT_MAX_BYTES>
		<get_INSPECT_MAX_BYTES get="inline" set="null" line="664" static="1"><f a=""><x path="Int"/></f></get_INSPECT_MAX_BYTES>
		<set_INSPECT_MAX_BYTES get="inline" set="null" line="667" static="1"><f a="bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_INSPECT_MAX_BYTES>
		<kMaxLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>An alias for `buffer.constants.MAX_LENGTH`.

		This is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength</haxe_doc>
		</kMaxLength>
		<get_kMaxLength get="inline" set="null" line="680" static="1"><f a=""><x path="Int"/></f></get_kMaxLength>
		<transcode public="1" get="inline" set="null" line="690" static="1">
			<f a="source:fromEnc:toEnc">
				<c path="js.lib.Uint8Array"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Re-encodes the given `Buffer` or `Uint8Array` instance from one character encoding to another.
		Returns a new `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_transcode_source_fromenc_toenc</haxe_doc>
		</transcode>
		<constants public="1" set="null" static="1">
			<t path="js.node.buffer.BufferConstants"/>
			<haxe_doc>`buffer.constants` is a property on the `buffer` module returned by `require('buffer')`,
		not on the `Buffer` global or a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_constants</haxe_doc>
		</constants>
		<get_constants get="inline" set="null" line="702" static="1"><f a=""><t path="js.node.buffer.BufferConstants"/></f></get_constants>
		<hxFromBytes public="1" get="inline" set="null" line="718" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Create `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.
		Any modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.</haxe_doc>
		</hxFromBytes>
		<compare public="1" set="method">
			<f a="target:?targetStart:?targetEnd:?sourceStart:?sourceEnd">
				<c path="js.lib.Uint8Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `buf` with `target` and returns a number indicating whether `buf` comes before, after,
		or is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend</haxe_doc>
			<overloads><compare public="1" set="method">
	<f a="target">
		<c path="js.lib.Uint8Array"/>
		<x path="Int"/>
	</f>
	<haxe_doc>Compares `buf` with `target` and returns a number indicating whether `buf` comes before, after,
		or is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend</haxe_doc>
</compare></overloads>
		</compare>
		<copy public="1" set="method">
			<f a="target:?targetStart:?sourceStart:?sourceEnd">
				<c path="js.lib.Uint8Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend</haxe_doc>
			<overloads><copy public="1" set="method">
	<f a="target">
		<c path="js.lib.Uint8Array"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Copies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend</haxe_doc>
</copy></overloads>
		</copy>
		<entries public="1" set="method" override="1">
			<f a=""><t path="js.node.Iterator"><x path="js.node.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Creates and returns an iterator of `[index, byte]` pairs from the contents of `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_entries</haxe_doc>
		</entries>
		<equals public="1" set="method">
			<f a="otherBuffer">
				<c path="js.lib.Uint8Array"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes, `false` otherwise.

		@see https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer</haxe_doc>
		</equals>
		<fill public="1" set="method" override="1">
			<f a="value:?offset:?end:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Fills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:

		@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding</haxe_doc>
			<overloads>
				<fill public="1" set="method">
					<f a="value:?offset:?end">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Fills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:

		@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding</haxe_doc>
				</fill>
				<fill public="1" set="method">
					<f a="value:?offset:?end">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Fills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:

		@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding</haxe_doc>
				</fill>
			</overloads>
		</fill>
		<includes public="1" set="method" override="1">
			<f a="value:?byteOffset:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Equivalent to `buf.indexOf() !== -1`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding</haxe_doc>
			<overloads>
				<includes public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Equivalent to `buf.indexOf() !== -1`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding</haxe_doc>
				</includes>
				<includes public="1" set="method">
					<f a="value:?byteOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Equivalent to `buf.indexOf() !== -1`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding</haxe_doc>
				</includes>
			</overloads>
		</includes>
		<indexOf public="1" set="method" override="1">
			<f a="value:?byteOffset:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>If `value` is:

		- a string, `value` is interpreted according to the character encoding in `encoding`.
		- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().
		- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding</haxe_doc>
			<overloads>
				<indexOf public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>If `value` is:

		- a string, `value` is interpreted according to the character encoding in `encoding`.
		- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().
		- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding</haxe_doc>
				</indexOf>
				<indexOf public="1" set="method">
					<f a="value:?byteOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>If `value` is:

		- a string, `value` is interpreted according to the character encoding in `encoding`.
		- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().
		- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding</haxe_doc>
				</indexOf>
			</overloads>
		</indexOf>
		<keys public="1" set="method" override="1">
			<f a=""><t path="js.node.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Creates and returns an iterator of `buf` keys (indices).

		@see https://nodejs.org/api/buffer.html#buffer_buf_keys</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method" override="1">
			<f a="value:?byteOffset:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Identical to `buf.indexOf()`, except the last occurrence of `value` is found
		rather than the first occurrence.

		@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding</haxe_doc>
			<overloads>
				<lastIndexOf public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Identical to `buf.indexOf()`, except the last occurrence of `value` is found
		rather than the first occurrence.

		@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding</haxe_doc>
				</lastIndexOf>
				<lastIndexOf public="1" set="method">
					<f a="value:?byteOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Identical to `buf.indexOf()`, except the last occurrence of `value` is found
		rather than the first occurrence.

		@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding</haxe_doc>
				</lastIndexOf>
			</overloads>
		</lastIndexOf>
		<readDoubleBE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 64-bit double from `buf` at the specified `offset` with specified endian format
		(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset</haxe_doc>
		</readDoubleBE>
		<readDoubleLE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 64-bit double from `buf` at the specified `offset` with specified endian format
		(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset</haxe_doc>
		</readDoubleLE>
		<readFloatBE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 32-bit float from `buf` at the specified `offset` with specified endian format
		(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset</haxe_doc>
		</readFloatBE>
		<readFloatLE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 32-bit float from `buf` at the specified `offset` with specified endian format
		(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset</haxe_doc>
		</readFloatLE>
		<readInt8 public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 8-bit integer from `buf` at the specified `offset`.

		https://nodejs.org/api/buffer.html#buffer_buf_readint8_offset</haxe_doc>
		</readInt8>
		<readInt16BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format
		(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset</haxe_doc>
		</readInt16BE>
		<readInt16LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format
		(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset</haxe_doc>
		</readInt16LE>
		<readInt32BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 32-bit integer from buf at the specified offset with the specified endian format
		(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset</haxe_doc>
		</readInt32BE>
		<readInt32LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 32-bit integer from buf at the specified offset with the specified endian format
		(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset</haxe_doc>
		</readInt32LE>
		<readIntBE public="1" set="method">
			<f a="offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result
		as a two's complement signed value. Supports up to 48 bits of accuracy.

		@see https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength</haxe_doc>
		</readIntBE>
		<readIntLE public="1" set="method">
			<f a="offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result
		as a two's complement signed value. Supports up to 48 bits of accuracy.

		@see https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength</haxe_doc>
		</readIntLE>
		<readUInt8 public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 8-bit integer from `buf` at the specified `offset`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset</haxe_doc>
		</readUInt8>
		<readUInt16BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format
		`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset</haxe_doc>
		</readUInt16BE>
		<readUInt16LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format
		(`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset</haxe_doc>
		</readUInt16LE>
		<readUInt32BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format
		(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset</haxe_doc>
		</readUInt32BE>
		<readUInt32LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format
		(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset</haxe_doc>
		</readUInt32LE>
		<subarray public="1" set="method" override="1">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new `Buffer` that references the same memory as the original,
		but offset and cropped by the `start` and `end` indices.

		@see https://nodejs.org/api/buffer.html#buffer_buf_subarray_start_end</haxe_doc>
		</subarray>
		<slice public="1" set="method" override="1">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new `Buffer` that references the same memory as the original,
		but offset and cropped by the `start` and `end` indices.

		@see https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end</haxe_doc>
		</slice>
		<swap16 public="1" set="method">
			<f a=""><c path="js.node.buffer.Buffer"/></f>
			<haxe_doc>Interprets `buf` as an array of unsigned 16-bit integers and swaps the
		byte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`
		is not a multiple of 2.

		@see https://nodejs.org/api/buffer.html#buffer_buf_swap16</haxe_doc>
		</swap16>
		<swap32 public="1" set="method">
			<f a=""><c path="js.node.buffer.Buffer"/></f>
			<haxe_doc>Interprets `buf` as an array of unsigned 32-bit integers and swaps the
		byte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`
		is not a multiple of 4.

		@see https://nodejs.org/api/buffer.html#buffer_buf_swap32</haxe_doc>
		</swap32>
		<swap64 public="1" set="method">
			<f a=""><c path="js.node.buffer.Buffer"/></f>
			<haxe_doc>Interprets `buf` as an array of 64-bit numbers and swaps byte order in-place.
		Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.

		@see https://nodejs.org/api/buffer.html#buffer_buf_swap64</haxe_doc>
		</swap64>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of `buf`. `JSON.stringify()` implicitly calls
		this function when stringifying a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buf_tojson</haxe_doc>
		</toJSON>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Decodes `buf` to a string according to the specified character encoding in `encoding`.
		`start` and `end` may be passed to decode only a subset of `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end</haxe_doc>
			<overloads><toString public="1" set="method">
	<f a="?encoding:?start:?end">
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<haxe_doc>Decodes `buf` to a string according to the specified character encoding in `encoding`.
		`start` and `end` may be passed to decode only a subset of `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end</haxe_doc>
</toString></overloads>
		</toString>
		<values public="1" set="method" override="1">
			<f a=""><t path="js.node.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Creates and returns an iterator for `buf` values (bytes). This function is called automatically
		when a `Buffer` is used in a `for..of` statement.

		@see https://nodejs.org/api/buffer.html#buffer_buf_values</haxe_doc>
		</values>
		<write public="1" set="method">
			<f a="string:?offset:?length:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `string` to `buf` at `offset` according to the character encoding in `encoding`.
		The `length` parameter is the number of bytes to write.
		If `buf` did not contain enough space to fit the entire `string`, only part of string will be written.
		However, partially encoded characters will not be written.

		@see https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding</haxe_doc>
		</write>
		<writeDoubleBE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).
		`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset</haxe_doc>
		</writeDoubleBE>
		<writeDoubleLE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).
		`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset</haxe_doc>
		</writeDoubleLE>
		<writeFloatBE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).
		`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset</haxe_doc>
		</writeFloatBE>
		<writeFloatLE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).
		`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset</haxe_doc>
		</writeFloatLE>
		<writeInt8 public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset`. `value` should be a valid signed 8-bit integer.
		Behavior is undefined when `value` is anything other than a signed 8-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset</haxe_doc>
		</writeInt8>
		<writeInt16BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).
		`value` should be a valid signed 16-bit integer.
		Behavior is undefined when value is anything other than a signed 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset</haxe_doc>
		</writeInt16BE>
		<writeInt16LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).
		`value` should be a valid signed 16-bit integer.
		Behavior is undefined when value is anything other than a signed 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset</haxe_doc>
		</writeInt16LE>
		<writeInt32BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).
		`value` should be a valid signed 32-bit integer.
		Behavior is undefined when `value` is anything other than a signed 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset</haxe_doc>
		</writeInt32BE>
		<writeInt32LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).
		`value` should be a valid signed 32-bit integer.
		Behavior is undefined when `value` is anything other than a signed 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset</haxe_doc>
		</writeInt32LE>
		<writeIntBE public="1" set="method">
			<f a="value:offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `byteLength` bytes of `value` to `buf` at the specified `offset`.
		Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength</haxe_doc>
		</writeIntBE>
		<writeIntLE public="1" set="method">
			<f a="value:offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `byteLength` bytes of `value` to `buf` at the specified `offset`.
		Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength</haxe_doc>
		</writeIntLE>
		<writeUInt8 public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset`. `value` should be a valid unsigned 8-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 8-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset</haxe_doc>
		</writeUInt8>
		<writeUInt16BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).
		`value` should be a valid unsigned 16-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset</haxe_doc>
		</writeUInt16BE>
		<writeUInt16LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).
		`value` should be a valid unsigned 16-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset</haxe_doc>
		</writeUInt16LE>
		<writeUInt32BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).
		`value` should be a valid unsigned 32-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset</haxe_doc>
		</writeUInt32BE>
		<writeUInt32LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).
		`value` should be a valid unsigned 32-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset</haxe_doc>
		</writeUInt32LE>
		<hxToBytes public="1" get="inline" set="null" line="710">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Create `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.
		Any modifications done using the returned object will be reflected in the `this` buffer.</haxe_doc>
		</hxToBytes>
		<new public="1" set="method">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="arrayBuffer:?byteOffset:?length">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="buffer">
						<x path="haxe.io.UInt8Array"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="size">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.

	@see https://nodejs.org/api/buffer.html#buffer_class_buffer</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire">
				<e>"buffer"</e>
				<e>"Buffer"</e>
			</m>
		</meta>
	</class>
	<class path="js.node.buffer._Buffer.BufferModule" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx" private="1" module="js.node.buffer.Buffer" extern="1">
		<INSPECT_MAX_BYTES public="1" static="1"><x path="Int"/></INSPECT_MAX_BYTES>
		<kMaxLength public="1" set="null" static="1"><x path="Int"/></kMaxLength>
		<transcode public="1" set="method" static="1"><f a="source:fromEnc:toEnc">
	<c path="js.lib.Uint8Array"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.node.buffer.Buffer"/>
</f></transcode>
		<constants public="1" set="null" static="1"><t path="js.node.buffer.BufferConstants"/></constants>
		<meta><m n=":jsRequire"><e>"buffer"</e></m></meta>
	</class>
	<typedef path="js.node.buffer.BufferConstants" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx" module="js.node.buffer.Buffer"><a>
	<MAX_STRING_LENGTH set="null">
		<x path="Int"/>
		<haxe_doc>Represents the largest `length` that a `string` primitive can have, counted
		in UTF-16 code units.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_string_length</haxe_doc>
	</MAX_STRING_LENGTH>
	<MAX_LENGTH set="null">
		<x path="Int"/>
		<haxe_doc>On 32-bit architectures, this value is `(2^30)-1` (`~1GB`).
		On 64-bit architectures, this value is `(2^31)-1` (`~2GB`).

		@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length</haxe_doc>
	</MAX_LENGTH>
</a></typedef>
	<abstract path="js.node.events.EventEmitterEvent" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter">
		<this><x path="js.node.events.Event"><c path="js.node.events.EventEmitterEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.events.EventEmitterEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by all `EventEmitter` instances.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.events._EventEmitter.EventEmitterEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1">
	<NewListener public="1" get="inline" set="null" expr="cast &quot;newListener&quot;" line="43" static="1">
		<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "newListener"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `EventEmitter` instance will emit its own `'newListener'` event before
		a listener is added to its internal array of listeners.

		@see https://nodejs.org/api/events.html#events_event_newlistener</haxe_doc>
	</NewListener>
	<RemoveListener public="1" get="inline" set="null" expr="cast &quot;removeListener&quot;" line="54" static="1">
		<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "removeListener"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'removeListener'` event is emitted after the `listener` is removed.

		@see https://nodejs.org/api/events.html#events_event_removelistener</haxe_doc>
	</RemoveListener>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.events._EventEmitter.EventEmitterEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1">
		<NewListener public="1" get="inline" set="null" expr="cast &quot;newListener&quot;" line="43" static="1">
			<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "newListener"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `EventEmitter` instance will emit its own `'newListener'` event before
		a listener is added to its internal array of listeners.

		@see https://nodejs.org/api/events.html#events_event_newlistener</haxe_doc>
		</NewListener>
		<RemoveListener public="1" get="inline" set="null" expr="cast &quot;removeListener&quot;" line="54" static="1">
			<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "removeListener"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'removeListener'` event is emitted after the `listener` is removed.

		@see https://nodejs.org/api/events.html#events_event_removelistener</haxe_doc>
		</RemoveListener>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.events.Event" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter">
		<from>
			<icast><c path="js.lib.Symbol"/></icast>
			<icast><c path="String"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="js.lib.Symbol"/></icast>
			<icast><c path="String"/></icast>
		</to>
		<haxe_doc>Abstract type for events. Its type parameter is a signature
	of a listener for a concrete event.</haxe_doc>
		<impl><class path="js.node.events._EventEmitter.Event_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1"/></impl>
	</abstract>
	<class path="js.node.events._EventEmitter.Event_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1"/>
	<abstract path="js.node.fs.FSWatcherChangeType" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" module="js.node.fs.FSWatcher">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible types of changes for 'change' event.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._FSWatcher.FSWatcherChangeType_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
	<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="37" static="1">
		<x path="js.node.fs.FSWatcherChangeType"/>
		<meta>
			<m n=":value"><e>cast "change"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Change>
	<Rename public="1" get="inline" set="null" expr="cast &quot;rename&quot;" line="38" static="1">
		<x path="js.node.fs.FSWatcherChangeType"/>
		<meta>
			<m n=":value"><e>cast "rename"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Rename>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._FSWatcher.FSWatcherChangeType_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
		<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="37" static="1">
			<x path="js.node.fs.FSWatcherChangeType"/>
			<meta>
				<m n=":value"><e>cast "change"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Change>
		<Rename public="1" get="inline" set="null" expr="cast &quot;rename&quot;" line="38" static="1">
			<x path="js.node.fs.FSWatcherChangeType"/>
			<meta>
				<m n=":value"><e>cast "rename"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Rename>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.fs.FSWatcherEvent" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" module="js.node.fs.FSWatcher">
		<this><x path="js.node.events.Event"><c path="js.node.fs.FSWatcherEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.FSWatcherEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of the events emitted by `FSWatcher`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._FSWatcher.FSWatcherEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
	<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="52" static="1">
		<x path="js.node.fs.FSWatcherEvent"><f a=":">
	<x path="js.node.fs.FSWatcherChangeType"/>
	<t path="js.node.FsPath"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "change"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when something changes in a watched directory or file. See more details in `Fs.watch`.

		Listener arguments:
			event - The type of fs change
			filename - The filename that changed (if relevant/available)</haxe_doc>
	</Change>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="57" static="1">
		<x path="js.node.fs.FSWatcherEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when an error occurs.</haxe_doc>
	</Error>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._FSWatcher.FSWatcherEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
		<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="52" static="1">
			<x path="js.node.fs.FSWatcherEvent"><f a=":">
	<x path="js.node.fs.FSWatcherChangeType"/>
	<t path="js.node.FsPath"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "change"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when something changes in a watched directory or file. See more details in `Fs.watch`.

		Listener arguments:
			event - The type of fs change
			filename - The filename that changed (if relevant/available)</haxe_doc>
		</Change>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="57" static="1">
			<x path="js.node.fs.FSWatcherEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when an error occurs.</haxe_doc>
		</Error>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.fs.FSWatcher" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/FSWatcher.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.fs.FSWatcher"/></extends>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop watching for changes on the given `FSWatcher`.</haxe_doc>
		</close>
		<haxe_doc>Objects returned from `Fs.watch` are of this type.</haxe_doc>
	</class>
	<abstract path="js.node.fs.ReadStreamEvent" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/ReadStream.hx" module="js.node.fs.ReadStream">
		<this><x path="js.node.events.Event"><c path="js.node.fs.ReadStreamEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.ReadStreamEvent.T"/></x></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._ReadStream.ReadStreamEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/ReadStream.hx" private="1" module="js.node.fs.ReadStream" extern="1" final="1">
	<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
		<x path="js.node.fs.ReadStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the `ReadStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `ReadStream`.</haxe_doc>
	</Open>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._ReadStream.ReadStreamEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/ReadStream.hx" private="1" module="js.node.fs.ReadStream" extern="1" final="1">
		<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
			<x path="js.node.fs.ReadStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the `ReadStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `ReadStream`.</haxe_doc>
		</Open>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.stream.IReadable" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Readable.hx" module="js.node.stream.Readable" extern="1" interface="1">
		<destroy public="1" set="method"><f a="?error">
	<c path="js.lib.Error"/>
	<c path="js.node.stream.IReadable"/>
</f></destroy>
		<destroyed public="1" set="null"><x path="Bool"/></destroyed>
		<isPaused public="1" set="method"><f a=""><x path="Bool"/></f></isPaused>
		<pause public="1" set="method"><f a=""><c path="js.node.stream.IReadable"/></f></pause>
		<pipe public="1" params="T" set="method"><f a="destination:?options">
	<c path="pipe.T"/>
	<a><end>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</end></a>
	<c path="pipe.T"/>
</f></pipe>
		<read public="1" set="method"><f a="?size">
	<x path="Int"/>
	<x path="Null"><d/></x>
</f></read>
		<readable public="1" set="null"><x path="Bool"/></readable>
		<readableEncoding public="1" set="null"><x path="Null"><c path="String"/></x></readableEncoding>
		<readableEnded public="1" set="null"><x path="Bool"/></readableEnded>
		<readableHighWaterMark public="1" set="null"><x path="Int"/></readableHighWaterMark>
		<readableLength public="1" set="null"><x path="Int"/></readableLength>
		<readableObjectMode public="1" set="null"><x path="Bool"/></readableObjectMode>
		<resume public="1" set="method"><f a=""><c path="js.node.stream.IReadable"/></f></resume>
		<setEncoding public="1" set="method"><f a="encoding">
	<c path="String"/>
	<c path="js.node.stream.IReadable"/>
</f></setEncoding>
		<unpipe public="1" set="method"><f a="?destination">
	<c path="js.node.stream.IWritable"/>
	<c path="js.node.stream.IReadable"/>
</f></unpipe>
		<unshift public="1" set="method"><f a="chunk:?encoding">
	<x path="Null"><d/></x>
	<c path="String"/>
	<x path="Void"/>
</f></unshift>
		<wrap public="1" set="method"><f a="stream">
	<d/>
	<c path="js.node.stream.IReadable"/>
</f></wrap>
		<haxe_doc>`IReadable` interface is used as "any Readable".

	See `Readable` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.stream.Readable" params="TSelf" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Readable.hx" extern="1">
		<extends path="js.node.Stream"><c path="js.node.stream.Readable.TSelf"/></extends>
		<from public="1" params="T" set="method" static="1"><f a="iterable:?options">
	<t path="js.node.Iterator"><c path="from.T"/></t>
	<x path="Null"><t path="js.node.stream.ReadableNewOptions"/></x>
	<c path="js.node.stream.IReadable"/>
</f></from>
		<destroy public="1" set="method">
			<f a="?error">
				<c path="js.lib.Error"/>
				<c path="js.node.stream.Readable.TSelf"/>
			</f>
			<haxe_doc>Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.
		After this call, the readable stream will release any internal resources and subsequent calls to `push()` will be ignored.
		Implementors should not override this method, but instead implement `readable._destroy()`.

		@see https://nodejs.org/api/stream.html#stream_readable_destroy_error</haxe_doc>
		</destroy>
		<destroyed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `readable.destroy()` has been called.

		@see https://nodejs.org/api/stream.html#stream_readable_destroyed</haxe_doc>
		</destroyed>
		<isPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>The `readable.isPaused()` method returns the current operating state of the `Readable`.
		This is used primarily by the mechanism that underlies the `readable.pipe()` method.
		In most typical cases, there will be no reason to use this method directly.

		@see https://nodejs.org/api/stream.html#stream_readable_ispaused</haxe_doc>
		</isPaused>
		<pause public="1" set="method">
			<f a=""><c path="js.node.stream.Readable.TSelf"/></f>
			<haxe_doc>The `readable.pause()` method will cause a stream in flowing mode to stop emitting `'data'` events,
		switching out of flowing mode. Any data that becomes available will remain in the internal buffer.

		@see https://nodejs.org/api/stream.html#stream_readable_pause</haxe_doc>
		</pause>
		<pipe public="1" params="T" set="method">
			<f a="destination:?options">
				<c path="pipe.T"/>
				<a><end>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</end></a>
				<c path="pipe.T"/>
			</f>
			<haxe_doc>The `readable.pipe()` method attaches a `Writable` stream to the `readable`,
		causing it to switch automatically into flowing mode and push all of its data to the attached `Writable`.
		The flow of data will be automatically managed so that the destination `Writable` stream
		is not overwhelmed by a faster `Readable` stream.

		@see https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options</haxe_doc>
		</pipe>
		<read public="1" set="method">
			<f a="?size">
				<x path="Int"/>
				<x path="Null"><d/></x>
			</f>
			<haxe_doc>The `readable.read()` method pulls some data out of the internal buffer and returns it.
		If no data available to be read, `null` is returned. By default,
		the data will be returned as a `Buffer` object unless an encoding has been specified using
		the `readable.setEncoding()` method or the stream is operating in object mode.

		@see https://nodejs.org/api/stream.html#stream_readable_read_size</haxe_doc>
		</read>
		<readable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` if it is safe to call `readable.read()`.

		@see https://nodejs.org/api/stream.html#stream_readable_readable</haxe_doc>
		</readable>
		<readableEncoding public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>Getter for the property `encoding` of a given `Readable` stream.
		The `encoding` property can be set using the `readable.setEncoding()` method.

		@see https://nodejs.org/api/stream.html#stream_readable_readableencoding</haxe_doc>
		</readableEncoding>
		<readableEnded public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Becomes `true` when `'end'` event is emitted.

		@see https://nodejs.org/api/stream.html#stream_readable_readableended</haxe_doc>
		</readableEnded>
		<readableHighWaterMark public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the value of `highWaterMark` passed when constructing this `Readable`.

		@see https://nodejs.org/api/stream.html#stream_readable_readablehighwatermark</haxe_doc>
		</readableHighWaterMark>
		<readableLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>This property contains the number of bytes (or objects) in the queue ready to be read.
		The value provides introspection data regarding the status of the `highWaterMark`.

		@see https://nodejs.org/api/stream.html#stream_readable_readablelength</haxe_doc>
		</readableLength>
		<readableObjectMode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Getter for the property `objectMode` of a given `Readable` stream.

		@see https://nodejs.org/api/stream.html#stream_readable_readableobjectmode</haxe_doc>
		</readableObjectMode>
		<resume public="1" set="method">
			<f a=""><c path="js.node.stream.Readable.TSelf"/></f>
			<haxe_doc>The `readable.resume()` method causes an explicitly paused `Readable` stream to resume emitting `'data'` events,
		switching the stream into flowing mode.

		@see https://nodejs.org/api/stream.html#stream_readable_resume</haxe_doc>
		</resume>
		<setEncoding public="1" set="method">
			<f a="encoding">
				<c path="String"/>
				<c path="js.node.stream.Readable.TSelf"/>
			</f>
			<haxe_doc>The `readable.setEncoding()` method sets the character encoding for data read from the `Readable` stream.

		@see https://nodejs.org/api/stream.html#stream_readable_setencoding_encoding</haxe_doc>
		</setEncoding>
		<unpipe public="1" set="method">
			<f a="?destination">
				<c path="js.node.stream.IWritable"/>
				<c path="js.node.stream.Readable.TSelf"/>
			</f>
			<haxe_doc>The `readable.unpipe()` method detaches a `Writable` stream previously attached using the `stream.pipe()` method.

		@see https://nodejs.org/api/stream.html#stream_readable_unpipe_destination</haxe_doc>
		</unpipe>
		<unshift public="1" set="method">
			<f a="chunk:?encoding">
				<x path="Null"><d/></x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Passing `chunk` as `null` signals the end of the stream (EOF), after which no more data can be written.

		@see https://nodejs.org/api/stream.html#stream_readable_unshift_chunk_encoding</haxe_doc>
		</unshift>
		<wrap public="1" set="method">
			<f a="stream">
				<d/>
				<c path="js.node.stream.IReadable"/>
			</f>
			<haxe_doc>Prior to Node.js 0.10, streams did not implement the entire `stream` module API as it is currently defined.
		(See Compatibility for more information.)

		@see https://nodejs.org/api/stream.html#stream_readable_wrap_stream</haxe_doc>
		</wrap>
		<_read set="method">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This function **MUST NOT** be called by application code directly.
		It should be implemented by child classes, and called by the internal `Readable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_readable_read_size_1</haxe_doc>
		</_read>
		<_destroy set="method">
			<f a="err:callback">
				<x path="Null"><c path="js.lib.Error"/></x>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_destroy()` method is called by `readable.destroy()`.
		It can be overridden by child classes but it **must not** be called directly.

		@see https://nodejs.org/api/stream.html#stream_readable_destroy_err_callback</haxe_doc>
		</_destroy>
		<push set="method">
			<f a="chunk:?encoding">
				<x path="Null"><d/></x>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `readable.push()` method is intended be called only by `Readable` implementers,
		and only from within the `readable._read()` method.

		@see https://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding</haxe_doc>
		</push>
		<isTTY public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Terminal read streams (i.e. process.stdin) have this property set to true.
		It is false for any other read streams.

		@see https://nodejs.org/api/tty.html#tty_readstream_istty</haxe_doc>
		</isTTY>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.node.stream.ReadableNewOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@see https://nodejs.org/api/stream.html#stream_new_stream_readable_options</haxe_doc>
		</new>
		<haxe_doc>@see https://nodejs.org/api/stream.html#stream_class_stream_readable</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Readable"</e>
</m></meta>
	</class>
	<class path="js.node.fs.ReadStream" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/ReadStream.hx" extern="1">
		<extends path="js.node.stream.Readable"><c path="js.node.fs.ReadStream"/></extends>
		<path public="1">
			<t path="js.node.FsPath"/>
			<haxe_doc>The path to the file the stream is reading from as specified in the first argument to `Fs.createReadStream`.

		If path is passed as a string, then readStream.path will be a string.
		If path is passed as a Buffer, then readStream.path will be a Buffer.</haxe_doc>
		</path>
		<haxe_doc>Readable file stream.</haxe_doc>
	</class>
	<class path="js.node.fs.Stats" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/Stats.hx" extern="1">
		<dev public="1"><x path="Int"/></dev>
		<ino public="1"><x path="Float"/></ino>
		<mode public="1"><x path="Int"/></mode>
		<nlink public="1"><x path="Int"/></nlink>
		<uid public="1"><x path="Int"/></uid>
		<gid public="1"><x path="Int"/></gid>
		<rdev public="1"><x path="Int"/></rdev>
		<size public="1"><x path="Float"/></size>
		<blksize public="1"><x path="Null"><x path="Int"/></x></blksize>
		<blocks public="1"><x path="Null"><x path="Float"/></x></blocks>
		<atime public="1">
			<c path="Date"/>
			<haxe_doc>"Access Time" - Time when file data last accessed.

		Changed by the mknod(2), utimes(2), and read(2) system calls.</haxe_doc>
		</atime>
		<mtime public="1">
			<c path="Date"/>
			<haxe_doc>"Modified Time" - Time when file data last modified.

		Changed by the mknod(2), utimes(2), and write(2) system calls.</haxe_doc>
		</mtime>
		<ctime public="1">
			<c path="Date"/>
			<haxe_doc>"Change Time" - Time when file status was last changed (inode data modification).

		Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.</haxe_doc>
		</ctime>
		<birthtime public="1">
			<c path="Date"/>
			<haxe_doc>"Birth Time" - Time of file creation. Set once when the file is created.

		On filesystems where birthtime is not available, this field may instead hold either the ctime or 1970-01-01T00:00Z (ie, unix epoch timestamp 0).
		Note that this value may be greater than `atime` or `mtime` in this case. On Darwin and other FreeBSD variants,
		also set if the `atime` is explicitly set to an earlier value than the current birthtime using the utimes(2) system call.</haxe_doc>
		</birthtime>
		<isFile public="1" set="method"><f a=""><x path="Bool"/></f></isFile>
		<isDirectory public="1" set="method"><f a=""><x path="Bool"/></f></isDirectory>
		<isBlockDevice public="1" set="method"><f a=""><x path="Bool"/></f></isBlockDevice>
		<isCharacterDevice public="1" set="method"><f a=""><x path="Bool"/></f></isCharacterDevice>
		<isSymbolicLink public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Only valid with `Fs.lstat`.</haxe_doc>
		</isSymbolicLink>
		<isFIFO public="1" set="method"><f a=""><x path="Bool"/></f></isFIFO>
		<isSocket public="1" set="method"><f a=""><x path="Bool"/></f></isSocket>
		<haxe_doc>Objects returned from `Fs.stat`, `Fs.lstat` and `Fs.fstat` and their synchronous counterparts are of this type.</haxe_doc>
	</class>
	<abstract path="js.node.fs.WriteStreamEvent" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/WriteStream.hx" module="js.node.fs.WriteStream">
		<this><x path="js.node.events.Event"><c path="js.node.fs.WriteStreamEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.WriteStreamEvent.T"/></x></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._WriteStream.WriteStreamEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/WriteStream.hx" private="1" module="js.node.fs.WriteStream" extern="1" final="1">
	<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
		<x path="js.node.fs.WriteStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the `WriteStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `WriteStream`.</haxe_doc>
	</Open>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._WriteStream.WriteStreamEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/WriteStream.hx" private="1" module="js.node.fs.WriteStream" extern="1" final="1">
		<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
			<x path="js.node.fs.WriteStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the `WriteStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `WriteStream`.</haxe_doc>
		</Open>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.stream.IWritable" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" module="js.node.stream.Writable" extern="1" interface="1">
		<cork public="1" set="method"><f a=""><x path="Void"/></f></cork>
		<destroy public="1" set="method"><f a="?error">
	<c path="js.lib.Error"/>
	<c path="js.node.stream.IWritable"/>
</f></destroy>
		<destroyed public="1" set="null"><x path="Bool"/></destroyed>
		<end public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Void"/>
			</f>
			<overloads><end public="1" set="method"><f a="?callback">
	<x path="haxe.extern.EitherType">
		<f a=""><x path="Void"/></f>
		<f a="">
			<x path="Null"><c path="js.lib.Error"/></x>
			<x path="Void"/>
		</f>
	</x>
	<x path="Void"/>
</f></end></overloads>
		</end>
		<setDefaultEncoding public="1" set="method"><f a="encoding">
	<c path="String"/>
	<c path="js.node.stream.IWritable"/>
</f></setDefaultEncoding>
		<uncork public="1" set="method"><f a=""><x path="Void"/></f></uncork>
		<writable public="1" set="null"><x path="Bool"/></writable>
		<writableEnded public="1" set="null"><x path="Bool"/></writableEnded>
		<writableFinished public="1" set="null"><x path="Bool"/></writableFinished>
		<writablehighWaterMark public="1" set="null"><x path="Int"/></writablehighWaterMark>
		<writableLength public="1" set="null"><x path="Int"/></writableLength>
		<writableObjectMode public="1" set="null"><x path="Bool"/></writableObjectMode>
		<write public="1" set="method"><f a="chunk:?encoding:?callback">
	<d/>
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<f a=""><x path="Void"/></f>
		<f a="">
			<x path="Null"><c path="js.lib.Error"/></x>
			<x path="Void"/>
		</f>
	</x>
	<x path="Bool"/>
</f></write>
		<isTTY public="1" set="null"><x path="Bool"/></isTTY>
		<haxe_doc>Writable interface used for type parameter constraints.
	See `Writable` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.stream.Writable" params="TSelf" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" extern="1">
		<extends path="js.node.Stream"><c path="js.node.stream.Writable.TSelf"/></extends>
		<cork public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `writable.cork()` method forces all written data to be buffered in memory.
		The buffered data will be flushed when either the `stream.uncork()` or `stream.end()` methods are called.

		@see https://nodejs.org/api/stream.html#stream_writable_cork</haxe_doc>
		</cork>
		<destroy public="1" set="method">
			<f a="?error">
				<c path="js.lib.Error"/>
				<c path="js.node.stream.Writable.TSelf"/>
			</f>
			<haxe_doc>Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.
		After this call, the writable stream has ended and subsequent calls to `write()` or `end()` will result in an `ERR_STREAM_DESTROYED` error.
		This is a destructive and immediate way to destroy a stream. Previous calls to `write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.
		Use `end()` instead of destroy if data should flush before close, or wait for the `'drain'` event before destroying the stream.
		Implementors should not override this method, but instead implement `writable._destroy()`.

		@see https://nodejs.org/api/stream.html#stream_writable_destroy_error</haxe_doc>
		</destroy>
		<destroyed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `writable.destroy()` has been called.

		@see https://nodejs.org/api/stream.html#stream_writable_destroyed</haxe_doc>
		</destroyed>
		<end public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Calling the `writable.end()` method signals that no more data will be written to the Writable.
		The optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.
		If provided, the optional `callback` function is attached as a listener for the 'finish' event.

		@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback</haxe_doc>
			<overloads><end public="1" set="method">
	<f a="?callback">
		<x path="haxe.extern.EitherType">
			<f a=""><x path="Void"/></f>
			<f a="">
				<x path="Null"><c path="js.lib.Error"/></x>
				<x path="Void"/>
			</f>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Calling the `writable.end()` method signals that no more data will be written to the Writable.
		The optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.
		If provided, the optional `callback` function is attached as a listener for the 'finish' event.

		@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback</haxe_doc>
</end></overloads>
		</end>
		<setDefaultEncoding public="1" set="method">
			<f a="encoding">
				<c path="String"/>
				<c path="js.node.stream.Writable.TSelf"/>
			</f>
			<haxe_doc>The `writable.setDefaultEncoding()` method sets the default `encoding` for a Writable stream.

		@see https://nodejs.org/api/stream.html#stream_writable_setdefaultencoding_encoding</haxe_doc>
		</setDefaultEncoding>
		<uncork public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `writable.uncork()` method flushes all data buffered since `stream.cork()` was called.

		@see https://nodejs.org/api/stream.html#stream_writable_uncork</haxe_doc>
		</uncork>
		<writable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` if it is safe to call `writable.write()`.

		@see https://nodejs.org/api/stream.html#stream_writable_writable</haxe_doc>
		</writable>
		<writableEnded public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `writable.end()` has been called. This property
		does not indicate whether the data has been flushed, for this use
		`writable.writableFinished` instead.

		@see https://nodejs.org/api/stream.html#stream_writable_writableended</haxe_doc>
		</writableEnded>
		<writableFinished public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is set to `true` immediately before the 'finish' event is emitted.

		@see https://nodejs.org/api/stream.html#stream_writable_writablefinished</haxe_doc>
		</writableFinished>
		<writablehighWaterMark public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Return the value of `highWaterMark` passed when constructing this `Writable`.

		@see https://nodejs.org/api/stream.html#stream_writable_writablehighwatermark</haxe_doc>
		</writablehighWaterMark>
		<writableLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>This property contains the number of bytes (or objects) in the queue ready to be written.
		The value provides introspection data regarding the status of the `highWaterMark`.

		@see https://nodejs.org/api/stream.html#stream_writable_writablelength</haxe_doc>
		</writableLength>
		<writableObjectMode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Getter for the property `objectMode` of a given `Writable` stream.

		@see https://nodejs.org/api/stream.html#stream_writable_writableobjectmode</haxe_doc>
		</writableObjectMode>
		<write public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `writable.write()` method writes some data to the stream, and calls the supplied `callback` once the data has been fully handled.
		If an error occurs, the `callback` may or may not be called with the error as its first argument.
		To reliably detect write errors, add a listener for the `'error'` event.

		@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback</haxe_doc>
		</write>
		<_write set="method">
			<f a="chunk:encoding:callback">
				<d/>
				<c path="String"/>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>All `Writable` stream implementations must provide a `writable._write()` method to send data to the underlying resource.

		@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1</haxe_doc>
		</_write>
		<_writev set="method">
			<f a="chunks:callback">
				<c path="Array"><t path="js.node.stream.Chunk"/></c>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>This function **MUST NOT** be called by application code directly.
		It should be implemented by child classes, and called by the internal `Writable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback</haxe_doc>
		</_writev>
		<_destroy set="method">
			<f a="err:callback">
				<x path="Null"><c path="js.lib.Error"/></x>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_destroy()` method is called by `writable.destroy()`.
		It can be overridden by child classes but it **must not** be called directly.

		@see https://nodejs.org/api/stream.html#stream_writable_destroy_err_callback</haxe_doc>
		</_destroy>
		<_final set="method">
			<f a="callback">
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_final()` method **must not** be called directly.
		t may be implemented by child classes, and if so, will be called by the internal `Writable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_writable_final_callback</haxe_doc>
		</_final>
		<isTTY public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Terminal write streams (i.e. process.stdout) have this property set to true.
		It is false for any other write streams.

		@see https://nodejs.org/api/tty.html#tty_writestream_istty</haxe_doc>
		</isTTY>
		<new public="1" set="method">
			<f a="?options">
				<x path="js.node.stream.WritableNewOptionsAdapter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options</haxe_doc>
		</new>
		<haxe_doc>The Writable stream interface is an abstraction for a destination that you are writing data to.

	Examples of writable streams include:

		- http requests, on the client
		- http responses, on the server
		- fs write streams
		- zlib streams
		- crypto streams
		- tcp sockets
		- child process stdin
		- process.stdout, process.stderr</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Writable"</e>
</m></meta>
	</class>
	<class path="js.node.fs.WriteStream" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/fs/WriteStream.hx" extern="1">
		<extends path="js.node.stream.Writable"><c path="js.node.fs.WriteStream"/></extends>
		<path public="1">
			<t path="js.node.FsPath"/>
			<haxe_doc>The path to the file the stream is writing to as specified in the first argument to `Fs.createWriteStream`.
		If path is passed as a string, then writeStream.path will be a string.
		If path is passed as a Buffer, then writeStream.path will be a Buffer.</haxe_doc>
		</path>
		<bytesWritten public="1">
			<x path="Int"/>
			<haxe_doc>The number of bytes written so far.
		Does not include data that is still queued for writing.</haxe_doc>
		</bytesWritten>
		<haxe_doc>Writable file stream.</haxe_doc>
	</class>
	<abstract path="js.node.stream.ReadableEvent" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Readable.hx" module="js.node.stream.Readable">
		<this><x path="js.node.events.Event"><c path="js.node.stream.ReadableEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.ReadableEvent.T"/></x></icast></to>
		<haxe_doc>Readable streams are an abstraction for a source from which data is consumed.

	@see https://nodejs.org/api/stream.html#stream_readable_streams</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Readable.ReadableEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Readable.hx" private="1" module="js.node.stream.Readable" extern="1" final="1">
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="48" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying
		resources (a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close_1</haxe_doc>
	</Close>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="60" static="1">
		<x path="js.node.stream.ReadableEvent"><f a="">
	<d/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'data'` event is emitted whenever the stream is relinquishing ownership of
		a chunk of data to a consumer. This may occur whenever the stream is switched
		in flowing mode by calling `readable.pipe()`, `readable.resume()`, or by
		attaching a listener callback to the `'data'` event. The `'data'` event will
		also be emitted whenever the `readable.read()` method is called and a chunk of
		data is available to be returned.

		@see https://nodejs.org/api/stream.html#stream_event_data</haxe_doc>
	</Data>
	<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="68" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'end'` event is emitted when there is no more data to be consumed from
		the stream.

		@see https://nodejs.org/api/stream.html#stream_event_end</haxe_doc>
	</End>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="78" static="1">
		<x path="js.node.stream.ReadableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'error'` event may be emitted by a `Readable` implementation at any time.
		Typically, this may occur if the underlying stream is unable to generate data
		due to an underlying internal failure, or when a stream implementation attempts
		to push an invalid chunk of data.

		@see https://nodejs.org/api/stream.html#stream_event_error_1</haxe_doc>
	</Error>
	<Pause public="1" get="inline" set="null" expr="cast &quot;pause&quot;" line="86" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "pause"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'pause'` event is emitted when `stream.pause()` is called
		and `readableFlowing` is not `false`.

		@see https://nodejs.org/api/stream.html#stream_event_pause</haxe_doc>
	</Pause>
	<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="95" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "readable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'readable'` event is emitted when there is data available to be read from
		the stream. In some cases, attaching a listener for the `'readable'` event will
		cause some amount of data to be read into an internal buffer.

		@see https://nodejs.org/api/stream.html#stream_event_readable</haxe_doc>
	</Readable>
	<Resume public="1" get="inline" set="null" expr="cast &quot;resume&quot;" line="103" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "resume"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'resume'` event is emitted when `stream.resume()` is
		called and `readableFlowing` is not `true`.

		@see https://nodejs.org/api/stream.html#stream_event_resume</haxe_doc>
	</Resume>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Readable.ReadableEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Readable.hx" private="1" module="js.node.stream.Readable" extern="1" final="1">
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="48" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying
		resources (a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close_1</haxe_doc>
		</Close>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="60" static="1">
			<x path="js.node.stream.ReadableEvent"><f a="">
	<d/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'data'` event is emitted whenever the stream is relinquishing ownership of
		a chunk of data to a consumer. This may occur whenever the stream is switched
		in flowing mode by calling `readable.pipe()`, `readable.resume()`, or by
		attaching a listener callback to the `'data'` event. The `'data'` event will
		also be emitted whenever the `readable.read()` method is called and a chunk of
		data is available to be returned.

		@see https://nodejs.org/api/stream.html#stream_event_data</haxe_doc>
		</Data>
		<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="68" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'end'` event is emitted when there is no more data to be consumed from
		the stream.

		@see https://nodejs.org/api/stream.html#stream_event_end</haxe_doc>
		</End>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="78" static="1">
			<x path="js.node.stream.ReadableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'error'` event may be emitted by a `Readable` implementation at any time.
		Typically, this may occur if the underlying stream is unable to generate data
		due to an underlying internal failure, or when a stream implementation attempts
		to push an invalid chunk of data.

		@see https://nodejs.org/api/stream.html#stream_event_error_1</haxe_doc>
		</Error>
		<Pause public="1" get="inline" set="null" expr="cast &quot;pause&quot;" line="86" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "pause"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'pause'` event is emitted when `stream.pause()` is called
		and `readableFlowing` is not `false`.

		@see https://nodejs.org/api/stream.html#stream_event_pause</haxe_doc>
		</Pause>
		<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="95" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "readable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'readable'` event is emitted when there is data available to be read from
		the stream. In some cases, attaching a listener for the `'readable'` event will
		cause some amount of data to be read into an internal buffer.

		@see https://nodejs.org/api/stream.html#stream_event_readable</haxe_doc>
		</Readable>
		<Resume public="1" get="inline" set="null" expr="cast &quot;resume&quot;" line="103" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "resume"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'resume'` event is emitted when `stream.resume()` is
		called and `readableFlowing` is not `true`.

		@see https://nodejs.org/api/stream.html#stream_event_resume</haxe_doc>
		</Resume>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.ReadableNewOptions" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Readable.hx" module="js.node.stream.Readable">
		<a>
			<read>
				<x path="Null"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Implementation for the `stream._read()` method.</haxe_doc>
			</read>
			<objectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether this stream should behave as a stream of objects.
		Meaning that `stream.read(n)` returns a single value instead of a `Buffer` of size `n`.
		Default: `false`.</haxe_doc>
			</objectMode>
			<highWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource.
		Default: `16384` (16kb), or `16` for `objectMode` streams.</haxe_doc>
			</highWaterMark>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, then buffers will be decoded to strings using the specified encoding.
		Default: `null`.</haxe_doc>
			</encoding>
			<emitClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the stream should emit `'close'` after it has been destroyed.
		Default: `true`.</haxe_doc>
			</emitClose>
			<destroy>
				<x path="Null"><f a="err:callback">
	<x path="Null"><c path="js.lib.Error"/></x>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Implementation for the `stream._destroy()` method.</haxe_doc>
			</destroy>
			<autoDestroy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether this stream should automatically call `.destroy()` on itself after ending.
		Default: `false`.</haxe_doc>
			</autoDestroy>
		</a>
		<haxe_doc>Options for `Readable` private constructor.
	For stream implementors only, see node.js API documentation</haxe_doc>
	</typedef>
	<abstract path="js.node.stream.WritableEvent" params="T" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<this><x path="js.node.events.Event"><c path="js.node.stream.WritableEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.WritableEvent.T"/></x></icast></to>
		<haxe_doc>Writable streams are an abstraction for a destination to which data is written.

	@see https://nodejs.org/api/stream.html#stream_writable_streams</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Writable.WritableEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" extern="1" final="1">
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="51" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying resources
		(a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close</haxe_doc>
	</Close>
	<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="59" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "drain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted
		when it is appropriate to resume writing data to the stream.

		@see https://nodejs.org/api/stream.html#stream_event_drain</haxe_doc>
	</Drain>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="67" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'error'` event is emitted if an `error` occurred while writing or piping data.
		The listener callback is passed a single Error argument when called.

		@see https://nodejs.org/api/stream.html#stream_event_error</haxe_doc>
	</Error>
	<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="75" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "finish"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'finish'` event is emitted after the stream.end() method has been called,
		and all data has been flushed to the underlying system.

		@see https://nodejs.org/api/stream.html#stream_event_finish</haxe_doc>
	</Finish>
	<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="83" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "pipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,
		adding this writable to its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_pipe</haxe_doc>
	</Pipe>
	<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="91" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "unpipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,
		removing this Writable from its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_unpipe</haxe_doc>
	</Unpipe>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Writable.WritableEvent_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" extern="1" final="1">
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="51" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying resources
		(a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close</haxe_doc>
		</Close>
		<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="59" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "drain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted
		when it is appropriate to resume writing data to the stream.

		@see https://nodejs.org/api/stream.html#stream_event_drain</haxe_doc>
		</Drain>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="67" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'error'` event is emitted if an `error` occurred while writing or piping data.
		The listener callback is passed a single Error argument when called.

		@see https://nodejs.org/api/stream.html#stream_event_error</haxe_doc>
		</Error>
		<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="75" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "finish"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'finish'` event is emitted after the stream.end() method has been called,
		and all data has been flushed to the underlying system.

		@see https://nodejs.org/api/stream.html#stream_event_finish</haxe_doc>
		</Finish>
		<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="83" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "pipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,
		adding this writable to its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_pipe</haxe_doc>
		</Pipe>
		<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="91" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "unpipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,
		removing this Writable from its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_unpipe</haxe_doc>
		</Unpipe>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.WritableNewOptions" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<a>
			<writev>
				<x path="Null"><f a="chunks:callback">
	<c path="Array"><t path="js.node.stream.Chunk"/></c>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`writev` <Function> Implementation for the stream._writev() method.]]></haxe_doc>
			</writev>
			<write>
				<x path="Null"><f a="chunk:encoding:callback">
	<d/>
	<c path="String"/>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`write` <Function> Implementation for the stream._write() method.]]></haxe_doc>
			</write>
			<objectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`objectMode` <boolean> Whether or not the stream.write(anyObj) is a valid operation. When set,
		it becomes possible to write JavaScript values other than string, `Buffer` or `Uint8Array` if supported by the stream implementation.
		Default: `false`.]]></haxe_doc>
			</objectMode>
			<highWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`highWaterMark` <number> Buffer level when stream.write() starts returning `false`. Default: `16384` (16kb), or 16 for `objectMode` streams.]]></haxe_doc>
			</highWaterMark>
			<final_>
				<x path="Null"><f a="error">
	<x path="Null"><c path="js.lib.Error"/></x>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`final` <Function> Implementation for the stream._final() method.]]></haxe_doc>
			</final_>
			<emitClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`emitClose` <boolean> Whether or not the stream should emit `'close'` after it has been destroyed.
		Default: `true`.]]></haxe_doc>
			</emitClose>
			<destroy>
				<x path="Null"><f a="error:callback">
	<x path="Null"><c path="js.lib.Error"/></x>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`destroy` <Function> Implementation for the stream._destroy() method.]]></haxe_doc>
			</destroy>
			<defaultEncoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`defaultEncoding` <string> The default encoding that is used when no encoding is specified as an argument to stream.write().
		Default: `'utf8'`.]]></haxe_doc>
			</defaultEncoding>
			<decodeStrings>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`decodeStrings` <boolean> Whether to encode `string`s passed to stream.write() to `Buffer`s (with the encoding specified in the stream.write() call) before passing them to stream._write().
		Other types of data are not converted (i.e. `Buffer`s are not decoded into `string`s). Setting to false will prevent strings from being converted.
		Default: `true`.]]></haxe_doc>
			</decodeStrings>
			<autoDestroy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`autoDestroy` <boolean> Whether this stream should automatically call .destroy() on itself after ending. Default: false.]]></haxe_doc>
			</autoDestroy>
		</a>
		<haxe_doc>@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options</haxe_doc>
	</typedef>
	<abstract path="js.node.stream.WritableNewOptionsAdapter" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<from><icast field="from"><t path="js.node.stream.WritableNewOptions"/></icast></from>
		<this><t path="js.node.stream.WritableNewOptions"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.node.stream._Writable.WritableNewOptionsAdapter_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" final="1"><from public="1" set="method" line="345" static="1">
	<f a="options">
		<t path="js.node.stream.WritableNewOptions"/>
		<x path="js.node.stream.WritableNewOptionsAdapter"/>
	</f>
	<meta><m n=":from"/></meta>
</from></class></impl>
	</abstract>
	<class path="js.node.stream._Writable.WritableNewOptionsAdapter_Impl_" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" final="1"><from public="1" set="method" line="345" static="1">
	<f a="options">
		<t path="js.node.stream.WritableNewOptions"/>
		<x path="js.node.stream.WritableNewOptionsAdapter"/>
	</f>
	<meta><m n=":from"/></meta>
</from></class>
	<typedef path="js.node.stream.Chunk" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx" module="js.node.stream.Writable"><a>
	<encoding><c path="String"/></encoding>
	<chunk><d/></chunk>
</a></typedef>
	<class path="jsfps.fpsmeter.FPSMeter" params="" file="/home/runner/haxe/haxe_libraries/jsfps/1.0.1/haxelib/jsfps/fpsmeter/FPSMeter.hx" extern="1">
		<tick public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Marks the end of each frame. This is the method that measures everything.</haxe_doc>
		</tick>
		<tickStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Marks the beginning of each frame. .tick() than uses this time to measure the rendering duration of each frame.
	 * This method is optional, and if omitted, .tick() will measure the duration between frames instead.</haxe_doc>
		</tickStart>
		<showFps public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Changes the meter to display FPS.</haxe_doc>
		</showFps>
		<showDuration public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Changes the meter to display duration between frames, or frame rendering duration when using .tickStart() method.</haxe_doc>
		</showDuration>
		<toggle public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Toggles between showFps amd showDuration.</haxe_doc>
		</toggle>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pauses the meter rendering. FPSMeter still continues to measure everything, just the meter element rendering is paused.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resumes the paused rendering.</haxe_doc>
		</resume>
		<hide public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pauses the rendering, and hides the FPSMeter element.</haxe_doc>
		</hide>
		<show public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the FPSMeter element, and resumes the rendering.</haxe_doc>
		</show>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates an option value, and when needed, repositions or reloads the meter element.</haxe_doc>
		</set>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pauses rendering, unbinds events, removes the element from DOM, and stops listening to ticks.</haxe_doc>
		</destroy>
		<new public="1" set="method"><f a="?anchor:?options">
	<c path="js.html.Element"/>
	<x path="Null"><t path="jsfps.fpsmeter.Options"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"FPSMeter"</e></m></meta>
	</class>
	<typedef path="jsfps.fpsmeter.Options" params="" file="/home/runner/haxe/haxe_libraries/jsfps/1.0.1/haxelib/jsfps/fpsmeter/FPSMeter.hx" module="jsfps.fpsmeter.FPSMeter"><a>
	<zIndex>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</zIndex>
	<top>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</top>
	<toggleOn>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</toggleOn>
	<threshold>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</threshold>
	<theme>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</theme>
	<smoothing>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</smoothing>
	<show>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</show>
	<right>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</right>
	<position>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</position>
	<maxFps>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</maxFps>
	<margin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</margin>
	<left>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</left>
	<interval>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</interval>
	<history>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</history>
	<heat>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</heat>
	<graph>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</graph>
	<decimals>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</decimals>
	<bottom>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</bottom>
</a></typedef>
	<class path="macros.BuildMacroTools" params="" file="src/macros/BuildMacroTools.hx"><buildFileList public="1" set="method" static="1"><f a="path">
	<d/>
	<d/>
</f></buildFileList></class>
	<class path="macros.FnMacros" params="" file="src/macros/FnMacros.hx">
		<pipe public="1" set="method" static="1"><f a="exprs">
	<d/>
	<d/>
</f></pipe>
		<destruct public="1" set="method" static="1"><f a="entity:fieldNames">
	<d/>
	<d/>
	<d/>
</f></destruct>
	</class>
	<class path="macros.MacroTools" params="" file="src/macros/MacroTools.hx">
		<generateBuildDate public="1" set="method" static="1"><f a=""><c path="String"/></f></generateBuildDate>
		<getSourceOutput public="1" set="method" static="1"><f a=""><c path="String"/></f></getSourceOutput>
		<includeJsLib public="1" set="method" static="1">
			<f a="path">
				<d/>
				<d/>
			</f>
			<haxe_doc>* Path is based on your current root directory.
  * Includes a JS file in your final product.
  * @param path
  * @return Expr</haxe_doc>
		</includeJsLib>
		<defineIfNull public="1" set="method" static="1"><f a="value:def">
	<d/>
	<d/>
	<d/>
</f></defineIfNull>
		<haxe_doc>* Tool Level Macros for LunaTea</haxe_doc>
	</class>
	<enum path="nodes.MoveType" params="" file="src/nodes/LTSpriteBust.hx" module="nodes.LTSpriteBust">
		<Linear/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="pixi.core.sprites.Sprite" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/sprites/Sprite.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<from public="1" set="method" static="1">
			<f a="source">
				<d/>
				<c path="pixi.core.sprites.Sprite"/>
			</f>
			<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @return {Sprite} The newly created sprite</haxe_doc>
			<overloads>
				<from public="1" set="method">
					<f a="source">
						<x path="Int"/>
						<c path="pixi.core.sprites.Sprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @return {Sprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="String"/>
						<c path="pixi.core.sprites.Sprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @return {Sprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="pixi.core.textures.BaseTexture"/>
						<c path="pixi.core.sprites.Sprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @return {Sprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="js.html.CanvasElement"/>
						<c path="pixi.core.sprites.Sprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @return {Sprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="js.html.VideoElement"/>
						<c path="pixi.core.sprites.Sprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @return {Sprite} The newly created sprite</haxe_doc>
				</from>
			</overloads>
		</from>
		<fromFrame public="1" set="method" static="1">
			<f a="frameId">
				<c path="String"/>
				<c path="pixi.core.sprites.Sprite"/>
			</f>
			<haxe_doc>* Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId
	 * The frame ids are created when a Texture packer file has been loaded
	 *
	 * @static
	 * @param frameId {String} The frame Id of the texture in the cache
	 * @return {Sprite} A new Sprite using a texture from the texture cache matching the frameId</haxe_doc>
		</fromFrame>
		<fromImage public="1" set="method" static="1">
			<f a="imageId:?crossorigin:?scaleMode">
				<c path="String"/>
				<x path="Bool"/>
				<e path="pixi.core.ScaleModes"/>
				<c path="pixi.core.sprites.Sprite"/>
			</f>
			<haxe_doc>* Helper function that creates a sprite that will contain a texture based on an image url
	 * If the image is not in the texture cache it will be loaded
	 *
	 * @static
	 * @param imageId {String} The image url of the texture
	 * @param [crossorigin=(auto)] {Bool} Should use anonymouse CORS? Defaults to true if the URL is not a data-URI.
	 * @param [scaleMode=scaleModes.DEFAULT] {ScaleModes} See {@link scaleModes} for possible values
	 * @return {Sprite} A new Sprite using a texture from the texture cache matching the image id</haxe_doc>
		</fromImage>
		<anchor public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The anchor sets the origin point of the texture.
	 * The default is 0,0 this means the texture's origin is the top left
	 * Setting than anchor to 0.5,0.5 means the textures origin is centered
	 * Setting the anchor to 1,1 would mean the textures origin points will be the bottom right corner
	 *
	 * @member {ObservablePoint}</haxe_doc>
		</anchor>
		<texture public="1">
			<c path="pixi.core.textures.Texture"/>
			<haxe_doc>* The texture that the sprite is using
	 *
	 * @member {Texture}</haxe_doc>
		</texture>
		<tint public="1">
			<x path="Int"/>
			<haxe_doc>* The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.
	 *
	 * @member {Int}
	 * @default 0xFFFFFF</haxe_doc>
		</tint>
		<blendMode public="1">
			<e path="pixi.core.BlendModes"/>
			<haxe_doc>* The blend mode to be applied to the sprite. Set to CONST.blendModes.NORMAL to remove any blend mode.
	 *
	 * @member {Int}
	 * @default CONST.blendModes.NORMAL;</haxe_doc>
		</blendMode>
		<shader public="1">
			<x path="haxe.extern.EitherType">
				<c path="pixi.core.Shader"/>
				<c path="pixi.core.renderers.webgl.filters.Filter"/>
			</x>
			<haxe_doc>* The shader that will be used to render the sprite. Set to null to remove a current shader.
	 *
	 * @member {Shader|Filter}</haxe_doc>
		</shader>
		<pluginName public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Plugin that is responsible for rendering this element.
	 * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.
	 *
	 * @member {String}
	 * @default 'sprite']]></haxe_doc>
		</pluginName>
		<containsPoint public="1" set="method">
			<f a="point">
				<c path="pixi.core.math.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Tests if a point is inside this sprite
	 *
	 * @param {Point} point - the point to test
	 * @return {Bool} the result of the test</haxe_doc>
		</containsPoint>
		<new public="1" set="method">
			<f a="?texture">
				<c path="pixi.core.textures.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The Sprite object is the base for all textured objects that are rendered to the screen
	 *
	 * A sprite can be created directly from an image like this:
	 *
	 * ```haxe
	 * 	var sprite = new Sprite.fromImage('assets/image.png');
	 * ```
	 *
	 * @class Sprite
	 * @extends Container
	 * @namespace PIXI
	 * @param texture {Texture} The texture for this sprite</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Sprite"</e></m></meta>
	</class>
	<class path="rm.core.Sprite" params="" file="src/rm/core/Sprite.hx" extern="1">
		<extends path="pixi.core.sprites.Sprite"/>
		<_counter public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* Number of the created objects.
  *
  * @static
  * @property _counter
  * @type Number</haxe_doc>
		</_counter>
		<bitmap public="1">
			<c path="rm.core.Bitmap"/>
			<haxe_doc>* The image for the sprite.
  *
  * @property bitmap
  * @type Bitmap</haxe_doc>
		</bitmap>
		<opacity public="1">
			<x path="Float"/>
			<haxe_doc>* The width of the sprite without the scale.
  *
  * @property width
  * @type Number</haxe_doc>
		</opacity>
		<visible_ public="1" override="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"visible"</e></m></meta>
			<haxe_doc>* The visibility of the sprite.
  *
  * @property visible
  * @type Boolean</haxe_doc>
		</visible_>
		<x_ public="1" override="1">
			<x path="Float"/>
			<meta><m n=":native"><e>"x"</e></m></meta>
			<haxe_doc>* The x coordinate of the sprite.
  *
  * @property x
  * @type Number</haxe_doc>
		</x_>
		<y_ public="1" override="1">
			<x path="Float"/>
			<meta><m n=":native"><e>"y"</e></m></meta>
			<haxe_doc>* The y coordinate of the sprite.
  *
  * @property y
  * @type Number</haxe_doc>
		</y_>
		<point public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* The origin point of the sprite. (0,0) to (1,1).
  *
  * @property anchor
  * @type Point</haxe_doc>
		</point>
		<scale_ public="1" override="1">
			<c path="pixi.core.math.Point"/>
			<meta><m n=":native"><e>"scale"</e></m></meta>
			<haxe_doc>* The scale factor of the sprite.
  *
  * @property scale
  * @type Point</haxe_doc>
		</scale_>
		<rotation_ public="1" override="1">
			<x path="Float"/>
			<meta><m n=":native"><e>"rotation"</e></m></meta>
			<haxe_doc>* The rotation of the sprite in radians.
  *
  * @property rotation
  * @type Number</haxe_doc>
		</rotation_>
		<blendMode_ public="1" override="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"blendMode"</e></m></meta>
			<haxe_doc>* The blend mode to be applied to the sprite.
  *
  * @property blendMode
  * @type Number</haxe_doc>
		</blendMode_>
		<filters_ public="1" override="1">
			<c path="Array"><c path="pixi.core.renderers.webgl.filters.Filter"/></c>
			<meta><m n=":native"><e>"filters"</e></m></meta>
			<haxe_doc><![CDATA[* Sets the filters for the sprite.
  *
  * @property filters
  * @type Array<PIXI.Filter>]]></haxe_doc>
		</filters_>
		<spriteId public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[* [read-only] The array of children of the sprite.
  *
  * @property children
  * @type Array<PIXI.DisplayObject>]]></haxe_doc>
		</spriteId>
		<opaque public="1"><x path="Bool"/></opaque>
		<voidFilter public="1"><c path="pixi.core.renderers.webgl.filters.Filter"/></voidFilter>
		<initialize public="1" set="method"><f a="?bitmap">
	<c path="rm.core.Bitmap"/>
	<x path="Void"/>
</f></initialize>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite for each frame.
  *
  * @method update</haxe_doc>
		</update>
		<updateTransform public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method updateTransform
  * @private</haxe_doc>
		</updateTransform>
		<move public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the x and y at once.
  *
  * @method move
  * @param {Number} x The x coordinate of the sprite
  * @param {Number} y The y coordinate of the sprite</haxe_doc>
		</move>
		<setFrame public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the rectagle of the bitmap that the sprite displays.
  *
  * @method setFrame
  * @param {Number} x The x coordinate of the frame
  * @param {Number} y The y coordinate of the frame
  * @param {Number} width The width of the frame
  * @param {Number} height The height of the frame</haxe_doc>
		</setFrame>
		<getBlendColor public="1" set="method">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>* Gets the blend color for the sprite.
  *
  * @method getBlendColor
  * @return {Array} The blend color [r, g, b, a]</haxe_doc>
		</getBlendColor>
		<setBlendColor public="1" set="method">
			<f a="color">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the blend color for the sprite.
  *
  * @method setBlendColor
  * @param {Array} color The blend color [r, g, b, a]</haxe_doc>
		</setBlendColor>
		<getColorTone public="1" set="method">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>* Gets the color tone for the sprite.
  *
  * @method getColorTone
  * @return {Array} The color tone [r, g, b, gray]</haxe_doc>
		</getColorTone>
		<setColorTone public="1" set="method">
			<f a="tone">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the color tone for the sprite.
  *
  * @method setColorTone
  * @param {Array} tone The color tone [r, g, b, gray]</haxe_doc>
		</setColorTone>
		<addChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container.
  *
  * @method addChild
  * @param {PIXI.DisplayObject} child The child to add
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" override="1">
			<f a="child:index">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container at a specified index.
  *
  * @method addChildAt
  * @param {PIXI.DisplayObject} child The child to add
  * @param {Number} index The index to place the child in
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChildAt>
		<removeChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the container.
  *
  * @method removeChild
  * @param {PIXI.DisplayObject} child The child to remove
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the specified index position.
  *
  * @method removeChildAt
  * @param {Number} index The index to get the child from
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChildAt>
		<_bitmap><c path="rm.core.Bitmap"/></_bitmap>
		<_frame><c path="rm.core.Rectangle"/></_frame>
		<_realFrame><c path="rm.core.Rectangle"/></_realFrame>
		<_offset><c path="pixi.core.math.Point"/></_offset>
		<_blendColor><c path="Array"><x path="Float"/></c></_blendColor>
		<_colorTone><c path="Array"><x path="Float"/></c></_colorTone>
		<_canvas><c path="js.html.CanvasElement"/></_canvas>
		<_context><c path="js.html.CanvasRenderingContext2D"/></_context>
		<_tintTexture><c path="pixi.core.textures.BaseTexture"/></_tintTexture>
		<_isPicture>
			<x path="Bool"/>
			<haxe_doc>* use heavy renderer that will reduce border artifacts and apply advanced blendModes
  * @type {boolean}
  * @private</haxe_doc>
		</_isPicture>
		<_onBitmapLoad set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _onBitmapLoad
  * @private</haxe_doc>
		</_onBitmapLoad>
		<_refresh set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refresh
  * @private</haxe_doc>
		</_refresh>
		<_isInBitmapRect set="method">
			<f a="x:y:w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* @method _isInBitmapRect
  * @param {Float} x
  * @param {Float} y
  * @param {Float} w
  * @param {Float} h
  * @return {Boolean}
  * @private</haxe_doc>
		</_isInBitmapRect>
		<_needsTint set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* @method _needsTint
  * @return {Boolean}
  * @private</haxe_doc>
		</_needsTint>
		<_createTinter set="method">
			<f a="w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _createTinter
  * @param {Number} w
  * @param {Number} h
  * @private</haxe_doc>
		</_createTinter>
		<_executeTint set="method">
			<f a="x:y:w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _executeTint
  * @param {Number} x
  * @param {Number} y
  * @param {Number} w
  * @param {Number} h
  * @private</haxe_doc>
		</_executeTint>
		<_renderCanvas_PIXI set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderCanvas
  * @param {PIXI.CanvasRenderer} renderer
  * @private</haxe_doc>
		</_renderCanvas_PIXI>
		<_renderWebGL_PIXI set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderWebGL
  * @param {PIXI.WebGLRenderer} renderer
  * @private</haxe_doc>
		</_renderWebGL_PIXI>
		<_renderCanvas set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderCanvas
  * @param {PIXI.CanvasRenderer} renderer
  * @private</haxe_doc>
		</_renderCanvas>
		<_renderWebGL set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderWebGL
  * @param {PIXI.WebGLRenderer} renderer
  * @private</haxe_doc>
		</_renderWebGL>
		<_speedUpCustomBlendModes set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* checks if we need to speed up custom blendmodes
  * @param renderer
  * @private</haxe_doc>
		</_speedUpCustomBlendModes>
		<new public="1" set="method">
			<f a="?bitmap">
				<c path="rm.core.Bitmap"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The basic object that is rendered to the game screen.
  *
  * @class Sprite
  * @constructor
  * @param {Bitmap} bitmap The image for the sprite</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Sprite"</e></m></meta>
	</class>
	<class path="rm.sprites.Sprite_Base" params="" file="src/rm/sprites/Sprite_Base.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_animationSprites>
			<c path="Array"><c path="rm.sprites.Sprite_Animation"/></c>
			<haxe_doc><![CDATA[* The animation sprites assigned to the
  * sprite object.
  * @protected
  * @type {Array<Sprite_Animation>}
  * @memberof Sprite_Base]]></haxe_doc>
		</_animationSprites>
		<_effectTarget>
			<c path="rm.sprites.Sprite_Base"/>
			<haxe_doc>* The target that will have the animations applied
  * to it.
  * @protected
  * @type {Sprite_Base}
  * @memberof Sprite_Base</haxe_doc>
		</_effectTarget>
		<_hiding>
			<x path="Bool"/>
			<haxe_doc>* Determines sprite's visibility</haxe_doc>
		</_hiding>
		<initialize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the sprite.
  *
  * @memberof Sprite_Base</haxe_doc>
		</initialize>
		<hide public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the sprite.</haxe_doc>
		</hide>
		<show public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the sprite.</haxe_doc>
		</show>
		<updateVisibility public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updadtes the visibility of the sprite based
  * on the _hiding property.
  * @memberof Sprite_Base</haxe_doc>
		</updateVisibility>
		<updateAnimationSprites public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the animation sprites, cloning them;
  * if the sprite is playing, pushes the sprites into
  * animation sprites, otherwise the sprite is removed.
  * @memberof Sprite_Base</haxe_doc>
		</updateAnimationSprites>
		<startAnimation public="1" set="method">
			<f a="animation:mirror:delay">
				<t path="rm.types.Animation"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts a new animation on the current
  * sprite by assigning a new Sprite_Animation object to the
  * sprite's parent.
  * @param {RPG.Animation} animation
  * @param {boolean} mirror
  * @param {number} delay
  * @memberof Sprite_Base</haxe_doc>
		</startAnimation>
		<isAnimationPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if an animation is currently playing.
  * @returns {boolean}
  * @memberof Sprite_Base</haxe_doc>
		</isAnimationPlaying>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Base"</e></m>
		</meta>
	</class>
	<class path="nodes.LTSpriteBust" params="" file="src/nodes/LTSpriteBust.hx">
		<extends path="rm.sprites.Sprite_Base"/>
		<_shadowOpacity><x path="Float"/></_shadowOpacity>
		<_shadowX><x path="Float"/></_shadowX>
		<_shadowY><x path="Float"/></_shadowY>
		<_fadeDuration><x path="Int"/></_fadeDuration>
		<_scaleDuration><x path="Int"/></_scaleDuration>
		<_defaultMoveType><e path="nodes.MoveType"/></_defaultMoveType>
		<_moveWait><x path="Int"/></_moveWait>
		<initialize public="1" set="method" line="32" override="1"><f a=""><x path="Void"/></f></initialize>
		<moveTo public="1" set="method" line="42"><f a="x:?y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveTo>
		<moveBy public="1" set="method" line="50"><f a="x:?y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveBy>
		<fadeTo public="1" set="method" line="57">
			<f a="opacity:?duration" v=":30">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ duration : 30 }</e></m></meta>
		</fadeTo>
		<fadeBy public="1" set="method" line="62">
			<f a="opacity:?duration" v=":30">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ duration : 30 }</e></m></meta>
		</fadeBy>
		<scaleTo public="1" set="method" line="67">
			<f a="x:?y:?duration" v="::30">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ duration : 30 }</e></m></meta>
		</scaleTo>
		<update public="1" set="method" line="73" override="1"><f a=""><x path="Void"/></f></update>
		<updateFade public="1" set="method" line="85"><f a=""><x path="Void"/></f></updateFade>
		<updateScaling public="1" set="method" line="88"><f a=""><x path="Void"/></f></updateScaling>
		<updateMovement public="1" set="method" line="91"><f a=""><x path="Void"/></f></updateMovement>
		<new public="1" set="method" line="23"><f a="x:y:?bitmap">
	<x path="Int"/>
	<x path="Int"/>
	<c path="rm.core.Bitmap"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="nodes.LTSpriteIconOsc" params="" file="src/nodes/LTSpriteIconOsc.hx">
		<extends path="rm.sprites.Sprite_Base"/>
		<update public="1" set="method" line="23" override="1"><f a=""><x path="Void"/></f></update>
		<oscillateSize public="1" set="method" line="28"><f a=""><x path="Void"/></f></oscillateSize>
		<new public="1" set="method" line="12"><f a="x:y:?bitmap">
	<x path="Int"/>
	<x path="Int"/>
	<c path="rm.core.Bitmap"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Utility Sprite Class for creating sprites of oscillating size.</haxe_doc>
		<meta><m n=":native"><e>"LTSpriteIconOsc"</e></m></meta>
	</class>
	<class path="rm.core._Window" params="" file="src/rm/core/_Window.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<origin public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* The origin point of the window for scrolling.
  *
  * @property origin
  * @type Point</haxe_doc>
		</origin>
		<active public="1">
			<x path="Bool"/>
			<haxe_doc>* The active state for the window.
  *
  * @property active
  * @type Boolean</haxe_doc>
		</active>
		<downArrowVisible public="1">
			<x path="Bool"/>
			<haxe_doc>* The visibility of the down scroll arrow.
  *
  * @property downArrowVisible
  * @type Boolean</haxe_doc>
		</downArrowVisible>
		<upArrowVisible public="1">
			<x path="Bool"/>
			<haxe_doc>* The visibility of the up scroll arrow.
  *
  * @property upArrowVisible
  * @type Boolean</haxe_doc>
		</upArrowVisible>
		<pause public="1">
			<x path="Bool"/>
			<haxe_doc>* The visibility of the pause sign.
  *
  * @property pause
  * @type Boolean</haxe_doc>
		</pause>
		<windowskin public="1">
			<c path="rm.core.Bitmap"/>
			<haxe_doc>* The image used as a window skin.
  *
  * @property windowskin
  * @type Bitmap</haxe_doc>
		</windowskin>
		<contents public="1">
			<c path="rm.core.Bitmap"/>
			<haxe_doc>* The bitmap used for the window contents.
  *
  * @property contents
  * @type Bitmap</haxe_doc>
		</contents>
		<padding public="1">
			<x path="Float"/>
			<haxe_doc>* The width of the window in pixels.
  *
  * @property width
  * @type Number</haxe_doc>
		</padding>
		<margin public="1">
			<x path="Float"/>
			<haxe_doc>* The size of the margin for the window background.
  *
  * @property margin
  * @type Number</haxe_doc>
		</margin>
		<opacity public="1">
			<x path="Float"/>
			<haxe_doc>* The opacity of the window without contents (0 to 255).
  *
  * @property opacity
  * @type Number</haxe_doc>
		</opacity>
		<backOpacity public="1">
			<x path="Float"/>
			<haxe_doc>* The opacity of the window background (0 to 255).
  *
  * @property backOpacity
  * @type Number</haxe_doc>
		</backOpacity>
		<contentsOpacity public="1">
			<x path="Float"/>
			<haxe_doc>* The opacity of the window contents (0 to 255).
  *
  * @property contentsOpacity
  * @type Number</haxe_doc>
		</contentsOpacity>
		<openness public="1">
			<x path="Float"/>
			<haxe_doc>* The openness of the window (0 to 255).
  *
  * @property openness
  * @type Number</haxe_doc>
		</openness>
		<innerWidth public="1">
			<x path="Float"/>
			<haxe_doc>* The width of the content area in pixels.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<x path="Float"/>
			<haxe_doc>* The height of the content area in pixels.</haxe_doc>
		</innerHeight>
		<innerRect public="1">
			<c path="rm.core.Rectangle"/>
			<haxe_doc>* The rectangle of the content area</haxe_doc>
		</innerRect>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the window for each frame.
  *
  * @method update</haxe_doc>
		</update>
		<move public="1" set="method">
			<f a="?x:?y:?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the x, y, width, and height all at once.
  *
  * @method move
  * @param {Number} x The x coordinate of the window
  * @param {Number} y The y coordinate of the window
  * @param {Number} width The width of the window
  * @param {Number} height The height of the window</haxe_doc>
		</move>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the window is completely open (openness == 255).
  *
  * @method isOpen
  * @return {Boolean}</haxe_doc>
		</isOpen>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the window is completely closed (openness == 0).
  *
  * @method isClosed
  * @return {Boolean}</haxe_doc>
		</isClosed>
		<setCursorRect public="1" set="method">
			<f a="?x:?y:?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the position of the command cursor.
  *
  * @method setCursorRect
  * @param {Number} x The x coordinate of the cursor
  * @param {Number} y The y coordinate of the cursor
  * @param {Number} width The width of the cursor
  * @param {Number} height The height of the cursor</haxe_doc>
		</setCursorRect>
		<setTone public="1" set="method">
			<f a="r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the color of the background.
  *
  * @method setTone
  * @param {Number} r The red value in the range (-255, 255)
  * @param {Number} g The green value in the range (-255, 255)
  * @param {Number} b The blue value in the range (-255, 255)</haxe_doc>
		</setTone>
		<addChildToBack public="1" set="method">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child between the background and contents.
  *
  * @method addChildToBack
  * @param {PIXI.DisplayObject} child The child to add
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChildToBack>
		<addChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container.
  *
  * @method addChild
  * @param {PIXI.DisplayObject} child The child to add
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" override="1">
			<f a="child:index">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container at a specified index.
  *
  * @method addChildAt
  * @param {PIXI.DisplayObject} child The child to add
  * @param {Number} index The index to place the child in
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChildAt>
		<removeChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the container.
  *
  * @method removeChild
  * @param {PIXI.DisplayObject} child The child to remove
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the specified index position.
  *
  * @method removeChildAt
  * @param {Number} index The index to get the child from
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChildAt>
		<moveCursorBy public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Move the cursor position by the given amount
  * @param x
  * @param y</haxe_doc>
		</moveCursorBy>
		<moveInnerChildrenBy public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the inner children by the given amount.
  * @param x
  * @param y</haxe_doc>
		</moveInnerChildrenBy>
		<addInnerChild public="1" set="method">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the client area.
  * @param child
  * @return DisplayObject</haxe_doc>
		</addInnerChild>
		<drawShape public="1" set="method">
			<f a="graphics">
				<c path="pixi.core.graphics.Graphics"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the window shape into PIXI.Graphics object. Used by WindowLayer.
  * @param graphics</haxe_doc>
		</drawShape>
		<destroy public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the window</haxe_doc>
		</destroy>
		<updateTransform public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method updateTransform
  * @private</haxe_doc>
		</updateTransform>
		<_isWindow><x path="Bool"/></_isWindow>
		<_windowskin><c path="rm.core.Bitmap"/></_windowskin>
		<_width><x path="Float"/></_width>
		<_height><x path="Float"/></_height>
		<_cursorRect><c path="rm.core.Rectangle"/></_cursorRect>
		<_openness><x path="Float"/></_openness>
		<_animationCount><x path="Int"/></_animationCount>
		<_padding><x path="Float"/></_padding>
		<_margin><x path="Float"/></_margin>
		<_colorTone><c path="Array"><x path="Float"/></c></_colorTone>
		<_contentsBackSprite><c path="rm.core.Sprite"/></_contentsBackSprite>
		<_cursorSprite><c path="rm.core.Sprite"/></_cursorSprite>
		<_contentsSprite><c path="rm.core.Sprite"/></_contentsSprite>
		<_downArrowSprite><c path="rm.core.Sprite"/></_downArrowSprite>
		<_upArrowSprite><c path="rm.core.Sprite"/></_upArrowSprite>
		<_pauseSignSprite><c path="rm.core.Sprite"/></_pauseSignSprite>
		<_createAllParts set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _createAllParts
  * @private</haxe_doc>
		</_createAllParts>
		<_createContainer set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the container for the window.</haxe_doc>
		</_createContainer>
		<_createBackSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the back sprite for the window.</haxe_doc>
		</_createBackSprite>
		<_createFrameSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a frame sprite(standard sprite) and adds
  * it to the container.</haxe_doc>
		</_createFrameSprite>
		<_createClientArea set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the client area for the window(window contents).</haxe_doc>
		</_createClientArea>
		<_createContentsBackSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the contents back sprite in the client area.</haxe_doc>
		</_createContentsBackSprite>
		<_createCursorSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the cursor sprites and
  * adds them to the client area.</haxe_doc>
		</_createCursorSprite>
		<_createContentsSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the contents sprite and adds it
  * to the client area.</haxe_doc>
		</_createContentsSprite>
		<_createArrowSprites set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Create the arrow sprites for the window.
  * These are the up and down arrows.</haxe_doc>
		</_createArrowSprites>
		<_createPauseSignSprites set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the pause sign sprites.</haxe_doc>
		</_createPauseSignSprites>
		<_onWindowskinLoad set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _onWindowskinLoad
  * @private</haxe_doc>
		</_onWindowskinLoad>
		<_refreshAllParts set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshAllParts
  * @private</haxe_doc>
		</_refreshAllParts>
		<_refreshBack set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshBack
  * @private</haxe_doc>
		</_refreshBack>
		<_refreshFrame set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshFrame
  * @private</haxe_doc>
		</_refreshFrame>
		<_refreshCursor set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshCursor
  * @private</haxe_doc>
		</_refreshCursor>
		<_refreshContents set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshContents
  * @private</haxe_doc>
		</_refreshContents>
		<_refreshArrows set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshArrows
  * @private</haxe_doc>
		</_refreshArrows>
		<_refreshPauseSign set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refreshPauseSign
  * @private</haxe_doc>
		</_refreshPauseSign>
		<_updateCursor set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _updateCursor
  * @private</haxe_doc>
		</_updateCursor>
		<_updateContents set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _updateContents
  * @private</haxe_doc>
		</_updateContents>
		<_updateArrows set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _updateArrows
  * @private</haxe_doc>
		</_updateArrows>
		<_updatePauseSign set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _updatePauseSign
  * @private</haxe_doc>
		</_updatePauseSign>
		<_updateClientArea set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*
  * Updates the client area.</haxe_doc>
		</_updateClientArea>
		<_updateContentsBack set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the contents back.</haxe_doc>
		</_updateContentsBack>
		<_makeCursorAlpha set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Makes the cursor alpha levels.</haxe_doc>
		</_makeCursorAlpha>
		<_updateFilterArea set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the filter area of the client area.</haxe_doc>
		</_updateFilterArea>
		<_setRectPartsGeometry set="method">
			<f a="sprite:srect:drect:m">
				<c path="rm.core.Sprite"/>
				<c path="rm.core.Rectangle"/>
				<c path="rm.core.Rectangle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the geometry for the rectangles.
  * @param sprite
  * @param srect
  * @param drect
  * @param m</haxe_doc>
		</_setRectPartsGeometry>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The visibility of the sprite.
  *
  * @property visible
  * @type Boolean</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="rm.windows.Window_Base" params="" file="src/rm/windows/Window_Base.hx" extern="1">
		<extends path="rm.core._Window"/>
		<_opening>
			<x path="Bool"/>
			<haxe_doc>* The opening property; determines if
  * the window is opening.
  * @private var
  * @type {Bool}
  * @memberof Window_Base</haxe_doc>
		</_opening>
		<_closing>
			<x path="Bool"/>
			<haxe_doc>* The closing property; determines if
  * the window is closing.
  * @private var
  * @type {Bool}
  * @memberof Window_Base</haxe_doc>
		</_closing>
		<initialize public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<lineHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the standard line height of the current window;
  * default is 36.
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</lineHeight>
		<standardFontFace public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the standard font face of the
  * game based on what language the game is in.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</standardFontFace>
		<standardFontSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the standard font size of the text
  * in window; default is 28.
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</standardFontSize>
		<standardPadding public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the standard padding of the window;
  * default is 18.
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</standardPadding>
		<textPadding public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the text padding of the window;
  * default is 6.
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</textPadding>
		<standardBackOpacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the standard back opacity of the window; this is the
  * opacity of the area behind the window's text content.
  * Default is 192.
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</standardBackOpacity>
		<loadWindowSkin public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the window skin from the img/system directory.
  *
  * @memberof Window_Base</haxe_doc>
		</loadWindowSkin>
		<updatePadding public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the window padding based on the
  * standardPadding method.
  * @memberof Window_Base</haxe_doc>
		</updatePadding>
		<updateBackOpacity public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the back opacity of the window
  * based on the standardBackOpacity method.
  * @memberof Window_Base</haxe_doc>
		</updateBackOpacity>
		<contentsWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the inner content width of the window.
  *
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</contentsWidth>
		<contentsHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the inner content height of the window.
  *
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</contentsHeight>
		<fittingHeight public="1" set="method">
			<f a="numLines">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the fitting height given a number of lines based on
  * the line height plus standard padding of the window.
  * Default formula: numLines * lineHeight + standardPadding * 2
  *
  * @param {number} numLines
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</fittingHeight>
		<updateTone public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the tone of the window based on the
  * game system window tone defined in the database.
  * @memberof Window_Base</haxe_doc>
		</updateTone>
		<createContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the contents of the window; this is the area
  * of the window which text is drawn to.
  * @memberof Window_Base</haxe_doc>
		</createContents>
		<resetFontSettings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the font settings of the window back to the
  * default.
  * @memberof Window_Base</haxe_doc>
		</resetFontSettings>
		<resetTextColor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the text color of the window back to the
  * default.
  * @memberof Window_Base</haxe_doc>
		</resetTextColor>
		<update public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The update method of the window; this is
  * run every frame to do logic processing for the window.
  * @memberof Window_Base</haxe_doc>
		</update>
		<updateOpen public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the openness of the window when the
  * _opening property is set to true.
  * Openness is increased.
  * @memberof Window_Base</haxe_doc>
		</updateOpen>
		<updateClose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the openness of the window when the
  * _closing property is set to true.
  * Openness is decreased.
  * @memberof Window_Base</haxe_doc>
		</updateClose>
		<open public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Opens the window.
  *
  * @memberof Window_Base</haxe_doc>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Closes the window.
  *
  * @memberof Window_Base</haxe_doc>
		</close>
		<isOpening public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the window is currently opening.
  *
  * @returns {boolean}
  * @memberof Window_Base</haxe_doc>
		</isOpening>
		<isClosing public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the window is currently closing.
  *
  * @returns {boolean}
  * @memberof Window_Base</haxe_doc>
		</isClosing>
		<show public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the window, making it visible.
  *
  * @memberof Window_Base</haxe_doc>
		</show>
		<hide public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the window, making it invisible;
  * the window is not closed when hidden.
  *
  * @memberof Window_Base</haxe_doc>
		</hide>
		<activate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Activates the window, allowing it to be processed
  * and to update.
  * @memberof Window_Base</haxe_doc>
		</activate>
		<deactivate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Deactives the window, preventing further processing.
  *
  * @memberof Window_Base</haxe_doc>
		</deactivate>
		<textColor public="1" set="method">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a text color given a numbered index
  * as a css color String; this index maps
  * directly to the img/system/window.png colors
  * by default.
  * @param {number} n
  * @returns {*}
  * @memberof Window_Base</haxe_doc>
		</textColor>
		<normalColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the normal color as a css
  * color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</normalColor>
		<systemColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the system color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</systemColor>
		<crisisColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the crisis color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</crisisColor>
		<deathColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the death color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</deathColor>
		<gaugeBackColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the gauage back color as
  * a css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</gaugeBackColor>
		<hpGaugeColor1 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the hp gauge color 1
  * as a css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</hpGaugeColor1>
		<hpGaugeColor2 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the hp gauge color 2
  * as a css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</hpGaugeColor2>
		<mpGaugeColor1 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the mp gauge color 1
  * as a css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</mpGaugeColor1>
		<mpGaugeColor2 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the mp gauge color 2
  * as a css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</mpGaugeColor2>
		<mpCostColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the mp cost color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</mpCostColor>
		<powerUpColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the power up color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</powerUpColor>
		<powerDownColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the power down color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</powerDownColor>
		<tpGaugeColor1 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the tp gauge color 1 as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</tpGaugeColor1>
		<tpGaugeColor2 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns tp gauge color 2 as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</tpGaugeColor2>
		<tpCostColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the tp cost color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</tpCostColor>
		<pendingColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the pending color as a
  * css color String.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</pendingColor>
		<translucentOpacity public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the translucentOpacity for the window;
  * The default is 160.
  *
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</translucentOpacity>
		<changeTextColor public="1" set="method">
			<f a="color">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the text color property given a css color String.
  *
  * @param {String} color
  * @memberof Window_Base</haxe_doc>
		</changeTextColor>
		<changePaintOpacity public="1" set="method">
			<f a="enabled">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the paintOpacity (the opacity of the text drawn to the window);
  * if true the opacity is set to 255, otherwise the opacity is set to 160.
  * @param {boolean} enabled
  * @memberof Window_Base</haxe_doc>
		</changePaintOpacity>
		<drawText public="1" set="method">
			<f a="text:x:y:maxWidth:align">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="Int"/>
				</x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Given text or a number, draws the content to the window's contents
  * layer at the specified x and y coordinate within the max width.
  * The text content can also be aligned with the align property.
  * The possible alignments are: "left", "center", "right".
  * @param {(String | number)} text
  * @param {number} x
  * @param {number} y
  * @param {number} maxWidth
  * @param {String} align
  * @memberof Window_Base</haxe_doc>
		</drawText>
		<textWidth public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Calculates the width of a text String and
  * returns a number.
  * @param {String} text
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</textWidth>
		<drawTextEx public="1" set="method">
			<f a="text:x:y:width">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Draws text with text codes included; this will draw
  * icons, increase text height, and more.
  * @param text
  * @param x
  * @param y
  * @param width
  * @returns Int
  * @memberof Window_Base</haxe_doc>
		</drawTextEx>
		<textSizeEx public="1" set="method">
			<f a="text">
				<c path="String"/>
				<a>
					<width><x path="Int"/></width>
					<height><x path="Int"/></height>
				</a>
			</f>
			<haxe_doc>* Returns the text Size of drawTextEx.
  * @param text
  * @returns {width:Int, height:Int}</haxe_doc>
		</textSizeEx>
		<processAllText public="1" set="method">
			<f a="textState">
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes all the text in the window, then
  * flushes the text state.
  * @param textState</haxe_doc>
		</processAllText>
		<flushTextState public="1" set="method">
			<f a="textState">
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Flushes the text state.
  * @param textState</haxe_doc>
		</flushTextState>
		<createTextBuffer public="1" set="method">
			<f a="rtl">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Create a text buffer and determines whether
  * to use right to left embedding (U+202B).
  * @param rtl
  * @return String</haxe_doc>
		</createTextBuffer>
		<processControlCharacter public="1" set="method"><f a="extState:character">
	<t path="rm.types.TextState"/>
	<c path="String"/>
	<x path="Void"/>
</f></processControlCharacter>
		<convertEscapeCharacters public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Converts the escape characters and returns the text content
  * after processing the characters.
  * @param {String} text
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</convertEscapeCharacters>
		<actorName public="1" set="method">
			<f a="actorIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the actor name given an index;
  * the index starts from 1.
  * @param {number} actorIndex
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</actorName>
		<partyMemberName public="1" set="method">
			<f a="partyMemberIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a party member name given an index;
  * the index starts from 1.
  * @param {number} partyMemberIndex
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</partyMemberName>
		<processCharacter public="1" set="method">
			<f a="textState">
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Process each character in the text when drawTextEx
  * is used to draw text.
  * @param {MV.TextState} textState
  * @memberof Window_Base</haxe_doc>
		</processCharacter>
		<processNormalCharacter public="1" set="method">
			<f a="textState">
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes the normal characters in the text
  * when drawTextEx is used to draw text.
  * Normal characters are letters and numbers.
  * @param {MV.TextState} textState
  * @memberof Window_Base</haxe_doc>
		</processNormalCharacter>
		<processNewLine public="1" set="method">
			<f a="textState">
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes new line when drawTextEx is used to draw text.
  *
  * @param {MV.TextState} textState
  * @memberof Window_Base</haxe_doc>
		</processNewLine>
		<processNewPage public="1" set="method">
			<f a="textState">
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes new page when drawTexttEx is used to draw text.
  *
  * @param {MV.TextState} textState
  * @memberof Window_Base</haxe_doc>
		</processNewPage>
		<obtainEscapeCode public="1" set="method"><f a="textState">
	<t path="rm.types.TextState"/>
	<c path="String"/>
</f></obtainEscapeCode>
		<obtainEscapeParam public="1" set="method">
			<f a="textState">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="rm.types.TextState"/>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<c path="String"/>
				</x>
			</f>
			<haxe_doc>* Obtains the escape parameters from text codes in the text state
  * when drawTextEx is used to draw text.
  * @param {MV.TextState} textState
  * @returns {(number | String)}
  * @memberof Window_Base</haxe_doc>
		</obtainEscapeParam>
		<processEscapeCharacter public="1" set="method">
			<f a="code:textState">
				<c path="String"/>
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes escape characters when drawTextEx is used
  * for drawing text.
  * @param {String} code
  * @param {MV.TextState} textState
  * @memberof Window_Base</haxe_doc>
		</processEscapeCharacter>
		<processDrawIcon public="1" set="method">
			<f a="iconIndex:textState">
				<x path="Int"/>
				<t path="rm.types.TextState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes drawing an icon when drawTextEx is used for
  * drawing text.
  * @param {number} iconIndex
  * @param {MV.TextState} textState
  * @memberof Window_Base</haxe_doc>
		</processDrawIcon>
		<makeFontBigger public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Makes the font bigger by a value of 12.
  *
  * @memberof Window_Base</haxe_doc>
		</makeFontBigger>
		<makeFontSmaller public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Makes the font smaller by a value of 12.
  *
  * @memberof Window_Base</haxe_doc>
		</makeFontSmaller>
		<calcTextHeight public="1" set="method">
			<f a="textState:all">
				<t path="rm.types.TextState"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Calculates the text height of the textState (when using drawTextEx);
  * if all is set to true, all lines of text are calculated, otherwise
  * only a single line is processed.
  * @param {rm.TextState} textState
  * @param {Bool} all
  * @returns Int
  * @memberof Window_Base</haxe_doc>
		</calcTextHeight>
		<drawIcon public="1" set="method">
			<f a="iconIndex:x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws an icon given the specified iconIndex at the specified
  * x and y coordinates. The Width and Height of the icon is based on the
  * _iconWidth and _iconHeight properties.
  * @param {number} iconIndex
  * @param {number} x
  * @param {number} y
  * @memberof Window_Base</haxe_doc>
		</drawIcon>
		<drawFace public="1" set="method"><f a="faceName:faceIndex:x:y:width:height">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawFace>
		<drawCharacter public="1" set="method">
			<f a="characterName:characterIndex:x:y">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a character (map sprites) at the specified x and y coordinate.
  * CharacterName refers to character spritesheet, and characterIndex refers
  * to the characterIndex on the spritesheet.
  * @param {String} characterName
  * @param {number} characterIndex
  * @param {number} x
  * @param {number} y
  * @memberof Window_Base</haxe_doc>
		</drawCharacter>
		<drawGauge public="1" set="method">
			<f a="x:y:width:rate:color1:color2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a gauge at the specified x and y coordinates within the given width.
  * Color1 and Color2 represent the gradient as css color Strings of the gauge.
  *
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @param {number} rate
  * @param {String} color1
  * @param {String} color2
  * @memberof Window_Base</haxe_doc>
		</drawGauge>
		<hpColor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the hp color as a css String.
  *
  * @param {Game_Actor} actor
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</hpColor>
		<mpColor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the mp color as a css color String.
  *
  * @param {Game_Actor} actor
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</mpColor>
		<tpColor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the tp color as a css color String.
  *
  * @param {Game_Actor} actor
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</tpColor>
		<drawActorCharacter public="1" set="method"><f a="actor:x:y">
	<c path="rm.objects.Game_Actor"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawActorCharacter>
		<drawActorFace public="1" set="method">
			<f a="actor:x:y:width:height">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor face at the specified x and y coordinates within
  * the given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @param {number} height
  * @memberof Window_Base</haxe_doc>
		</drawActorFace>
		<drawActorName public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor name at the specified x and y coordinates within
  * the given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorName>
		<drawActorClass public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor class at the specified x and y coordinates
  * within the given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorClass>
		<drawActorNickname public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor nickname at the specified x and y coordinates
  * within the given width.
  * @param {Game_Actor} actor
  * @param {Int} x
  * @param {Int} y
  * @param {Int} width
  * @memberof Window_Base</haxe_doc>
		</drawActorNickname>
		<drawActorLevel public="1" set="method">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor level at the specified x and y coordinates.
  *
  * @param {Game_Actor} actor
  * @param {Int} x
  * @param {Int} y
  * @memberof Window_Base</haxe_doc>
		</drawActorLevel>
		<drawActorIcons public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor icons at the specified x and y coordinates
  * within the given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorIcons>
		<drawCurrentAndMax public="1" set="method">
			<f a="current:max:x:y:width:color1:color2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the current and max number at the specified x and y coordinate
  * within the given width. Color1 represents the current number and color2
  * represents the max number when the text is drawn.
  * @param {number} current
  * @param {number} max
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @param {String} color1
  * @param {String} color2
  * @memberof Window_Base</haxe_doc>
		</drawCurrentAndMax>
		<drawActorHp public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor hp at the specified x and y coordinates within
  * the given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorHp>
		<drawActorMp public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor mp at the specified x and y coordinates within
  * the given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorMp>
		<drawActorTp public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor tp at the specified x and y coordinates within the
  * given width.
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorTp>
		<drawActorSimpleStatus public="1" set="method">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a simple status for the game actor passed into the method at the
  * specified x and y coordinates within the given width.
  *
  * @param {Game_Actor} actor
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawActorSimpleStatus>
		<drawItemName public="1" set="method">
			<f a="item:x:y:width">
				<t path="rm.types.BaseItem"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the item name at the specified x and y coordinates within
  * the given width.
  * @param {RPG.BaseItem} item
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawItemName>
		<drawCurrencyValue public="1" set="method">
			<f a="value:unit:x:y:width">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the currency value given at the specified x and y coordinates within
  * the width given. Useful if you want to write your own custom currency value.
  * @param {number} value
  * @param {String} unit
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_Base</haxe_doc>
		</drawCurrencyValue>
		<paramchangeTextColor public="1" set="method">
			<f a="change">
				<x path="Int"/>
				<x path="rm.types.Color"/>
			</f>
			<haxe_doc>* Changes the text color based on the powerUpColor, powerDownColor
  * and normal color. powerUpColor is any number greater than 0, powerDownColor
  * is any color less than 0, otherwise normal color is returned.
  * @param {number} change
  * @memberof Window_Base</haxe_doc>
		</paramchangeTextColor>
		<setBackgroundType public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the background type of the window.
  * 0 is 255 window opacity (standard).
  * 1 is the window with background dimmer.
  * Any other number changes the opacity
  * to 0.
  * @param {number} type
  * @memberof Window_Base</haxe_doc>
		</setBackgroundType>
		<showBackgroundDimmer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the background dimmer sprite.
  *
  * @memberof Window_Base</haxe_doc>
		</showBackgroundDimmer>
		<hideBackgroundDimmer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the background dimmer sprite.
  *
  * @memberof Window_Base</haxe_doc>
		</hideBackgroundDimmer>
		<updateBackgroundDimmer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the background dimmer sprite opacity based on the openness
  * of the window.
  * @memberof Window_Base</haxe_doc>
		</updateBackgroundDimmer>
		<refreshDimmerBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the bitmap attached to the dimmer sprite
  * based on the window dimensions.
  * @memberof Window_Base</haxe_doc>
		</refreshDimmerBitmap>
		<dimColor1 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Color 1 of the dimmer sprite bitmap.
  * for the gradient.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</dimColor1>
		<dimColor2 public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Color 2 of the dimmer sprite bitmap
  * for the gradient.
  * @returns {String}
  * @memberof Window_Base</haxe_doc>
		</dimColor2>
		<canvasToLocalX public="1" set="method">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Returns the x coordinate of the mouse to
  * a local window x coordinate.
  * @param {number} x
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</canvasToLocalX>
		<canvasToLocalY public="1" set="method">
			<f a="y">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Returns the y coordinate of the mouse
  * to a local window y coordinate.
  * @param {number} y
  * @returns {number}
  * @memberof Window_Base</haxe_doc>
		</canvasToLocalY>
		<reserveFaceImages public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Reverses the face images of the
  * game party members.
  * @memberof Window_Base</haxe_doc>
		</reserveFaceImages>
		<checkRectObject public="1" set="method">
			<f a="rect">
				<c path="rm.core.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Checks if object passed in is a rectangle..
  * Error is usually thrown when an MV plugin is used.
  * @param rect</haxe_doc>
		</checkRectObject>
		<baseTextRect public="1" set="method">
			<f a=""><c path="rm.core.Rectangle"/></f>
			<haxe_doc>* Returns a new rectangle used for base text.
  * Width and height are based off the innerWidth
  * and innerHeight properties.
  * @return Rectangle</haxe_doc>
		</baseTextRect>
		<changeOutlineColor public="1" set="method"><f a="color">
	<c path="String"/>
	<x path="Void"/>
</f></changeOutlineColor>
		<drawRect public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a rectangle using the outline color and
  * main text color of the window.
  * @param x
  * @param y
  * @param width
  * @param height</haxe_doc>
		</drawRect>
		<destroyContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the window contents.
  * Also destroys the window back contents.</haxe_doc>
		</destroyContents>
		<playOkSound public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays a sound effect when okay is processed.
  *</haxe_doc>
		</playOkSound>
		<playBuzzerSound public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays the buzzer sound effect when input is
  * incorrect.</haxe_doc>
		</playBuzzerSound>
		<playCursorSound public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays the cursor sound from SoundManager;</haxe_doc>
		</playCursorSound>
		<processColorChange public="1" set="method">
			<f a="colorIndex">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the color based on the color index.
  * @param colorIndex</haxe_doc>
		</processColorChange>
		<maxFontSizeInLine public="1" set="method">
			<f a="line">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the maximum font size for a single line in rm.
  * @param line
  * @return Int
  *</haxe_doc>
		</maxFontSizeInLine>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Base"</e></m>
		</meta>
	</class>
	<class path="nodes.windows.LTWindowBase" params="" file="src/nodes/windows/LTWindowBase.hx">
		<extends path="rm.windows.Window_Base"/>
		<innerWidthLT public="1" get="accessor" set="null"><x path="Int"/></innerWidthLT>
		<innerHeightLT public="1" get="accessor" set="null"><x path="Int"/></innerHeightLT>
		<processColorChangeLT public="1" set="method" line="29">
			<f a="colorIndex">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the color based on the color index.
  * Backport to MV.
  * @param colorIndex</haxe_doc>
		</processColorChangeLT>
		<drawTextExLT public="1" set="method" line="37"><f a="text:x:y:?width">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></drawTextExLT>
		<textSizeExLT public="1" set="method" line="45"><f a="text">
	<c path="String"/>
	<a>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
	</a>
</f></textSizeExLT>
		<createTextStateLT public="1" set="method" line="56"><f a="text:x:y:width">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="rm.types.TextStateLT"/>
</f></createTextStateLT>
		<createTextBufferLT public="1" set="method" line="76"><f a="rtl">
	<x path="Bool"/>
	<c path="String"/>
</f></createTextBufferLT>
		<processAllTextLT public="1" set="method" line="90">
			<f a="textState">
				<t path="rm.types.TextStateLT"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Improves text processing for MV
  * while using default MZ text processing.
  * ProcessAllText doesn't happen in MV
  * @param textState</haxe_doc>
		</processAllTextLT>
		<processCharacterLT public="1" set="method" line="100"><f a="textState">
	<t path="rm.types.TextStateLT"/>
	<x path="Void"/>
</f></processCharacterLT>
		<flushTextStateLT public="1" set="method" line="112"><f a="textState">
	<t path="rm.types.TextStateLT"/>
	<x path="Void"/>
</f></flushTextStateLT>
		<processControlCharacterLT public="1" set="method" line="135"><f a="textState:character">
	<t path="rm.types.TextStateLT"/>
	<c path="String"/>
	<x path="Void"/>
</f></processControlCharacterLT>
		<destroyContentsLT public="1" set="method" line="150"><f a=""><x path="Void"/></f></destroyContentsLT>
		<maxFontSizeInLineLT public="1" set="method" line="163"><f a="line">
	<c path="String"/>
	<x path="Int"/>
</f></maxFontSizeInLineLT>
		<get_innerWidthLT set="method" line="193"><f a=""><x path="Int"/></f></get_innerWidthLT>
		<get_innerHeightLT set="method" line="197"><f a=""><x path="Int"/></f></get_innerHeightLT>
		<new public="1" set="method" line="15"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"LTWindowBase"</e></m></meta>
	</class>
	<class path="rm.windows.Window_Scrollable" params="" file="src/rm/windows/Window_Scrollable.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_scrollX><x path="Int"/></_scrollX>
		<_ScrollY><x path="Int"/></_ScrollY>
		<_scrollBaseX><x path="Int"/></_scrollBaseX>
		<_scrollBaseY><x path="Int"/></_scrollBaseY>
		<_scrollAccelX><x path="Int"/></_scrollAccelX>
		<_scrollAccelY><x path="Int"/></_scrollAccelY>
		<_scrollTouching><x path="Bool"/></_scrollTouching>
		<_scrollLastTouchX><x path="Int"/></_scrollLastTouchX>
		<_scrollLastTouchY><x path="Int"/></_scrollLastTouchY>
		<_scrollLastCursorVisible><x path="Bool"/></_scrollLastCursorVisible>
		<initialize public="1" set="method" override="1">
			<f a="rect">
				<c path="rm.core.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initializes the scrollable window with a rectangle
  * called internally by new operator.
  * @param rect</haxe_doc>
		</initialize>
		<clearScrollStatus public="1" set="method"><f a=""><x path="Void"/></f></clearScrollStatus>
		<scrollX public="1" set="method"><f a=""><x path="Int"/></f></scrollX>
		<scrollY public="1" set="method"><f a=""><x path="Int"/></f></scrollY>
		<scrollBaseX public="1" set="method"><f a=""><x path="Int"/></f></scrollBaseX>
		<scrollBaseY public="1" set="method"><f a=""><x path="Int"/></f></scrollBaseY>
		<scrollTo public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scrollTo>
		<scrollBy public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scrollBy>
		<smoothScrollTo public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></smoothScrollTo>
		<setScrollAccel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setScrollAccel>
		<overallWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>*
  * Overall width of the window.
  * @return Int</haxe_doc>
		</overallWidth>
		<overallHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Overall height of the window.
  * @return Int</haxe_doc>
		</overallHeight>
		<maxScrollX public="1" set="method"><f a=""><x path="Int"/></f></maxScrollX>
		<maxScrollY public="1" set="method"><f a=""><x path="Int"/></f></maxScrollY>
		<scrollBlockWidth public="1" set="method"><f a=""><x path="Int"/></f></scrollBlockWidth>
		<scrollBlockHeight public="1" set="method"><f a=""><x path="Int"/></f></scrollBlockHeight>
		<smoothScrollDown public="1" set="method">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Smoothly scrolls down to the number by the
  * height of each item.
  * @param num
  * @return Int</haxe_doc>
		</smoothScrollDown>
		<smoothScrollUp public="1" set="method">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Smoothly scrolls up to the number by the height
  * of each item.
  * @param num
  * @return Int</haxe_doc>
		</smoothScrollUp>
		<processWheelScroll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Process wheel scrolling with the TouchInput wheel.
  * @return Int</haxe_doc>
		</processWheelScroll>
		<processTouchScroll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes touch input scrolling.</haxe_doc>
		</processTouchScroll>
		<isWheelScrollEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Defaults to isScrollEnabled();
  * Determines if wheel scroll is enabled.
  * @return Bool</haxe_doc>
		</isWheelScrollEnabled>
		<isTouchScrollEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Defaults to isScrollEnabled();
  * Determines if touch scroll is enabled.
  * @return Bool</haxe_doc>
		</isTouchScrollEnabled>
		<isScrollEnable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Whether scrolling is enabled; default to true.
  * @return Bool</haxe_doc>
		</isScrollEnable>
		<isTouchedInsideFrame public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the window is touched
  * within the frame.
  * @return Bool</haxe_doc>
		</isTouchedInsideFrame>
		<onTouchScrollStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when touch scroll is started.</haxe_doc>
		</onTouchScrollStart>
		<onTouchScroll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when touch scrolling.</haxe_doc>
		</onTouchScroll>
		<onTouchScrollEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when touch scroll is ending.</haxe_doc>
		</onTouchScrollEnd>
		<updateSmoothScroll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update function for smooth scrolling.</haxe_doc>
		</updateSmoothScroll>
		<updateScrollAccel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update function for scroll accelleration.</haxe_doc>
		</updateScrollAccel>
		<updateArrows public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update function for the scrolling arrows.</haxe_doc>
		</updateArrows>
		<updateOrigin public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update function for the origin when scrolling.</haxe_doc>
		</updateOrigin>
		<updateScrollBase public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update function for the Scroll Base.</haxe_doc>
		</updateScrollBase>
		<paint public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Function to be overriden for your personal use.</haxe_doc>
		</paint>
		<new public="1" set="method">
			<f a="rect">
				<c path="rm.core.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructor for Window_Scrollable
  * @param rect</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n="native"><e>"Window_Scrollable"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_Selectable" params="" file="src/rm/windows/Window_Selectable.hx" extern="1">
		<extends path="rm.windows.Window_Scrollable"/>
		<_index>
			<x path="Int"/>
			<haxe_doc>* The index property of Window_Selectable; this is used
 * to select items from the list within the window.
 * @private var
 * @type {number}
 * @memberof Window_Selectable</haxe_doc>
		</_index>
		<_cursorFixed>
			<x path="Bool"/>
			<haxe_doc>* The boolean property that determines if the cursor is
 * fixed(locked to a position).
 * @private var
 * @type {boolean}
 * @memberof Window_Selectable</haxe_doc>
		</_cursorFixed>
		<_cursorAll><x path="Bool"/></_cursorAll>
		<_stayCount><x path="Int"/></_stayCount>
		<_helpWindow><c path="rm.windows.Window_Help"/></_helpWindow>
		<_handlers><x path="Any"/></_handlers>
		<_touching><x path="Bool"/></_touching>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<forceSelect public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Forcefully selects the index and cursor
 * visibility is set to false.
 * @param index</haxe_doc>
		</forceSelect>
		<smoothSelect public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Smoothly scrolls to the index.
 * Cursor visibility is set to true.
 * @param index</haxe_doc>
		</smoothSelect>
		<itemRectWithPadding public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="rm.core.Rectangle"/>
</f></itemRectWithPadding>
		<itemLineRect public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="rm.core.Rectangle"/>
			</f>
			<haxe_doc>* Return the rectangle for the line item with padding.
 * @param index</haxe_doc>
		</itemLineRect>
		<paint public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Overwrite this or add to it to add your own draw functions.</haxe_doc>
		</paint>
		<refreshCursor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the cursor.</haxe_doc>
		</refreshCursor>
		<refreshCursorForAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes cursor for selecting all items.</haxe_doc>
		</refreshCursorForAll>
		<isHoverEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true by default.
 * Determines if hover support is enabled.
 * @return Bool</haxe_doc>
		</isHoverEnabled>
		<onTouchOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for Touching okay in the window.</haxe_doc>
		</onTouchOk>
		<onTouchSelect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for selecting in the window.</haxe_doc>
		</onTouchSelect>
		<onTouchCancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for touching and processing cancel in
 * the window.</haxe_doc>
		</onTouchCancel>
		<index public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current position of the _index property.
 *
 * @returns {Int}
 * @memberof Window_Selectable</haxe_doc>
		</index>
		<cursorFixed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the _cursorFixed property is true;
 * this means the cursor is locked to a position.
 * @returns {boolean}
 * @memberof Window_Selectable</haxe_doc>
		</cursorFixed>
		<setCursorFixed public="1" set="method">
			<f a="cursorFixed">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the _cursorFixed property of the
 * window.
 * @param {boolean} cursorFixed
 * @memberof Window_Selectable</haxe_doc>
		</setCursorFixed>
		<cursorAll public="1" set="method"><f a=""><x path="Bool"/></f></cursorAll>
		<setCursorAll public="1" set="method"><f a="cursorAll">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursorAll>
		<maxCols public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number of columns
 * for the window.
 * @returns {number}
 * @memberof Window_Selectable</haxe_doc>
		</maxCols>
		<maxItems public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number of items within the window;
 * useful to overwrite when creating a new window.
 * This method is used to calculate the number of rows and more.
 * @returns {number}
 * @memberof Window_Selectable</haxe_doc>
		</maxItems>
		<spacing public="1" set="method"><f a=""><x path="Float"/></f></spacing>
		<itemWidth public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the width of an item within the window;
 * determines the width of a column.
 * @returns {number}
 * @memberof Window_Selectable</haxe_doc>
		</itemWidth>
		<itemHeight public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the height of an item within the window;
 * determines the height of a row.
 * @returns {number}
 * @memberof Window_Selectable</haxe_doc>
		</itemHeight>
		<select public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Selects the current index within the window given a number.
 *
 * @param {number} index
 * @memberof Window_Selectable</haxe_doc>
		</select>
		<deselect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Deselects the currently selected index.
 *
 * @memberof Window_Selectable</haxe_doc>
		</deselect>
		<reselect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Reselects the index based on the window's _index property.
 *
 * @memberof Window_Selectable</haxe_doc>
		</reselect>
		<row public="1" set="method"><f a=""><x path="Int"/></f></row>
		<topRow public="1" set="method"><f a=""><x path="Int"/></f></topRow>
		<maxTopRow public="1" set="method"><f a=""><x path="Int"/></f></maxTopRow>
		<setTopRow public="1" set="method">
			<f a="row">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current top row of the given a number.
 * The top row will then be moved to an index
 * of the window.
 * @param {number} row
 * @memberof Window_Selectable</haxe_doc>
		</setTopRow>
		<resetScroll public="1" set="method"><f a=""><x path="Void"/></f></resetScroll>
		<maxPageRows public="1" set="method"><f a=""><x path="Int"/></f></maxPageRows>
		<maxPageItems public="1" set="method"><f a=""><x path="Int"/></f></maxPageItems>
		<isHorizontal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the window is horizontal;
 * means the window only has a single row.
 * @returns {boolean}
 * @memberof Window_Selectable</haxe_doc>
		</isHorizontal>
		<bottomRow public="1" set="method"><f a=""><x path="Int"/></f></bottomRow>
		<setBottomRow public="1" set="method"><f a="row">
	<x path="Int"/>
	<x path="Void"/>
</f></setBottomRow>
		<itemRect public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="rm.core.Rectangle"/>
			</f>
			<haxe_doc>* Creates a new rectangle based on itemWidth and itemHeight.
 * The rectangle is mainly used for positioning items within
 * the selectable window.
 * @param {number} index
 * @returns {Rectangle}
 * @memberof Window_Selectable</haxe_doc>
		</itemRect>
		<itemRectForText public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="rm.core.Rectangle"/>
			</f>
			<haxe_doc>* Creates a new rectangle based on itemWidth and itemHeight
 * The rectangle is used for positioning text within
 * the selectable window.
 * @param {number} index
 * @returns {Rectangle}
 * @memberof Window_Selectable</haxe_doc>
		</itemRectForText>
		<setHelpWindow public="1" set="method"><f a="helpWindow">
	<c path="rm.windows.Window_Help"/>
	<x path="Void"/>
</f></setHelpWindow>
		<showHelpWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the attached help window.
 *
 * @memberof Window_Selectable</haxe_doc>
		</showHelpWindow>
		<hideHelpWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the attached help window.
 *
 * @memberof Window_Selectable</haxe_doc>
		</hideHelpWindow>
		<setHandler public="1" set="method">
			<f a="symbol:method">
				<c path="String"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new handler with the symbol as the handler name
 * and a method (JS function) bound to it.
 * @param {string} symbol
 * @param {*} method
 * @memberof Window_Selectable</haxe_doc>
		</setHandler>
		<isHandled public="1" set="method"><f a="symbol">
	<c path="String"/>
	<x path="Bool"/>
</f></isHandled>
		<callHandler public="1" set="method"><f a="symbol">
	<c path="String"/>
	<x path="Void"/>
</f></callHandler>
		<isOpenAndActive public="1" set="method"><f a=""><x path="Bool"/></f></isOpenAndActive>
		<isCursorMovable public="1" set="method"><f a=""><x path="Bool"/></f></isCursorMovable>
		<cursorDown public="1" set="method">
			<f a="wrap">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the cursor down; if wrap is passed
 * as true, then it will return to the top when
 * at the end of the list.
 * @param {boolean} wrap
 * @memberof Window_Selectable</haxe_doc>
		</cursorDown>
		<cursorUp public="1" set="method">
			<f a="wrap">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the cursor up; if wrap is passed
 * as true, then it will return to the bottom
 * when at the top of the list.
 * @param {boolean} wrap
 * @memberof Window_Selectable</haxe_doc>
		</cursorUp>
		<cursorRight public="1" set="method"><f a="wrap">
	<x path="Bool"/>
	<x path="Void"/>
</f></cursorRight>
		<cursorLeft public="1" set="method"><f a="wrap">
	<x path="Bool"/>
	<x path="Void"/>
</f></cursorLeft>
		<cursorPagedown public="1" set="method"><f a=""><x path="Void"/></f></cursorPagedown>
		<cursorPageup public="1" set="method"><f a=""><x path="Void"/></f></cursorPageup>
		<scrollDown public="1" set="method"><f a=""><x path="Void"/></f></scrollDown>
		<scrollUp public="1" set="method"><f a=""><x path="Void"/></f></scrollUp>
		<updateArrows public="1" set="method" override="1"><f a=""><x path="Void"/></f></updateArrows>
		<processCursorMove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handles the processing of cursor movement.
 *
 * @memberof Window_Selectable</haxe_doc>
		</processCursorMove>
		<processHandling public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handles the process of attached handlers.
 *
 * @memberof Window_Selectable</haxe_doc>
		</processHandling>
		<processWheel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handles the processing of the scroll wheel within
 * the window.
 * @memberof Window_Selectable</haxe_doc>
		</processWheel>
		<processTouch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handles the processing of touch input.
 *
 * @memberof Window_Selectable</haxe_doc>
		</processTouch>
		<isTouchedInsideFrame public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isTouchedInsideFrame>
		<onTouch public="1" set="method"><f a="triggered">
	<x path="Bool"/>
	<x path="Void"/>
</f></onTouch>
		<hitTest public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hitTest>
		<isContentsArea public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isContentsArea>
		<isTouchOkEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if touch ok is enabled as an option;
 * this means whether you can confirm the selection
 * of an item within the window with touch input.
 * @returns {boolean}
 * @memberof Window_Selectable</haxe_doc>
		</isTouchOkEnabled>
		<isOkEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if ok is enabled as an option;
 * this means whether you can confirm selection
 * of an item within the window.
 * @returns {boolean}
 * @memberof Window_Selectable</haxe_doc>
		</isOkEnabled>
		<isCancelEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isCancelEnabled>
		<isOkTriggered public="1" set="method"><f a=""><x path="Bool"/></f></isOkTriggered>
		<isCancelTriggered public="1" set="method"><f a=""><x path="Bool"/></f></isCancelTriggered>
		<processOk public="1" set="method"><f a=""><x path="Void"/></f></processOk>
		<callOkHandler public="1" set="method"><f a=""><x path="Void"/></f></callOkHandler>
		<processCancel public="1" set="method"><f a=""><x path="Void"/></f></processCancel>
		<callCancelHandler public="1" set="method"><f a=""><x path="Void"/></f></callCancelHandler>
		<processPageup public="1" set="method"><f a=""><x path="Void"/></f></processPageup>
		<processPagedown public="1" set="method"><f a=""><x path="Void"/></f></processPagedown>
		<updateInputData public="1" set="method"><f a=""><x path="Void"/></f></updateInputData>
		<updateCursor public="1" set="method"><f a=""><x path="Void"/></f></updateCursor>
		<isCursorVisible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the cursor is visible within
 * the window.
 * @returns {boolean}
 * @memberof Window_Selectable</haxe_doc>
		</isCursorVisible>
		<ensureCursorVisible public="1" set="method"><f a=""><x path="Void"/></f></ensureCursorVisible>
		<callUpdateHelp public="1" set="method"><f a=""><x path="Void"/></f></callUpdateHelp>
		<updateHelp public="1" set="method"><f a=""><x path="Void"/></f></updateHelp>
		<setHelpWindowItem public="1" set="method"><f a="item">
	<x path="Any"/>
	<x path="Void"/>
</f></setHelpWindowItem>
		<isCurrentItemEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isCurrentItemEnabled>
		<drawAllItems public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Draws all items within the window; this method
 * cals drawItem multiple times.
 * @memberof Window_Selectable</haxe_doc>
		</drawAllItems>
		<drawItem public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></drawItem>
		<clearItem public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></clearItem>
		<redrawItem public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></redrawItem>
		<redrawCurrentItem public="1" set="method"><f a=""><x path="Void"/></f></redrawCurrentItem>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the window contents.
 *
 * @memberof Window_Selectable</haxe_doc>
		</refresh>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Selectable"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_Command" params="" file="src/rm/windows/Window_Command.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of the window;
  * default is 240.
  * @returns {number}
  * @memberof Window_Command</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the height of the window;
  * takes the visible rows and passes it to the fittingHeight method.
  * @returns {number}
  * @memberof Window_Command</haxe_doc>
		</windowHeight>
		<numVisibleRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of visible rows within the window.
  *
  * @returns {number}
  * @memberof Window_Command</haxe_doc>
		</numVisibleRows>
		<maxItems public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number of items within the window.
  *
  * @returns {number}
  * @memberof Window_Command</haxe_doc>
		</maxItems>
		<clearCommandList public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the list of commands from the window;
  * this is useful for refreshing changing commands.
  * @memberof Window_Command</haxe_doc>
		</clearCommandList>
		<makeCommandList public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Convenient method for overwriting and adding
  * commands with the addCommand method.
  * @memberof Window_Command</haxe_doc>
		</makeCommandList>
		<addCommand public="1" set="method">
			<f a="name:symbol:enabled:?ext">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds commands to the window list with the specified
  * parameters. The actual command can be found as an object.
  * @param {String} name
  * @param {String} symbol
  * @param {boolean} enabled
  * @param {(any | object)} [ext]
  * @memberof Window_Command</haxe_doc>
		</addCommand>
		<commandName public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the command name given an index.
  *
  * @param {number} index
  * @returns {String}
  * @memberof Window_Command</haxe_doc>
		</commandName>
		<commandSymbol public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the command symbol given an index.
  *
  * @param {number} index
  * @returns {String}
  * @memberof Window_Command</haxe_doc>
		</commandSymbol>
		<isCommandEnabled public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Determines if the command is enabled;
  * checks the enabled property of the command.
  * @param {number} index
  * @returns {boolean}
  * @memberof Window_Command</haxe_doc>
		</isCommandEnabled>
		<currentData public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns the command object at the current index.
  *
  * @returns {object}
  * @memberof Window_Command</haxe_doc>
		</currentData>
		<currentSymbol public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the command symbol at the current index.
  *
  * @returns {String}
  * @memberof Window_Command</haxe_doc>
		</currentSymbol>
		<currentExt public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns the ext property of the command at the current index.
  *
  * @returns {(any | object)}
  * @memberof Window_Command</haxe_doc>
		</currentExt>
		<findSymbol public="1" set="method">
			<f a="symbol">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Finds a command object and returns the index number based
  * on the symbol property.
  * @param {String} symbol
  * @returns {number}
  * @memberof Window_Command</haxe_doc>
		</findSymbol>
		<selectSymbol public="1" set="method">
			<f a="symbol">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Selects a command object based on the symbol property.
  *
  * @param {String} symbol
  * @memberof Window_Command</haxe_doc>
		</selectSymbol>
		<findExt public="1" set="method">
			<f a="ext">
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Finds a command object and returns the index number
  * based on the ext property.
  * @param {(any | object)} ext
  * @returns {number}
  * @memberof Window_Command</haxe_doc>
		</findExt>
		<selectExt public="1" set="method">
			<f a="ext">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Selects a command object based on the ext property.
  *
  * @param {(any | object)} ext
  * @memberof Window_Command</haxe_doc>
		</selectExt>
		<itemTextAlign public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the text align of the commands;
  * possible values are: 'left', 'center', 'right'.
  * @returns {String}
  * @memberof Window_Command</haxe_doc>
		</itemTextAlign>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Command"</e></m>
		</meta>
	</class>
	<class path="nodes.windows.LTWindowCommand" params="" file="src/nodes/windows/LTWindowCommand.hx">
		<extends path="rm.windows.Window_Command"/>
		<new public="1" set="method" line="6"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"LTWindowCommand"</e></m></meta>
	</class>
	<class path="nodes.windows.LTWindowSelectable" params="" file="src/nodes/windows/LTWindowSelectable.hx">
		<extends path="rm.windows.Window_Selectable"/>
		<new public="1" set="method" line="8"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"LTWindowSelectable"</e></m></meta>
	</class>
	<class path="pixi.Quad" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/Quad.hx" extern="1">
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Helper class to create a quad</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Quad"</e></m></meta>
	</class>
	<class path="pixi.mesh.Geometry" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/mesh/Geometry.hx" extern="1">
		<merge public="1" set="method" static="1">
			<f a="geometries">
				<c path="Array"><c path="pixi.mesh.Geometry"/></c>
				<c path="pixi.mesh.Geometry"/>
			</f>
			<haxe_doc><![CDATA[* merges an array of geometries into a new single one geometry attribute styles must match for this operation to work
	 *
	 * @param geometries {Array<Buffer>}
	 * @return shiny new geometry!]]></haxe_doc>
		</merge>
		<instanceCount public="1">
			<x path="Int"/>
			<haxe_doc>* Number of instances in this geometry, pass it to GeometrySystem.draw()
	 *
	 * @member {Int}</haxe_doc>
		</instanceCount>
		<refCount public="1">
			<x path="Int"/>
			<haxe_doc>* Count of existing (not destroyed) meshes that reference this geometry
	 *
	 * @member {Int}</haxe_doc>
		</refCount>
		<addAttribute public="1" set="method">
			<f a="id:?buffer:?size:?normalized:?type:?stride:?start">
				<c path="String"/>
				<c path="pixi.core.renderers.webgl.Buffer"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="pixi.mesh.Geometry"/>
			</f>
			<haxe_doc>* Adds an attribute to the geometry
	 * @param	id {String} the name of the attribute (matching up to a shader)
	 * @param	buffer {Buffer} the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
	 * @param	size {Int} the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
	 * @param	normalized {Bool} should the data be normalized.
	 * @param	type {Float} what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
	 * @param	stride {Float} How far apart (in floats) the start of each value is. (used for interleaving data)
	 * @param	star {Int} How far into the array to start reading values (used for interleaving data)
	 * @return {Geometry} returns self, useful for chaining.</haxe_doc>
		</addAttribute>
		<addIndex public="1" set="method">
			<f a="buffer">
				<c path="pixi.core.renderers.webgl.Buffer"/>
				<c path="pixi.mesh.Geometry"/>
			</f>
			<haxe_doc>* Adds an index buffer to the geometry The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
	 * @param	buffer {Buffer} the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
	 * @return {Geometry} returns self, useful for chaining.</haxe_doc>
		</addIndex>
		<clone public="1" set="method">
			<f a=""><c path="pixi.mesh.Geometry"/></f>
			<haxe_doc>* returns a clone of the geometry
	 * @return {Geometry}</haxe_doc>
		</clone>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the geometry.</haxe_doc>
		</destroy>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* disposes WebGL resources that are connected to this geometry</haxe_doc>
		</dispose>
		<getAttribute public="1" set="method">
			<f a="id">
				<c path="String"/>
				<c path="pixi.core.renderers.webgl.Attribute"/>
			</f>
			<haxe_doc>* returns the requested attribute
	 * @param	id
	 * @return</haxe_doc>
		</getAttribute>
		<getBuffer public="1" set="method">
			<f a="id">
				<c path="String"/>
				<c path="pixi.core.renderers.webgl.Buffer"/>
			</f>
			<haxe_doc>* returns the requested buffer
	 * @param	id {String} the name of the buffer required
	 * @return {Buffer} the buffer requested.</haxe_doc>
		</getBuffer>
		<getIndex public="1" set="method">
			<f a=""><c path="pixi.core.renderers.webgl.Buffer"/></f>
			<haxe_doc>* returns the index buffer
	 * @return {Buffer} the index buffer.</haxe_doc>
		</getIndex>
		<interleave public="1" set="method">
			<f a=""><c path="pixi.mesh.Geometry"/></f>
			<haxe_doc>* this function modifies the structure so that all current attributes become interleaved into a single buffer This can be useful if your model remains static as it offers a little performance boost
	 * @return {Geometry} returns self, useful for chaining.</haxe_doc>
		</interleave>
		<new public="1" set="method">
			<f a="?buffers:?attributes">
				<c path="Array"><c path="pixi.core.renderers.webgl.Buffer"/></c>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* The Geometry represents a model. It consists of two components:
	 *
	 * GeometryStyle - The structure of the model such as the attributes layout
	 * GeometryData - the data of the model - this consists of buffers. This can include anything from positions, uvs, normals, colors etc.
	 *
	 * @class
	 * @memberof PIXI.mesh
	 * @param buffers {Array<Buffer>} An array of buffers. optional.
	 * @param [attributes] {Dynamic} of the geometry, optional structure of the attributes layout]]></haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Geometry"</e></m></meta>
	</class>
	<class path="pixi.QuadUv" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/QuadUv.hx" extern="1">
		<extends path="pixi.mesh.Geometry"/>
		<uvs public="1">
			<c path="js.lib.Float32Array"/>
			<haxe_doc>* The Uvs of the quad</haxe_doc>
		</uvs>
		<vertices public="1">
			<c path="js.lib.Float32Array"/>
			<haxe_doc>* An array of vertices</haxe_doc>
		</vertices>
		<invalidate public="1" set="method">
			<f a=""><c path="pixi.QuadUv"/></f>
			<haxe_doc>* legacy upload method, just marks buffers dirty
	 * @return Returns itself.</haxe_doc>
		</invalidate>
		<map public="1" set="method">
			<f a="targetTextureFrame:destinationFrame">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.Quad"/>
			</f>
			<haxe_doc>* Maps two Rectangle to the quad.
	 * @param	targetTextureFrame the first rectangle
	 * @param	destinationFrame the second rectangle
	 * @return Returns itself.</haxe_doc>
		</map>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Helper class to create a quad with uvs like in v4</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.QuadUv"</e></m></meta>
	</class>
	<class path="pixi.core.Pixi" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" extern="1">
		<VERSION public="1" static="1">
			<c path="String"/>
			<haxe_doc>* String of the current PIXI version.</haxe_doc>
		</VERSION>
		<PI_2 public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* Two Pi.</haxe_doc>
		</PI_2>
		<RAD_TO_DEG public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* Conversion factor for converting radians to degrees.</haxe_doc>
		</RAD_TO_DEG>
		<DEG_TO_RAD public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* Conversion factor for converting degrees to radians.</haxe_doc>
		</DEG_TO_RAD>
		<ALPHA_MODES public="1" static="1">
			<e path="pixi.core.AlphaModes"/>
			<haxe_doc>* How to treat textures with premultiplied alpha</haxe_doc>
		</ALPHA_MODES>
		<RENDERER_TYPE public="1" static="1">
			<e path="pixi.core.RendererType"/>
			<haxe_doc>* Constant to identify the Renderer Type.</haxe_doc>
		</RENDERER_TYPE>
		<BLEND_MODES public="1" static="1">
			<e path="pixi.core.BlendModes"/>
			<haxe_doc>* various blend modes supported by PIXI. IMPORTANT - The WebGL renderer only supports
	 * the NORMAL, ADD, MULTIPLY and SCREEN blend modes. Anything else will silently act like
	 * NORMAL.</haxe_doc>
		</BLEND_MODES>
		<BUFFER_BITS public="1" static="1">
			<e path="pixi.core.BufferBits"/>
			<haxe_doc>* Bitwise OR of masks that indicate the buffers to be cleared.</haxe_doc>
		</BUFFER_BITS>
		<CLEAR_MODES public="1" static="1">
			<e path="pixi.core.ClearModes"/>
			<haxe_doc>* How to clear renderTextures in filter</haxe_doc>
		</CLEAR_MODES>
		<DRAW_MODES public="1" static="1">
			<e path="pixi.core.DrawModes"/>
			<haxe_doc>* Various webgl draw modes. These can be used to specify which GL drawMode to use
	 * under certain situations and renderers.
	 *
	 * @property {Int} DRAW_MODES.TRIANGLE_FAN</haxe_doc>
		</DRAW_MODES>
		<SCALE_MODES public="1" static="1">
			<e path="pixi.core.ScaleModes"/>
			<haxe_doc>* The scale modes that are supported by pixi.
	 *
	 * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
	 * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
	 *</haxe_doc>
		</SCALE_MODES>
		<WRAP_MODES public="1" static="1">
			<e path="pixi.core.WrapModes"/>
			<haxe_doc>* The wrap modes that are supported by pixi.
	 *
	 * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wraping mode of future operations.
	 * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
	 * If the texture is non power of two then clamp will be used regardless as webGL can
	 * only use REPEAT if the texture is po2.
	 *
	 * This property only affects WebGL.</haxe_doc>
		</WRAP_MODES>
		<GC_MODES public="1" static="1">
			<e path="pixi.core.GCModes"/>
			<haxe_doc>* The gc modes that are supported by pixi.
	 *
	 * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for pixi textures is AUTO
	 * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
	 * used for a specified period of time they will be removed from the GPU. They will of course
	 * be uploaded again when they are required. This is a silent behind the scenes process that
	 * should ensure that the GPU does not  get filled up.
	 *
	 * Handy for mobile devices!
	 * This property only affects WebGL.</haxe_doc>
		</GC_MODES>
		<GRAPHICS_CURVES public="1" static="1">
			<t path="pixi.core.GraphicCurves"/>
			<haxe_doc>* Graphics curves resolution settings. If adaptive flag is set to true, the resolution is
	 * calculated based on the curve's length to ensure better visual quality.
	 * Adaptive draw works with bezierCurveTo and quadraticCurveTo.</haxe_doc>
		</GRAPHICS_CURVES>
		<MASK_TYPES public="1" static="1">
			<e path="pixi.core.MaskTypes"/>
			<haxe_doc>* Graphics curves resolution settings. If adaptive flag is set to true, the resolution is
	 * calculated based on the curve's length to ensure better visual quality.
	 * Adaptive draw works with bezierCurveTo and quadraticCurveTo.</haxe_doc>
		</MASK_TYPES>
		<MIPMAP_MODES public="1" static="1">
			<e path="pixi.core.MipmapModes"/>
			<haxe_doc>* Mipmap filtering modes that are supported by pixi.
	 * The PIXI.settings.MIPMAP_TEXTURES affects default texture filtering. Mipmaps are generated
	 * for a baseTexture if its mipmap field is ON, or its POW2 and texture dimensions are
	 * powers of 2. Due to platform restriction, ON option will work like POW2 for webgl-1.
	 * This property only affects WebGL.</haxe_doc>
		</MIPMAP_MODES>
		<MSAA_QUALITY public="1" static="1">
			<e path="pixi.core.MSAAQuality"/>
			<haxe_doc>* Constants for multi-sampling antialiasing.</haxe_doc>
		</MSAA_QUALITY>
		<URL_FILE_EXTENSION public="1" static="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="js.lib.RegExp"/>
			</x>
			<haxe_doc>* Regexp for image type by extension.</haxe_doc>
		</URL_FILE_EXTENSION>
		<DATA_URI public="1" static="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="js.lib.RegExp"/>
			</x>
			<haxe_doc>* Regexp for data URI.
	 * Based on: {@link https://github.com/ragingwind/data-uri-regex}</haxe_doc>
		</DATA_URI>
		<defaultFilterVertex public="1" static="1">
			<c path="String"/>
			<haxe_doc>* Default filter vertex shader</haxe_doc>
		</defaultFilterVertex>
		<defaultVertex public="1" static="1">
			<c path="String"/>
			<haxe_doc>* Default vertex shader</haxe_doc>
		</defaultVertex>
		<SVG_SIZE public="1" static="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="js.lib.RegExp"/>
			</x>
			<haxe_doc>* Regexp for SVG size.</haxe_doc>
		</SVG_SIZE>
		<SHAPES public="1" static="1">
			<e path="pixi.core.Shapes"/>
			<haxe_doc>* Constants that identify shapes, mainly to prevent `instanceof` calls.</haxe_doc>
		</SHAPES>
		<PRECISION public="1" static="1">
			<e path="pixi.core.Precision"/>
			<haxe_doc>* Constants that specify float precision in shaders.</haxe_doc>
		</PRECISION>
		<TRANSFORM_MODE public="1" static="1">
			<e path="pixi.core.TransformModes"/>
			<haxe_doc>* Constants that specify the transform type.</haxe_doc>
		</TRANSFORM_MODE>
		<TEXT_GRADIENT public="1" static="1">
			<e path="pixi.core.TextGradients"/>
			<haxe_doc>* Constants that define the type of gradient on text.</haxe_doc>
		</TEXT_GRADIENT>
		<UPDATE_PRIORITY public="1" static="1">
			<e path="pixi.core.UpdatePriotities"/>
			<haxe_doc>* Represents the update priorities used by internal PIXI classes when registered with
	 * the {@link PIXI.ticker.Ticker} object. Higher priority items are updated first and lower
	 * priority items, such as render, should go later.</haxe_doc>
		</UPDATE_PRIORITY>
		<meta><m n=":native"><e>"PIXI"</e></m></meta>
	</class>
	<enum path="pixi.core.AlphaModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<NO_PREMULTIPLIED_ALPHA/>
		<PREMULTIPLY_ON_UPLOAD/>
		<PREMULTIPLIED_ALPHA/>
		<NPM/>
		<UNPACK/>
		<PMA/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.ALPHA_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.BufferBits" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<COLOR/>
		<DEPTH/>
		<STENCIL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.BUFFER_BITS"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.ClearModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<BLEND/>
		<CLEAR/>
		<BLIT/>
		<NO/>
		<YES/>
		<AUTO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.CLEAR_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.RendererType" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<UNKNOWN/>
		<WEBGL/>
		<CANVAS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.RENDERER_TYPE"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.ScaleModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<DEFAULT/>
		<LINEAR/>
		<NEAREST/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.SCALE_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.WrapModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<DEFAULT/>
		<CLAMP/>
		<REPEAT/>
		<MIRRORED_REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.WRAP_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.GCModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<DEFAULT/>
		<AUTO/>
		<MANUAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.GC_MODES"</e></m>
		</meta>
	</enum>
	<typedef path="pixi.core.GraphicCurves" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<a>
			<minSegments><x path="Int"/></minSegments>
			<maxSegments><x path="Int"/></maxSegments>
			<maxLength><x path="Int"/></maxLength>
			<adaptive><x path="Bool"/></adaptive>
		</a>
		<meta><m n=":native"><e>"PIXI.GRAPHICS_CURVES"</e></m></meta>
	</typedef>
	<enum path="pixi.core.MaskTypes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<NONE/>
		<SCISSOR/>
		<STENCIL/>
		<SPRITE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.MASK_TYPES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.Env" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<WEBGL_LEGACY/>
		<WEBGL/>
		<WEBGL2/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.ENV"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.BlendModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<NORMAL/>
		<ADD/>
		<MULTIPLY/>
		<SCREEN/>
		<OVERLAY/>
		<DARKEN/>
		<LIGHTEN/>
		<COLOR_DODGE/>
		<COLOR_BURN/>
		<HARD_LIGHT/>
		<SOFT_LIGHT/>
		<DIFFERENCE/>
		<EXCLUSION/>
		<HUE/>
		<SATURATION/>
		<COLOR/>
		<LUMINOSITY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.BLEND_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.DrawModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<POINTS/>
		<LINES/>
		<LINE_LOOP/>
		<LINE_STRIP/>
		<TRIANGLES/>
		<TRIANGLE_STRIP/>
		<TRIANGLE_FAN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.DRAW_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.Shapes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<POLY/>
		<RECT/>
		<CIRC/>
		<ELIP/>
		<RREC/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.SHAPES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.Precision" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<LOW/>
		<MEDIUM/>
		<HIGH/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.PRECISION"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.TextGradients" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<LINEAR_VERTICAL/>
		<LINEAR_HORIZONTAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.TEXT_GRADIENT"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.TransformModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<STATIC/>
		<DYNAMIC/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.TRANSFORM_MODE"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.UpdatePriotities" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<INTERACTION/>
		<HIGH/>
		<NORMAL/>
		<LOW/>
		<UTILITY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.UPDATE_PRIORITY"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.MipmapModes" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<OFF/>
		<POW2/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.MIPMAP_MODES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.MSAAQuality" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<NONE/>
		<LOW/>
		<MEDIUM/>
		<HIGH/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.MSAA_QUALITY"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.Types" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<UNSIGNED_BYTE/>
		<UNSIGNED_SHORT/>
		<UNSIGNED_SHORT_5_6_5/>
		<UNSIGNED_SHORT_4_4_4_4/>
		<UNSIGNED_SHORT_5_5_5_1/>
		<FLOAT/>
		<HALF_FLOAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.TYPES"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.Formats" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<RGBA/>
		<RGB/>
		<ALPHA/>
		<LUMINANCE/>
		<LUMINANCE_ALPHA/>
		<DEPTH_COMPONENT/>
		<DEPTH_STENCIL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.FORMATS"</e></m>
		</meta>
	</enum>
	<enum path="pixi.core.Targets" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<TEXTURE_2D/>
		<TEXTURE_CUBE_MAP/>
		<TEXTURE_2D_ARRAY/>
		<TEXTURE_CUBE_MAP_POSITIVE_X/>
		<TEXTURE_CUBE_MAP_NEGATIVE_X/>
		<TEXTURE_CUBE_MAP_POSITIVE_Y/>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y/>
		<TEXTURE_CUBE_MAP_POSITIVE_Z/>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"PIXI.TARGETS"</e></m>
		</meta>
	</enum>
	<typedef path="pixi.core.ISize" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Pixi.hx" module="pixi.core.Pixi">
		<a>
			<width><x path="Float"/></width>
			<height><x path="Float"/></height>
		</a>
		<meta><m n=":native"><e>"PIXI.ISize"</e></m></meta>
	</typedef>
	<typedef path="pixi.core.RenderOptions" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/RenderOptions.hx"><a>
	<width>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</width>
	<view>
		<x path="Null"><c path="js.html.CanvasElement"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<transparent>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</transparent>
	<resolution>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</resolution>
	<preserveDrawingBuffer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<powerPreference>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</powerPreference>
	<height>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</height>
	<forceFXAA>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</forceFXAA>
	<context>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* If WebGL context already exists, all parameters must be taken from it.</haxe_doc>
	</context>
	<clearBeforeRender>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</clearBeforeRender>
	<backgroundColor>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</backgroundColor>
	<autoDensity>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Resizes renderer view in CSS pixels to allow for resolutions other than 1.</haxe_doc>
	</autoDensity>
	<antialias>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</antialias>
</a></typedef>
	<class path="pixi.core.Shader" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/Shader.hx" extern="1">
		<checkPrecision public="1" set="method">
			<f a="src">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[*
	 * @param	src {String|Array<String>}
	 * @return {String|Array<String>}]]></haxe_doc>
		</checkPrecision>
		<bind public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Uses this shader</haxe_doc>
		</bind>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys this shader</haxe_doc>
		</destroy>
		<gl public="1"><d/></gl>
		<program public="1"><d/></program>
		<attributes public="1"><d/></attributes>
		<uniforms public="1"><d/></uniforms>
		<new public="1" set="method">
			<f a="gl:vertexSrc:framentSrc:?attributeLocations:?precision">
				<d/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Wrapper class, webGL Shader for Pixi.
	 * Adds precision string if vertexSrc or fragmentSrc have no mention of it.
	 *
	 * @class
	 * @extends GLShader
	 * @memberof PIXI
	 * @param gl {WebGLRenderingContext} The current WebGL rendering context
	 * @param vertexSrc {String|Array<String>} The vertex shader source as an array of strings.
	 * @param fragmentSrc {String|Array<String>} The fragment shader source as an array of strings.
	 * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit. e.g. {position:0, uvs:1}.
	 * @param {String} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.]]></haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Shader"</e></m></meta>
	</class>
	<class path="pixi.core.display.Bounds" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/display/Bounds.hx" extern="1">
		<minX public="1">
			<x path="Float"/>
			<haxe_doc>* @member {number}
	 * @default 0</haxe_doc>
		</minX>
		<minY public="1">
			<x path="Float"/>
			<haxe_doc>* @member {number}
	 * @default 0</haxe_doc>
		</minY>
		<maxX public="1">
			<x path="Float"/>
			<haxe_doc>* @member {number}
	 * @default 0</haxe_doc>
		</maxX>
		<maxY public="1">
			<x path="Float"/>
			<haxe_doc>* @member {number}
	 * @default 0</haxe_doc>
		</maxY>
		<rect public="1"><c path="pixi.core.math.shapes.Rectangle"/></rect>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks if bounds are empty.
	 *
	 * @return {Bool} True if empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the bounds and resets.</haxe_doc>
		</clear>
		<getRectangle public="1" set="method">
			<f a="rect">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
			</f>
			<haxe_doc>* Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle
	 * It is not guaranteed that it will return tempRect
	 *
	 * @param {Rectangle} rect - temporary object will be used if AABB is not empty
	 * @return {Rectangle} A rectangle of the bounds</haxe_doc>
		</getRectangle>
		<addPoint public="1" set="method">
			<f a="point">
				<c path="pixi.core.math.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* This function should be inlined when its possible.
	 *
	 * @param {Point} point - The point to add.</haxe_doc>
		</addPoint>
		<addQuad public="1" set="method">
			<f a="vertices">
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a quad, not transformed
	 *
	 * @param {Float32Array} vertices - The verts to add.</haxe_doc>
		</addQuad>
		<addFrame public="1" set="method">
			<f a="transform:x0:y0:x1:y1">
				<c path="pixi.core.display.Transform"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds sprite frame, transformed.</haxe_doc>
		</addFrame>
		<addVertices public="1" set="method">
			<f a="transform:vertices:beginOffset:endOffset">
				<c path="pixi.core.display.Transform"/>
				<c path="js.lib.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add an array of vertices</haxe_doc>
		</addVertices>
		<addBounds public="1" set="method">
			<f a="bounds">
				<c path="pixi.core.display.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds other Bounds
	 *</haxe_doc>
		</addBounds>
		<addBoundsMask public="1" set="method">
			<f a="bounds:mask">
				<c path="pixi.core.display.Bounds"/>
				<c path="pixi.core.display.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds other Bounds, masked with Bounds</haxe_doc>
		</addBoundsMask>
		<addBoundsArea public="1" set="method">
			<f a="bounds:area">
				<c path="pixi.core.display.Bounds"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds other Bounds, masked with Rectangle</haxe_doc>
		</addBoundsArea>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"PIXI.Bounds"</e></m></meta>
	</class>
	<typedef path="pixi.core.display.DestroyOptions" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/display/DisplayObject.hx" module="pixi.core.display.DisplayObject"><a>
	<texture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
	 * Should it destroy the texture of the child sprite</haxe_doc>
	</texture>
	<children>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* {boolean} [options.children=false] - if set to true, all the children will have their destroy
	 *  method called as well. 'options' will be passed on to those calls.</haxe_doc>
	</children>
	<baseTexture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
	 * Should it destroy the base texture of the child sprite</haxe_doc>
	</baseTexture>
</a></typedef>
	<class path="pixi.core.display.Transform" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/display/Transform.hx" extern="1">
		<IDENTITY public="1" static="1">
			<c path="pixi.core.display.Transform"/>
			<haxe_doc>* A default (identity) transform</haxe_doc>
		</IDENTITY>
		<_currentLocalID>
			<x path="Float"/>
			<haxe_doc>* The locally unique ID of the local transform used to calculate the current local transformation matrix.</haxe_doc>
		</_currentLocalID>
		<_cx>
			<x path="Float"/>
			<haxe_doc>* The X-coordinate value of the normalized local X axis, the first column of the local transformation matrix without a scale.</haxe_doc>
		</_cx>
		<_cy>
			<x path="Float"/>
			<haxe_doc>* The Y-coordinate value of the normalized local Y axis, the first column of the local transformation matrix without a scale.</haxe_doc>
		</_cy>
		<_localID>
			<x path="Float"/>
			<haxe_doc>* The locally unique ID of the local transform.</haxe_doc>
		</_localID>
		<_parentID>
			<x path="Float"/>
			<haxe_doc>* The locally unique ID of the parent's world transform used to calculate the current world transformation matrix.</haxe_doc>
		</_parentID>
		<_roation>
			<x path="Float"/>
			<haxe_doc>* The rotation amount.</haxe_doc>
		</_roation>
		<_sx>
			<x path="Float"/>
			<haxe_doc>* The Y-coordinate value of the normalized local X axis, the first column of the local transformation matrix without a scale.</haxe_doc>
		</_sx>
		<_sy>
			<x path="Float"/>
			<haxe_doc>* The Y-coordinate value of the normalized local Y axis, the first column of the local transformation matrix without a scale.</haxe_doc>
		</_sy>
		<_worldID>
			<x path="Float"/>
			<haxe_doc>* The locally unique ID of the world transform.</haxe_doc>
		</_worldID>
		<localTransform public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* The local transformation matrix.</haxe_doc>
		</localTransform>
		<pivot public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The pivot point of the displayObject that it rotates around.</haxe_doc>
		</pivot>
		<position public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The coordinate of the object relative to the local coordinates of the parent.</haxe_doc>
		</position>
		<rotation public="1">
			<x path="Float"/>
			<haxe_doc>* The rotation of the object in radians.</haxe_doc>
		</rotation>
		<scale public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The scale factor of the object.</haxe_doc>
		</scale>
		<skew public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The skew amount, on the x and y axis.</haxe_doc>
		</skew>
		<worldTransform public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* The world transformation matrix.</haxe_doc>
		</worldTransform>
		<onChange set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Called when a value changes.</haxe_doc>
		</onChange>
		<setFromMatrix public="1" set="method">
			<f a="matrix">
				<c path="pixi.core.math.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Decomposes a matrix and sets the transforms properties based on it.
	 * @param	matrix The matrix to decompose</haxe_doc>
		</setFromMatrix>
		<updateLocalTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the local transformation matrix.</haxe_doc>
		</updateLocalTransform>
		<updateSkew public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Called when the skew or the rotation changes.</haxe_doc>
		</updateSkew>
		<updateTransform public="1" set="method">
			<f a="parentTransform">
				<c path="pixi.core.display.Transform"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the local and the world transformation matrices.
	 * @param	parentTransform The parent transform</haxe_doc>
		</updateTransform>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Transform that takes care about its versions
	 *
	 * @class
	 * @memberof PIXI</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Transform"</e></m></meta>
	</class>
	<class path="pixi.core.graphics.BatchGeometry" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/graphics/BatchGeometry.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<_buffer>
			<c path="pixi.core.renderers.webgl.Buffer"/>
			<haxe_doc>* Buffer used for position, color, texture IDs</haxe_doc>
		</_buffer>
		<_indexBuffer>
			<c path="pixi.core.renderers.webgl.Buffer"/>
			<haxe_doc>* Index buffer data</haxe_doc>
		</_indexBuffer>
		<new public="1" set="method">
			<f a="?_static" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ _static : false }</e></m></meta>
		</new>
		<meta><m n=":native"><e>"PIXI.BatchGeometry"</e></m></meta>
	</class>
	<class path="pixi.core.graphics.FillStyle" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/graphics/FillStyle.hx" extern="1">
		<alpha public="1">
			<x path="Float"/>
			<haxe_doc>* The alpha value used when filling the Graphics object.</haxe_doc>
		</alpha>
		<visible public="1">
			<x path="Bool"/>
			<haxe_doc>* If the current fill is visible.</haxe_doc>
		</visible>
		<color public="1">
			<x path="Int"/>
			<haxe_doc>* The hex color value used when coloring the Graphics object.</haxe_doc>
		</color>
		<matrix public="1">
			<c path="String"/>
			<haxe_doc>* The transform applied to the texture.</haxe_doc>
		</matrix>
		<texture public="1">
			<c path="String"/>
			<haxe_doc>* The texture to be used for the fill.</haxe_doc>
		</texture>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.graphics.FillStyle"/></f>
			<haxe_doc>* Clones the object
	 * @return the clone</haxe_doc>
		</clone>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroy and don't use after this</haxe_doc>
		</destroy>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Reset</haxe_doc>
		</reset>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Fill style object for Graphics.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.FillStyle"</e></m></meta>
	</class>
	<class path="pixi.core.graphics.Graphics" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/graphics/Graphics.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<CURVES public="1" set="null" static="1"><a>
	<minSegments><x path="Int"/></minSegments>
	<maxSegments><x path="Int"/></maxSegments>
	<maxLength><x path="Int"/></maxLength>
	<adaptive><x path="Bool"/></adaptive>
</a></CURVES>
		<batches>
			<c path="Array"><d/></c>
			<haxe_doc>* A collections of batches! These can be drawn by the renderer batch system.</haxe_doc>
		</batches>
		<batchTint>
			<x path="Float"/>
			<haxe_doc>* Update dirty for limiting calculating tints for batches.</haxe_doc>
		</batchTint>
		<currentPath>
			<c path="pixi.core.math.shapes.Polygon"/>
			<haxe_doc>* Current path</haxe_doc>
		</currentPath>
		<blendMode public="1">
			<e path="pixi.core.BlendModes"/>
			<haxe_doc>* The blend mode to be applied to the graphic shape. Apply a value of PIXI.BLEND_MODES.NORMAL to reset the blend mode.</haxe_doc>
		</blendMode>
		<fill public="1" set="null">
			<c path="pixi.core.graphics.FillStyle"/>
			<haxe_doc>* The current fill style.</haxe_doc>
		</fill>
		<geometry public="1" set="null">
			<c path="pixi.core.graphics.GraphicsGeometry"/>
			<haxe_doc>* Includes vertex positions, face indices, normals, colors, UVs, and custom attributes within buffers, reducing the cost of passing all this data to the GPU. Can be shared between multiple Mesh or Graphics objects.</haxe_doc>
		</geometry>
		<line public="1" set="null">
			<c path="pixi.core.graphics.LineStyle"/>
			<haxe_doc>* The current line style.</haxe_doc>
		</line>
		<pluginName public="1">
			<c path="String"/>
			<haxe_doc>* Renderer plugin for batching</haxe_doc>
		</pluginName>
		<shader public="1">
			<c path="pixi.core.Shader"/>
			<haxe_doc>* Represents the vertex and fragment shaders that processes the geometry and runs on the GPU. Can be shared between multiple Graphics objects.</haxe_doc>
		</shader>
		<state public="1">
			<c path="pixi.core.renderers.webgl.State"/>
			<haxe_doc>* Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g., blend mode, culling, depth testing, direction of rendering triangles, backface, etc.</haxe_doc>
		</state>
		<tint public="1">
			<x path="Int"/>
			<haxe_doc>* The tint applied to the graphic shape. This is a hex value. A value of 0xFFFFFF will remove any tint effect.</haxe_doc>
		</tint>
		<vertexData>
			<c path="js.lib.Float32Array"/>
			<haxe_doc>*  Copy of the object vertex data.</haxe_doc>
		</vertexData>
		<_calculateBounds set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Retrieves the bounds of the graphic shape as a rectangle object</haxe_doc>
		</_calculateBounds>
		<_initCurve set="method">
			<f a="?x:?y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initialize the curve
	 * @param	x
	 * @param	y</haxe_doc>
		</_initCurve>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* The arcTo() method creates an arc/curve between two tangents on the canvas.
	 *
	 * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
	 *
	 * @param x1 {Float} The x-coordinate of the beginning of the arc
	 * @param y1 {Float} The y-coordinate of the beginning of the arc
	 * @param x2 {Float} The x-coordinate of the end of the arc
	 * @param y2 {Float} The y-coordinate of the end of the arc
	 * @param radius {Float} The radius of the arc
	 * @return {Graphics}</haxe_doc>
		</arcTo>
		<arc public="1" set="method">
			<f a="cx:cy:radius:startAngle:endAngle:?anticlockwise">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* The arc method creates an arc/curve (used to create circles, or parts of circles).
	 *
	 * @param cx {Float} The x-coordinate of the center of the circle
	 * @param cy {Float} The y-coordinate of the center of the circle
	 * @param radius {Float} The radius of the circle
	 * @param startAngle {Float} The starting angle, in radians (0 is at the 3 o'clock position of the arc's circle)
	 * @param endAngle {Float} The ending angle, in radians
	 * @param anticlockwise {Bool} Optional. Specifies whether the drawing should be counterclockwise or clockwise. False is default, and indicates clockwise, while true indicates counter-clockwise.</haxe_doc>
		</arc>
		<beginFill public="1" set="method">
			<f a="?color:?alpha">
				<x path="Int"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Specifies a simple one-color fill that subsequent calls to other Graphics methods
	 * (such as lineTo() or drawCircle()) use when drawing.
	 *
	 * @param color {Int} the color of the fill
	 * @param alpha {Float} the alpha of the fill
	 * @return {Graphics}</haxe_doc>
		</beginFill>
		<beginHole public="1" set="method">
			<f a=""><c path="pixi.core.graphics.Graphics"/></f>
			<haxe_doc>* Begin adding holes to the last draw shape IMPORTANT: holes must be fully inside a shape to work Also weirdness ensues if holes overlap! Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer, please use moveTo lineTo, quadraticCurveTo if you rely on pixi-legacy bundle.
	 * @return Returns itself.</haxe_doc>
		</beginHole>
		<beginTextureFill public="1" set="method">
			<f a="options">
				<d/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Begin the texture fill
	 * @param	options
	 * @return This Graphics object. Good for chaining method calls</haxe_doc>
		</beginTextureFill>
		<bezierCurveTo public="1" set="method">
			<f a="cpX:cpY:cpX2:cpY2:toX:toY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Calculate the points for a bezier curve and then draws it.
	 *
	 * @param cpX {Float} Control point x
	 * @param cpY {Float} Control point y
	 * @param cpX2 {Float} Second Control point x
	 * @param cpY2 {Float} Second Control point y
	 * @param toX {Float} Destination point x
	 * @param toY {Float} Destination point y
	 * @return {Graphics}</haxe_doc>
		</bezierCurveTo>
		<calculateTints set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Recalcuate the tint by applying tin to batches using Graphics tint.</haxe_doc>
		</calculateTints>
		<calculateVertices set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* If there's a transform update or a change to the shape of the geometry, recaculate the vertices.</haxe_doc>
		</calculateVertices>
		<clear public="1" set="method">
			<f a=""><c path="pixi.core.graphics.Graphics"/></f>
			<haxe_doc>* Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
	 *
	 * @return {Graphics}</haxe_doc>
		</clear>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.graphics.Graphics"/></f>
			<haxe_doc>* Creates a new Graphics object with the same values as this one.
	 * Note that the only the properties of the object are cloned, not its transform (position,scale,etc)
	 *
	 * @return {Graphics}</haxe_doc>
		</clone>
		<containsPoint public="1" set="method">
			<f a="point">
				<c path="pixi.core.math.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Tests if a point is inside this graphics object
	 *
	 * @param point {Point} the point to test
	 * @return {Bool} the result of the test</haxe_doc>
		</containsPoint>
		<drawCircle public="1" set="method">
			<f a="x:y:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Draws a circle.
	 *
	 * @param x {Float} The X coordinate of the center of the circle
	 * @param y {Float} The Y coordinate of the center of the circle
	 * @param radius {Float} The radius of the circle
	 * @return {Graphics}</haxe_doc>
		</drawCircle>
		<drawRect public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>*
	 * @param x {Float} The X coord of the top-left of the rectangle
	 * @param y {Float} The Y coord of the top-left of the rectangle
	 * @param width {Float} The width of the rectangle
	 * @param height {Float} The height of the rectangle
	 * @return {Graphics}</haxe_doc>
		</drawRect>
		<drawRoundedRect public="1" set="method">
			<f a="x:y:width:height:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>*
	 * @param x {Float} The X coord of the top-left of the rectangle
	 * @param y {Float} The Y coord of the top-left of the rectangle
	 * @param width {Float} The width of the rectangle
	 * @param height {Float} The height of the rectangle
	 * @param radius {Float} Radius of the rectangle corners</haxe_doc>
		</drawRoundedRect>
		<drawEllipse public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Draws an ellipse.
	 *
	 * @param x {Float} The X coordinate of the center of the ellipse
	 * @param y {Float} The Y coordinate of the center of the ellipse
	 * @param width {Float} The half width of the ellipse
	 * @param height {Float} The half height of the ellipse
	 * @return {Graphics}</haxe_doc>
		</drawEllipse>
		<drawPolygon public="1" set="method">
			<f a="path">
				<c path="Array"><x path="Float"/></c>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Draws a polygon using the given path.
	 *
	 * @param path {Array} The path data used to construct the polygon.
	 * @return {Graphics}</haxe_doc>
		</drawPolygon>
		<drawShape public="1" set="method">
			<f a="shape">
				<c path="pixi.core.math.shapes.Circle"/>
				<c path="pixi.core.graphics.GraphicsData"/>
			</f>
			<haxe_doc>* Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	 *
	 * @param {Circle|Rectangle|Ellipse|Line|Polygon} shape The Shape object to draw.
	 * @return {GraphicsData} The generated GraphicsData object.</haxe_doc>
			<overloads>
				<drawShape public="1" set="method">
					<f a="shape">
						<c path="pixi.core.math.shapes.Rectangle"/>
						<c path="pixi.core.graphics.GraphicsData"/>
					</f>
					<haxe_doc>* Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	 *
	 * @param {Circle|Rectangle|Ellipse|Line|Polygon} shape The Shape object to draw.
	 * @return {GraphicsData} The generated GraphicsData object.</haxe_doc>
				</drawShape>
				<drawShape public="1" set="method">
					<f a="shape">
						<c path="pixi.core.math.shapes.Ellipse"/>
						<c path="pixi.core.graphics.GraphicsData"/>
					</f>
					<haxe_doc>* Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	 *
	 * @param {Circle|Rectangle|Ellipse|Line|Polygon} shape The Shape object to draw.
	 * @return {GraphicsData} The generated GraphicsData object.</haxe_doc>
				</drawShape>
				<drawShape public="1" set="method">
					<f a="shape">
						<c path="pixi.core.math.shapes.Polygon"/>
						<c path="pixi.core.graphics.GraphicsData"/>
					</f>
					<haxe_doc>* Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	 *
	 * @param {Circle|Rectangle|Ellipse|Line|Polygon} shape The Shape object to draw.
	 * @return {GraphicsData} The generated GraphicsData object.</haxe_doc>
				</drawShape>
			</overloads>
		</drawShape>
		<drawStar public="1" set="method">
			<f a="x:y:points:radius:?innerRadius:?rotation" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0 }</e></m></meta>
			<haxe_doc><![CDATA[* Draw a star shape with an abitrary number of points.
	 *
	 * @param {Float} x - Center X position of the star
	 * @param {Float} y - Center Y position of the star
	 * @param {Int} points - The number of points of the star, must be > 1
	 * @param {Float} radius - The outer radius of the star
	 * @param {Float} [innerRadius] - The inner radius between points, default half `radius`
	 * @param {Float} [rotation=0] - The rotation of the star in radians, where 0 is vertical
	 * @return {Graphics} This Graphics object. Good for chaining method calls]]></haxe_doc>
		</drawStar>
		<endFill public="1" set="method">
			<f a=""><c path="pixi.core.graphics.Graphics"/></f>
			<haxe_doc>* Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.
	 *
	 * @return {Graphics}</haxe_doc>
		</endFill>
		<finishPoly set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Finish the polygon object.</haxe_doc>
		</finishPoly>
		<generateCanvasTexture public="1" set="method">
			<f a="scaleMode:?resolution">
				<e path="pixi.core.ScaleModes"/>
				<x path="Float"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Generates a canvas texture.
	 *
	 * @param {ScaleModes} scaleMode - The scale mode of the texture.
	 * @param {Float} resolution - The resolution of the texture.
	 * @return {Texture} The new texture.</haxe_doc>
		</generateCanvasTexture>
		<isFastRect public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and
	 * masked with gl.scissor.
	 *
	 * @return {Bool} True if only 1 rect.</haxe_doc>
		</isFastRect>
		<lineStyle public="1" set="method">
			<f a="?lineWidth:?color:?alpha:?alignment:?native">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Specifies the line style used for subsequent calls to Graphics methods such as the lineTo() method or the drawCircle() method.
	 *
	 * @param lineWidth {Float} width of the line to draw, will update the objects stored style
	 * @param color {Int} color of the line to draw, will update the objects stored style
	 * @param alpha {Float} alpha of the line to draw, will update the objects stored style
	 * @param alignment {Float} alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer)
	 * @param native {Bool} If true the lines will be draw using `LINES` instead of `TRIANGLE_STRIP`
	 * @return {Graphics}</haxe_doc>
		</lineStyle>
		<lineTextureStyle public="1" set="method">
			<f a="options">
				<d/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Like line style but support texture for line fill.
	 * @param	options width, texture, color, alpha, matrix, alignment, native
	 * @return {Graphics}</haxe_doc>
		</lineTextureStyle>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Moves the current drawing position to x, y.
	 *
	 * @param x {Float} the X coordinate to move to
	 * @param y {Float} the Y coordinate to move to
	 * @return {Graphics}</haxe_doc>
		</moveTo>
		<lineTo public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Draws a line using the current line style from the current drawing position to (x, y);
	 * The current drawing position is then set to (x, y).
	 *
	 * @param x {Float} the X coordinate to draw to
	 * @param y {Float} the Y coordinate to draw to
	 * @return {Graphics}</haxe_doc>
		</lineTo>
		<quadraticCurveTo public="1" set="method">
			<f a="cpX:cpY:toX:toY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Calculate the points for a quadratic bezier curve and then draws it.
	 * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
	 *
	 * @param cpX {Float} Control point x
	 * @param cpY {Float} Control point y
	 * @param toX {Float} Destination point x
	 * @param toY {Float} Destination point y
	 * @return {Graphics}</haxe_doc>
		</quadraticCurveTo>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="pixi.core.math.Matrix"/>
				<c path="pixi.core.graphics.Graphics"/>
			</f>
			<haxe_doc>* Apply a matrix to the positional data.
	 * @param	matrix Matrix to use for transform current shape.
	 * @return Returns itself.</haxe_doc>
		</setMatrix>
		<closePath public="1" set="method">
			<f a=""><c path="pixi.core.graphics.Graphics"/></f>
			<haxe_doc>* Closes the current path.
	 *
	 * @return {Graphics} Returns itself.</haxe_doc>
		</closePath>
		<new public="1" set="method">
			<f a="?nativeLines" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nativeLines : false }</e></m></meta>
			<haxe_doc>* The Graphics class contains methods used to draw primitive shapes such as lines, circles and
	 * rectangles to the display, and color and fill them.
	 *
	 * @param {Bool} [nativeLines=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP
	 *
	 * @class
	 * @extends Container
	 * @namespace PIXI</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Graphics"</e></m></meta>
	</class>
	<class path="pixi.core.graphics.GraphicsData" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/graphics/GraphicsData.hx" extern="1">
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<nativeLines public="1">
			<x path="Bool"/>
			<haxe_doc>* If true the lines will be draw using LINES instead of TRIANGLE_STRIP
	 *
	 * @member {Bool}</haxe_doc>
		</nativeLines>
		<lineColor public="1"><x path="Int"/></lineColor>
		<lineAlpha public="1"><x path="Float"/></lineAlpha>
		<fillColor public="1"><x path="Int"/></fillColor>
		<fillAlpha public="1"><x path="Float"/></fillAlpha>
		<fill public="1"><x path="Bool"/></fill>
		<holes public="1"><c path="Array"><d/></c></holes>
		<shape public="1"><d/></shape>
		<type public="1"><x path="Int"/></type>
		<addHole public="1" set="method">
			<f a="shape">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a hole to the shape.
	 *
	 * @param {Rectangle|Circle} shape - The shape of the hole.</haxe_doc>
		</addHole>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.graphics.GraphicsData"/></f>
			<haxe_doc>* Creates a new GraphicsData object with the same values as this one.
	 *
	 * @return {GraphicsData}</haxe_doc>
		</clone>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the Graphics data.</haxe_doc>
		</destroy>
		<new public="1" set="method">
			<f a="lineWidth:lineColor:lineAlpha:fillColor:fillAlpha:fill:nativeLines:shape">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A GraphicsData object.
	 *
	 * @class
	 * @memberof PIXI
	 * @param {Float} lineWidth - the width of the line to draw
	 * @param {Int} lineColor - the color of the line to draw
	 * @param {Float} lineAlpha - the alpha of the line to draw
	 * @param {Int} fillColor - the color of the fill
	 * @param {Float} fillAlpha - the alpha of the fill
	 * @param {Bool} fill - whether or not the shape is filled with a colour
	 * @param {Bool} nativeLines - the method for drawing lines
	 * @param {Circle|Rectangle|Ellipse|Polygon} shape - The shape object to draw.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.GraphicsData"</e></m></meta>
	</class>
	<class path="pixi.core.graphics.GraphicsGeometry" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/graphics/GraphicsGeometry.hx" extern="1">
		<extends path="pixi.core.graphics.BatchGeometry"/>
		<BATCHABLE_SIZE public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The maximum number of points to consider an object "batchable", able to be batched by the renderer's batch system.</haxe_doc>
		</BATCHABLE_SIZE>
		<_bounds>
			<c path="pixi.core.display.Bounds"/>
			<haxe_doc>* Cached bounds.</haxe_doc>
		</_bounds>
		<batchDirty>
			<x path="Int"/>
			<haxe_doc>* Batches need to regenerated if the geometry is updated.</haxe_doc>
		</batchDirty>
		<batches>
			<c path="Array"><d/></c>
			<haxe_doc>* Intermediate abstract format sent to batch system. Can be converted to drawCalls or to batchable objects.</haxe_doc>
		</batches>
		<bounds public="1" set="null">
			<c path="pixi.core.display.Bounds"/>
			<haxe_doc>* Get the current bounds of the graphic geometry.</haxe_doc>
		</bounds>
		<boundsDirty>
			<x path="Int"/>
			<haxe_doc>* The bounds dirty flag.</haxe_doc>
		</boundsDirty>
		<boundsPadding public="1">
			<x path="Float"/>
			<haxe_doc>* Padding to add to the bounds.</haxe_doc>
		</boundsPadding>
		<cacheDirty>
			<x path="Int"/>
			<haxe_doc>* Used to check if the cache is dirty.</haxe_doc>
		</cacheDirty>
		<cleanDirty>
			<x path="Int"/>
			<haxe_doc>* Used to detect if we cleared the graphicsData.</haxe_doc>
		</cleanDirty>
		<closePointEps public="1">
			<x path="Float"/>
			<haxe_doc>* Minimal distance between points that are considered different. Affects line tesselation.</haxe_doc>
		</closePointEps>
		<colors>
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* The collection of colors</haxe_doc>
		</colors>
		<dirty>
			<x path="Int"/>
			<haxe_doc>* Used to detect if the graphics object has changed.</haxe_doc>
		</dirty>
		<drawCells>
			<c path="Array"><d/></c>
			<haxe_doc>* List of current draw calls drived from the batches.</haxe_doc>
		</drawCells>
		<graphicsData>
			<c path="Array"><c path="pixi.core.graphics.GraphicsData"/></c>
			<haxe_doc>* The collection of drawn shapes.</haxe_doc>
		</graphicsData>
		<indices>
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* The indices of the vertices</haxe_doc>
		</indices>
		<points>
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>* An array of points to draw, 2 numbers per point</haxe_doc>
		</points>
		<shapeIndex>
			<x path="Int"/>
			<haxe_doc>* Index of the last batched shape in the stack of calls.</haxe_doc>
		</shapeIndex>
		<textureIds>
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* Reference to the texture IDs.</haxe_doc>
		</textureIds>
		<uvs>
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>* The UVs collection</haxe_doc>
		</uvs>
		<addColors set="method">
			<f a="colors:color:alpha:size">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add colors.
	 * @param	colors List of colors to add to
	 * @param	color Color to add
	 * @param	alpha Alpha to use
	 * @param	size Number of colors to add</haxe_doc>
		</addColors>
		<addTextureIds set="method">
			<f a="textureIds:id:size">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add texture id that the shader/fragment wants to use.</haxe_doc>
		</addTextureIds>
		<addUvs set="method">
			<f a="verts:uvs:texture:start:size:?matrix">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
				<c path="pixi.core.textures.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="pixi.core.math.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Generates the UVs for a shape.
	 * @param	verts Vertices
	 * @param	uvs UVs
	 * @param	texture Reference to Texture
	 * @param	start Index buffer start index
	 * @param	size The size/length for index buffer.
	 * @param	matrix Optional transform for all points.</haxe_doc>
		</addUvs>
		<adjustUvs public="1" set="method">
			<f a="uvs:texture:start:size">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Modify uvs array according to position of texture region Does not work with rotated or trimmed textures
	 * @param	uvs UVs
	 * @param	texture Reference to Texture
	 * @param	start Index buffer start index
	 * @param	size The size/length for index buffer.</haxe_doc>
		</adjustUvs>
		<buildDrawCalls set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Converts intermediate batches data to drawCalls.</haxe_doc>
		</buildDrawCalls>
		<calculateBounds set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update the local bounds of the object. Expensive to use performance-wise.</haxe_doc>
		</calculateBounds>
		<clear public="1" set="method">
			<f a=""><c path="pixi.core.graphics.GraphicsGeometry"/></f>
			<haxe_doc>* Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
	 * @return This GraphicsGeometry object. Good for chaining method calls</haxe_doc>
		</clear>
		<containsPoint public="1" set="method">
			<f a="point">
				<c path="pixi.core.math.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check to see if a point is contained within this geometry.
	 * @param	point Point to check if it's contained.
	 * @return true if the point is contained within geometry.</haxe_doc>
		</containsPoint>
		<drawHole public="1" set="method">
			<f a="shape:matrix">
				<d/>
				<c path="pixi.core.math.Matrix"/>
				<c path="pixi.core.graphics.GraphicsGeometry"/>
			</f>
			<haxe_doc>* Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	 * @param	shape The shape object to draw: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle
	 * @param	matrix Transform applied to the points of the shape.
	 * @return Returns geometry for chaining.</haxe_doc>
		</drawHole>
		<drawShape public="1" set="method">
			<f a="shape:fillStyle:lineStyle:matrix">
				<d/>
				<c path="pixi.core.graphics.FillStyle"/>
				<c path="pixi.core.graphics.LineStyle"/>
				<c path="pixi.core.math.Matrix"/>
				<c path="pixi.core.graphics.GraphicsGeometry"/>
			</f>
			<haxe_doc>* Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
	 * @param	shape The shape object to draw: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle
	 * @param	fillStyle Defines style of the fill.
	 * @param	lineStyle Defines style of the line.
	 * @param	matrix 	Transform applied to the points of the shape.
	 * @return Returns geometry for chaining.</haxe_doc>
		</drawShape>
		<invalidate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Call if you changed graphicsData manually. Empties all batch buffers.</haxe_doc>
		</invalidate>
		<isBatchable set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks to see if this graphics geometry can be batched. Currently it needs to be small enough and not contain any native lines.</haxe_doc>
		</isBatchable>
		<processHoles set="method">
			<f a="holes">
				<c path="Array"><c path="pixi.core.graphics.GraphicsData"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Process the holes data.
	 * @param	holes Holes to render</haxe_doc>
		</processHoles>
		<transformPoints set="method">
			<f a="points:matrix">
				<c path="Array"><x path="Float"/></c>
				<c path="pixi.core.math.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Transform points using matrix.
	 * @param	points Points to transform
	 * @param	matrix Transform matrix</haxe_doc>
		</transformPoints>
		<updateBatches public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Generates intermediate batch data. Either gets converted to drawCalls or used to convert to batch objects directly by the Graphics object.</haxe_doc>
		</updateBatches>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The Graphics class contains methods used to draw primitive shapes such as lines, circles and rectangles to the display, and to color and fill them.
	 * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive to re-tesselate using earcut. Consider using PIXI.Mesh for this use-case, it's much faster.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.GraphicsGeometry"</e></m></meta>
	</class>
	<class path="pixi.core.graphics.LineStyle" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/graphics/LineStyle.hx" extern="1">
		<extends path="pixi.core.graphics.FillStyle"/>
		<alignment public="1">
			<x path="Float"/>
			<haxe_doc>* The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).</haxe_doc>
		</alignment>
		<native public="1">
			<x path="Bool"/>
			<haxe_doc>* If true the lines will be draw using LINES instead of TRIANGLE_STRIP</haxe_doc>
		</native>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* The width (thickness) of any lines drawn.</haxe_doc>
		</width>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Fill style object for Graphics.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.LineStyle"</e></m></meta>
	</class>
	<class path="pixi.core.math.Matrix" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc>* @member {Float}
	 * @default 1</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>* @member {Float}
	 * @default 0</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>* @member {Float}
	 * @default 0</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>* @member {Float}
	 * @default 1</haxe_doc>
		</d>
		<tx public="1">
			<x path="Float"/>
			<haxe_doc>* @member {Float}
	 * @default 0</haxe_doc>
		</tx>
		<ty public="1">
			<x path="Float"/>
			<haxe_doc>* @member {Float}
	 * @default 0</haxe_doc>
		</ty>
		<fromArray public="1" set="method">
			<f a="array">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
	 *
	 * a = array[0]
	 * b = array[1]
	 * c = array[3]
	 * d = array[4]
	 * tx = array[2]
	 * ty = array[5]
	 *
	 * @param array {Float[]} The array that the matrix will be populated from.</haxe_doc>
		</fromArray>
		<toArray public="1" set="method">
			<f a="transpose">
				<x path="Bool"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Creates an array from the current Matrix object.
	 *
	 * @param transpose {Bool} Whether we need to transpose the matrix or not
	 * @return {Float[]} the newly created array which contains the matrix</haxe_doc>
		</toArray>
		<apply public="1" set="method">
			<f a="pos:?newPos">
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* Get a new position with the current transformation applied.
	 * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
	 *
	 * @param pos {Point} The origin
	 * @param [newPos] {Point} The point that the new position is assigned to (allowed to be same as input)
	 * @return {Point} The new point, transformed through this matrix</haxe_doc>
		</apply>
		<applyInverse public="1" set="method">
			<f a="pos:?newPos">
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* Get a new position with the inverse of the current transformation applied.
	 * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
	 *
	 * @param pos {Point} The origin
	 * @param [newPos] {Point} The point that the new position is assigned to (allowed to be same as input)
	 * @return {Point} The new point, inverse-transformed through this matrix</haxe_doc>
		</applyInverse>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.math.Matrix"/>
			</f>
			<haxe_doc>* Translates the matrix on the x and y.
	 *
	 * @param {Float} x
	 * @param {Float} y
	 * @return {Matrix} This matrix. Good for chaining method calls.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.math.Matrix"/>
			</f>
			<haxe_doc>* Applies a scale transformation to the matrix.
	 *
	 * @param {Float} x The amount to scale horizontally
	 * @param {Float} y The amount to scale vertically
	 * @return {Matrix} This matrix. Good for chaining method calls.</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="pixi.core.math.Matrix"/>
			</f>
			<haxe_doc>* Applies a rotation transformation to the matrix.
	 *
	 * @param {Float} angle - The angle in radians.
	 * @return {Matrix} This matrix. Good for chaining method calls.</haxe_doc>
		</rotate>
		<append public="1" set="method">
			<f a="matrix">
				<c path="pixi.core.math.Matrix"/>
				<c path="pixi.core.math.Matrix"/>
			</f>
			<haxe_doc>* Appends the given Matrix to this Matrix.
	 *
	 * @param {Matrix} matrix
	 * @return {Matrix} This matrix. Good for chaining method calls.</haxe_doc>
		</append>
		<prepend public="1" set="method">
			<f a="matrix">
				<c path="pixi.core.math.Matrix"/>
				<c path="pixi.core.math.Matrix"/>
			</f>
			<haxe_doc>* Prepends the given Matrix to this Matrix.
	 *
	 * @param {Matrix} matrix
	 * @return {Matrix} This matrix. Good for chaining method calls.</haxe_doc>
		</prepend>
		<identity public="1" set="method">
			<f a=""><c path="pixi.core.math.Matrix"/></f>
			<haxe_doc>* Resets this Matix to an identity (default) matrix.
	 *
	 * @return {Matrix} This matrix. Good for chaining method calls.</haxe_doc>
		</identity>
		<invert public="1" set="method"><f a=""><c path="pixi.core.math.Matrix"/></f></invert>
		<clone public="1" set="method"><f a=""><c path="pixi.core.math.Matrix"/></f></clone>
		<copy public="1" set="method"><f a="matrix">
	<c path="pixi.core.math.Matrix"/>
	<c path="pixi.core.math.Matrix"/>
</f></copy>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
			<haxe_doc>* The Matrix class is now an object, which makes it a lot faster,
	 * here is a representation of it :
	 * | a | b | tx|
	 * | c | d | ty|
	 * | 0 | 0 | 1 |
	 *
	 * @param {number} [a=1] - x scale
	 * @param {number} [b=0] - y skew
	 * @param {number} [c=0] - x skew
	 * @param {number} [d=1] - y scale
	 * @param {number} [tx=0] - x translation
	 * @param {number} [ty=0] - y translation
	 *
	 * @class
	 * @namespace PIXI</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Matrix"</e></m></meta>
	</class>
	<class path="pixi.core.math.ObservablePoint" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/ObservablePoint.hx" extern="1">
		<set public="1" set="method">
			<f a="?x:?y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the point to a new x and y position.
	 * If y is omitted, both x and y will be set to x.
	 *
	 * @param {Float} [x=0] - position of the point on the x axis
	 * @param {Float} [y=0] - position of the point on the y axis</haxe_doc>
		</set>
		<copyFrom public="1" set="method">
			<f a="point">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.math.Point"/>
					<c path="pixi.core.math.ObservablePoint"/>
				</x>
				<c path="pixi.core.math.ObservablePoint"/>
			</f>
			<haxe_doc>* Copies the data from another point
	 *
	 * @param {Point|ObservablePoint} point - point to copy from.
	 * @return {ObservablePoint} Returns itself.</haxe_doc>
		</copyFrom>
		<copyTo public="1" set="method">
			<f a="point">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.math.Point"/>
					<c path="pixi.core.math.ObservablePoint"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.math.Point"/>
					<c path="pixi.core.math.ObservablePoint"/>
				</x>
			</f>
			<haxe_doc>* Copies x and y into the given point
	 *
	 * @param {Point|ObservablePoint} point - point to copy.
	 * @return {Point|ObservablePoint} Given point with values updated</haxe_doc>
		</copyTo>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* The position of the displayObject on the x axis relative to the local coordinates of the parent.
	 *
	 * @member {Float}</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* The position of the displayObject on the x axis relative to the local coordinates of the parent.
	 *
	 * @member {Float}</haxe_doc>
		</y>
		<new public="1" set="method">
			<f a="cb:scope:?x:?y">
				<d/>
				<d/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The Point object represents a location in a two-dimensional coordinate system, where x represents
	 * the horizontal axis and y represents the vertical axis.
	 * An observable point is a point that triggers a callback when the point's position is changed.
	 *
	 * @class
	 * @memberof PIXI
	 *
	 * @param {Function} cb - callback when changed
	 * @param {object} scope - owner of callback
	 * @param {Float} [x=0] - position of the point on the x axis
	 * @param {Float} [y=0] - position of the point on the y axis</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.ObservablePoint"</e></m></meta>
	</class>
	<class path="pixi.core.math.Point" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/Point.hx" extern="1">
		<copyFrom public="1" set="method">
			<f a="p">
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* Copies x and y from the given point
	 *
	 * @param {Point} The point to copy from
	 * @return {Point} Returns itself.</haxe_doc>
		</copyFrom>
		<copyTo public="1" set="method">
			<f a="p">
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* Copies x and y into the given point
	 *
	 * @param {Point} p - The point to copy.
	 * @return {Point} Given point with values updated</haxe_doc>
		</copyTo>
		<equals public="1" set="method">
			<f a="p">
				<c path="pixi.core.math.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the given point is equal to this point
	 *
	 * @method copy
	 * @param {Point} the point to compare
	 * @return {Bool} the result of the comparison</haxe_doc>
		</equals>
		<set public="1" set="method">
			<f a="?x:?y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the point to a new x and y position.
	 * If y is ommited, both x and y will be set to x.
	 *
	 * @method set
	 * @param [x=0] {Float} position of the point on the x axis
	 * @param [y=0] {Float} position of the point on the y axis</haxe_doc>
		</set>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* @property x
	 * @type Float
	 * @default 0</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* @property y
	 * @type Float
	 * @default 0</haxe_doc>
		</y>
		<new public="1" set="method">
			<f a="?x:?y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The Point object represents a location in a two-dimensional coordinate system, where x represents
	 * the horizontal axis and y represents the vertical axis.
	 *
	 * @class
	 * @namespace PIXI
	 * @param [x=0] {number} position of the point on the x axis
	 * @param [y=0] {number} position of the point on the y axis</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Point"</e></m></meta>
	</class>
	<class path="pixi.core.math.shapes.Shape" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/shapes/Shape.hx" extern="1">
		<type public="1">
			<e path="pixi.core.Shapes"/>
			<haxe_doc>* Defines the type of the shape to avoid instanceof (Std.is) checks</haxe_doc>
		</type>
		<contains public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether the x and y coordinates passed to this function are contained within this Shape
	 *
	 * @method contains
	 * @param x {Float} The X coordinate of the point to test
	 * @param y {Float} The Y coordinate of the point to test
	 * @return {Bool} Whether the x/y coords are within this Rectangle</haxe_doc>
		</contains>
	</class>
	<class path="pixi.core.math.shapes.Circle" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/shapes/Circle.hx" extern="1">
		<extends path="pixi.core.math.shapes.Shape"/>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.math.shapes.Circle"/></f>
			<haxe_doc>* Creates a clone of this Circle instance
	 *
	 * @method clone
	 * @return {Circle} a copy of the circle</haxe_doc>
		</clone>
		<getBounds public="1" set="method">
			<f a=""><c path="pixi.core.math.shapes.Rectangle"/></f>
			<haxe_doc>* Returns the framing rectangle of the circle as a PIXI.Rectangle object
	 *
	 * @method getBounds
	 * @return {Rectangle} the framing rectangle</haxe_doc>
		</getBounds>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* @property x
	 * @type Float
	 * @default 0</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* @property y
	 * @type Float
	 * @default 0</haxe_doc>
		</y>
		<radius public="1">
			<x path="Float"/>
			<haxe_doc>* @property radius
	 * @type Float
	 * @default 0</haxe_doc>
		</radius>
		<new public="1" set="method">
			<f a="x:y:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The Circle object can be used to specify a hit area for displayObjects
	 *
	 * @class Circle
	 * @constructor
	 * @param x {Float} The X coordinate of the center of this circle
	 * @param y {Float} The Y coordinate of the center of this circle
	 * @param radius {Float} The radius of the circle</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Circle"</e></m></meta>
	</class>
	<class path="pixi.core.math.shapes.Ellipse" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/shapes/Ellipse.hx" extern="1">
		<extends path="pixi.core.math.shapes.Shape"/>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.math.shapes.Ellipse"/></f>
			<haxe_doc>* Creates a clone of this Ellipse instance
	 *
	 * @method clone
	 * @return {Ellipse} a copy of the ellipse</haxe_doc>
		</clone>
		<getBounds public="1" set="method">
			<f a=""><c path="pixi.core.math.shapes.Rectangle"/></f>
			<haxe_doc>* Returns the framing rectangle of the circle as a PIXI.Rectangle object
	 *
	 * @method getBounds
	 * @return {Rectangle} the framing rectangle</haxe_doc>
		</getBounds>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* @property x
	 * @type Float
	 * @default 0</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* @property y
	 * @type Float
	 * @default 0</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* @property width
	 * @type Float
	 * @default 0</haxe_doc>
		</width>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* @property height
	 * @type Float
	 * @default 0</haxe_doc>
		</height>
		<new public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The Ellipse object can be used to specify a hit area for displayObjects
	 *
	 * @class Ellipse
	 * @constructor
	 * @param x {Float} The X coordinate of the center of the ellipse
	 * @param y {Float} The Y coordinate of the center of the ellipse
	 * @param width {Float} The half width of this ellipse
	 * @param height {Float} The half height of this ellipse</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Ellipse"</e></m></meta>
	</class>
	<class path="pixi.core.math.shapes.Polygon" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/shapes/Polygon.hx" extern="1">
		<extends path="pixi.core.math.shapes.Shape"/>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.math.shapes.Polygon"/></f>
			<haxe_doc>* Creates a clone of this polygon
	 *
	 * @method clone
	 * @return {Polygon} a copy of the polygon</haxe_doc>
		</clone>
		<points public="1">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc><![CDATA[* An array of the points of this polygon
	 * @property points
	 * @type Array<Float>
	 *]]></haxe_doc>
		</points>
		<new public="1" set="method">
			<f a="points">
				<x path="haxe.extern.EitherType">
					<c path="Array"><c path="pixi.core.math.Point"/></c>
					<c path="Array"><x path="Float"/></c>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param {PIXI.Point[]|number[]} points - This can be an array of Points
	 *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or
	 *  the arguments passed can be all the points of the polygon e.g.
	 *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat
	 *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Polygon"</e></m></meta>
	</class>
	<class path="pixi.core.math.shapes.Rectangle" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/math/shapes/Rectangle.hx" extern="1">
		<extends path="pixi.core.math.shapes.Shape"/>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.math.shapes.Rectangle"/></f>
			<haxe_doc>* Creates a clone of this Rectangle instance
	 *
	 * @method clone
	 * @return {Rectangle} a copy of the rectangle</haxe_doc>
		</clone>
		<copy public="1" set="method">
			<f a="rectangle">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
			</f>
			<haxe_doc>* Copies another Rectangle to this one.
	 *
	 * @param  rectangle {Rectangle} The rectangle to copy
	 * @return {Rectangle} Returns itself.</haxe_doc>
		</copy>
		<contains public="1" set="method" override="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether the x and y coordinates given are contained within the rectangle.
	 *
	 * @param  x {Float} x coordinate of the point to test.
	 * @param  y {Float} y coordinate of the point to test.
	 * @return {Bool} whether the x and y coordinates are within this Rectangle.</haxe_doc>
		</contains>
		<pad public="1" set="method">
			<f a="padX:padY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pads this rectangle, making it grow in all directions.
	 *
	 * @param  padX {Float} The horizontal padding amount.
	 * @param  padY {Float} The vertical padding amount.</haxe_doc>
		</pad>
		<fit public="1" set="method">
			<f a="rectangle">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fits this rectangle around the passed one.
	 *
	 * @param  rectangle {Rectangle} The rectangle to fit.</haxe_doc>
		</fit>
		<enlarge public="1" set="method">
			<f a="rectangle">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Enlarges this rectangle to fit around the passed one.
	 *
	 * @param  rectangle {Rectangle} The rectangle to include.</haxe_doc>
		</enlarge>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>* @property x
	 * @type Float
	 * @default 0</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>* @property y
	 * @type Float
	 * @default 0</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* @property width
	 * @type Float
	 * @default 0</haxe_doc>
		</width>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* @property height
	 * @type Float
	 * @default 0</haxe_doc>
		</height>
		<left public="1">
			<x path="Float"/>
			<haxe_doc>* @property left
	 * @type Float
	 * @default 0</haxe_doc>
		</left>
		<right public="1">
			<x path="Float"/>
			<haxe_doc>* @property right
	 * @type Float
	 * @default 0</haxe_doc>
		</right>
		<top public="1">
			<x path="Float"/>
			<haxe_doc>* @property top
	 * @type Float
	 * @default 0</haxe_doc>
		</top>
		<bottom public="1">
			<x path="Float"/>
			<haxe_doc>* @property bottom
	 * @type Float
	 * @default 0</haxe_doc>
		</bottom>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.
	 *
	 * @class Rectangle
	 * @constructor
	 * @param x {Float} The X coord of the upper-left corner of the rectangle
	 * @param y {Float} The Y coord of the upper-left corner of the rectangle
	 * @param width {Float} The overall width of this rectangle
	 * @param height {Float} The overall height of this rectangle</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Rectangle"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.AbstractRenderer" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/AbstractRenderer.hx" extern="1">
		<extends path="pixi.interaction.EventEmitter"/>
		<_backgroundColor>
			<x path="Int"/>
			<haxe_doc>* The background color as a number.</haxe_doc>
		</_backgroundColor>
		<_backgroundColorRgba>
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* The background color as an [R, G, B] array.</haxe_doc>
		</_backgroundColorRgba>
		<_backgroundColorString>
			<c path="String"/>
			<haxe_doc>* The background color as a string.</haxe_doc>
		</_backgroundColorString>
		<_lastObjectRendered>
			<c path="pixi.core.display.DisplayObject"/>
			<haxe_doc>* The last root object that the renderer tried to render.</haxe_doc>
		</_lastObjectRendered>
		<_tempDisplayObjectParent>
			<c path="pixi.core.display.DisplayObject"/>
			<haxe_doc>* This temporary display object used as the parent of the currently being rendered item.</haxe_doc>
		</_tempDisplayObjectParent>
		<autoDensity>
			<x path="Bool"/>
			<haxe_doc>* Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.</haxe_doc>
		</autoDensity>
		<backgroundColor public="1">
			<x path="Int"/>
			<haxe_doc>* The background color to fill if not transparent</haxe_doc>
		</backgroundColor>
		<clearBeforeRender public="1">
			<x path="Bool"/>
			<haxe_doc>* This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
	 * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every
	 * frame to set the canvas background color. If the scene is transparent PixiJS will use
	 * clearRect to clear the canvas every frame. Disable this by setting this to false. For
	 * example, if your game has a canvas filling background image you often don't need this set.</haxe_doc>
		</clearBeforeRender>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* Same as view.height, actual number of pixels in the canvas by vertical.</haxe_doc>
		</height>
		<options public="1" set="null">
			<t path="pixi.core.RenderOptions"/>
			<haxe_doc>* The supplied constructor options.</haxe_doc>
		</options>
		<plugins public="1" set="null">
			<d/>
			<haxe_doc>* Collection of plugins.</haxe_doc>
		</plugins>
		<preserveDrawingBuffer public="1">
			<x path="Bool"/>
			<haxe_doc>* The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering.</haxe_doc>
		</preserveDrawingBuffer>
		<resolution public="1">
			<x path="Float"/>
			<haxe_doc>* The resolution / device pixel ratio of the renderer.</haxe_doc>
		</resolution>
		<screen public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Measurements of the screen. (0, 0, screenWidth, screenHeight).
	 * Its safe to use as filterArea or hitArea for the whole stage.</haxe_doc>
		</screen>
		<transparent public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether the render view is transparent.</haxe_doc>
		</transparent>
		<type public="1">
			<e path="pixi.core.RendererType"/>
			<haxe_doc>* The type of the renderer.</haxe_doc>
		</type>
		<view public="1">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>* The canvas element that everything is drawn to.</haxe_doc>
		</view>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* Same as view.width, actual number of pixels in the canvas by horizontal.</haxe_doc>
		</width>
		<destroy public="1" set="method">
			<f a="?removeView" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ removeView : false }</e></m></meta>
			<haxe_doc>* Removes everything from the renderer and optionally removes the Canvas DOM element.
	 * @param	removeView Removes the Canvas element from the DOM.</haxe_doc>
		</destroy>
		<generateTexture public="1" set="method">
			<f a="displayObject:scaleMode:resolution:?region">
				<c path="pixi.core.display.DisplayObject"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Float"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.textures.RenderTexture"/>
			</f>
			<haxe_doc>* Useful function that returns a texture of the display object that can then be used to create sprites This can be quite useful if your displayObject is complicated and needs to be reused multiple times.
	 * @param	displayObject The displayObject the object will be generated from.
	 * @param	scaleMode Should be one of the scaleMode consts.
	 * @param	resolution The resolution / device pixel ratio of the texture being generated.
	 * @param	region The region of the displayObject, that shall be rendered, if no region is specified, defaults to the local bounds of the displayObject.
	 * @return A texture of the graphics object.</haxe_doc>
		</generateTexture>
		<initPlugins set="method">
			<f a="staticMap">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initialize the plugins.
	 * @param	staticMap The dictionary of statically saved plugins.</haxe_doc>
		</initPlugins>
		<resize set="method">
			<f a="screenWidth:screenHeight">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resizes the screen and canvas to the specified width and height. Canvas dimensions are multiplied by resolution.
	 * @param	screenWidth The new width of the screen.
	 * @param	screenHeight The new height of the screen.</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a="system:?options">
				<c path="String"/>
				<x path="Null"><t path="pixi.core.RenderOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the PIXI.CanvasRenderer and PIXI.Renderer which can be used for rendering a PixiJS scene.
	 * @param	system The name of the system this renderer is for.
	 * @param	options The optional renderer parameters.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.AbstractRenderer"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.canvas.CanvasRenderer" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/canvas/CanvasRenderer.hx" extern="1">
		<extends path="pixi.core.renderers.AbstractRenderer"/>
		<clear public="1" set="method">
			<f a="?clearColor">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Clear the canvas of renderer.
	 *
	 * @param {String} [clearColor] - Clear the canvas with this color, except the canvas is transparent.</haxe_doc>
		</clear>
		<context public="1">
			<c path="js.html.CanvasRenderingContext2D"/>
			<haxe_doc>* The canvas 2d context that everything is drawn with.
	 *
	 * @member {CanvasRenderingContext2D}</haxe_doc>
		</context>
		<refresh public="1">
			<x path="Bool"/>
			<haxe_doc>* Boolean flag controlling canvas refresh.
	 *
	 * @member {Bool}</haxe_doc>
		</refresh>
		<maskManager public="1">
			<c path="pixi.core.renderers.canvas.utils.CanvasMaskManager"/>
			<haxe_doc>* Instance of a CanvasMaskManager, handles masking when using the canvas renderer.
	 *
	 * @member {CanvasMaskManager}</haxe_doc>
		</maskManager>
		<smoothProperty public="1">
			<c path="String"/>
			<haxe_doc>* The canvas property used to set the canvas smoothing property.
	 *
	 * @member {String}</haxe_doc>
		</smoothProperty>
		<currentScaleMode public="1">
			<e path="pixi.core.ScaleModes"/>
			<haxe_doc>* Tracks the active scale mode for this renderer.
	 *
	 * @member {SCALE_MODE}</haxe_doc>
		</currentScaleMode>
		<currentBlendMode public="1">
			<e path="pixi.core.BlendModes"/>
			<haxe_doc>* Tracks the active blend mode for this renderer.
	 *
	 * @member {BLEND_MODES}</haxe_doc>
		</currentBlendMode>
		<new public="1" set="method">
			<f a="?options:?width:?height">
				<x path="Null"><t path="pixi.core.RenderOptions"/></x>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The CanvasRenderer draws the scene and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.
	 * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything :)
	 *
	 * @param system {String} The name of the system this renderer is for.
	 * @param [width=800] {Float} the width of the canvas view
	 * @param [height=600] {Float} the height of the canvas view
	 * @param [options] {RenderingOptions} The optional renderer parameters</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?width:?height:?options">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Null"><t path="pixi.core.RenderOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* The CanvasRenderer draws the scene and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.
	 * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything :)
	 *
	 * @param system {String} The name of the system this renderer is for.
	 * @param [width=800] {Float} the width of the canvas view
	 * @param [height=600] {Float} the height of the canvas view
	 * @param [options] {RenderingOptions} The optional renderer parameters</haxe_doc>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"PIXI.CanvasRenderer"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.canvas.utils.CanvasMaskManager" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/canvas/utils/CanvasMaskManager.hx" extern="1">
		<pushMask public="1" set="method">
			<f a="maskData:renderer">
				<d/>
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* This method adds it to the current stack of masks.
	 *
	 * @param maskData {object} the maskData that will be pushed
	 * @param renderer {Renderer|CanvasRenderer} The renderer context to use.</haxe_doc>
			<overloads><pushMask public="1" set="method">
	<f a="maskData:renderer">
		<d/>
		<c path="pixi.core.renderers.webgl.Renderer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* This method adds it to the current stack of masks.
	 *
	 * @param maskData {object} the maskData that will be pushed
	 * @param renderer {Renderer|CanvasRenderer} The renderer context to use.</haxe_doc>
</pushMask></overloads>
		</pushMask>
		<popMask public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Restores the current drawing context to the state it was before the mask was applied.
	 *
	 * @param renderer {Renderer|CanvasRenderer} The renderer context to use.</haxe_doc>
			<overloads><popMask public="1" set="method">
	<f a="renderer">
		<c path="pixi.core.renderers.webgl.Renderer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Restores the current drawing context to the state it was before the mask was applied.
	 *
	 * @param renderer {Renderer|CanvasRenderer} The renderer context to use.</haxe_doc>
</popMask></overloads>
		</popMask>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"PIXI.CanvasMaskManager"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.System" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/System.hx" extern="1">
		<renderer public="1">
			<c path="pixi.core.renderers.webgl.Renderer"/>
			<haxe_doc>* The renderer this manager works for.</haxe_doc>
		</renderer>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Generic destroy methods to be overridden by the subclass</haxe_doc>
		</destroy>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System is a base class used for extending systems used by the PIXI.Renderer
	 * @param	renderer The renderer this manager works for.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.System"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.BatchSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/BatchSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<currentRenderer public="1">
			<c path="pixi.core.renderers.webgl.utils.ObjectRenderer"/>
			<haxe_doc>* The currently active ObjectRenderer.</haxe_doc>
		</currentRenderer>
		<emptyRenderer public="1">
			<c path="pixi.core.renderers.webgl.utils.ObjectRenderer"/>
			<haxe_doc>* An empty renderer.</haxe_doc>
		</emptyRenderer>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* This should be called if you wish to do some custom rendering It will basically render anything that may be batched up such as sprites</haxe_doc>
		</flush>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Reset the system to an empty renderer</haxe_doc>
		</reset>
		<setObjectRenderer public="1" set="method">
			<f a="objectRenderer">
				<c path="pixi.core.renderers.webgl.utils.ObjectRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the current renderer to the one given in parameter
	 * @param	objectRenderer The object renderer to use.</haxe_doc>
		</setObjectRenderer>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage batching.
	 * @param	renderer The renderer this manager works for.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.BatchSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.ContextSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/ContextSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<isLost public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if the context is lost</haxe_doc>
		</isLost>
		<webGLVersion public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Either 1 or 2 to reflect the WebGL version being used</haxe_doc>
		</webGLVersion>
		<contextChange public="1" set="method">
			<f a="gl">
				<c path="js.html.webgl.RenderingContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Handle the context change event
	 * @param	gl new webgl context</haxe_doc>
		</contextChange>
		<getExtensions set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Auto-populate the extensions</haxe_doc>
		</getExtensions>
		<handleContextLost set="method">
			<f a="event">
				<c path="js.html.webgl.ContextEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Handles a lost webgl context
	 * @param	event The context lost event.</haxe_doc>
		</handleContextLost>
		<handleContextRestored set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handles a restored webgl context</haxe_doc>
		</handleContextRestored>
		<initFromContext set="method">
			<f a="gl">
				<c path="js.html.webgl.RenderingContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initialize the context
	 * @param	gl WebGL context</haxe_doc>
		</initFromContext>
		<initFromOptions set="method">
			<f a="options">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initialize from context options
	 * @param	options context attributes. See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext</haxe_doc>
		</initFromOptions>
		<postrender set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handle the post-render runner event</haxe_doc>
		</postrender>
		<validateContext set="method">
			<f a="gl">
				<c path="js.html.webgl.RenderingContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Validate context
	 * @param	gl Render context</haxe_doc>
		</validateContext>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage the context.
	 * @param	renderer The renderer this manager works for.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.ContextSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.FilterSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/FilterSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<activeState public="1">
			<d/>
			<haxe_doc>* Active state</haxe_doc>
		</activeState>
		<defaultFilterStack set="null">
			<c path="Array"><d/></c>
			<haxe_doc>* List of filters for the FilterSystem</haxe_doc>
		</defaultFilterStack>
		<globalUniforms public="1">
			<c path="pixi.core.renderers.webgl.UniformGroup"/>
			<haxe_doc>* This uniform group is attached to filter uniforms when used</haxe_doc>
		</globalUniforms>
		<quad public="1">
			<c path="pixi.Quad"/>
			<haxe_doc>* A very simple geometry used when drawing a filter effect to the screen</haxe_doc>
		</quad>
		<quadUvs public="1">
			<c path="pixi.QuadUv"/>
			<haxe_doc>* Quad UVs</haxe_doc>
		</quadUvs>
		<statePool public="1">
			<c path="Array"><d/></c>
			<haxe_doc>* a pool for storing filter states, save us creating new ones each tick</haxe_doc>
		</statePool>
		<tempRect public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Temporary rect for maths</haxe_doc>
		</tempRect>
		<texturePool public="1">
			<d/>
			<haxe_doc>* stores a bunch of PO2 textures used for filtering</haxe_doc>
		</texturePool>
		<applyFilter public="1" set="method">
			<f a="filter:input:output:clear">
				<c path="pixi.core.renderers.webgl.filters.Filter"/>
				<c path="pixi.core.textures.RenderTexture"/>
				<c path="pixi.core.textures.RenderTexture"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a filter.
	 * @param	filter The filter to draw.
	 * @param	input The input render target.
	 * @param	output The target to output to.
	 * @param	clear Should the output be cleared before rendering to it</haxe_doc>
		</applyFilter>
		<calculateSpriteMatrix public="1" set="method">
			<f a="outputMatrix:sprite">
				<c path="pixi.core.math.Matrix"/>
				<c path="pixi.core.sprites.Sprite"/>
				<c path="pixi.core.math.Matrix"/>
			</f>
			<haxe_doc>* Multiply input normalized coordinates to this matrix to get sprite texture normalized coordinates.
	 * @param	outputMatrix The matrix to output to.
	 * @param	sprite The sprite to map to.
	 * @return The mapped matrix.</haxe_doc>
		</calculateSpriteMatrix>
		<emptyPool public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Empties the texture pool.</haxe_doc>
		</emptyPool>
		<getFilterTexture public="1" set="method">
			<f a="?input:?resolution">
				<c path="pixi.core.textures.RenderTexture"/>
				<x path="Float"/>
				<c path="pixi.core.textures.RenderTexture"/>
			</f>
			<haxe_doc>* Gets extra render texture to use inside current filter To be compliant with older filters, you can use params in any order
	 * @param	input renderTexture from which size and resolution will be copied
	 * @param	resolution override resolution of the renderTexture
	 * @return</haxe_doc>
		</getFilterTexture>
		<getOptimalFilterTexture public="1" set="method">
			<f a="minWidth:minHeight:?resolution">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.textures.RenderTexture"/>
			</f>
			<haxe_doc>* Gets a Power-of-Two render texture or fullScreen texture
	 * @param	minWidth The minimum width of the render texture in real pixels.
	 * @param	minHeight The minimum height of the render texture in real pixels.
	 * @param	resolution The resolution of the render texture.
	 * @return The new render texture.</haxe_doc>
		</getOptimalFilterTexture>
		<pop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pops off the filter and applies it.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="targets:filters">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="Array"><c path="pixi.core.renderers.webgl.filters.Filter"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a new filter to the System.
	 * @param	target The target of the filter to render.
	 * @param	filters The filters to apply.</haxe_doc>
		</push>
		<resize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* calls texturePool.resize(), affects fullScreen renderTextures</haxe_doc>
		</resize>
		<returnFilterTexture public="1" set="method">
			<f a="renderTexture">
				<c path="pixi.core.textures.RenderTexture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Frees a render texture back into the pool.
	 * @param	renderTexture The renderTarget to free</haxe_doc>
		</returnFilterTexture>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage the filters.
	 * @param	renderer The renderer this manager works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.FilterSystem"</e></m></meta>
	</class>
	<typedef path="pixi.core.renderers.systems.TSize" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/FrameBufferSystem.hx" module="pixi.core.renderers.systems.FrameBufferSystem"><a>
	<width><x path="Float"/></width>
	<height><x path="Float"/></height>
</a></typedef>
	<class path="pixi.core.renderers.systems.FrameBufferSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/FrameBufferSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<managedFramebuffers public="1" set="null">
			<c path="Array"><c path="pixi.core.textures.FrameBuffer"/></c>
			<haxe_doc>* A list of managed framebuffers</haxe_doc>
		</managedFramebuffers>
		<size public="1" set="null">
			<t path="pixi.core.renderers.systems.TSize"/>
			<haxe_doc>* Get the size of the current width and height. Returns object with width and height values.</haxe_doc>
		</size>
		<unknownFramebuffer public="1" set="null">
			<c path="pixi.core.textures.FrameBuffer"/>
			<haxe_doc>* Framebuffer value that shows that we don't know what is bound</haxe_doc>
		</unknownFramebuffer>
		<bind public="1" set="method">
			<f a="frameBuffer:?frame">
				<c path="pixi.core.textures.FrameBuffer"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Bind a framebuffer
	 * @param	frameBuffer
	 * @param	frame frame, default is framebuffer size</haxe_doc>
		</bind>
		<clear public="1" set="method">
			<f a="r:g:b:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Clear the color of the context
	 * @param	r Red value from 0 to 1
	 * @param	g Green value from 0 to 1
	 * @param	b Blue value from 0 to 1
	 * @param	a Alpha value from 0 to 1</haxe_doc>
		</clear>
		<contextChange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the renderer context and necessary buffers.</haxe_doc>
		</contextChange>
		<disposeAll public="1" set="method">
			<f a="contextLost">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Disposes all framebuffers, but not textures bound to them
	 * @param	contextLost</haxe_doc>
		</disposeAll>
		<disposeFramebuffer public="1" set="method">
			<f a="frameBuffer:?contextLost" v=":false">
				<c path="pixi.core.textures.FrameBuffer"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ contextLost : false }</e></m></meta>
			<haxe_doc>*  Disposes framebuffer
	 * @param	frameBuffer framebuffer that has to be disposed of
	 * @param	contextLost If context was lost, we suppress all delete function calls</haxe_doc>
		</disposeFramebuffer>
		<initFramebuffer set="method">
			<f a="frameBuffer">
				<c path="pixi.core.textures.FrameBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initialize framebuffer
	 * @param	frameBuffer</haxe_doc>
		</initFramebuffer>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* resets framebuffer stored state, binds screen framebuffer
	 * should be called before renderTexture reset()</haxe_doc>
		</reset>
		<resizeFramebuffer set="method">
			<f a="frameBuffer">
				<c path="pixi.core.textures.FrameBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resize the framebuffer
	 * @param	frameBuffer</haxe_doc>
		</resizeFramebuffer>
		<setViewPort public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the WebGLRenderingContext's viewport.
	 * @param	x X position of viewport
	 * @param	y y position of viewport
	 * @param	width width of viewport
	 * @param	height height of viewport</haxe_doc>
		</setViewPort>
		<updateFrameBuffer public="1" set="method">
			<f a="framebuffer">
				<c path="pixi.core.textures.FrameBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Update the framebuffer
	 * @param	framebuffer</haxe_doc>
		</updateFrameBuffer>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage framebuffers.
	 * @param	renderer The renderer this manager works for.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.FrameBufferSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.GeometrySystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/GeometrySystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<boundBuffers public="1" set="null">
			<c path="Array"><c path="pixi.core.renderers.webgl.Buffer"/></c>
			<haxe_doc>* A cache of currently bound buffer, contains only two members with keys ARRAY_BUFFER and ELEMENT_ARRAY_BUFFER</haxe_doc>
		</boundBuffers>
		<canUseUInt32ElementIndex public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if support gl.UNSIGNED_INT in gl.drawElements or gl.drawElementsInstanced</haxe_doc>
		</canUseUInt32ElementIndex>
		<hasInstance public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if has ANGLE_instanced_arrays extension</haxe_doc>
		</hasInstance>
		<hasVao public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if we has *_vertex_array_object extension</haxe_doc>
		</hasVao>
		<managedBuffers public="1" set="null">
			<d/>
			<haxe_doc>* Cache for all buffers by id, used in case renderer gets destroyed or for profiling</haxe_doc>
		</managedBuffers>
		<activateVao set="method">
			<f a="geometry:program">
				<c path="pixi.mesh.Geometry"/>
				<c path="pixi.core.renderers.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Activate vertex array object
	 * @param	geometry Geometry instance
	 * @param	program Shader program instance</haxe_doc>
		</activateVao>
		<bind public="1" set="method">
			<f a="geometry:?program">
				<c path="pixi.mesh.Geometry"/>
				<c path="pixi.core.renderers.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Binds geometry so that is can be drawn. Creating a Vao if required
	 * @param	geometry Geometry instance
	 * @param	program Shader program instance</haxe_doc>
		</bind>
		<checkCompatibility set="method">
			<f a="geometry:program">
				<c path="pixi.mesh.Geometry"/>
				<c path="pixi.core.renderers.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Check compability between a geometry and a program
	 * @param	geometry Geometry instance
	 * @param	program Shader program instance</haxe_doc>
		</checkCompatibility>
		<contextChange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the renderer context and necessary buffers.</haxe_doc>
		</contextChange>
		<disposeAll public="1" set="method">
			<f a="?contextLost">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* dispose all WebGL resources of all managed geometries and buffers
	 * @param	contextLost If context was lost, we suppress gl.delete calls</haxe_doc>
		</disposeAll>
		<disposeBuffer public="1" set="method">
			<f a="buffer:?contextLost">
				<c path="pixi.core.renderers.webgl.Buffer"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Disposes buffer
	 * @param	buffer buffer with data
	 * @param	contextLost If context was lost, we suppress deleteVertexArray</haxe_doc>
		</disposeBuffer>
		<disposeGeometry public="1" set="method">
			<f a="geometry:?contextLost">
				<c path="pixi.mesh.Geometry"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Disposes geometry
	 * @param	geometry Geometry with buffers. Only VAO will be disposed
	 * @param	contextLost If context was lost, we suppress deleteVertexArray</haxe_doc>
		</disposeGeometry>
		<draw public="1" set="method">
			<f a="type:?size:?start:?instanceCount">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draw the geometry
	 * @param	type the type primitive to render
	 * @param	size the number of elements to be rendered
	 * @param	start starting index
	 * @param	instanceCount the number of instances of the set of elements to execute</haxe_doc>
		</draw>
		<getSignature set="method">
			<f a="geometry:program">
				<c path="pixi.mesh.Geometry"/>
				<c path="pixi.core.renderers.webgl.Program"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Takes a geometry and program and generates a unique signature for them.
	 * @param	geometry to get signature from
	 * @param	program to test geometry against
	 * @return Unique signature of the geometry and program</haxe_doc>
		</getSignature>
		<initGeometryVao set="method">
			<f a="geometry:program">
				<c path="pixi.mesh.Geometry"/>
				<c path="pixi.core.renderers.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates or gets Vao with the same structure as the geometry and stores it on the geometry. If vao is created, it is bound automatically.
	 * @param	geometry Instance of geometry to to generate Vao for
	 * @param	program Instance of program</haxe_doc>
		</initGeometryVao>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Reset and unbind any active VAO and geometry</haxe_doc>
		</reset>
		<unbind set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Unbind/reset everything</haxe_doc>
		</unbind>
		<updateBuffers set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update buffers</haxe_doc>
		</updateBuffers>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage framebuffers.
	 * @param	renderer The renderer this manager works for.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.GeometrySystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.MaskSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/MaskSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<alphaMaskIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Current index of alpha mask pool</haxe_doc>
		</alphaMaskIndex>
		<alphaMaskPool public="1" set="null">
			<c path="Array"><c path="pixi.filters.spritemask.SpriteMaskFilter"/></c>
			<haxe_doc>* Pool of used sprite mask filters
	 * @param	renderer</haxe_doc>
		</alphaMaskPool>
		<enableScissor public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Enable scissor</haxe_doc>
		</enableScissor>
		<scissor public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if current pushed masked is scissor</haxe_doc>
		</scissor>
		<scissorData public="1" set="null">
			<c path="pixi.core.graphics.Graphics"/>
			<haxe_doc>* Mask data</haxe_doc>
		</scissorData>
		<scissorRenderTarget public="1">
			<c path="pixi.core.display.DisplayObject"/>
			<haxe_doc>* Target to mask</haxe_doc>
		</scissorRenderTarget>
		<pop public="1" set="method">
			<f a="target:maskData">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.sprites.Sprite"/>
					<c path="pixi.core.graphics.Graphics"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes the last mask from the mask stack and doesn't return it.
	 * @param	target Display Object to pop the mask from
	 * @param	maskData The masking data.</haxe_doc>
		</pop>
		<popScissorMask public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pop scissor mask</haxe_doc>
		</popScissorMask>
		<popSpriteMas public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes the last filter from the filter stack and doesn't return it.</haxe_doc>
		</popSpriteMas>
		<popStencilMask public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes the last filter from the filter stack and doesn't return it.</haxe_doc>
		</popStencilMask>
		<push public="1" set="method">
			<f a="target:maskData">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.sprites.Sprite"/>
					<c path="pixi.core.graphics.Graphics"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current filter stack.
	 * @param	target Display Object to push the mask to
	 * @param	maskData The masking data.</haxe_doc>
		</push>
		<pushScissorMask public="1" set="method">
			<f a="target:maskData">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.graphics.Graphics"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*
	 * @param	target Display Object to push the mask to
	 * @param	maskData The masking data.</haxe_doc>
		</pushScissorMask>
		<pushSpriteMask public="1" set="method">
			<f a="target:maskData">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.sprites.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current filter stack.
	 * @param	target Display Object to push the sprite mask to
	 * @param	maskData Sprite to be used as the mask</haxe_doc>
		</pushSpriteMask>
		<pushStencilMask public="1" set="method">
			<f a="maskData">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.sprites.Sprite"/>
					<c path="pixi.core.graphics.Graphics"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current filter stack.
	 * @param	maskData The masking data.</haxe_doc>
		</pushStencilMask>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage WebGL state machines.
	 * @param	renderer The renderer this manager works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.MaskSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.ProjectionSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/ProjectionSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<defaultFrame public="1" set="null">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Default destination frame</haxe_doc>
		</defaultFrame>
		<destinationFrame public="1" set="null">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Destination frame</haxe_doc>
		</destinationFrame>
		<projectionMatrix public="1" set="null">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* Project matrix</haxe_doc>
		</projectionMatrix>
		<sourceFrame public="1" set="null">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Source frame</haxe_doc>
		</sourceFrame>
		<transform public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* A transform that will be appended to the projection matrix if null, nothing will be applied</haxe_doc>
		</transform>
		<calculateProjection public="1" set="method">
			<f a="destinationFrame:sourceFrame:resolution:root">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the projection matrix based on a projection frame (which is a rectangle)
	 * @param	destinationFrame The destination frame.
	 * @param	sourceFrame The source frame.
	 * @param	resolution Resolution
	 * @param	root If is root</haxe_doc>
		</calculateProjection>
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="pixi.core.math.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Generic destroy methods to be overridden by the subclass
	 * @param	matrix Sets the transform of the active render target to the given matrix</haxe_doc>
		</setTransform>
		<update public="1" set="method">
			<f a="destinationFrame:sourceFrame:resolution:root">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the projection matrix based on a projection frame (which is a rectangle)
	 * @param	destinationFrame The destination frame.
	 * @param	sourceFrame The source frame.
	 * @param	resolution Resolution
	 * @param	root If is root</haxe_doc>
		</update>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage the projection matrix.
	 * @param	renderer The renderer this manager works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.ProjectionSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.RenderTextureSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/RenderTextureSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<clearColor public="1">
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* The clear background color as rgba</haxe_doc>
		</clearColor>
		<current public="1" set="null">
			<c path="pixi.core.textures.RenderTexture"/>
			<haxe_doc>* Render texture</haxe_doc>
		</current>
		<defaultMaskStack public="1" set="null">
			<c path="Array"><c path="pixi.core.graphics.Graphics"/></c>
			<haxe_doc>* List of masks for the StencilSystem</haxe_doc>
		</defaultMaskStack>
		<destinationFrame public="1" set="null">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Destination frame</haxe_doc>
		</destinationFrame>
		<sourceFrame public="1" set="null">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Source frame</haxe_doc>
		</sourceFrame>
		<bind public="1" set="method">
			<f a="?renderTexture:?sourceFrame:?destinationFrame">
				<c path="pixi.core.textures.RenderTexture"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Bind the current render texture
	 * @param	renderTexture RenderTexture to bind, by default its null, the screen
	 * @param	sourceFrame part of screen that is mapped to the renderTexture
	 * @param	destinationFrame part of renderTexture, by default it has the same size as sourceFrame</haxe_doc>
		</bind>
		<clear public="1" set="method">
			<f a="?clearColor">
				<c path="Array"><x path="Int"/></c>
				<c path="pixi.core.renderers.webgl.Renderer"/>
			</f>
			<haxe_doc>* Erases the render texture and fills the drawing area with a colour
	 * @param	clearColor The color as rgba, default to use the renderer backgroundColor
	 * @return Returns itself.</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage render textures.
	 * Should be added after FramebufferSystem
	 * @param	renderer The renderer this manager works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.RenderTextureSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.ShaderSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/ShaderSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<gl public="1">
			<c path="js.html.webgl.RenderingContext"/>
			<haxe_doc>* The current WebGL rendering context</haxe_doc>
		</gl>
		<bind public="1" set="method">
			<f a="shader:dontSync">
				<c path="pixi.core.Shader"/>
				<x path="Bool"/>
				<c path="pixi.core.renderers.webgl.Program"/>
			</f>
			<haxe_doc>* Changes the current shader to the one given in parameter
	 * @param	shader the new shader
	 * @param	dontSync false if the shader should automatically sync its uniforms.
	 * @return  the glProgram that belongs to the shader.</haxe_doc>
		</bind>
		<getGlProgram public="1" set="method">
			<f a=""><c path="pixi.core.renderers.webgl.Program"/></f>
			<haxe_doc>* Returns the underlying GLShade rof the currently bound shader. This can be handy for when you to have a little more control over the setting of your uniforms.
	 * @return the glProgram for the currently bound Shader for this context</haxe_doc>
		</getGlProgram>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets ShaderSystem state, does not affect WebGL state</haxe_doc>
		</reset>
		<setUniforms public="1" set="method">
			<f a="uniforms">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Uploads the uniforms values to the currently bound shader.
	 * @param	uniforms the uniforms values that be applied to the current shader</haxe_doc>
		</setUniforms>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage shaders.
	 * @param	renderer The renderer this system works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.ShaderSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.StateSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/StateSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<_blendEq>
			<x path="Bool"/>
			<haxe_doc>* Whether current blend equation is different</haxe_doc>
		</_blendEq>
		<blendMode public="1" set="null">
			<e path="pixi.core.BlendModes"/>
			<haxe_doc>* Blend mode. Default: PIXI.BLEND_MODES.NONE</haxe_doc>
		</blendMode>
		<checks public="1" set="null">
			<c path="Array"><d/></c>
			<haxe_doc>* Collection of check calls</haxe_doc>
		</checks>
		<defaultState public="1" set="null">
			<c path="pixi.core.renderers.webgl.State"/>
			<haxe_doc>* Default WebGL State</haxe_doc>
		</defaultState>
		<gl public="1" set="null">
			<c path="js.html.webgl.RenderingContext"/>
			<haxe_doc>* GL context</haxe_doc>
		</gl>
		<map public="1" set="null">
			<c path="Array"><d/></c>
			<haxe_doc>* Collection of calls</haxe_doc>
		</map>
		<polygonOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* Polygon offset</haxe_doc>
		</polygonOffset>
		<stateId public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* State ID</haxe_doc>
		</stateId>
		<forceState public="1" set="method">
			<f a="state">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the state, when previous state is unknown
	 * @param	state The state to set</haxe_doc>
		</forceState>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets all the logic and disables the vaos</haxe_doc>
		</reset>
		<set public="1" set="method">
			<f a="state">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current state
	 * @param	state The state to set.</haxe_doc>
		</set>
		<setBlend public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Enables or disabled blending.
	 * @param	value Turn on or off webgl blending.</haxe_doc>
		</setBlend>
		<setBlendMode public="1" set="method">
			<f a="value">
				<e path="pixi.core.BlendModes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the blend mode.
	 * @param	value The blend mode to set to.</haxe_doc>
		</setBlendMode>
		<setCullMode public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets whether to enable or disable cull face.
	 * @param	value Turn on or off webgl cull face.</haxe_doc>
		</setCullMode>
		<setDepthTest public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets whether to enable or disable depth test.
	 * @param	value</haxe_doc>
		</setDepthTest>
		<setFrontFace public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the gl front face.
	 * @param	value true is clockwise and false is counter-clockwise</haxe_doc>
		</setFrontFace>
		<setOffset public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Enables or disable polygon offset fill
	 * @param	value Turn on or off webgl polygon offset testing.</haxe_doc>
		</setOffset>
		<setPolygonOffset public="1" set="method">
			<f a="value:scale">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the polygon offset.
	 * @param	value the polygon offset
	 * @param	scale the polygon offset scale</haxe_doc>
		</setPolygonOffset>
		<updateCheck public="1" set="method">
			<f a="func:value">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* checks to see which updates should be checked based on which settings have been activated. For example, if blend is enabled then we should check the blend modes each time the state is changed or if polygon fill is activated then we need to check if the polygon offset changes. The idea is that we only check what we have too.
	 * @param	func the checking function to add or remove
	 * @param	value should the check function be added or removed.</haxe_doc>
		</updateCheck>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage WebGL state machines.
	 * @param	renderer The renderer this manager works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.StateSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.StencilSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/StencilSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<stencilMaskStack public="1">
			<c path="Array"><c path="pixi.core.graphics.Graphics"/></c>
			<haxe_doc>* The mask stack</haxe_doc>
		</stencilMaskStack>
		<popStencil public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes the last mask from the stencil stack.</haxe_doc>
		</popStencil>
		<pushStencil public="1" set="method">
			<f a="graphics">
				<c path="pixi.core.graphics.Graphics"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current stencil stack.
	 * @param	graphics The mask</haxe_doc>
		</pushStencil>
		<setMaskStack public="1" set="method">
			<f a="stencilMaskStack">
				<c path="Array"><c path="pixi.core.graphics.Graphics"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the mask stack that is used by this System.
	 * @param	stencilMaskStack</haxe_doc>
		</setMaskStack>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage stencils (used for masks).
	 * @param	renderer</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.StencilSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.TextureGCSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/TextureGCSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<checkCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Check count</haxe_doc>
		</checkCount>
		<checkCountMax public="1">
			<x path="Int"/>
			<haxe_doc>* Maximum number of item to check</haxe_doc>
		</checkCountMax>
		<count public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Count</haxe_doc>
		</count>
		<maxIdle public="1">
			<x path="Float"/>
			<haxe_doc>* Maximum idle time, in seconds</haxe_doc>
		</maxIdle>
		<mode public="1">
			<e path="pixi.core.GCModes"/>
			<haxe_doc>* Current garabage collection mode</haxe_doc>
		</mode>
		<postrender public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks to see when the last time a texture was used if the texture has not been used for a specified amount of time it will be removed from the GPU</haxe_doc>
		</postrender>
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks to see when the last time a texture was used if the texture has not been used for a specified amount of time it will be removed from the GPU</haxe_doc>
		</run>
		<unload public="1" set="method">
			<f a="displayObject">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes all the textures within the specified displayObject and its children from the GPU
	 * @param	displayObject the displayObject to remove the textures from.</haxe_doc>
		</unload>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage texture garbage collection on the GPU, ensuring that it does not get clogged up with textures that are no longer being used.
	 * @param	renderer The renderer this system works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.TextureGCSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.systems.TextureSystem" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/systems/TextureSystem.hx" extern="1">
		<extends path="pixi.core.renderers.systems.System"/>
		<boundTextures public="1" set="null">
			<c path="Array"><c path="pixi.core.textures.BaseTexture"/></c>
			<haxe_doc>* Bound textures</haxe_doc>
		</boundTextures>
		<currentLocation public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* Current location</haxe_doc>
		</currentLocation>
		<managedTextures public="1" set="null">
			<c path="Array"><c path="pixi.core.textures.BaseTexture"/></c>
			<haxe_doc>* List of managed textures</haxe_doc>
		</managedTextures>
		<unknownTexture public="1" set="null">
			<c path="pixi.core.textures.BaseTexture"/>
			<haxe_doc>* BaseTexture value that shows that we don't know what is bound</haxe_doc>
		</unknownTexture>
		<bind public="1" set="method">
			<f a="texture:?location">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.textures.Texture"/>
					<c path="pixi.core.textures.BaseTexture"/>
				</x>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Bind a texture to a specific location
	 * If you want to unbind something, please use unbind(texture) instead of bind(null, textureLocation)
	 * @param	texture Texture to bind
	 * @param	location Location to bind at</haxe_doc>
		</bind>
		<contextChange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the renderer context and necessary buffers.</haxe_doc>
		</contextChange>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets texture location and bound textures. Actual bind(null, i) calls will be performed at next unbind() call</haxe_doc>
		</reset>
		<unbind public="1" set="method">
			<f a="texture">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.textures.Texture"/>
					<c path="pixi.core.textures.BaseTexture"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Unbind a texture
	 * @param	texture Texture to bind</haxe_doc>
		</unbind>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* System plugin to the renderer to manage textures.
	 * @param	renderer The renderer this system works for</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.systems.TextureSystem"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.Attribute" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/Attribute.hx" extern="1">
		<from public="1" set="method">
			<f a="buffer:?size:normalized:?start:type:?stride">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.renderers.webgl.Attribute"/>
			</f>
			<haxe_doc>* Helper function that creates an Attribute based on the information provided
	 * @param	buffer {String} the id of the buffer that this attribute will look for
	 * @param	size {Int} the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.
	 * @param	stride {Float} How far apart (in floats) the start of each value is. (used for interleaving data)
	 * @param	start {Int} How far into the array to start reading values (used for interleaving data)
	 * @param	normalized {Int} How far into the array to start reading values (used for interleaving data)
	 * @return {Attribute} A new PIXI.Attribute based on the information provided</haxe_doc>
		</from>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the Attribute.</haxe_doc>
		</destroy>
		<new public="1" set="method">
			<f a="buffer:?size:?normalized:?type:stride:start">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Holds the information for a single attribute structure required to render geometry.
	 *
	 * This does not contain the actual data, but instead has a buffer id that maps to a PIXI.Buffer This can include anything from positions, uvs, normals, colors etc.
	 * @param	buffer {String} the id of the buffer that this attribute will look for
	 * @param	size {Int} the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.
	 * @param	normalized {Bool} should the data be normalized.
	 * @param	type {Float} what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
	 * @param	stride {Float} How far apart (in floats) the start of each value is. (used for interleaving data)
	 * @param	start {Int} How far into the array to start reading values (used for interleaving data)</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Attribute"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.Buffer" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/Buffer.hx" extern="1">
		<from public="1" set="method">
			<f a="data">
				<x path="haxe.extern.EitherType">
					<c path="Array"><d/></c>
					<c path="Array"><c path="js.lib.Float32Array"/></c>
				</x>
				<c path="pixi.core.renderers.webgl.Buffer"/>
			</f>
			<haxe_doc>*
	 * @param	data {Array} the data to store in the buffer.
	 * @return {Buffer} A new Buffer based on the data provided.</haxe_doc>
		</from>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the buffer</haxe_doc>
		</destroy>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disposes WebGL resources that are connected to this geometry</haxe_doc>
		</dispose>
		<update public="1" set="method">
			<f a="data">
				<x path="haxe.extern.EitherType">
					<c path="Array"><d/></c>
					<c path="Array"><c path="js.lib.Float32Array"/></c>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* flags this buffer as requiring an upload to the GPU
	 * @param	data {Array} the data to update in the buffer.</haxe_doc>
		</update>
		<new public="1" set="method">
			<f a="data:?_static:?index">
				<x path="haxe.extern.EitherType">
					<c path="Array"><d/></c>
					<c path="Array"><c path="js.lib.Float32Array"/></c>
				</x>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A wrapper for data so that it can be used and uploaded by WebGL
	 *
	 * @param data {Array} the data to store in the buffer.
	 * @param [_static=true] {Bool} true for static buffer
	 * @param [index=false] {Bool} true for index buffer</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Buffer"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.GLTexture" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/GLTexture.hx" extern="1">
		<dirtyId>
			<x path="Int"/>
			<haxe_doc>* Texture contents dirty flag</haxe_doc>
		</dirtyId>
		<dirtyStyleId>
			<x path="Int"/>
			<haxe_doc>* Texture style dirty flag</haxe_doc>
		</dirtyStyleId>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* Height of texture that was used in texImage2D</haxe_doc>
		</height>
		<internalFormat public="1">
			<x path="Int"/>
			<haxe_doc>* Type copied from baseTexture</haxe_doc>
		</internalFormat>
		<mipmap public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether mip levels has to be generated</haxe_doc>
		</mipmap>
		<texture public="1">
			<c path="js.html.webgl.Texture"/>
			<haxe_doc>* The WebGL texture</haxe_doc>
		</texture>
		<type public="1">
			<x path="Int"/>
			<haxe_doc>* Type copied from baseTexture</haxe_doc>
		</type>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* Width of texture that was used in texImage2D</haxe_doc>
		</width>
		<wrapMode public="1">
			<x path="Int"/>
			<haxe_doc>* WrapMode copied from baseTexture</haxe_doc>
		</wrapMode>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"PIXI.RenderTarget"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.Program" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/Program.hx" extern="1">
		<defaultFragmentSrc public="1" static="1"><c path="String"/></defaultFragmentSrc>
		<defaultVertexSrc public="1" static="1"><c path="String"/></defaultVertexSrc>
		<fragmentSrc public="1"><c path="String"/></fragmentSrc>
		<vertexSrc public="1"><c path="String"/></vertexSrc>
		<from public="1" set="method">
			<f a="?vertexSrc:?fragmentSrc:?uniforms">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<c path="pixi.core.renderers.webgl.Program"/>
			</f>
			<haxe_doc>* A short hand function to create a program based of a vertex and fragment shader this method will also check to see if there is a cached program.
	 * @param	vertexSrc {String} The source of the vertex shader.
	 * @param	fragmentSrc {String} The source of the fragment shader.
	 * @param	uniforms {Dynamic} Custom uniforms to use to augment the built-in ones.
	 * @return {Program} an shiny new Pixi shader!</haxe_doc>
		</from>
		<extractData set="method">
			<f a="vertexSrc:fragmentSrc">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Extracts the data for a buy creating a small test program or reading the src directly.
	 * @param	vertexSrc {String} The source of the vertex shader.
	 * @param	fragmentSrc {String} The source of the fragment shader.</haxe_doc>
		</extractData>
		<new public="1" set="method">
			<f a="?vertextSrc:?fragmentSrc:?name">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Helper class to create a shader program.
	 * @param	vertextSrc The source of the vertex shader.
	 * @param	fragmentSrc The source of the fragment shader.
	 * @param	name Name for shader</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Program"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.Renderer" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/Renderer.hx" extern="1">
		<extends path="pixi.core.renderers.AbstractRenderer"/>
		<registerPlugin public="1" set="method" static="1">
			<f a="pluginName:ctor">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a plugin to the renderer.
	 * @param	pluginName The name of the plugin.
	 * @param	ctor The constructor function or class for the plugin.</haxe_doc>
		</registerPlugin>
		<batch public="1" set="null">
			<c path="pixi.core.renderers.systems.BatchSystem"/>
			<haxe_doc>* Batch system instance</haxe_doc>
		</batch>
		<context public="1" set="null">
			<c path="pixi.core.renderers.systems.ContextSystem"/>
			<haxe_doc>* Context system instance</haxe_doc>
		</context>
		<extract public="1">
			<c path="pixi.core.renderers.webgl.extract.Extract"/>
			<haxe_doc>* Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture</haxe_doc>
		</extract>
		<filter public="1" set="null">
			<c path="pixi.core.renderers.systems.FilterSystem"/>
			<haxe_doc>* Filter system instance</haxe_doc>
		</filter>
		<framebuffer public="1" set="null">
			<c path="pixi.core.renderers.systems.FrameBufferSystem"/>
			<haxe_doc>* Framebuffer system instance</haxe_doc>
		</framebuffer>
		<geometry public="1" set="null">
			<c path="pixi.core.renderers.systems.GeometrySystem"/>
			<haxe_doc>* Geometry system instance</haxe_doc>
		</geometry>
		<gl public="1" set="null">
			<c path="js.html.webgl.RenderingContext"/>
			<haxe_doc>* WebGL context, set by the contextSystem (this.context)</haxe_doc>
		</gl>
		<globalUniforms public="1">
			<c path="pixi.core.renderers.webgl.UniformGroup"/>
			<haxe_doc>* Global uniforms</haxe_doc>
		</globalUniforms>
		<mask public="1" set="null">
			<c path="pixi.core.renderers.systems.MaskSystem"/>
			<haxe_doc>* Mask system instance</haxe_doc>
		</mask>
		<project public="1" set="null">
			<c path="pixi.core.renderers.systems.ProjectionSystem"/>
			<haxe_doc>* Projection system instance</haxe_doc>
		</project>
		<renderingToScreen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Flag if we are rendering to the screen vs renderTexture</haxe_doc>
		</renderingToScreen>
		<renderTexture public="1" set="null">
			<c path="pixi.core.renderers.systems.RenderTextureSystem"/>
			<haxe_doc>* RenderTexture system instance</haxe_doc>
		</renderTexture>
		<shader public="1" set="null">
			<c path="pixi.core.renderers.systems.ShaderSystem"/>
			<haxe_doc>* Shader system instance</haxe_doc>
		</shader>
		<state public="1" set="null">
			<c path="pixi.core.renderers.systems.StateSystem"/>
			<haxe_doc>* State system instance</haxe_doc>
		</state>
		<stencil public="1" set="null">
			<c path="pixi.core.renderers.systems.StencilSystem"/>
			<haxe_doc>* Stencil system instance</haxe_doc>
		</stencil>
		<texture public="1" set="null">
			<c path="pixi.core.renderers.systems.TextureSystem"/>
			<haxe_doc>* Texture system instance</haxe_doc>
		</texture>
		<textureGC public="1" set="null">
			<c path="pixi.core.renderers.systems.TextureGCSystem"/>
			<haxe_doc>* Texture garbage collector system instance</haxe_doc>
		</textureGC>
		<addSystem public="1" set="method">
			<f a="ClassRef:?name">
				<d/>
				<c path="String"/>
				<c path="pixi.core.renderers.webgl.Renderer"/>
			</f>
			<haxe_doc>* Add a new system to the renderer.
	 * @param	ClassRef Class reference
	 * @param	name Property name for system, if not specified will use a static name property on the class itself. This name will be assigned as s property on the Renderer so make sure it doesn't collide with properties on Renderer.
	 * @return	Return instance of renderer</haxe_doc>
		</addSystem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clear the frame buffer</haxe_doc>
		</clear>
		<render public="1" set="method">
			<f a="displayObject:?renderTexture:?clear:?transform:?skipUpdateTransform" v="::true::false">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.renderers.webgl.utils.RenderTarget"/>
				<x path="Bool"/>
				<c path="pixi.core.math.Matrix"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ skipUpdateTransform : false, clear : true }</e></m></meta>
			<haxe_doc>* Renders the object to its WebGL view
	 * @param	displayObject The object to be rendered.
	 * @param	renderTexture The render texture to render to.
	 * @param	clear Should the canvas be cleared before the new render.
	 * @param	transform A transform to apply to the render texture before rendering.
	 * @param	skipUpdateTransform Should we skip the update transform pass?</haxe_doc>
		</render>
		<reset public="1" set="method">
			<f a=""><c path="pixi.core.renderers.webgl.Renderer"/></f>
			<haxe_doc>* Resets the WebGL state so you can render things however you fancy!
	 * @return Returns itself.</haxe_doc>
		</reset>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="pixi.core.RenderOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* The Renderer draws the scene and all its content onto a webGL enabled canvas. This renderer
	 * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.
	 * So no need for Sprite Batches or Sprite Clouds.
	 * Don't forget to add the view to your DOM or you will not see anything :)
	 *
	 * @param system {String} The name of the system this renderer is for.
	 * @param [width=800] {Float} the width of the canvas view
	 * @param [height=600] {Float} the height of the canvas view
	 * @param [options] {RenderingOptions} The optional renderer parameters</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Renderer"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.State" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/State.hx" extern="1">
		<blend public="1">
			<x path="Bool"/>
			<haxe_doc>* Activates blending of the computed fragment color values</haxe_doc>
		</blend>
		<blendMode public="1">
			<x path="Int"/>
			<haxe_doc>* The blend mode to be applied when this state is set. Apply a value of PIXI.BLEND_MODES.NORMAL to reset the blend mode. Setting this mode to anything other than NO_BLEND will automatically switch blending on.´</haxe_doc>
		</blendMode>
		<clockwiseFrontFace public="1">
			<x path="Bool"/>
			<haxe_doc>* Specifies whether or not front or back-facing polygons can be culled.</haxe_doc>
		</clockwiseFrontFace>
		<culling public="1">
			<x path="Bool"/>
			<haxe_doc>* Activates culling of polygons.</haxe_doc>
		</culling>
		<depthTest public="1">
			<x path="Bool"/>
			<haxe_doc>* Activates depth comparisons and updates to the depth buffer.</haxe_doc>
		</depthTest>
		<offsets public="1">
			<x path="Bool"/>
			<haxe_doc>* Activates adding an offset to depth values of polygon's fragments</haxe_doc>
		</offsets>
		<polygonOffset public="1">
			<x path="Float"/>
			<haxe_doc>* The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.</haxe_doc>
		</polygonOffset>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* This is a WebGL state, and is is passed The WebGL StateManager.
	 * Each mesh rendered may require WebGL to be in a different state. For example you may want different blend mode or to enable polygon offsets</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.State"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.UniformGroup" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/UniformGroup.hx" extern="1">
		<dirtyId>
			<x path="Float"/>
			<haxe_doc>* dirty version</haxe_doc>
		</dirtyId>
		<group public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Its a group and not a single uniforms. Default: true</haxe_doc>
		</group>
		<id>
			<x path="Float"/>
			<haxe_doc>* unique id</haxe_doc>
		</id>
		<isStatic public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"static"</e></m></meta>
			<haxe_doc>* Uniforms wont be changed after creation</haxe_doc>
		</isStatic>
		<uniforms public="1">
			<d/>
			<haxe_doc>* uniform values</haxe_doc>
		</uniforms>
		<new public="1" set="method">
			<f a="?uniforms:?_static">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Uniform group holds uniform map and some ID's for work
	 * @param	uniforms Custom uniforms to use to augment the built-in ones.
	 * @param	_static Uniforms wont be changed after creation</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.UniformGroup"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.extract.Extract" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/extract/Extract.hx" extern="1">
		<base64 public="1" set="method">
			<f a="?target">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.display.DisplayObject"/>
					<c path="pixi.core.textures.RenderTexture"/>
				</x>
				<c path="String"/>
			</f>
			<haxe_doc>* Will return a a base64 encoded string of this target. It works by calling WebGLExtract.getCanvas and then running toDataURL on that.
	 *
	 * @param {PIXI.DisplayObject | PIXI.RenderTexture} target - A displayObject or renderTexture to convert. If left empty will use the main renderer
	 * @return {String} A base64 encoded string of the texture.</haxe_doc>
		</base64>
		<canvas public="1" set="method">
			<f a="?target">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.display.DisplayObject"/>
					<c path="pixi.core.textures.RenderTexture"/>
				</x>
				<c path="js.html.CanvasElement"/>
			</f>
			<haxe_doc>* Creates a Canvas element, renders this target to it and then returns it.
	 *
	 * @param {PIXI.DisplayObject | PIXI.RenderTexture} target - A displayObject or renderTexture to convert. If left empty will use the main renderer
	 * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.</haxe_doc>
		</canvas>
		<image public="1" set="method">
			<f a="?target">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.display.DisplayObject"/>
					<c path="pixi.core.textures.RenderTexture"/>
				</x>
				<c path="js.html.ImageElement"/>
			</f>
			<haxe_doc>* Will return a HTML Image of the target
	 *
	 * @param {PIXI.DisplayObject | PIXI.RenderTexture} target - A displayObject or renderTexture to convert. If left empty will use the main renderer
	 * @return {HTMLImageElement} HTML Image of the target</haxe_doc>
		</image>
		<pixels public="1" set="method">
			<f a="?target">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.display.DisplayObject"/>
					<c path="pixi.core.textures.RenderTexture"/>
				</x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>* Will return a one-dimensional array containing the pixel data of the entire texture in RGBA order, with integer values between 0 and 255 (included).
	 *
	 * @param {PIXI.DisplayObject | PIXI.RenderTexture} target - A displayObject or renderTexture to convert. If left empty will use the main renderer
	 * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture</haxe_doc>
		</pixels>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the extract</haxe_doc>
		</destroy>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates WebGLExtract
	 *
	 * @param {PIXI.Renderer} renderer - A reference to the current renderer</haxe_doc>
		</new>
		<haxe_doc>* The extract manager provides functionality to export content from the renderers.
 *
 * An instance of this class is automatically created by default, and can be found at renderer.plugins.extract</haxe_doc>
		<meta><m n=":native"><e>"PIXI.extract.Extract"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.filters.Filter" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/filters/Filter.hx" extern="1">
		<defaultVertexSrc public="1" static="1">
			<d/>
			<haxe_doc>* The default vertex shader source
	 *
	 * @static
	 * @constant</haxe_doc>
		</defaultVertexSrc>
		<defaultFragmentSrc public="1" static="1">
			<d/>
			<haxe_doc>* The default fragment shader source
	 *
	 * @static
	 * @constant</haxe_doc>
		</defaultFragmentSrc>
		<legacy public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Legacy filters use position and uvs from attributes</haxe_doc>
		</legacy>
		<blendMode public="1">
			<e path="pixi.core.BlendModes"/>
			<haxe_doc>* Sets the blendmode of the filter. Default: PIXI.BLEND_MODES.NORMAL</haxe_doc>
		</blendMode>
		<program public="1">
			<c path="pixi.core.renderers.webgl.Program"/>
			<haxe_doc>* Program that the shader uses</haxe_doc>
		</program>
		<state public="1">
			<c path="pixi.core.renderers.webgl.State"/>
			<haxe_doc>* The WebGL state the filter requires to render</haxe_doc>
		</state>
		<vertexSrc public="1">
			<c path="String"/>
			<haxe_doc>* The vertex shader.
	 *
	 * @member {String}</haxe_doc>
		</vertexSrc>
		<fragmentSrc public="1">
			<c path="String"/>
			<haxe_doc>* The fragment shader.
	 *
	 * @member {String}</haxe_doc>
		</fragmentSrc>
		<uniforms public="1">
			<d/>
			<haxe_doc><![CDATA[* An object containing the current values of custom uniforms.
	 * @example <caption>Updating the value of a custom uniform</caption>
	 * filter.uniforms.time = performance.now();
	 *
	 * @member {Dynamic}]]></haxe_doc>
		</uniforms>
		<padding public="1">
			<x path="Float"/>
			<haxe_doc>* The padding of the filter. Some filters require extra space to breath such as a blur.
	 * Increasing this will add extra width and height to the bounds of the object that the
	 * filter is applied to.
	 *
	 * @member {Float}</haxe_doc>
		</padding>
		<resolution public="1">
			<x path="Float"/>
			<haxe_doc>* The resolution of the filter. Setting this to be lower will lower the quality but
	 * increase the performance of the filter.
	 *
	 * @member {Float}</haxe_doc>
		</resolution>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>* If enabled is true the filter is applied, if false it will not.
	 *
	 * @member {Bool}</haxe_doc>
		</enabled>
		<autoFit public="1">
			<x path="Bool"/>
			<haxe_doc>* If enabled, PixiJS will fit the filter area into boundaries for better performance. Switch it off if it does not work for specific shader.
	 * Workaround for http://jsfiddle.net/xbmhh207/1/
	 * @default true
	 * @member {Bool}</haxe_doc>
		</autoFit>
		<apply public="1" set="method"><f a="filterManager:input:output:?clear:?currentState">
	<c path="pixi.core.renderers.systems.FilterSystem"/>
	<c path="pixi.core.textures.RenderTexture"/>
	<c path="pixi.core.textures.RenderTexture"/>
	<x path="Bool"/>
	<c path="pixi.core.renderers.webgl.filters.CurrentState"/>
	<x path="Void"/>
</f></apply>
		<new public="1" set="method">
			<f a="?vertexSrc:?fragmentSrc:?uniforms">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @class
	 * @memberof PIXI
	 * @param [vertexSrc] {String} The source of the vertex shader.
	 * @param [fragmentSrc] {String} The source of the fragment shader.
	 * @param [uniforms] {Dynamic} Custom uniforms to use to augment the built-in ones.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Filter"</e></m></meta>
	</class>
	<class path="pixi.core.renderers.webgl.filters.CurrentState" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/filters/Filter.hx" module="pixi.core.renderers.webgl.filters.Filter" extern="1" interface="1">
		<destinationFrame public="1"><c path="pixi.core.math.shapes.Rectangle"/></destinationFrame>
		<filters public="1"><c path="Array"><c path="pixi.core.renderers.webgl.filters.Filter"/></c></filters>
		<renderTarget public="1"><c path="pixi.core.renderers.webgl.utils.RenderTarget"/></renderTarget>
		<resolution public="1"><x path="Float"/></resolution>
		<sourceFrame public="1"><c path="pixi.core.math.shapes.Rectangle"/></sourceFrame>
		<target public="1"><c path="pixi.core.display.DisplayObject"/></target>
	</class>
	<class path="pixi.core.renderers.webgl.managers.WebGLManager" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/managers/WebGLManager.hx" extern="1">
		<onContextChange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Generic method called when there is a WebGL context change.
	 *</haxe_doc>
		</onContextChange>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Generic destroy methods to be overridden by the subclass
	 *</haxe_doc>
		</destroy>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @class
	 * @memberof PIXI
	 * @param renderer {Renderer} The renderer this manager works for.</haxe_doc>
		</new>
	</class>
	<class path="pixi.core.renderers.webgl.managers.MaskManager" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/managers/MaskManager.hx" extern="1">
		<extends path="pixi.core.renderers.webgl.managers.WebGLManager"/>
		<pushMask public="1" set="method">
			<f a="target:maskData">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current filter stack.
	 *
	 * @param graphics {Graphics}
	 * @param webGLData {any[]}</haxe_doc>
		</pushMask>
		<popMask public="1" set="method">
			<f a="target:maskData">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes the last mask from the mask stack and doesn't return it.
	 *
	 * @param target {RenderTarget}
	 * @param maskData {any[]}</haxe_doc>
		</popMask>
		<pushSpriteMask public="1" set="method">
			<f a="target:maskData">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current filter stack.
	 *
	 * @param target {RenderTarget}
	 * @param maskData {any[]}</haxe_doc>
		</pushSpriteMask>
		<popSpriteMask public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes the last filter from the filter stack and doesn't return it.
	 *</haxe_doc>
		</popSpriteMask>
		<pushStencilMask public="1" set="method">
			<f a="target:maskData">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies the Mask and adds it to the current filter stack.
	 *
	 * @param target {RenderTarget}
	 * @param maskData {any[]}</haxe_doc>
		</pushStencilMask>
		<popStencilMask public="1" set="method">
			<f a="target:maskData">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes the last filter from the filter stack and doesn't return it.
	 * @param target {RenderTarget}
	 * @param maskData {any[]}</haxe_doc>
		</popStencilMask>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @class
	 * @memberof PIXI
	 * @param renderer {Renderer} The renderer this manager works for.</haxe_doc>
		</new>
	</class>
	<class path="pixi.core.renderers.webgl.utils.ObjectRenderer" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/utils/ObjectRenderer.hx" extern="1">
		<extends path="pixi.core.renderers.webgl.managers.WebGLManager"/>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the renderer and sets the shader
	 *</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the renderer
	 *</haxe_doc>
		</stop>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stub method for rendering content and emptying the current batch.
	 *</haxe_doc>
		</flush>
		<render public="1" set="method">
			<f a="object">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Renders an object
	 *
	 * @param object {PIXI.DisplayObject} The object to render.</haxe_doc>
		</render>
		<new public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Base for a common object renderer that can be used as a system renderer plugin.
	 *
	 * @class
	 * @extends PIXI.WebGLManager
	 * @memberof PIXI
	 * @param renderer {PIXI.Renderer} The renderer this object renderer works for.</haxe_doc>
		</new>
	</class>
	<class path="pixi.core.renderers.webgl.utils.RenderTarget" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/renderers/webgl/utils/RenderTarget.hx" extern="1">
		<gl public="1">
			<d/>
			<haxe_doc>* The current WebGL drawing context.
	 *
	 * @member {WebGLRenderingContext}</haxe_doc>
		</gl>
		<frameBuffer public="1">
			<d/>
			<haxe_doc>* A frame buffer
	 *
	 * @member {PIXI.glCore.GLFramebuffer}</haxe_doc>
		</frameBuffer>
		<texture public="1">
			<d/>
			<haxe_doc>* The texture
	 *
	 * @member {PIXI.glCore.GLTexture}</haxe_doc>
		</texture>
		<clearColor public="1">
			<c path="Array"><x path="Int"/></c>
			<haxe_doc><![CDATA[* The background colour of this render target, as an array of [r,g,b,a] values
	 *
	 * @member {Array<Int>}]]></haxe_doc>
		</clearColor>
		<size public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* The size of the object as a rectangle
	 *
	 * @member {PIXI.Rectangle}</haxe_doc>
		</size>
		<resolution public="1">
			<x path="Float"/>
			<haxe_doc>* The current resolution / device pixel ratio
	 *
	 * @member {Float}
	 * @default 1</haxe_doc>
		</resolution>
		<projectionMatrix public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* The projection matrix
	 *
	 * @member {PIXI.Matrix}</haxe_doc>
		</projectionMatrix>
		<transform public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* The object's transform
	 *
	 * @member {PIXI.Matrix}</haxe_doc>
		</transform>
		<frame public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* The frame.
	 *
	 * @member {PIXI.Rectangle}</haxe_doc>
		</frame>
		<sourceFrame public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* Source frame
	 *
	 * @member {PIXI.Rectangle}</haxe_doc>
		</sourceFrame>
		<stencilBuffer public="1">
			<d/>
			<haxe_doc>* The stencil buffer stores masking data for the render target
	 *
	 * @member {glCore.GLBuffer}</haxe_doc>
		</stencilBuffer>
		<stencilMaskStack public="1">
			<c path="Array"><c path="pixi.core.graphics.Graphics"/></c>
			<haxe_doc><![CDATA[* The data structure for the stencil masks
	 *
	 * @member {Array<Graphics>}]]></haxe_doc>
		</stencilMaskStack>
		<filterData public="1">
			<c path="Array"><d/></c>
			<haxe_doc><![CDATA[* Stores filter data for the render target
	 *
	 * @member {Array<Dynamic>}]]></haxe_doc>
		</filterData>
		<scaleMode public="1">
			<e path="pixi.core.ScaleModes"/>
			<haxe_doc>* The scale mode.
	 *
	 * @member {ScaleModes}
	 * @default PIXI.settings.SCALE_MODE
	 * @see PIXI.SCALE_MODES</haxe_doc>
		</scaleMode>
		<root public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether this object is the root element or not
	 *
	 * @member {Bool}</haxe_doc>
		</root>
		<clear public="1" set="method">
			<f a="?clearColor">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Clears the filter texture.
	 *
	 * @param {Array<Int>} [clearColor=this.clearColor] - Array of [r,g,b,a] to clear the framebuffer]]></haxe_doc>
		</clear>
		<attachStencilBuffer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Binds the stencil buffer.
	 *</haxe_doc>
		</attachStencilBuffer>
		<setFrame public="1" set="method">
			<f a="destinationFrame:sourceFrame">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the frame of the render target.
	 *
	 * @param {Rectangle} destinationFrame - The destination frame.
	 * @param {Rectangle} sourceFrame - The source frame.</haxe_doc>
		</setFrame>
		<activate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Binds the buffers and initialises the viewport.
	 *</haxe_doc>
		</activate>
		<calculateProjection public="1" set="method">
			<f a="destinationFrame:sourceFrame">
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the projection matrix based on a projection frame (which is a rectangle)
	 *
	 * @param {Rectangle} destinationFrame - The destination frame.
	 * @param {Rectangle} sourceFrame - The source frame.</haxe_doc>
		</calculateProjection>
		<resize public="1" set="method">
			<f a="width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resizes the texture to the specified width and height
	 *
	 * @param {Float} width - the new width of the texture
	 * @param {Float} height - the new height of the texture</haxe_doc>
		</resize>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys the render target.
	 *</haxe_doc>
		</destroy>
		<new public="1" set="method">
			<f a="gl:?width:?height:?scaleMode:?resolution:?root">
				<d/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param {WebGLRenderingContext} gl - The current WebGL drawing context
	 * @param {Float} [width=0] - the horizontal range of the filter
	 * @param {Float} [height=0] - the vertical range of the filter
	 * @param {ScaleModes} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
	 * @param {Float} [resolution=1] - The current resolution / device pixel ratio
	 * @param {Bool} [root=false] - Whether this object is the root element or not</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.RenderTarget"</e></m></meta>
	</class>
	<class path="pixi.core.textures.BaseTexture" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/BaseTexture.hx" extern="1">
		<extends path="pixi.interaction.EventEmitter"/>
		<_globalBatch public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* Global number of the texture batch, used by multi-texture renderers</haxe_doc>
		</_globalBatch>
		<addToCache public="1" set="method" static="1">
			<f a="baseTexture:id">
				<c path="pixi.core.textures.BaseTexture"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.
	 * @param	baseTexture
	 * @param	id</haxe_doc>
		</addToCache>
		<from public="1" set="method" static="1">
			<f a="source:?options:?strict">
				<d/>
				<x path="Null"><t path="pixi.core.textures.BaseTextureOptions"/></x>
				<x path="Bool"/>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>* Helper function that creates a base texture based on the source you provide. The source can be - image url, image element, canvas element. If the source is an image url or an image element and not in the base texture cache, it will be created and loaded.
	 * @param	source The source to create base texture from. Types: string | HTMLImageElement | HTMLCanvasElement | SVGElement | HTMLVideoElement
	 * @param	options See PIXI.BaseTexture's constructor for options.
	 * @param	strict Enforce strict-mode, see PIXI.settings.STRICT_TEXTURE_CACHE.
	 * @return The new base texture.</haxe_doc>
		</from>
		<fromBuffer public="1" set="method" static="1">
			<f a="buffer:width:height:options">
				<x path="haxe.extern.EitherType">
					<c path="js.lib.Float32Array"/>
					<c path="js.lib.Uint8Array"/>
				</x>
				<x path="Float"/>
				<x path="Float"/>
				<t path="pixi.core.textures.BaseTextureOptions"/>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>*
	 * @param	buffer The optional array to use, if no data is provided, a new Float32Array is created.
	 * @param	width Width of the resource
	 * @param	height Height of the resource
	 * @param	options See PIXI.BaseTexture's constructor for options.
	 * @return	The resulting new BaseTexture</haxe_doc>
		</fromBuffer>
		<removeFromCache public="1" set="method" static="1">
			<f a="baseTexture">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="pixi.core.textures.BaseTexture"/>
				</x>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>* Remove a BaseTexture from the global BaseTextureCache.
	 * @param	baseTexture id of a BaseTexture to be removed, or a BaseTexture instance itself.
	 * @return The BaseTexture that was removed.</haxe_doc>
		</removeFromCache>
		<_batchEnabled public="1">
			<x path="Int"/>
			<haxe_doc>* Number of the texture batch, used by multi-texture renderers</haxe_doc>
		</_batchEnabled>
		<anisotropicLevel public="1">
			<x path="Int"/>
			<haxe_doc>* Anisotropic filtering level of texture</haxe_doc>
		</anisotropicLevel>
		<cacheId public="1">
			<c path="String"/>
			<haxe_doc>* Currently default cache ID.</haxe_doc>
		</cacheId>
		<destroyed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Flag if BaseTexture has been destroyed.</haxe_doc>
		</destroyed>
		<dirtyId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Used by TextureSystem to only update texture to the GPU when needed. Please call update() to increment it.</haxe_doc>
		</dirtyId>
		<dirtyStyleId>
			<x path="Int"/>
			<haxe_doc>* Used by TextureSystem to only update texture style when needed.</haxe_doc>
		</dirtyStyleId>
		<format public="1">
			<e path="pixi.core.Formats"/>
			<haxe_doc>* The pixel format of the texture</haxe_doc>
		</format>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* The height of the base texture set when the image has loaded
	 *
	 * @member {Float}
	 * @readOnly</haxe_doc>
		</height>
		<isPowerOfTwo public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Whether or not the texture is a power of two, try to use power of two textures as much as you can</haxe_doc>
		</isPowerOfTwo>
		<mipmap public="1">
			<e path="pixi.core.MipmapModes"/>
			<haxe_doc>*
	 * Mipmap mode of the texture, affects downscaled images
	 *
	 * @member {MipmapModes}</haxe_doc>
		</mipmap>
		<premultiplyAlpha public="1">
			<x path="Bool"/>
			<haxe_doc>* Set to true to enable pre-multiplied alpha</haxe_doc>
		</premultiplyAlpha>
		<realWidth public="1">
			<x path="Float"/>
			<haxe_doc>* Used to store the actual width of the source of this texture
	 *
	 * @readonly
	 * @member {Float}</haxe_doc>
		</realWidth>
		<realHeight public="1">
			<x path="Float"/>
			<haxe_doc>* Used to store the actual height of the source of this texture
	 *
	 * @readonly
	 * @member {Float}</haxe_doc>
		</realHeight>
		<resolution public="1">
			<x path="Float"/>
			<haxe_doc>* The Resolution of the texture.
	 *
	 * @member {Float}</haxe_doc>
		</resolution>
		<scaleMode public="1">
			<e path="pixi.core.ScaleModes"/>
			<haxe_doc>* The scale mode to apply when scaling this texture
	 *
	 * @member {ScaleModes}
	 * @default scaleModes.LINEAR</haxe_doc>
		</scaleMode>
		<target public="1">
			<e path="pixi.core.Targets"/>
			<haxe_doc>* The target type
	 * Default Value: PIXI.TARGETS.TEXTURE_2D</haxe_doc>
		</target>
		<textureCacheIds public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The collection of alternative cache ids, since some BaseTextures can have more than one ID, short name and longer full URL</haxe_doc>
		</textureCacheIds>
		<touched>
			<x path="Float"/>
			<haxe_doc>* Used by automatic texture Garbage Collection, stores last GC tick when it was bound</haxe_doc>
		</touched>
		<type>
			<e path="pixi.core.Types"/>
			<haxe_doc>* The type of resource data
	 * Default Value: PIXI.TYPES.UNSIGNED_BYTE</haxe_doc>
		</type>
		<uid>
			<c path="String"/>
			<haxe_doc>* Global unique identifier for this BaseTexture</haxe_doc>
		</uid>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The width of the base texture set when the image has loaded
	 *
	 * @member {Float}
	 * @readOnly</haxe_doc>
		</width>
		<wrapMode public="1">
			<x path="Int"/>
			<haxe_doc>*
	 * WebGL Texture wrap mode
	 *
	 * @member {Int}
	 * @see PIXI.WRAP_MODES</haxe_doc>
		</wrapMode>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys this base texture. The method stops if resource doesn't want this texture to be destroyed. Removes texture from all caches.</haxe_doc>
		</destroy>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Frees the texture from WebGL memory without destroying this texture object. This means you can still use the texture later which will upload it to GPU memory again.</haxe_doc>
		</dispose>
		<getDrawableSource public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable for rendering with CanvasRenderer. Provided by @pixi/canvas-renderer package.
	 * @return Source to render with CanvasRenderer (returns PIXI.ICanvasImageSource)</haxe_doc>
		</getDrawableSource>
		<setRealSize public="1" set="method">
			<f a="realWidth:realHeight:?resolution">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>* Sets real size of baseTexture, preserves current resolution.
	 * @param	realWidth Full rendered width
	 * @param	realHeight Full rendered height
	 * @param	resolution Optionally set resolution
	 * @return this</haxe_doc>
		</setRealSize>
		<setResolution public="1" set="method">
			<f a="resolution">
				<x path="Float"/>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>* Changes resolution
	 * @param	resolution
	 * @return</haxe_doc>
		</setResolution>
		<setResource public="1" set="method">
			<f a="resource">
				<c path="pixi.resources.Resource"/>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>* Sets the resource if it wasn't set. Throws error if resource already present
	 * @param	resource that is managing this BaseTexture
	 * @return this</haxe_doc>
		</setResource>
		<setSize public="1" set="method">
			<f a="width:height:?resolution">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.core.textures.BaseTexture"/>
			</f>
			<haxe_doc>* Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.
	 * @param	width Visual width
	 * @param	height Visual height
	 * @param	resolution Optionally set resolution
	 * @return this</haxe_doc>
		</setSize>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Invalidates the object. Texture becomes valid if width and height are greater than zero.</haxe_doc>
		</update>
		<new public="1" set="method">
			<f a="?resource:?options">
				<d/>
				<x path="Null"><t path="pixi.core.textures.BaseTextureOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* A texture stores the information that represents an image. All textures have a base texture.
	 *
	 * @class
	 * @memberof PIXI
	 * @param source {Image|Canvas} the source object of the texture.
	 * @param [scaleMode=scaleModes.DEFAULT] {ScaleModes} See {@link SCALE_MODES} for possible values
	 * @param [resolution=1] {Float} The resolution / device pixel ratio of the texture</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.BaseTexture"</e></m></meta>
	</class>
	<class path="pixi.core.textures.BaseRenderTexture" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/BaseRenderTexture.hx" extern="1">
		<extends path="pixi.core.textures.BaseTexture"/>
		<resize public="1" set="method">
			<f a="width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resizes the BaseRenderTexture.
	 *
	 * @param width {Float} The width to resize to.
	 * @param height {Float} The height to resize to.</haxe_doc>
		</resize>
		<valid public="1">
			<x path="Bool"/>
			<haxe_doc>* This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
	 *
	 * @member {Bool}</haxe_doc>
		</valid>
		<new public="1" set="method">
			<f a="?width:?height:?scaleMode:?resolution">
				<x path="Float"/>
				<x path="Float"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A BaseRenderTexture is a special texture that allows any Pixi display object to be rendered to it.
	 *
	 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded
	 * otherwise black rectangles will be drawn instead.
	 *
	 * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position
	 * and rotation of the given Display Objects is ignored. For example:
	 *
	 * ```js
	 * var renderer = PIXI.autoDetectRenderer(1024, 1024, { view: canvas, ratio: 1 });
	 * var BaserenderTexture = new PIXI.BaseRenderTexture(renderer, 800, 600);
	 * var sprite = PIXI.Sprite.fromImage("spinObj_01.png");
	 *
	 * sprite.position.x = 800/2;
	 * sprite.position.y = 600/2;
	 * sprite.anchor.x = 0.5;
	 * sprite.anchor.y = 0.5;
	 *
	 * BaserenderTexture.render(sprite);
	 * ```
	 *
	 * The Sprite in this case will be rendered to a position of 0,0. To render this sprite at its actual
	 * position a Container should be used:
	 *
	 * ```js
	 * var doc = new Container();
	 *
	 * doc.addChild(sprite);
	 *
	 * var baseRenderTexture = new BaserenderTexture(100, 100);
	 * var renderTexture = new RenderTexture(baseRenderTexture);
	 *
	 * renderer.render(doc, renderTexture);  // Renders to center of RenderTexture
	 * ```
	 *
	 * @class
	 * @extends BaseTexture
	 * @memberof PIXI
	 * @param [width=100] {Float} The width of the base render texture
	 * @param [height=100] {Float} The height of the base render texture
	 * @param [scaleMode] {ScaleModes} See {@link PIXI.SCALE_MODES} for possible values
	 * @param [resolution=1] {Float} The resolution / device pixel ratio of the texture being generated</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.BaseRenderTexture"</e></m></meta>
	</class>
	<typedef path="pixi.core.textures.BaseTextureOptions" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/BaseTexture.hx" module="pixi.core.textures.BaseTexture"><a>
	<width>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</width>
	<updateFPS>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</updateFPS>
	<scale>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</scale>
	<height>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</height>
	<crossorigin>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</crossorigin>
	<createBitmap>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</createBitmap>
	<autoPlay>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoPlay>
	<autoLoad>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoLoad>
</a></typedef>
	<class path="pixi.core.textures.FrameBuffer" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/FrameBuffer.hx" extern="1">
		<colorTexture public="1" set="null">
			<c path="Array"><c path="pixi.core.textures.Texture"/></c>
			<haxe_doc>* Reference to the colorTexture.</haxe_doc>
		</colorTexture>
		<addColorTexture public="1" set="method">
			<f a="?index:?texture">
				<x path="Int"/>
				<c path="pixi.core.textures.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add texture to the colorTexture array
	 * @param	index Index of the array to add the texture to
	 * @param	texture Texture to add to the array</haxe_doc>
		</addColorTexture>
		<addDepthTexture public="1" set="method">
			<f a="?texture">
				<c path="pixi.core.textures.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add a depth texture to the frame buffer
	 * @param	texture Texture to add</haxe_doc>
		</addDepthTexture>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* disposes WebGL resources that are connected to this geometry</haxe_doc>
		</dispose>
		<enableDepth public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Enable depth on the frame buffer</haxe_doc>
		</enableDepth>
		<enableStencil public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Enable stencil on the frame buffer</haxe_doc>
		</enableStencil>
		<resize public="1" set="method">
			<f a="width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resize the frame buffer
	 * @param	width Width of the frame buffer to resize to
	 * @param	height Height of the frame buffer to resize to</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a="width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Frame buffer used by the BaseRenderTexture
	 * @param	width Width of the frame buffer
	 * @param	height height of the frame buffer</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.FrameBuffer"</e></m></meta>
	</class>
	<class path="pixi.core.textures.Texture" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/Texture.hx" extern="1">
		<extends path="pixi.interaction.EventEmitter"/>
		<fromImage public="1" set="method" static="1">
			<f a="imageId:?crossorigin:?scaleMode">
				<c path="String"/>
				<x path="Bool"/>
				<e path="pixi.core.ScaleModes"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Helper function that creates a Texture object from the given image url.
	 * If the image is not in the texture cache it will be  created and loaded.
	 *
	 * @static
	 * @param imageUrl {String} The image url of the texture
	 * @param crossorigin {Bool} Whether requests should be treated as crossorigin
	 * @param scaleMode {ScaleModes} See {{#crossLink "PIXI/scaleModes:property"}}scaleModes{{/crossLink}} for possible values
	 * @return Texture</haxe_doc>
		</fromImage>
		<fromFrame public="1" set="method" static="1">
			<f a="frameId">
				<c path="String"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId
	 * The frame ids are created when a Texture packer file has been loaded
	 *
	 * @static
	 * @param frameId {String} The frame Id of the texture in the cache
	 * @return {Texture} The newly created texture</haxe_doc>
		</fromFrame>
		<fromCanvas public="1" set="method" static="1">
			<f a="canvas:?scaleMode:?origin">
				<d/>
				<e path="pixi.core.ScaleModes"/>
				<c path="String"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Helper function that creates a new Texture based on the given canvas element.
	 *
	 * @static
	 * @param canvas {Canvas} The canvas element source of the texture
	 * @param scaleMode {ScaleModes} See {{#crossLink "PIXI/scaleModes:property"}}scaleModes{{/crossLink}} for possible values
	 * @param {String} [origin='canvas'] - A string origin of who created the base texture
	 * @return {Texture}</haxe_doc>
		</fromCanvas>
		<fromVideo public="1" set="method" static="1">
			<f a="video:?scaleMode:?crossorigin:?autoPlay">
				<x path="haxe.extern.EitherType">
					<c path="js.html.VideoElement"/>
					<c path="String"/>
				</x>
				<e path="pixi.core.ScaleModes"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Helper function that creates a new Texture based on the given video element.
	 *
	 * @static
	 * @param video {VideoElement|String} The URL or actual element of the video
	 * @param scaleMode {ScaleModes} See {{#crossLink "PIXI/scaleModes:property"}}scaleModes{{/crossLink}} for possible values
	 * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.
	 * @param {boolean} [autoPlay=true] - Start playing video as soon as it is loaded
	 * @return {Texture} A Texture</haxe_doc>
		</fromVideo>
		<fromVideoUrl public="1" set="method" static="1">
			<f a="videoUrl:?scaleMode:?crossorigin:?autoPlay">
				<c path="String"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Helper function that creates a new Texture based on the video url.
	 *
	 * @static
	 * @param videoUrl {String}
	 * @param scaleMode {ScaleModes} See {{#crossLink "PIXI/scaleModes:property"}}scaleModes{{/crossLink}} for possible values
	 * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.
	 * @param {boolean} [autoPlay=true] - Start playing video as soon as it is loaded
	 * @return {Texture} A Texture</haxe_doc>
		</fromVideoUrl>
		<from public="1" set="method" static="1">
			<f a="source">
				<d/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Helper function that creates a new Texture based on the source you provide.
	 * The soucre can be - frame id, image url, video url, canvae element, video element, base texture
	 *
	 * @static
	 * @param {String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	 * @return {Texture} The newly created texture</haxe_doc>
			<overloads>
				<from public="1" set="method">
					<f a="source">
						<c path="String"/>
						<c path="pixi.core.textures.Texture"/>
					</f>
					<haxe_doc>* Helper function that creates a new Texture based on the source you provide.
	 * The soucre can be - frame id, image url, video url, canvae element, video element, base texture
	 *
	 * @static
	 * @param {String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	 * @return {Texture} The newly created texture</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="pixi.core.textures.BaseTexture"/>
						<c path="pixi.core.textures.Texture"/>
					</f>
					<haxe_doc>* Helper function that creates a new Texture based on the source you provide.
	 * The soucre can be - frame id, image url, video url, canvae element, video element, base texture
	 *
	 * @static
	 * @param {String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	 * @return {Texture} The newly created texture</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="js.html.CanvasElement"/>
						<c path="pixi.core.textures.Texture"/>
					</f>
					<haxe_doc>* Helper function that creates a new Texture based on the source you provide.
	 * The soucre can be - frame id, image url, video url, canvae element, video element, base texture
	 *
	 * @static
	 * @param {String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	 * @return {Texture} The newly created texture</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="js.html.VideoElement"/>
						<c path="pixi.core.textures.Texture"/>
					</f>
					<haxe_doc>* Helper function that creates a new Texture based on the source you provide.
	 * The soucre can be - frame id, image url, video url, canvae element, video element, base texture
	 *
	 * @static
	 * @param {String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from
	 * @return {Texture} The newly created texture</haxe_doc>
				</from>
			</overloads>
		</from>
		<fromLoader public="1" set="method" static="1">
			<f a="source:imageUrl:?name">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Create a texture from a source and add to the cache.
	 *
	 * @static
	 * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.
	 * @param {String} imageUrl - File name of texture, for cache and resolving resolution.
	 * @param {String} [name] - Human readible name for the texture cache. If no name is
	 *        specified, only `imageUrl` will be used as the cache ID.
	 * @return {PIXI.Texture} Output texture</haxe_doc>
		</fromLoader>
		<addToCache public="1" set="method" static="1">
			<f a="texture:id">
				<c path="pixi.core.textures.Texture"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a texture to the global utils.TextureCache. This cache is shared across the whole PIXI object.
	 *
	 * @static
	 * @param texture {Texture} The Texture to add to the cache.
	 * @param id {String} The id that the texture will be stored against.</haxe_doc>
		</addToCache>
		<addTextureToCache public="1" set="method" static="1"><f a="texture:id">
	<c path="pixi.core.textures.Texture"/>
	<c path="String"/>
	<x path="Void"/>
</f></addTextureToCache>
		<removeFromCache public="1" set="method" static="1">
			<f a="id">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="pixi.core.textures.Texture"/>
				</x>
				<c path="pixi.core.textures.Texture"/>
			</f>
			<haxe_doc>* Remove a texture from the global utils.TextureCache.
	 *
	 * @static
	 * @param id {String} The id of the texture to be removed
	 * @return {Texture} The texture that was removed</haxe_doc>
		</removeFromCache>
		<removeTextureFromCache public="1" set="method" static="1"><f a="id">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="pixi.core.textures.Texture"/>
	</x>
	<c path="pixi.core.textures.Texture"/>
</f></removeTextureFromCache>
		<EMPTY public="1" static="1">
			<c path="pixi.core.textures.Texture"/>
			<haxe_doc>* An empty texture, used often to not have to create multiple empty textures.
	 * @static
	 * @constant
	 * @member {Texture}</haxe_doc>
		</EMPTY>
		<WHITE public="1" static="1">
			<c path="pixi.core.textures.Texture"/>
			<haxe_doc>* A white texture of 10x10 size, used for graphics and other things
	 * Can not be destroyed.
	 *
	 * @static
	 * @constant</haxe_doc>
		</WHITE>
		<noFrame public="1">
			<x path="Bool"/>
			<haxe_doc>* Does this Texture have any frame data assigned to it?
	 *
	 * @member {Bool}</haxe_doc>
		</noFrame>
		<baseTexture public="1">
			<c path="pixi.core.textures.BaseTexture"/>
			<haxe_doc>* The base texture that this texture uses.
	 *
	 * @member {BaseTexture}</haxe_doc>
		</baseTexture>
		<defaultAnchor public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* Anchor point that is used as default if sprite is created with this texture.
	 * Changing the defaultAnchor at a later point of time will not update Sprite's anchor point.
	 *
	 * Default {0,0}
	 *
	 * @member {Point}</haxe_doc>
		</defaultAnchor>
		<trim public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* The texture trim data.
	 *
	 * @member {Rectangle}</haxe_doc>
		</trim>
		<valid public="1">
			<x path="Bool"/>
			<haxe_doc>* This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
	 *
	 * @member {Bool}</haxe_doc>
		</valid>
		<requiresUpdate public="1">
			<x path="Bool"/>
			<haxe_doc>* This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)
	 *
	 * @member {Bool}</haxe_doc>
		</requiresUpdate>
		<orig public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* This is the area of original texture, before it was put in atlas
	 *
	 * @member {Rectangle}</haxe_doc>
		</orig>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>* The width of the Texture in pixels.
	 *
	 * @member {Float}</haxe_doc>
		</width>
		<transform public="1">
			<d/>
			<haxe_doc>* Extra field for extra plugins. May contain clamp settings and some matrices
	 * @type {Object}</haxe_doc>
		</transform>
		<textureCacheIds public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc><![CDATA[* The ids under which this Texture has been added to the texture cache. This is
	 * automatically set as long as Texture.addToCache is used, but may not be set if a
	 * Texture is added directly to the TextureCache array.
	 *
	 * @member {Array<String>}]]></haxe_doc>
		</textureCacheIds>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>* The height of the Texture in pixels.
	 *
	 * @member {Float}</haxe_doc>
		</height>
		<crop public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
	 * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
	 *
	 * @member {Rectangle}</haxe_doc>
		</crop>
		<rotation public="1">
			<x path="Float"/>
			<haxe_doc>* The rotation value of the texture, copied to a sprite when assigned to it.
	 *
	 * @member {Float}</haxe_doc>
		</rotation>
		<frame public="1">
			<c path="pixi.core.math.shapes.Rectangle"/>
			<haxe_doc>* The frame specifies the region of the base texture that this texture uses
	 *
	 * @member {Rectangle}</haxe_doc>
		</frame>
		<destroy public="1" set="method">
			<f a="?destroyBase">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Destroys this texture
	 *
	 * @param destroyBase {Bool} Whether to destroy the base texture as well</haxe_doc>
		</destroy>
		<clone public="1" set="method">
			<f a=""><c path="pixi.core.textures.Texture"/></f>
			<haxe_doc>* Creates a new texture object that acts the same as this one.
	 *
	 * @return {Texture} The new texture</haxe_doc>
		</clone>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates this texture on the gpu.
	 *</haxe_doc>
		</update>
		<new public="1" set="method">
			<f a="baseTexture:?frame:?crop:?trim:?rotate:?anchor">
				<x path="haxe.extern.EitherType">
					<c path="pixi.core.textures.BaseTexture"/>
					<c path="pixi.core.textures.VideoBaseTexture"/>
				</x>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Bool"/>
				<c path="pixi.core.math.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A texture stores the information that represents an image or part of an image. It cannot be added
	 * to the display list directly. Instead use it as the texture for a Sprite. If no frame is provided then the whole image is used.
	 *
	 * You can directly create a texture from an image and then reuse it multiple times like this :
	 *
	 * ```js
	 * 	var texture = PIXI.Texture.fromImage('assets/image.png');
	 * 	var sprite1 = new PIXI.Sprite(texture);
	 * 	var sprite2 = new PIXI.Sprite(texture);
	 * ```
	 *
	 * @class
	 * @mixes eventTarget
	 * @memberof PIXI
	 * @param baseTexture {BaseTexture} The base texture source to create the texture from
	 * @param [frame] {Rectangle} The rectangle frame of the texture to show
	 * @param [crop] {Rectangle} The area of original texture
	 * @param [trim] {Rectangle} Trimmed texture rectangle
	 * @param [rotate] {boolean} indicates whether the texture should be rotated by 90 degrees ( used by texture packer )
	 * @param [anchor] {PIXI.Point} Default anchor point used for sprite placement / rotation</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.Texture"</e></m></meta>
	</class>
	<class path="pixi.core.textures.RenderTexture" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/RenderTexture.hx" extern="1">
		<extends path="pixi.core.textures.Texture"/>
		<create public="1" set="method" static="1">
			<f a="?width:?height:?scaleMode:?resolution">
				<x path="Float"/>
				<x path="Float"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Float"/>
				<c path="pixi.core.textures.RenderTexture"/>
			</f>
			<haxe_doc>* A short hand way of creating a render texture..
	 * @param [width=100] {Float} The width of the render texture
	 * @param [height=100] {Float} The height of the render texture
	 * @param [scaleMode] {ScaleModes} See {@link PIXI.SCALE_MODES} for possible values
	 * @param [resolution=1] {Float} The resolution of the texture being generated</haxe_doc>
		</create>
		<resize public="1" set="method">
			<f a="width:height:updateBase">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resizes the RenderTexture.
	 *
	 * @param width {Float} The width to resize to.
	 * @param height {Float} The height to resize to.
	 * @param updateBase {Bool} Should the baseTexture.width and height values be resized as well?</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a="baseRenderTexture:frame">
				<c path="pixi.core.textures.BaseRenderTexture"/>
				<c path="pixi.core.math.shapes.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A RenderTexture is a special texture that allows any Pixi display object to be rendered to it.
	 *
	 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded
	 * otherwise black rectangles will be drawn instead.
	 *
	 * A RenderTexture takes a snapshot of any Display Object given to its render method. The position
	 * and rotation of the given Display Objects is ignored. For example:
	 *
	 * ```haxe
	 * var renderer = Detector.autoDetectRenderer(1024, 1024, { view: canvas, ratio: 1 });
	 * var renderTexture = RenderTexture.create(800, 600);
	 * var sprite = Sprite.fromImage("spinObj_01.png");
	 *
	 * sprite.position.x = 800/2;
	 * sprite.position.y = 600/2;
	 * sprite.anchor.x = 0.5;
	 * sprite.anchor.y = 0.5;
	 *
	 * renderer.render(sprite, renderTexture);
	 * ```
	 *
	 * The Sprite in this case will be rendered to a position of 0,0. To render this sprite at its actual
	 * position a Container should be used:
	 *
	 * ```haxe
	 * var doc = new Container();
	 *
	 * doc.addChild(sprite);
	 *
	 * renderer.render(doc, renderTexture);  // Renders to center of renderTexture
	 * ```
	 *
	 * @class
	 * @extends Texture
	 * @memberof PIXI
	 * @param baseRenderTexture {BaseRenderTexture} The renderer used for this RenderTexture</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.RenderTexture"</e></m></meta>
	</class>
	<class path="pixi.core.textures.VideoBaseTexture" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/textures/VideoBaseTexture.hx" extern="1">
		<extends path="pixi.core.textures.BaseTexture"/>
		<fromVideo public="1" set="method" static="1">
			<f a="video:?scaleMode:?autoPlay">
				<c path="js.html.VideoElement"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Bool"/>
				<c path="pixi.core.textures.VideoBaseTexture"/>
			</f>
			<haxe_doc>* Mimic Pixi BaseTexture.from.... method.
	 *
	 * @static
	 * @param video {HTMLVideoElement}
	 * @param scaleMode {ScaleModes} See {@link SCALE_MODES} for possible values
	 * @param {boolean} [autoPlay=true] - Start playing video as soon as it is loaded
	 * @return {VideoBaseTexture}</haxe_doc>
		</fromVideo>
		<fromUrl public="1" set="method" static="1">
			<f a="videoSrc:?scaleMode:?autoPlay">
				<c path="String"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Bool"/>
				<c path="pixi.core.textures.VideoBaseTexture"/>
			</f>
			<haxe_doc>* Mimic Pixi BaseTexture.from.... method.
	 *
	 * This can be used in a couple ways, such as:
	 *
	 * ```haxe
	 * 	var texture = VideoBaseTexture.fromUrl('http://mydomain.com/video.mp4');
	 *
	 * 	var texture = VideoBaseTexture.fromUrl({ src: 'http://mydomain.com/video.mp4', mime: 'video/mp4' });
	 *
	 * 	var texture = VideoBaseTexture.fromUrls(['/video.webm', '/video.mp4']);
	 *
	 * 	var texture = VideoBaseTexture.fromUrls([
	 *     { src: '/video.webm', mime: 'video/webm' },
	 *     { src: '/video.mp4', mime: 'video/mp4' }
	 * ]);
	 * ```
	 *
	 * @alias fromUrls
	 * @static
	 * @param videoSrc {String|object|String[]|object[]} The URL(s) for the video.
	 * @param [videoSrc.src] {String} One of the source urls for the video
	 * @param [videoSrc.mime] {String} The mimetype of the video (e.g. 'video/mp4'). If not specified
	 *  the url's extension will be used as the second part of the mime type.
	 * @param scaleMode {ScaleModes} See {@link SCALE_MODES} for possible values
	 * @param {boolean} [autoPlay=true] - Start playing video as soon as it is loaded
	 * @return {VideoBaseTexture}</haxe_doc>
		</fromUrl>
		<fromUrls public="1" set="method" static="1"><f a="videoSrc:?scaleMode">
	<c path="Array"><c path="String"/></c>
	<e path="pixi.core.ScaleModes"/>
	<c path="pixi.core.textures.VideoBaseTexture"/>
</f></fromUrls>
		<autoPlay public="1">
			<x path="Bool"/>
			<haxe_doc>* When set to true will automatically play videos used by this texture once
	 * they are loaded. If false, it will not modify the playing state.
	 *
	 * @member {Bool}
	 * @default true</haxe_doc>
		</autoPlay>
		<autoUpdate public="1">
			<x path="Bool"/>
			<haxe_doc>* Should the base texture automatically update itself, set to true by default
	 *
	 * @member {Bool}</haxe_doc>
		</autoUpdate>
		<new public="1" set="method">
			<f a="source:?scaleMode:?autoPlay">
				<c path="js.html.VideoElement"/>
				<e path="pixi.core.ScaleModes"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A texture of a [playing] Video.
	 *
	 * Video base textures mimic Pixi BaseTexture.from.... method in their creation process.
	 *
	 * This can be used in several ways, such as:
	 *
	 * ```haxe
	 * var texture = VideoBaseTexture.fromUrl('http://mydomain.com/video.mp4');
	 *
	 * var texture = VideoBaseTexture.fromUrl({ src: 'http://mydomain.com/video.mp4', mime: 'video/mp4' });
	 *
	 * var texture = VideoBaseTexture.fromUrls(['/video.webm', '/video.mp4']);
	 *
	 * var texture = VideoBaseTexture.fromUrls([
	 *     { src: '/video.webm', mime: 'video/webm' },
	 *     { src: '/video.mp4', mime: 'video/mp4' }
	 * ]);
	 * ```
	 *
	 * See the ["deus" demo](http://www.goodboydigital.com/pixijs/examples/deus/).
	 *
	 * @class
	 * @extends BaseTexture
	 * @memberof PIXI
	 * @param source {HTMLVideoElement}
	 * @param [scaleMode] {ScaleModes} See {@link SCALE_MODES} for possible values
	 * @param {boolean} [autoPlay=true] - Start playing video as soon as it is loaded</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.VideoBaseTexture"</e></m></meta>
	</class>
	<typedef path="pixi.core.utils.IsMobile" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/utils/Utils.hx" module="pixi.core.utils.Utils"><a>
	<windows><a>
	<tablet><x path="Bool"/></tablet>
	<phone><x path="Bool"/></phone>
	<device><x path="Bool"/></device>
</a></windows>
	<tablet><x path="Bool"/></tablet>
	<seven_inch><x path="Bool"/></seven_inch>
	<phone><x path="Bool"/></phone>
	<other><a>
	<opera><x path="Bool"/></opera>
	<firefox><x path="Bool"/></firefox>
	<device><x path="Bool"/></device>
	<chrome><x path="Bool"/></chrome>
	<blackberry10><x path="Bool"/></blackberry10>
	<blackberry><x path="Bool"/></blackberry>
</a></other>
	<apple><a>
	<tablet><x path="Bool"/></tablet>
	<phone><x path="Bool"/></phone>
	<ipod><x path="Bool"/></ipod>
	<device><x path="Bool"/></device>
</a></apple>
	<any><x path="Bool"/></any>
	<android><a>
	<tablet><x path="Bool"/></tablet>
	<phone><x path="Bool"/></phone>
	<device><x path="Bool"/></device>
</a></android>
	<amazon><a>
	<tablet><x path="Bool"/></tablet>
	<phone><x path="Bool"/></phone>
	<device><x path="Bool"/></device>
</a></amazon>
</a></typedef>
	<class path="pixi.core.utils.Utils" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/core/utils/Utils.hx" extern="1">
		<EventEmitter public="1" static="1"><d/></EventEmitter>
		<pluginTarget public="1" static="1"><d/></pluginTarget>
		<async public="1" static="1"><d/></async>
		<TextureCache public="1" static="1"><d/></TextureCache>
		<BaseTextureCache public="1" static="1"><d/></BaseTextureCache>
		<skipHello public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Skips the hello message of renderers that are created after this is run.</haxe_doc>
		</skipHello>
		<isMobile public="1" static="1">
			<t path="pixi.core.utils.IsMobile"/>
			<haxe_doc>* True if pixi is running on mobile device</haxe_doc>
		</isMobile>
		<uid public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Gets the next unique identifier
	 *
	 * @return {Int} The next unique identifier to use.</haxe_doc>
		</uid>
		<hex2rgb public="1" set="method" static="1">
			<f a="hex:out">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc><![CDATA[* Converts a hex color number to an [R, G, B] array
	 *
	 * @param hex {Int}
	 * @param out {Array<Int>}
	 * @return {Array<Int>} An array representing the [R, G, B] of the color.]]></haxe_doc>
		</hex2rgb>
		<hex2string public="1" set="method" static="1">
			<f a="hex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Converts a hex color number to a string.
	 *
	 * @param hex {Int}
	 * @return {string} The string color.</haxe_doc>
		</hex2string>
		<rgb2hex public="1" set="method" static="1">
			<f a="rgb">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Converts a color as an [R, G, B] array to a hex number
	 *
	 * @param rgb {Array<Int>}
	 * @return {Int} The color number]]></haxe_doc>
		</rgb2hex>
		<canUseNewCanvasBlendModes public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the Canvas BlendModes are supported by the current browser
	 *
	 * @return {Bool} whether they are supported</haxe_doc>
		</canUseNewCanvasBlendModes>
		<getNextPowerOfTwo public="1" set="method" static="1">
			<f a="number">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Given a number, this function returns the closest number that is a power of two
	 * this function is taken from Starling Framework as its pretty neat ;)
	 *
	 * @param number {Float}
	 * @return {Float} the closest number that is a power of two</haxe_doc>
		</getNextPowerOfTwo>
		<isPowerOfTwo public="1" set="method" static="1">
			<f a="width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* checks if the given width and height make a power of two rectangle
	 *
	 * @param width {Float}
	 * @param height {Float}
	 * @return {Bool}</haxe_doc>
		</isPowerOfTwo>
		<getResolutionOfUrl public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* get the resolution of an asset by looking for the prefix
	 * used by spritesheets and image urls
	 *
	 * @param url {String} the image path
	 * @return {Float}</haxe_doc>
		</getResolutionOfUrl>
		<sayHello public="1" set="method" static="1">
			<f a="type">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Logs out the version and renderer information for this running instance of PIXI.
	 * If you don't want to see this message you can set `PIXI.utils._saidHello = true;`
	 * so the library thinks it already said it. Keep in mind that doing that will forever
	 * makes you a jerk face.
	 *
	 * @param {String} type - The string renderer type to log.
	 * @constant
	 * @static</haxe_doc>
		</sayHello>
		<trimCanvas public="1" set="method" static="1">
			<f a="canvas">
				<c path="js.html.CanvasElement"/>
				<a>
					<width><x path="Int"/></width>
					<height><x path="Int"/></height>
					<data><c path="js.html.ImageData"/></data>
				</a>
			</f>
			<haxe_doc>* Trim transparent borders from a canvas</haxe_doc>
		</trimCanvas>
		<isWebGLSupported public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Helper for checking for webgl support</haxe_doc>
		</isWebGLSupported>
		<sign public="1" set="method" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns sign of number
	 *
	 * @param n {Float}
	 * @return {Int} 0 if n is 0, -1 if n is negative, 1 if n i positive</haxe_doc>
		</sign>
		<removeItems public="1" set="method" static="1">
			<f a="arr:startIdx:removeCount">
				<c path="Array"><d/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* removeItems
	 *
	 * @param {Array} arr The target array
	 * @param {Int} startIdx The index to begin removing from (inclusive)
	 * @param {Int} removeCount How many items to remove</haxe_doc>
		</removeItems>
		<destroyTextureCache public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Destroys all texture in the cache</haxe_doc>
		</destroyTextureCache>
		<clearTextureCache public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes all textures from cache, but does not destroy them</haxe_doc>
		</clearTextureCache>
		<earcut public="1" set="method" static="1">
			<f a="vertices:?holes:?dimensions">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* @see {@link https://github.com/mapbox/earcut}
	 *
	 * @memberof PIXI.utils
	 * @function earcut
	 * @param {number[]} vertices - A flat array of vertice coordinates
	 * @param {number[]} [holes] - An array of hole indices
	 * @param {number} [dimensions=2] The number of coordinates per vertice in the input array
	 * @return {number[]} Triangulated polygon</haxe_doc>
		</earcut>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"PIXI.utils"</e></m>
		</meta>
	</class>
	<class path="pixi.extras.TilingSprite" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/extras/TilingSprite.hx" extern="1">
		<extends path="pixi.core.sprites.Sprite"/>
		<from public="1" set="method" static="1">
			<f a="source:width:height">
				<d/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.extras.TilingSprite"/>
			</f>
			<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} The newly created sprite</haxe_doc>
			<overloads>
				<from public="1" set="method">
					<f a="source">
						<x path="Int"/>
						<c path="pixi.extras.TilingSprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="String"/>
						<c path="pixi.extras.TilingSprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="pixi.core.textures.BaseTexture"/>
						<c path="pixi.extras.TilingSprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="js.html.CanvasElement"/>
						<c path="pixi.extras.TilingSprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} The newly created sprite</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="source">
						<c path="js.html.VideoElement"/>
						<c path="pixi.extras.TilingSprite"/>
					</f>
					<haxe_doc>* Helper function that creates a new sprite based on the source you provide.
	 * The source can be - frame id, image url, video url, canvas element, video element, base texture
	 *
	 * @static
	 * @param {Int|String|BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} The newly created sprite</haxe_doc>
				</from>
			</overloads>
		</from>
		<fromFrame public="1" set="method" static="1">
			<f a="frameId:width:height">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="pixi.extras.TilingSprite"/>
			</f>
			<haxe_doc>* Helper function that creates a tiling sprite that will use a texture from the TextureCache based on the frameId
	 * The frame ids are created when a Texture packer file has been loaded
	 *
	 * @static
	 * @param {String} frameId - The frame Id of the texture in the cache
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @return {TilingSprite} A new TilingSprite using a texture from the texture cache matching the frameId</haxe_doc>
		</fromFrame>
		<fromImage public="1" set="method" static="1">
			<f a="imageId:width:height:?crossorigin:?scaleMode">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<e path="pixi.core.ScaleModes"/>
				<c path="pixi.extras.TilingSprite"/>
			</f>
			<haxe_doc>* Helper function that creates a sprite that will contain a texture based on an image url
	 * If the image is not in the texture cache it will be loaded
	 *
	 * @static
	 * @param {String} imageId - The image url of the texture
	 * @param {Float} width - the width of the tiling sprite
	 * @param {Float} height - the height of the tiling sprite
	 * @param {Bool} [crossorigin] - if you want to specify the cross-origin parameter
	 * @param {ScaleModes} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,
	 *  see {@link PIXI.SCALE_MODES} for possible values
	 * @return {TilingSprite} A new TilingSprite using a texture from the texture cache matching the image id</haxe_doc>
		</fromImage>
		<tileTransform public="1">
			<c path="pixi.core.display.Transform"/>
			<haxe_doc>* Tile transform
	 *
	 * @member {Transform}</haxe_doc>
		</tileTransform>
		<uvRespectAnchor public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether or not anchor affects uvs
	 *
	 * @member {Bool}
	 * @default false</haxe_doc>
		</uvRespectAnchor>
		<tileScale public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The scaling of the image that is being tiled
	 *
	 * @member {ObservablePoint}</haxe_doc>
		</tileScale>
		<tilePosition public="1">
			<c path="pixi.core.math.ObservablePoint"/>
			<haxe_doc>* The offset position of the image that is being tiled
	 *
	 * @member {ObservablePoint}</haxe_doc>
		</tilePosition>
		<clampMargin public="1">
			<x path="Float"/>
			<haxe_doc>* Changes frame clamping in corresponding textureTransform, shortcut
	 * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
	 * @default 0.5</haxe_doc>
		</clampMargin>
		<new public="1" set="method">
			<f a="texture:?width:?height">
				<c path="pixi.core.textures.Texture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* A tiling sprite is a fast way of rendering a tiling image
	 *
	 * @class
	 * @extends Sprite
	 * @memberof PIXI.extras
	 * @param texture {Texture} the texture of the tiling sprite
	 * @param width {Float} [width=100] the width of the tiling sprite
	 * @param height {Float} [height=100] the height of the tiling sprite</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.TilingSprite"</e></m></meta>
	</class>
	<class path="pixi.filters.colormatrix.ColorMatrixFilter" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/filters/colormatrix/ColorMatrixFilter.hx" extern="1">
		<extends path="pixi.core.renderers.webgl.filters.Filter"/>
		<matrix public="1">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>* Sets the matrix of the color matrix filter
	 *
	 * @member {number[]}
	 * @memberof ColorMatrixFilter#
	 * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]</haxe_doc>
		</matrix>
		<brightness public="1" set="method">
			<f a="b:multiply">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adjusts brightness
	 *
	 * Multiply the current matrix
	 * @param b {Float} value of the brigthness (0 is black)
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</brightness>
		<greyscale public="1" set="method">
			<f a="scale:multiply">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the matrices in grey scales
	 *
	 * Multiply the current matrix
	 * @param scale {Float} value of the grey (0 is black)
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</greyscale>
		<blackAndWhite public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the black and white matrice
	 * Multiply the current matrix
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</blackAndWhite>
		<hue public="1" set="method">
			<f a="rotation:multiply">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the hue propertie of the color
	 *
	 * Multiply the current matrix
	 * @param rotation {Float} in degrees
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</hue>
		<contrast public="1" set="method">
			<f a="amount:multiply">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the contrast matrix, increase the separation between dark and bright
	 * Increase contrast : shadows darker and highlights brighter
	 * Decrease contrast : bring the shadows up and the highlights down
	 *
	 * @param amount {Float} value of the contrast
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</contrast>
		<saturation public="1" set="method">
			<f a="amount:multiply">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the saturation matrix, increase the separation between colors
	 * Increase saturation : increase contrast, brightness, and sharpness
	 * @param amount {Float}
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</saturation>
		<desaturate public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Desaturate image (remove color)
	 *
	 * Call the saturate function
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</desaturate>
		<negative public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Negative image (inverse of classic rgb matrix)
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</negative>
		<sepia public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sepia image
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</sepia>
		<technicolor public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Color motion picture process invented in 1916 (thanks Dominic Szablewski)
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</technicolor>
		<polaroid public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Polaroid filter
	 *
	 * @param multiply {boolean} refer to ._loadMatrix() method</haxe_doc>
		</polaroid>
		<toBGR public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Filter who transforms : Red -> Blue and Blue -> Red
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method]]></haxe_doc>
		</toBGR>
		<kodachrome public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</kodachrome>
		<browni public="1" set="method">
			<f a="multiply">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Brown delicious browni filter (thanks Dominic Szablewski)
	 *
	 * @param multiply {Bool} refer to ._loadMatrix() method</haxe_doc>
		</browni>
		<vintage public="1" set="method"><f a="multiply">
	<x path="Bool"/>
	<x path="Void"/>
</f></vintage>
		<colorTone public="1" set="method"><f a="desaturation:toned:lightColor:darkColor:multiply">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorTone>
		<night public="1" set="method"><f a="intensity:multiply">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></night>
		<predator public="1" set="method"><f a="amount:multiply">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></predator>
		<lsd public="1" set="method"><f a="multiply">
	<x path="Bool"/>
	<x path="Void"/>
</f></lsd>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* The ColorMatrixFilter class lets you apply a 5x5 matrix transformation on the RGBA
	 * color and alpha values of every pixel on your displayObject to produce a result
	 * with a new set of RGBA color and alpha values. It's pretty powerful!
	 *
	 * ```js
	 *  var colorMatrix = new ColorMatrixFilter();
	 *  container.filters = [colorMatrix];
	 *  colorMatrix.contrast(2);
	 * ```
	 * @author Clément Chenebault <clement@goodboydigital.com>
	 * @class
	 * @extends AbstractFilter
	 * @memberof PIXI.filters]]></haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.filters.ColorMatrixFilter"</e></m></meta>
	</class>
	<class path="pixi.filters.spritemask.SpriteMaskFilter" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/filters/spritemask/SpriteMaskFilter.hx" extern="1">
		<extends path="pixi.core.renderers.webgl.filters.Filter"/>
		<maskMatrix public="1">
			<c path="pixi.core.math.Matrix"/>
			<haxe_doc>* Mask matrix</haxe_doc>
		</maskMatrix>
		<maskSprite public="1">
			<c path="pixi.core.sprites.Sprite"/>
			<haxe_doc>* Sprite Mask</haxe_doc>
		</maskSprite>
		<new public="1" set="method">
			<f a="sprite">
				<c path="pixi.core.sprites.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* This handles a Sprite acting as a mask, as opposed to a Graphic. WebGL only.
	 * @param	sprite the target sprite</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.SpriteMaskFilter"</e></m></meta>
	</class>
	<class path="pixi.interaction.InteractionData" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/interaction/InteractionData.hx" extern="1">
		<global public="1">
			<c path="pixi.core.math.Point"/>
			<haxe_doc>* This point stores the global coords of where the touch/mouse event happened
	 *
	 * @member {Point}</haxe_doc>
		</global>
		<target public="1">
			<c path="pixi.core.display.DisplayObject"/>
			<haxe_doc>* The target DisplayObject that was interacted with
	 *
	 * @member {DisplayObject}</haxe_doc>
		</target>
		<originalEvent public="1">
			<c path="js.html.Event"/>
			<haxe_doc>* When passed to an event handler, this will be the original DOM Event that was captured
	 *
	 * @member {Event}</haxe_doc>
		</originalEvent>
		<identifier public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<x path="Int"/>
			</x>
			<haxe_doc>* Unique identifier for this interaction
	 *
	 * @member {String|Int}</haxe_doc>
		</identifier>
		<getLocalPosition public="1" set="method">
			<f a="displayObject:?point:?globalPos">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
				<c path="pixi.core.math.Point"/>
			</f>
			<haxe_doc>* This will return the local coordinates of the specified displayObject for this InteractionData
	 *
	 * @param displayObject {DisplayObject} The DisplayObject that you would like the local coords off
	 * @param [point] {Point} A Point object in which to store the value, optional (otherwise will create a new point)
	 * @param [globalPos] {Point} A Point object containing your custom global coords, optional (otherwise will use the current global coords)
	 * @return {Point} A point containing the coordinates of the InteractionData position relative to the DisplayObject</haxe_doc>
		</getLocalPosition>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Holds all information related to an Interaction event
	 *
	 * @class
	 * @memberof PIXI.interaction</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.interaction.InteractionData"</e></m></meta>
	</class>
	<class path="pixi.interaction.InteractionEvent" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/interaction/InteractionEvent.hx" extern="1">
		<stopped public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether this event will continue propagating in the tree
	 *
	 * @member {Bool}</haxe_doc>
		</stopped>
		<target public="1">
			<c path="pixi.core.display.DisplayObject"/>
			<haxe_doc>* The object which caused this event to be dispatched.
	 * For listener callback see {@link PIXI.interaction.InteractionEvent.currentTarget}.
	 *
	 * @member {DisplayObject}</haxe_doc>
		</target>
		<currentTarget public="1">
			<c path="pixi.core.display.DisplayObject"/>
			<haxe_doc>* The object whose event listener’s callback is currently being invoked.
	 *
	 * @member {DisplayObject}</haxe_doc>
		</currentTarget>
		<type public="1"><c path="String"/></type>
		<data public="1"><c path="pixi.interaction.InteractionData"/></data>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Prevents event from reaching any objects other than the current object.
	 *</haxe_doc>
		</stopPropagation>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Event class that mimics native DOM events.
	 *
	 * @class
	 * @memberof PIXI.interaction</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.interaction.InteractionEvent"</e></m></meta>
	</class>
	<class path="pixi.resources.Resource" params="" file="/home/runner/haxe/haxe_libraries/pixijs/5.1.2/haxelib/src/pixi/resources/Resource.hx" extern="1">
		<_height>
			<x path="Float"/>
			<haxe_doc>* Internal height of the resource</haxe_doc>
		</_height>
		<_width>
			<x path="Float"/>
			<haxe_doc>* Internal width of the resource</haxe_doc>
		</_width>
		<destroyed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* If resource has been destroyed</haxe_doc>
		</destroyed>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The height of the resource.</haxe_doc>
		</height>
		<internal public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if resource is created by BaseTexture useful for doing cleanup with BaseTexture destroy and not cleaning up resources that were created externally.</haxe_doc>
		</internal>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Has been validated</haxe_doc>
		</valid>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The width of the resource.</haxe_doc>
		</width>
		<bind public="1" set="method">
			<f a="baseTexture">
				<c path="pixi.core.textures.BaseTexture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Bind to a parent BaseTexture
	 * @param	baseTexture Parent texture</haxe_doc>
		</bind>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Call when destroying resource, unbind any BaseTexture object before calling this method, as reference counts are maintained internally.</haxe_doc>
		</destroy>
		<dispose set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clean up anything, this happens when destroying is ready.</haxe_doc>
		</dispose>
		<load set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>* This can be overridden to start preloading a resource or do any other prepare step.
	 * @return Handle the validate event</haxe_doc>
		</load>
		<resize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Trigger a resize event</haxe_doc>
		</resize>
		<style public="1" set="method">
			<f a="renderer:baseTexture:glTexture">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<c path="pixi.core.textures.BaseTexture"/>
				<c path="pixi.core.renderers.webgl.GLTexture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Set the style, optional to override
	 * @param	renderer yeah, renderer!
	 * @param	baseTexture the texture
	 * @param	glTexture texture instance for this webgl context
	 * @return true is success</haxe_doc>
		</style>
		<unbind public="1" set="method">
			<f a="baseTexture">
				<c path="pixi.core.textures.BaseTexture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Unbind to a parent BaseTexture
	 * @param	baseTexture</haxe_doc>
		</unbind>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Has been updated trigger event</haxe_doc>
		</update>
		<upload public="1" set="method">
			<f a="renderer:baseTexture:glTexture">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<c path="pixi.core.textures.BaseTexture"/>
				<c path="pixi.core.renderers.webgl.GLTexture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Uploads the texture or returns false if it cant for some reason. Override this.
	 * @param	renderer yeah, renderer!
	 * @param	baseTexture the texture
	 * @param	glTexture texture instance for this webgl context
	 * @return true is success</haxe_doc>
		</upload>
		<new public="1" set="method">
			<f a="?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Base resource class for textures that manages validation and uploading, depending on its type.
	 * Uploading of a base texture to the GPU is required.
	 * @param	width Width of the resource
	 * @param	height Height of the resource</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PIXI.resources.Resource"</e></m></meta>
	</class>
	<class path="rm.Globals" params="" file="src/rm/Globals.hx">
		<Plugins public="1" static="1">
			<c path="Array"><t path="rm.types.PluginSettings"/></c>
			<meta><m n=":native"><e>"$plugins"</e></m></meta>
			<haxe_doc>* The Global plugins variable containing all plugins in the plugin manager.</haxe_doc>
		</Plugins>
		<GameVariables public="1" static="1">
			<c path="rm.objects.Game_Variables"/>
			<meta><m n=":native"><e>"$gameVariables"</e></m></meta>
			<haxe_doc>* The Global game variables in rm.</haxe_doc>
		</GameVariables>
		<GameSwitches public="1" static="1">
			<c path="rm.objects.Game_Switches"/>
			<meta><m n=":native"><e>"$gameSwitches"</e></m></meta>
			<haxe_doc>* The global game switches in rm.</haxe_doc>
		</GameSwitches>
		<GameSystem public="1" static="1">
			<c path="rm.objects.Game_System"/>
			<meta><m n=":native"><e>"$gameSystem"</e></m></meta>
			<haxe_doc>* RPGMakerMZ system game data.</haxe_doc>
		</GameSystem>
		<GameTemp public="1" static="1">
			<c path="rm.objects.Game_Temp"/>
			<meta><m n=":native"><e>"$gameTemp"</e></m></meta>
			<haxe_doc>* RPGMakerMZ temporary game data.</haxe_doc>
		</GameTemp>
		<GameMessage public="1" static="1">
			<c path="rm.objects.Game_Message"/>
			<meta><m n=":native"><e>"$gameMessage"</e></m></meta>
			<haxe_doc>* Functions to update the RPGMakerMZ message window.</haxe_doc>
		</GameMessage>
		<GameSelfSwitches public="1" static="1">
			<c path="rm.objects.Game_SelfSwitches"/>
			<meta><m n=":native"><e>"$gameSelfSwitches"</e></m></meta>
			<haxe_doc>* Functions to update the self switches in game.</haxe_doc>
		</GameSelfSwitches>
		<GameActors public="1" static="1">
			<c path="rm.objects.Game_Actors"/>
			<meta><m n=":native"><e>"$gameActors"</e></m></meta>
			<haxe_doc>* Game Actor utility functionality for RPGMakerMZ.</haxe_doc>
		</GameActors>
		<GameTimer public="1" static="1">
			<c path="rm.objects.Game_Timer"/>
			<meta><m n=":native"><e>"$gameTimer"</e></m></meta>
			<haxe_doc>* Game Timers in RPGMakerMZ.</haxe_doc>
		</GameTimer>
		<GameMap public="1" static="1">
			<c path="rm.objects.Game_Map"/>
			<meta><m n=":native"><e>"$gameMap"</e></m></meta>
			<haxe_doc>* Controls and functionality for the RPGMakerMZ game map.</haxe_doc>
		</GameMap>
		<GameParty public="1" static="1">
			<c path="rm.objects.Game_Party"/>
			<meta><m n=":native"><e>"$gameParty"</e></m></meta>
			<haxe_doc>* Controls and functionality for interacting with the game party.</haxe_doc>
		</GameParty>
		<GamePlayer public="1" static="1">
			<c path="rm.objects.Game_Player"/>
			<meta><m n=":native"><e>"$gamePlayer"</e></m></meta>
			<haxe_doc>* Controls and functionality for interacting with the game player
  * data while the game is running.</haxe_doc>
		</GamePlayer>
		<TestEvent public="1" static="1">
			<c path="Array"><t path="rm.types.EventCommand"/></c>
			<meta><m n=":native"><e>"$testEvent"</e></m></meta>
		</TestEvent>
		<DataActors public="1" static="1">
			<c path="Array"><t path="rm.types.Actor"/></c>
			<meta><m n=":native"><e>"$dataActors"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database actor data.</haxe_doc>
		</DataActors>
		<DataMap public="1" static="1">
			<t path="rm.types.RPGMap"/>
			<meta><m n=":native"><e>"$dataMap"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database map data.</haxe_doc>
		</DataMap>
		<DataItems public="1" static="1">
			<c path="Array"><t path="rm.types.Item"/></c>
			<meta><m n=":native"><e>"$dataItems"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database item data.</haxe_doc>
		</DataItems>
		<DataStates public="1" static="1">
			<c path="Array"><t path="rm.types.State"/></c>
			<meta><m n=":native"><e>"$dataStates"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database state data.</haxe_doc>
		</DataStates>
		<DataEnemies public="1" static="1">
			<c path="Array"><t path="rm.types.Enemy"/></c>
			<meta><m n=":native"><e>"$dataEnemies"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database enemy data.</haxe_doc>
		</DataEnemies>
		<DataArmor public="1" static="1">
			<c path="Array"><t path="rm.types.Armor"/></c>
			<meta><m n=":native"><e>"$dataArmors"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database armor data.</haxe_doc>
		</DataArmor>
		<DataWeapons public="1" static="1">
			<c path="Array"><t path="rm.types.Weapon"/></c>
			<meta><m n=":native"><e>"$dataWeapons"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database weapon data.</haxe_doc>
		</DataWeapons>
		<DataTroops public="1" static="1">
			<c path="Array"><t path="rm.types.Troop"/></c>
			<meta><m n=":native"><e>"$dataTroops"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database troop data.</haxe_doc>
		</DataTroops>
		<DataCommonEvents public="1" static="1">
			<c path="Array"><t path="rm.types.CommonEvent"/></c>
			<meta><m n=":native"><e>"$dataCommonEvents"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database common event data.</haxe_doc>
		</DataCommonEvents>
		<DataSystem public="1" static="1">
			<t path="rm.types.System"/>
			<meta><m n=":native"><e>"$dataSystem"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database system data.</haxe_doc>
		</DataSystem>
		<DataMapInfos public="1" static="1">
			<c path="Array"><t path="rm.types.MapInfo"/></c>
			<meta><m n=":native"><e>"$dataMapInfos"</e></m></meta>
			<haxe_doc>* RPGMakerMZ database maps information.</haxe_doc>
		</DataMapInfos>
		<meta><m n=":native"><e>"_LTGlobals_"</e></m></meta>
	</class>
	<abstract path="rm.abstracts.managers.AudioMgr" params="" file="src/rm/abstracts/managers/AudioMgr.hx">
		<from><icast><c path="rm.managers.AudioManager"/></icast></from>
		<this><c path="rm.managers.AudioManager"/></this>
		<to><icast><c path="rm.managers.AudioManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._AudioMgr.AudioMgr_Impl_" params="" file="src/rm/abstracts/managers/AudioMgr.hx" private="1" module="rm.abstracts.managers.AudioMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._AudioMgr.AudioMgr_Impl_" params="" file="src/rm/abstracts/managers/AudioMgr.hx" private="1" module="rm.abstracts.managers.AudioMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.BattleMgr" params="" file="src/rm/abstracts/managers/BattleMgr.hx">
		<from><icast><c path="rm.managers.BattleManager"/></icast></from>
		<this><c path="rm.managers.BattleManager"/></this>
		<to><icast><c path="rm.managers.BattleManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._BattleMgr.BattleMgr_Impl_" params="" file="src/rm/abstracts/managers/BattleMgr.hx" private="1" module="rm.abstracts.managers.BattleMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._BattleMgr.BattleMgr_Impl_" params="" file="src/rm/abstracts/managers/BattleMgr.hx" private="1" module="rm.abstracts.managers.BattleMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.ColorMgr" params="" file="src/rm/abstracts/managers/ColorMgr.hx">
		<from><icast><c path="rm.managers.ColorManager"/></icast></from>
		<this><c path="rm.managers.ColorManager"/></this>
		<to><icast><c path="rm.managers.ColorManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._ColorMgr.ColorMgr_Impl_" params="" file="src/rm/abstracts/managers/ColorMgr.hx" private="1" module="rm.abstracts.managers.ColorMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._ColorMgr.ColorMgr_Impl_" params="" file="src/rm/abstracts/managers/ColorMgr.hx" private="1" module="rm.abstracts.managers.ColorMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.ConfigMgr" params="" file="src/rm/abstracts/managers/ConfigMgr.hx">
		<from><icast><c path="rm.managers.ConfigManager"/></icast></from>
		<this><c path="rm.managers.ConfigManager"/></this>
		<to><icast><c path="rm.managers.ConfigManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._ConfigMgr.ConfigMgr_Impl_" params="" file="src/rm/abstracts/managers/ConfigMgr.hx" private="1" module="rm.abstracts.managers.ConfigMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._ConfigMgr.ConfigMgr_Impl_" params="" file="src/rm/abstracts/managers/ConfigMgr.hx" private="1" module="rm.abstracts.managers.ConfigMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.DataMgr" params="" file="src/rm/abstracts/managers/DataMgr.hx">
		<from><icast><c path="rm.managers.DataManager"/></icast></from>
		<this><c path="rm.managers.DataManager"/></this>
		<to><icast><c path="rm.managers.DataManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._DataMgr.DataMgr_Impl_" params="" file="src/rm/abstracts/managers/DataMgr.hx" private="1" module="rm.abstracts.managers.DataMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._DataMgr.DataMgr_Impl_" params="" file="src/rm/abstracts/managers/DataMgr.hx" private="1" module="rm.abstracts.managers.DataMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.EffectMgr" params="" file="src/rm/abstracts/managers/EffectMgr.hx">
		<from><icast><c path="rm.managers.EffectManager"/></icast></from>
		<this><c path="rm.managers.EffectManager"/></this>
		<to><icast><c path="rm.managers.EffectManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._EffectMgr.EffectMgr_Impl_" params="" file="src/rm/abstracts/managers/EffectMgr.hx" private="1" module="rm.abstracts.managers.EffectMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._EffectMgr.EffectMgr_Impl_" params="" file="src/rm/abstracts/managers/EffectMgr.hx" private="1" module="rm.abstracts.managers.EffectMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.ImageMgr" params="" file="src/rm/abstracts/managers/ImageMgr.hx">
		<from><icast><c path="rm.managers.ImageManager"/></icast></from>
		<this><c path="rm.managers.ImageManager"/></this>
		<to><icast><c path="rm.managers.ImageManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._ImageMgr.ImageMgr_Impl_" params="" file="src/rm/abstracts/managers/ImageMgr.hx" private="1" module="rm.abstracts.managers.ImageMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._ImageMgr.ImageMgr_Impl_" params="" file="src/rm/abstracts/managers/ImageMgr.hx" private="1" module="rm.abstracts.managers.ImageMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.PluginMgr" params="" file="src/rm/abstracts/managers/PluginMgr.hx">
		<from><icast><c path="rm.managers.PluginManager"/></icast></from>
		<this><c path="rm.managers.PluginManager"/></this>
		<to><icast><c path="rm.managers.PluginManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._PluginMgr.PluginMgr_Impl_" params="" file="src/rm/abstracts/managers/PluginMgr.hx" private="1" module="rm.abstracts.managers.PluginMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._PluginMgr.PluginMgr_Impl_" params="" file="src/rm/abstracts/managers/PluginMgr.hx" private="1" module="rm.abstracts.managers.PluginMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.SceneMgr" params="" file="src/rm/abstracts/managers/SceneMgr.hx">
		<from><icast><c path="rm.managers.SceneManager"/></icast></from>
		<this><c path="rm.managers.SceneManager"/></this>
		<to><icast><c path="rm.managers.SceneManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._SceneMgr.SceneMgr_Impl_" params="" file="src/rm/abstracts/managers/SceneMgr.hx" private="1" module="rm.abstracts.managers.SceneMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._SceneMgr.SceneMgr_Impl_" params="" file="src/rm/abstracts/managers/SceneMgr.hx" private="1" module="rm.abstracts.managers.SceneMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.SoundMgr" params="" file="src/rm/abstracts/managers/SoundMgr.hx">
		<from><icast><c path="rm.managers.SoundManager"/></icast></from>
		<this><c path="rm.managers.SoundManager"/></this>
		<to><icast><c path="rm.managers.SoundManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._SoundMgr.SoundMgr_Impl_" params="" file="src/rm/abstracts/managers/SoundMgr.hx" private="1" module="rm.abstracts.managers.SoundMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._SoundMgr.SoundMgr_Impl_" params="" file="src/rm/abstracts/managers/SoundMgr.hx" private="1" module="rm.abstracts.managers.SoundMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.StorageMgr" params="" file="src/rm/abstracts/managers/StorageMgr.hx">
		<from><icast><c path="rm.managers.StorageManager"/></icast></from>
		<this><c path="rm.managers.StorageManager"/></this>
		<to><icast><c path="rm.managers.StorageManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._StorageMgr.StorageMgr_Impl_" params="" file="src/rm/abstracts/managers/StorageMgr.hx" private="1" module="rm.abstracts.managers.StorageMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._StorageMgr.StorageMgr_Impl_" params="" file="src/rm/abstracts/managers/StorageMgr.hx" private="1" module="rm.abstracts.managers.StorageMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.managers.TextMgr" params="" file="src/rm/abstracts/managers/TextMgr.hx">
		<from><icast><c path="rm.managers.TextManager"/></icast></from>
		<this><c path="rm.managers.TextManager"/></this>
		<to><icast><c path="rm.managers.TextManager"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.managers._TextMgr.TextMgr_Impl_" params="" file="src/rm/abstracts/managers/TextMgr.hx" private="1" module="rm.abstracts.managers.TextMgr" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.managers._TextMgr.TextMgr_Impl_" params="" file="src/rm/abstracts/managers/TextMgr.hx" private="1" module="rm.abstracts.managers.TextMgr" extern="1" final="1"/>
	<abstract path="rm.abstracts.objects.GameAction" params="" file="src/rm/abstracts/objects/GameAction.hx">
		<from><icast><c path="rm.objects.Game_Action"/></icast></from>
		<this><c path="rm.objects.Game_Action"/></this>
		<to><icast><c path="rm.objects.Game_Action"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameAction.GameAction_Impl_" params="" file="src/rm/abstracts/objects/GameAction.hx" private="1" module="rm.abstracts.objects.GameAction" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="subject:forcing">
		<c path="rm.objects.Game_Battler"/>
		<x path="Bool"/>
		<x path="rm.abstracts.objects.GameAction"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameAction.GameAction_Impl_" params="" file="src/rm/abstracts/objects/GameAction.hx" private="1" module="rm.abstracts.objects.GameAction" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="subject:forcing">
		<c path="rm.objects.Game_Battler"/>
		<x path="Bool"/>
		<x path="rm.abstracts.objects.GameAction"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameActionResult" params="" file="src/rm/abstracts/objects/GameActionResult.hx">
		<from><icast><c path="rm.objects.Game_ActionResult"/></icast></from>
		<this><c path="rm.objects.Game_ActionResult"/></this>
		<to><icast><c path="rm.objects.Game_ActionResult"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameActionResult.GameActionResult_Impl_" params="" file="src/rm/abstracts/objects/GameActionResult.hx" private="1" module="rm.abstracts.objects.GameActionResult" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameActionResult"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameActionResult.GameActionResult_Impl_" params="" file="src/rm/abstracts/objects/GameActionResult.hx" private="1" module="rm.abstracts.objects.GameActionResult" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameActionResult"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameActor" params="" file="src/rm/abstracts/objects/GameActor.hx">
		<from><icast><c path="rm.objects.Game_Actor"/></icast></from>
		<this><c path="rm.objects.Game_Actor"/></this>
		<to><icast><c path="rm.objects.Game_Actor"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameActor.GameActor_Impl_" params="" file="src/rm/abstracts/objects/GameActor.hx" private="1" module="rm.abstracts.objects.GameActor" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="actorId">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameActor"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameActor.GameActor_Impl_" params="" file="src/rm/abstracts/objects/GameActor.hx" private="1" module="rm.abstracts.objects.GameActor" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="actorId">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameActor"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameActors" params="" file="src/rm/abstracts/objects/GameActors.hx">
		<from><icast><c path="rm.objects.Game_Actors"/></icast></from>
		<this><c path="rm.objects.Game_Actors"/></this>
		<to><icast><c path="rm.objects.Game_Actors"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameActors.GameActors_Impl_" params="" file="src/rm/abstracts/objects/GameActors.hx" private="1" module="rm.abstracts.objects.GameActors" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameActors"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameActors.GameActors_Impl_" params="" file="src/rm/abstracts/objects/GameActors.hx" private="1" module="rm.abstracts.objects.GameActors" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameActors"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameBattler" params="" file="src/rm/abstracts/objects/GameBattler.hx">
		<from><icast><c path="rm.objects.Game_Battler"/></icast></from>
		<this><c path="rm.objects.Game_Battler"/></this>
		<to><icast><c path="rm.objects.Game_Battler"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameBattler.GameBattler_Impl_" params="" file="src/rm/abstracts/objects/GameBattler.hx" private="1" module="rm.abstracts.objects.GameBattler" final="1"><_new public="1" set="method" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameBattler"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameBattler.GameBattler_Impl_" params="" file="src/rm/abstracts/objects/GameBattler.hx" private="1" module="rm.abstracts.objects.GameBattler" final="1"><_new public="1" set="method" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameBattler"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameBattlerBase" params="" file="src/rm/abstracts/objects/GameBattlerBase.hx">
		<from><icast><c path="rm.objects.Game_BattlerBase"/></icast></from>
		<this><c path="rm.objects.Game_BattlerBase"/></this>
		<to><icast><c path="rm.objects.Game_BattlerBase"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameBattlerBase.GameBattlerBase_Impl_" params="" file="src/rm/abstracts/objects/GameBattlerBase.hx" private="1" module="rm.abstracts.objects.GameBattlerBase" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameBattlerBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameBattlerBase.GameBattlerBase_Impl_" params="" file="src/rm/abstracts/objects/GameBattlerBase.hx" private="1" module="rm.abstracts.objects.GameBattlerBase" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameBattlerBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameCharacter" params="" file="src/rm/abstracts/objects/GameCharacter.hx">
		<from><icast><c path="rm.objects.Game_Character"/></icast></from>
		<this><c path="rm.objects.Game_Character"/></this>
		<to><icast><c path="rm.objects.Game_Character"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameCharacter.GameCharacter_Impl_" params="" file="src/rm/abstracts/objects/GameCharacter.hx" private="1" module="rm.abstracts.objects.GameCharacter" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameCharacter"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameCharacter.GameCharacter_Impl_" params="" file="src/rm/abstracts/objects/GameCharacter.hx" private="1" module="rm.abstracts.objects.GameCharacter" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameCharacter"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameCharacterBase" params="" file="src/rm/abstracts/objects/GameCharacterBase.hx">
		<from><icast><c path="rm.objects.Game_CharacterBase"/></icast></from>
		<this><c path="rm.objects.Game_CharacterBase"/></this>
		<to><icast><c path="rm.objects.Game_CharacterBase"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameCharacterBase.GameCharacterBase_Impl_" params="" file="src/rm/abstracts/objects/GameCharacterBase.hx" private="1" module="rm.abstracts.objects.GameCharacterBase" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameCharacterBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameCharacterBase.GameCharacterBase_Impl_" params="" file="src/rm/abstracts/objects/GameCharacterBase.hx" private="1" module="rm.abstracts.objects.GameCharacterBase" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameCharacterBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameCommonEvent" params="" file="src/rm/abstracts/objects/GameCommonEvent.hx">
		<from><icast><c path="rm.objects.Game_CommonEvent"/></icast></from>
		<this><c path="rm.objects.Game_CommonEvent"/></this>
		<to><icast><c path="rm.objects.Game_CommonEvent"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameCommonEvent.GameCommonEvent_Impl_" params="" file="src/rm/abstracts/objects/GameCommonEvent.hx" private="1" module="rm.abstracts.objects.GameCommonEvent" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="eventId">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameCommonEvent"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameCommonEvent.GameCommonEvent_Impl_" params="" file="src/rm/abstracts/objects/GameCommonEvent.hx" private="1" module="rm.abstracts.objects.GameCommonEvent" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="eventId">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameCommonEvent"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameEnemy" params="" file="src/rm/abstracts/objects/GameEnemy.hx">
		<from><icast><c path="rm.objects.Game_Enemy"/></icast></from>
		<this><c path="rm.objects.Game_Enemy"/></this>
		<to><icast><c path="rm.objects.Game_Enemy"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameEnemy.GameEnemy_Impl_" params="" file="src/rm/abstracts/objects/GameEnemy.hx" private="1" module="rm.abstracts.objects.GameEnemy" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="enemyId:x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameEnemy"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameEnemy.GameEnemy_Impl_" params="" file="src/rm/abstracts/objects/GameEnemy.hx" private="1" module="rm.abstracts.objects.GameEnemy" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="enemyId:x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameEnemy"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameEvent" params="" file="src/rm/abstracts/objects/GameEvent.hx">
		<from><icast><c path="rm.objects.Game_Event"/></icast></from>
		<this><c path="rm.objects.Game_Event"/></this>
		<to><icast><c path="rm.objects.Game_Event"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameEvent.GameEvent_Impl_" params="" file="src/rm/abstracts/objects/GameEvent.hx" private="1" module="rm.abstracts.objects.GameEvent" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="mapId:eventId">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameEvent"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameEvent.GameEvent_Impl_" params="" file="src/rm/abstracts/objects/GameEvent.hx" private="1" module="rm.abstracts.objects.GameEvent" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="mapId:eventId">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameEvent"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameFollower" params="" file="src/rm/abstracts/objects/GameFollower.hx">
		<from><icast><c path="rm.objects.Game_Follower"/></icast></from>
		<this><c path="rm.objects.Game_Follower"/></this>
		<to><icast><c path="rm.objects.Game_Follower"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameFollower.GameFollower_Impl_" params="" file="src/rm/abstracts/objects/GameFollower.hx" private="1" module="rm.abstracts.objects.GameFollower" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="memberIndex">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameFollower"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameFollower.GameFollower_Impl_" params="" file="src/rm/abstracts/objects/GameFollower.hx" private="1" module="rm.abstracts.objects.GameFollower" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="memberIndex">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameFollower"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameFollowers" params="" file="src/rm/abstracts/objects/GameFollowers.hx">
		<from><icast><c path="rm.objects.Game_Followers"/></icast></from>
		<this><c path="rm.objects.Game_Followers"/></this>
		<to><icast><c path="rm.objects.Game_Followers"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameFollowers.GameFollowers_Impl_" params="" file="src/rm/abstracts/objects/GameFollowers.hx" private="1" module="rm.abstracts.objects.GameFollowers" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameFollowers"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameFollowers.GameFollowers_Impl_" params="" file="src/rm/abstracts/objects/GameFollowers.hx" private="1" module="rm.abstracts.objects.GameFollowers" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameFollowers"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameInterpreter" params="" file="src/rm/abstracts/objects/GameInterpreter.hx">
		<from><icast><c path="rm.objects.Game_Interpreter"/></icast></from>
		<this><c path="rm.objects.Game_Interpreter"/></this>
		<to><icast><c path="rm.objects.Game_Interpreter"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameInterpreter.GameInterpreter_Impl_" params="" file="src/rm/abstracts/objects/GameInterpreter.hx" private="1" module="rm.abstracts.objects.GameInterpreter" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="depth">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameInterpreter"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameInterpreter.GameInterpreter_Impl_" params="" file="src/rm/abstracts/objects/GameInterpreter.hx" private="1" module="rm.abstracts.objects.GameInterpreter" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="depth">
		<x path="Int"/>
		<x path="rm.abstracts.objects.GameInterpreter"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameItem" params="" file="src/rm/abstracts/objects/GameItem.hx">
		<from><icast><c path="rm.objects.Game_Item"/></icast></from>
		<this><c path="rm.objects.Game_Item"/></this>
		<to><icast><c path="rm.objects.Game_Item"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameItem.GameItem_Impl_" params="" file="src/rm/abstracts/objects/GameItem.hx" private="1" module="rm.abstracts.objects.GameItem" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="item">
		<t path="rm.types.BaseItem"/>
		<x path="rm.abstracts.objects.GameItem"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameItem.GameItem_Impl_" params="" file="src/rm/abstracts/objects/GameItem.hx" private="1" module="rm.abstracts.objects.GameItem" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="item">
		<t path="rm.types.BaseItem"/>
		<x path="rm.abstracts.objects.GameItem"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameMap" params="" file="src/rm/abstracts/objects/GameMap.hx">
		<from><icast><c path="rm.objects.Game_Map"/></icast></from>
		<this><c path="rm.objects.Game_Map"/></this>
		<to><icast><c path="rm.objects.Game_Map"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameMap.GameMap_Impl_" params="" file="src/rm/abstracts/objects/GameMap.hx" private="1" module="rm.abstracts.objects.GameMap" final="1"><_new public="1" set="method" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameMap"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameMap.GameMap_Impl_" params="" file="src/rm/abstracts/objects/GameMap.hx" private="1" module="rm.abstracts.objects.GameMap" final="1"><_new public="1" set="method" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameMap"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameMessage" params="" file="src/rm/abstracts/objects/GameMessage.hx">
		<from><icast><c path="rm.objects.Game_Message"/></icast></from>
		<this><c path="rm.objects.Game_Message"/></this>
		<to><icast><c path="rm.objects.Game_Message"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameMessage.GameMessage_Impl_" params="" file="src/rm/abstracts/objects/GameMessage.hx" private="1" module="rm.abstracts.objects.GameMessage" final="1"><_new public="1" set="method" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameMessage"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameMessage.GameMessage_Impl_" params="" file="src/rm/abstracts/objects/GameMessage.hx" private="1" module="rm.abstracts.objects.GameMessage" final="1"><_new public="1" set="method" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameMessage"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameParty" params="" file="src/rm/abstracts/objects/GameParty.hx">
		<from><icast><c path="rm.objects.Game_Party"/></icast></from>
		<this><c path="rm.objects.Game_Party"/></this>
		<to><icast><c path="rm.objects.Game_Party"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameParty.GameParty_Impl_" params="" file="src/rm/abstracts/objects/GameParty.hx" private="1" module="rm.abstracts.objects.GameParty" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameParty"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameParty.GameParty_Impl_" params="" file="src/rm/abstracts/objects/GameParty.hx" private="1" module="rm.abstracts.objects.GameParty" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameParty"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GamePicture" params="" file="src/rm/abstracts/objects/GamePicture.hx">
		<from><icast><c path="rm.objects.Game_Picture"/></icast></from>
		<this><c path="rm.objects.Game_Picture"/></this>
		<to><icast><c path="rm.objects.Game_Picture"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GamePicture.GamePicture_Impl_" params="" file="src/rm/abstracts/objects/GamePicture.hx" private="1" module="rm.abstracts.objects.GamePicture" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GamePicture"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GamePicture.GamePicture_Impl_" params="" file="src/rm/abstracts/objects/GamePicture.hx" private="1" module="rm.abstracts.objects.GamePicture" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GamePicture"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GamePlayer" params="" file="src/rm/abstracts/objects/GamePlayer.hx">
		<from><icast><c path="rm.objects.Game_Player"/></icast></from>
		<this><c path="rm.objects.Game_Player"/></this>
		<to><icast><c path="rm.objects.Game_Player"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GamePlayer.GamePlayer_Impl_" params="" file="src/rm/abstracts/objects/GamePlayer.hx" private="1" module="rm.abstracts.objects.GamePlayer" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GamePlayer"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GamePlayer.GamePlayer_Impl_" params="" file="src/rm/abstracts/objects/GamePlayer.hx" private="1" module="rm.abstracts.objects.GamePlayer" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GamePlayer"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameScreen" params="" file="src/rm/abstracts/objects/GameScreen.hx">
		<from><icast><c path="rm.objects.Game_Screen"/></icast></from>
		<this><c path="rm.objects.Game_Screen"/></this>
		<to><icast><c path="rm.objects.Game_Screen"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameScreen.GameScreen_Impl_" params="" file="src/rm/abstracts/objects/GameScreen.hx" private="1" module="rm.abstracts.objects.GameScreen" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameScreen"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameScreen.GameScreen_Impl_" params="" file="src/rm/abstracts/objects/GameScreen.hx" private="1" module="rm.abstracts.objects.GameScreen" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameScreen"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameSelfSwitches" params="" file="src/rm/abstracts/objects/GameSelfSwitches.hx">
		<from><icast><c path="rm.objects.Game_SelfSwitches"/></icast></from>
		<this><c path="rm.objects.Game_SelfSwitches"/></this>
		<to><icast><c path="rm.objects.Game_SelfSwitches"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameSelfSwitches.GameSelfSwitches_Impl_" params="" file="src/rm/abstracts/objects/GameSelfSwitches.hx" private="1" module="rm.abstracts.objects.GameSelfSwitches" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameSelfSwitches"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameSelfSwitches.GameSelfSwitches_Impl_" params="" file="src/rm/abstracts/objects/GameSelfSwitches.hx" private="1" module="rm.abstracts.objects.GameSelfSwitches" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameSelfSwitches"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameSwitches" params="" file="src/rm/abstracts/objects/GameSwitches.hx">
		<from><icast><c path="rm.objects.Game_Switches"/></icast></from>
		<this><c path="rm.objects.Game_Switches"/></this>
		<to><icast><c path="rm.objects.Game_Switches"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameSwitches.GameSwitches_Impl_" params="" file="src/rm/abstracts/objects/GameSwitches.hx" private="1" module="rm.abstracts.objects.GameSwitches" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameSwitches"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameSwitches.GameSwitches_Impl_" params="" file="src/rm/abstracts/objects/GameSwitches.hx" private="1" module="rm.abstracts.objects.GameSwitches" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameSwitches"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameTemp" params="" file="src/rm/abstracts/objects/GameTemp.hx">
		<from><icast><c path="rm.objects.Game_Temp"/></icast></from>
		<this><c path="rm.objects.Game_Temp"/></this>
		<to><icast><c path="rm.objects.Game_Temp"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameTemp.GameTemp_Impl_" params="" file="src/rm/abstracts/objects/GameTemp.hx" private="1" module="rm.abstracts.objects.GameTemp" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameTemp"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameTemp.GameTemp_Impl_" params="" file="src/rm/abstracts/objects/GameTemp.hx" private="1" module="rm.abstracts.objects.GameTemp" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.objects.GameTemp"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameTimer" params="" file="src/rm/abstracts/objects/GameTimer.hx">
		<from><icast><c path="rm.objects.Game_Timer"/></icast></from>
		<this><c path="rm.objects.Game_Timer"/></this>
		<to><icast><c path="rm.objects.Game_Timer"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameTimer.GameTimer_Impl_" params="" file="src/rm/abstracts/objects/GameTimer.hx" private="1" module="rm.abstracts.objects.GameTimer" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameTimer"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameTimer.GameTimer_Impl_" params="" file="src/rm/abstracts/objects/GameTimer.hx" private="1" module="rm.abstracts.objects.GameTimer" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameTimer"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameTroop" params="" file="src/rm/abstracts/objects/GameTroop.hx">
		<from><icast><c path="rm.objects.Game_Troop"/></icast></from>
		<this><c path="rm.objects.Game_Troop"/></this>
		<to><icast><c path="rm.objects.Game_Troop"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameTroop.GameTroop_Impl_" params="" file="src/rm/abstracts/objects/GameTroop.hx" private="1" module="rm.abstracts.objects.GameTroop" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameTroop"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameTroop.GameTroop_Impl_" params="" file="src/rm/abstracts/objects/GameTroop.hx" private="1" module="rm.abstracts.objects.GameTroop" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameTroop"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameUnit" params="" file="src/rm/abstracts/objects/GameUnit.hx">
		<from><icast><c path="rm.objects.Game_Unit"/></icast></from>
		<this><c path="rm.objects.Game_Unit"/></this>
		<to><icast><c path="rm.objects.Game_Unit"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameUnit.GameUnit_Impl_" params="" file="src/rm/abstracts/objects/GameUnit.hx" private="1" module="rm.abstracts.objects.GameUnit" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameUnit"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameUnit.GameUnit_Impl_" params="" file="src/rm/abstracts/objects/GameUnit.hx" private="1" module="rm.abstracts.objects.GameUnit" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameUnit"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameVariables" params="" file="src/rm/abstracts/objects/GameVariables.hx">
		<from><icast><c path="rm.objects.Game_Variables"/></icast></from>
		<this><c path="rm.objects.Game_Variables"/></this>
		<to><icast><c path="rm.objects.Game_Variables"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameVariables.GameVariables_Impl_" params="" file="src/rm/abstracts/objects/GameVariables.hx" private="1" module="rm.abstracts.objects.GameVariables" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameVariables"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameVariables.GameVariables_Impl_" params="" file="src/rm/abstracts/objects/GameVariables.hx" private="1" module="rm.abstracts.objects.GameVariables" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameVariables"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.objects.GameVehicle" params="" file="src/rm/abstracts/objects/GameVehicle.hx">
		<from><icast><c path="rm.objects.Game_Vehicle"/></icast></from>
		<this><c path="rm.objects.Game_Vehicle"/></this>
		<to><icast><c path="rm.objects.Game_Vehicle"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.objects._GameVehicle.GameVehicle_Impl_" params="" file="src/rm/abstracts/objects/GameVehicle.hx" private="1" module="rm.abstracts.objects.GameVehicle" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameVehicle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.objects._GameVehicle.GameVehicle_Impl_" params="" file="src/rm/abstracts/objects/GameVehicle.hx" private="1" module="rm.abstracts.objects.GameVehicle" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.objects.GameVehicle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneBase" params="" file="src/rm/abstracts/scenes/SceneBase.hx">
		<from><icast><c path="rm.scenes.Scene_Base"/></icast></from>
		<this><c path="rm.scenes.Scene_Base"/></this>
		<to><icast><c path="rm.scenes.Scene_Base"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneBase.SceneBase_Impl_" params="" file="src/rm/abstracts/scenes/SceneBase.hx" private="1" module="rm.abstracts.scenes.SceneBase" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.scenes.SceneBase"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.scenes.Scene_Base"/>
			<c path="rm.scenes.Scene_Base"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneBase.SceneBase_Impl_" params="" file="src/rm/abstracts/scenes/SceneBase.hx" private="1" module="rm.abstracts.scenes.SceneBase" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.scenes.SceneBase"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.scenes.Scene_Base"/>
				<c path="rm.scenes.Scene_Base"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.scenes.SceneBattle" params="" file="src/rm/abstracts/scenes/SceneBattle.hx">
		<from><icast><c path="rm.scenes.Scene_Battle"/></icast></from>
		<this><c path="rm.scenes.Scene_Battle"/></this>
		<to><icast><c path="rm.scenes.Scene_Battle"/></icast></to>
		<impl><class path="rm.abstracts.scenes._SceneBattle.SceneBattle_Impl_" params="" file="src/rm/abstracts/scenes/SceneBattle.hx" private="1" module="rm.abstracts.scenes.SceneBattle" final="1"><_new public="1" get="inline" set="null" line="6" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneBattle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneBattle.SceneBattle_Impl_" params="" file="src/rm/abstracts/scenes/SceneBattle.hx" private="1" module="rm.abstracts.scenes.SceneBattle" final="1"><_new public="1" get="inline" set="null" line="6" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneBattle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneBoot" params="" file="src/rm/abstracts/scenes/SceneBoot.hx">
		<from><icast><c path="rm.scenes.Scene_Boot"/></icast></from>
		<this><c path="rm.scenes.Scene_Boot"/></this>
		<to><icast><c path="rm.scenes.Scene_Boot"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneBoot.SceneBoot_Impl_" params="" file="src/rm/abstracts/scenes/SceneBoot.hx" private="1" module="rm.abstracts.scenes.SceneBoot" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneBoot"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneBoot.SceneBoot_Impl_" params="" file="src/rm/abstracts/scenes/SceneBoot.hx" private="1" module="rm.abstracts.scenes.SceneBoot" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneBoot"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneFile" params="" file="src/rm/abstracts/scenes/SceneFile.hx">
		<from><icast><c path="rm.scenes.Scene_File"/></icast></from>
		<this><c path="rm.scenes.Scene_File"/></this>
		<to><icast><c path="rm.scenes.Scene_File"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneFile.SceneFile_Impl_" params="" file="src/rm/abstracts/scenes/SceneFile.hx" private="1" module="rm.abstracts.scenes.SceneFile" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneFile"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneFile.SceneFile_Impl_" params="" file="src/rm/abstracts/scenes/SceneFile.hx" private="1" module="rm.abstracts.scenes.SceneFile" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneFile"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneGameOver" params="" file="src/rm/abstracts/scenes/SceneGameOver.hx">
		<from><icast><c path="rm.scenes.Scene_GameOver"/></icast></from>
		<this><c path="rm.scenes.Scene_GameOver"/></this>
		<to><icast><c path="rm.scenes.Scene_GameOver"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneGameOver.SceneGameOver_Impl_" params="" file="src/rm/abstracts/scenes/SceneGameOver.hx" private="1" module="rm.abstracts.scenes.SceneGameOver" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneGameOver"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneGameOver.SceneGameOver_Impl_" params="" file="src/rm/abstracts/scenes/SceneGameOver.hx" private="1" module="rm.abstracts.scenes.SceneGameOver" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneGameOver"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneItem" params="" file="src/rm/abstracts/scenes/SceneItem.hx">
		<from><icast><c path="rm.scenes.Scene_Item"/></icast></from>
		<this><c path="rm.scenes.Scene_Item"/></this>
		<to><icast><c path="rm.scenes.Scene_Item"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneItem.SceneItem_Impl_" params="" file="src/rm/abstracts/scenes/SceneItem.hx" private="1" module="rm.abstracts.scenes.SceneItem" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneItem"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneItem.SceneItem_Impl_" params="" file="src/rm/abstracts/scenes/SceneItem.hx" private="1" module="rm.abstracts.scenes.SceneItem" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneItem"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneItemBase" params="" file="src/rm/abstracts/scenes/SceneItemBase.hx">
		<from>
			<icast><c path="rm.scenes.Scene_ItemBase"/></icast>
			<icast><c path="rm.scenes.Scene_ItemBase"/></icast>
		</from>
		<this><c path="rm.scenes.Scene_ItemBase"/></this>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneItemBase.SceneItemBase_Impl_" params="" file="src/rm/abstracts/scenes/SceneItemBase.hx" private="1" module="rm.abstracts.scenes.SceneItemBase" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneItemBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneItemBase.SceneItemBase_Impl_" params="" file="src/rm/abstracts/scenes/SceneItemBase.hx" private="1" module="rm.abstracts.scenes.SceneItemBase" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneItemBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneLoad" params="" file="src/rm/abstracts/scenes/SceneLoad.hx">
		<from><icast><c path="rm.scenes.Scene_Load"/></icast></from>
		<this><c path="rm.scenes.Scene_Load"/></this>
		<to><icast><c path="rm.scenes.Scene_Load"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneLoad.SceneLoad_Impl_" params="" file="src/rm/abstracts/scenes/SceneLoad.hx" private="1" module="rm.abstracts.scenes.SceneLoad" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneLoad"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneLoad.SceneLoad_Impl_" params="" file="src/rm/abstracts/scenes/SceneLoad.hx" private="1" module="rm.abstracts.scenes.SceneLoad" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneLoad"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneMap" params="" file="src/rm/abstracts/scenes/SceneMap.hx">
		<from><icast><c path="rm.scenes.Scene_Map"/></icast></from>
		<this><c path="rm.scenes.Scene_Map"/></this>
		<to><icast><c path="rm.scenes.Scene_Map"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneMap.SceneMap_Impl_" params="" file="src/rm/abstracts/scenes/SceneMap.hx" private="1" module="rm.abstracts.scenes.SceneMap" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneMap"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneMap.SceneMap_Impl_" params="" file="src/rm/abstracts/scenes/SceneMap.hx" private="1" module="rm.abstracts.scenes.SceneMap" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneMap"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneMenu" params="" file="src/rm/abstracts/scenes/SceneMenu.hx">
		<from><icast><c path="rm.scenes.Scene_Menu"/></icast></from>
		<this><c path="rm.scenes.Scene_Menu"/></this>
		<to><icast><c path="rm.scenes.Scene_Menu"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneMenu.SceneMenu_Impl_" params="" file="src/rm/abstracts/scenes/SceneMenu.hx" private="1" module="rm.abstracts.scenes.SceneMenu" extern="1" final="1"/></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneMenu.SceneMenu_Impl_" params="" file="src/rm/abstracts/scenes/SceneMenu.hx" private="1" module="rm.abstracts.scenes.SceneMenu" extern="1" final="1"/>
	<abstract path="rm.abstracts.scenes.SceneMenuBase" params="" file="src/rm/abstracts/scenes/SceneMenuBase.hx">
		<from><icast><c path="rm.scenes.Scene_MenuBase"/></icast></from>
		<this><c path="rm.scenes.Scene_MenuBase"/></this>
		<to><icast><c path="rm.scenes.Scene_MenuBase"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneMenuBase.SceneMenuBase_Impl_" params="" file="src/rm/abstracts/scenes/SceneMenuBase.hx" private="1" module="rm.abstracts.scenes.SceneMenuBase" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneMenuBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneMenuBase.SceneMenuBase_Impl_" params="" file="src/rm/abstracts/scenes/SceneMenuBase.hx" private="1" module="rm.abstracts.scenes.SceneMenuBase" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneMenuBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneName" params="" file="src/rm/abstracts/scenes/SceneName.hx">
		<from><icast><c path="rm.scenes.Scene_Name"/></icast></from>
		<this><c path="rm.scenes.Scene_Name"/></this>
		<to><icast><c path="rm.scenes.Scene_Name"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneName.SceneName_Impl_" params="" file="src/rm/abstracts/scenes/SceneName.hx" private="1" module="rm.abstracts.scenes.SceneName" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneName"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneName.SceneName_Impl_" params="" file="src/rm/abstracts/scenes/SceneName.hx" private="1" module="rm.abstracts.scenes.SceneName" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneName"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneOptions" params="" file="src/rm/abstracts/scenes/SceneOptions.hx">
		<from><icast><c path="rm.scenes.Scene_Options"/></icast></from>
		<this><c path="rm.scenes.Scene_Options"/></this>
		<to><icast><c path="rm.scenes.Scene_Options"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneOptions.SceneOptions_Impl_" params="" file="src/rm/abstracts/scenes/SceneOptions.hx" private="1" module="rm.abstracts.scenes.SceneOptions" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneOptions"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneOptions.SceneOptions_Impl_" params="" file="src/rm/abstracts/scenes/SceneOptions.hx" private="1" module="rm.abstracts.scenes.SceneOptions" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneOptions"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneSave" params="" file="src/rm/abstracts/scenes/SceneSave.hx">
		<from><icast><c path="rm.scenes.Scene_Save"/></icast></from>
		<this><c path="rm.scenes.Scene_Save"/></this>
		<to><icast><c path="rm.scenes.Scene_Save"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneSave.SceneSave_Impl_" params="" file="src/rm/abstracts/scenes/SceneSave.hx" private="1" module="rm.abstracts.scenes.SceneSave" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneSave"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneSave.SceneSave_Impl_" params="" file="src/rm/abstracts/scenes/SceneSave.hx" private="1" module="rm.abstracts.scenes.SceneSave" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneSave"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneShop" params="" file="src/rm/abstracts/scenes/SceneShop.hx">
		<from><icast><c path="rm.scenes.Scene_Shop"/></icast></from>
		<this><c path="rm.scenes.Scene_Shop"/></this>
		<to><icast><c path="rm.scenes.Scene_Shop"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneShop.SceneShop_Impl_" params="" file="src/rm/abstracts/scenes/SceneShop.hx" private="1" module="rm.abstracts.scenes.SceneShop" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneShop"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneShop.SceneShop_Impl_" params="" file="src/rm/abstracts/scenes/SceneShop.hx" private="1" module="rm.abstracts.scenes.SceneShop" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneShop"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneSkill" params="" file="src/rm/abstracts/scenes/SceneSkill.hx">
		<from><icast><c path="rm.scenes.Scene_Skill"/></icast></from>
		<this><c path="rm.scenes.Scene_Skill"/></this>
		<to><icast><c path="rm.scenes.Scene_Skill"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneSkill.SceneSkill_Impl_" params="" file="src/rm/abstracts/scenes/SceneSkill.hx" private="1" module="rm.abstracts.scenes.SceneSkill" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneSkill"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneSkill.SceneSkill_Impl_" params="" file="src/rm/abstracts/scenes/SceneSkill.hx" private="1" module="rm.abstracts.scenes.SceneSkill" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneSkill"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneStatus" params="" file="src/rm/abstracts/scenes/SceneStatus.hx">
		<from><icast><c path="rm.scenes.Scene_Status"/></icast></from>
		<this><c path="rm.scenes.Scene_Status"/></this>
		<to><icast><c path="rm.scenes.Scene_Status"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneStatus.SceneStatus_Impl_" params="" file="src/rm/abstracts/scenes/SceneStatus.hx" private="1" module="rm.abstracts.scenes.SceneStatus" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneStatus"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneStatus.SceneStatus_Impl_" params="" file="src/rm/abstracts/scenes/SceneStatus.hx" private="1" module="rm.abstracts.scenes.SceneStatus" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneStatus"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.scenes.SceneTitle" params="" file="src/rm/abstracts/scenes/SceneTitle.hx">
		<from>
			<icast><c path="rm.scenes.Scene_Title"/></icast>
			<icast><c path="rm.scenes.Scene_Title"/></icast>
		</from>
		<this><c path="rm.scenes.Scene_Title"/></this>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.scenes._SceneTitle.SceneTitle_Impl_" params="" file="src/rm/abstracts/scenes/SceneTitle.hx" private="1" module="rm.abstracts.scenes.SceneTitle" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneTitle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.scenes._SceneTitle.SceneTitle_Impl_" params="" file="src/rm/abstracts/scenes/SceneTitle.hx" private="1" module="rm.abstracts.scenes.SceneTitle" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.scenes.SceneTitle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteActor" params="" file="src/rm/abstracts/sprites/SpriteActor.hx">
		<from><icast><c path="rm.sprites.Sprite_Actor"/></icast></from>
		<this><c path="rm.sprites.Sprite_Actor"/></this>
		<to><icast><c path="rm.sprites.Sprite_Actor"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteActor.SpriteActor_Impl_" params="" file="src/rm/abstracts/sprites/SpriteActor.hx" private="1" module="rm.abstracts.sprites.SpriteActor" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="?battler">
			<c path="rm.objects.Game_Actor"/>
			<x path="rm.abstracts.sprites.SpriteActor"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Actor"/>
			<c path="rm.sprites.Sprite_Actor"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteActor.SpriteActor_Impl_" params="" file="src/rm/abstracts/sprites/SpriteActor.hx" private="1" module="rm.abstracts.sprites.SpriteActor" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="?battler">
				<c path="rm.objects.Game_Actor"/>
				<x path="rm.abstracts.sprites.SpriteActor"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Actor"/>
				<c path="rm.sprites.Sprite_Actor"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpriteAnimation" params="" file="src/rm/abstracts/sprites/SpriteAnimation.hx">
		<from><icast><c path="rm.sprites.Sprite_Animation"/></icast></from>
		<this><c path="rm.sprites.Sprite_Animation"/></this>
		<to><icast><c path="rm.sprites.Sprite_Animation"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteAnimation.SpriteAnimation_Impl_" params="" file="src/rm/abstracts/sprites/SpriteAnimation.hx" private="1" module="rm.abstracts.sprites.SpriteAnimation" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteAnimation"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteAnimation.SpriteAnimation_Impl_" params="" file="src/rm/abstracts/sprites/SpriteAnimation.hx" private="1" module="rm.abstracts.sprites.SpriteAnimation" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteAnimation"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteBalloon" params="" file="src/rm/abstracts/sprites/SpriteBalloon.hx">
		<from><icast><c path="rm.sprites.Sprite_Balloon"/></icast></from>
		<this><c path="rm.sprites.Sprite_Balloon"/></this>
		<to><icast><c path="rm.sprites.Sprite_Balloon"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteBalloon.SpriteBalloon_Impl_" params="" file="src/rm/abstracts/sprites/SpriteBalloon.hx" private="1" module="rm.abstracts.sprites.SpriteBalloon" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteBalloon"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteBalloon.SpriteBalloon_Impl_" params="" file="src/rm/abstracts/sprites/SpriteBalloon.hx" private="1" module="rm.abstracts.sprites.SpriteBalloon" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteBalloon"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteBase" params="" file="src/rm/abstracts/sprites/SpriteBase.hx">
		<from><icast><c path="rm.sprites.Sprite_Base"/></icast></from>
		<this><c path="rm.sprites.Sprite_Base"/></this>
		<to><icast><c path="rm.sprites.Sprite_Base"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteBase.SpriteBase_Impl_" params="" file="src/rm/abstracts/sprites/SpriteBase.hx" private="1" module="rm.abstracts.sprites.SpriteBase" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.sprites.SpriteBase"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Base"/>
			<c path="rm.sprites.Sprite_Base"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteBase.SpriteBase_Impl_" params="" file="src/rm/abstracts/sprites/SpriteBase.hx" private="1" module="rm.abstracts.sprites.SpriteBase" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.sprites.SpriteBase"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Base"/>
				<c path="rm.sprites.Sprite_Base"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpriteBattler" params="" file="src/rm/abstracts/sprites/SpriteBattler.hx">
		<from><icast><c path="rm.sprites.Sprite_Battler"/></icast></from>
		<this><c path="rm.sprites.Sprite_Battler"/></this>
		<to><icast><c path="rm.sprites.Sprite_Battler"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteBattler.SpriteBattler_Impl_" params="" file="src/rm/abstracts/sprites/SpriteBattler.hx" private="1" module="rm.abstracts.sprites.SpriteBattler" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.sprites.SpriteBattler"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Battler"/>
			<c path="rm.sprites.Sprite_Battler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteBattler.SpriteBattler_Impl_" params="" file="src/rm/abstracts/sprites/SpriteBattler.hx" private="1" module="rm.abstracts.sprites.SpriteBattler" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.sprites.SpriteBattler"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Battler"/>
				<c path="rm.sprites.Sprite_Battler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpriteButton" params="" file="src/rm/abstracts/sprites/SpriteButton.hx">
		<from><icast><c path="rm.sprites.Sprite_Button"/></icast></from>
		<this><c path="rm.sprites.Sprite_Button"/></this>
		<to><icast><c path="rm.sprites.Sprite_Button"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteButton.SpriteButton_Impl_" params="" file="src/rm/abstracts/sprites/SpriteButton.hx" private="1" module="rm.abstracts.sprites.SpriteButton" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="?bitmap">
			<c path="rm.core.Bitmap"/>
			<x path="rm.abstracts.sprites.SpriteButton"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Button"/>
			<c path="rm.sprites.Sprite_Button"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteButton.SpriteButton_Impl_" params="" file="src/rm/abstracts/sprites/SpriteButton.hx" private="1" module="rm.abstracts.sprites.SpriteButton" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="?bitmap">
				<c path="rm.core.Bitmap"/>
				<x path="rm.abstracts.sprites.SpriteButton"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Button"/>
				<c path="rm.sprites.Sprite_Button"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpriteCharacter" params="" file="src/rm/abstracts/sprites/SpriteCharacter.hx">
		<from><icast><c path="rm.sprites.Sprite_Character"/></icast></from>
		<this><c path="rm.sprites.Sprite_Character"/></this>
		<to><icast><c path="rm.sprites.Sprite_Character"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteCharacter.SpriteCharacter_Impl_" params="" file="src/rm/abstracts/sprites/SpriteCharacter.hx" private="1" module="rm.abstracts.sprites.SpriteCharacter" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="character">
			<c path="rm.objects.Game_Character"/>
			<x path="rm.abstracts.sprites.SpriteCharacter"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Character"/>
			<c path="rm.sprites.Sprite_Character"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteCharacter.SpriteCharacter_Impl_" params="" file="src/rm/abstracts/sprites/SpriteCharacter.hx" private="1" module="rm.abstracts.sprites.SpriteCharacter" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="rm.abstracts.sprites.SpriteCharacter"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Character"/>
				<c path="rm.sprites.Sprite_Character"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpriteDamage" params="" file="src/rm/abstracts/sprites/SpriteDamage.hx">
		<from><icast><c path="rm.sprites.Sprite_Damage"/></icast></from>
		<this><c path="rm.sprites.Sprite_Damage"/></this>
		<to><icast><c path="rm.sprites.Sprite_Damage"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteDamage.SpriteDamage_Impl_" params="" file="src/rm/abstracts/sprites/SpriteDamage.hx" private="1" module="rm.abstracts.sprites.SpriteDamage" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteDamage"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteDamage.SpriteDamage_Impl_" params="" file="src/rm/abstracts/sprites/SpriteDamage.hx" private="1" module="rm.abstracts.sprites.SpriteDamage" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteDamage"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteDestination" params="" file="src/rm/abstracts/sprites/SpriteDestination.hx">
		<from><icast><c path="rm.sprites.Sprite_Destination"/></icast></from>
		<this><c path="rm.sprites.Sprite_Destination"/></this>
		<to><icast><c path="rm.sprites.Sprite_Destination"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteDestination.SpriteDestination_Impl_" params="" file="src/rm/abstracts/sprites/SpriteDestination.hx" private="1" module="rm.abstracts.sprites.SpriteDestination" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?bitmap">
		<c path="rm.core.Bitmap"/>
		<x path="rm.abstracts.sprites.SpriteDestination"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteDestination.SpriteDestination_Impl_" params="" file="src/rm/abstracts/sprites/SpriteDestination.hx" private="1" module="rm.abstracts.sprites.SpriteDestination" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?bitmap">
		<c path="rm.core.Bitmap"/>
		<x path="rm.abstracts.sprites.SpriteDestination"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteEnemy" params="" file="src/rm/abstracts/sprites/SpriteEnemy.hx">
		<from><icast><c path="rm.sprites.Sprite_Enemy"/></icast></from>
		<this><c path="rm.sprites.Sprite_Enemy"/></this>
		<to><icast><c path="rm.sprites.Sprite_Enemy"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteEnemy.SpriteEnemy_Impl_" params="" file="src/rm/abstracts/sprites/SpriteEnemy.hx" private="1" module="rm.abstracts.sprites.SpriteEnemy" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="battler">
			<c path="rm.objects.Game_Enemy"/>
			<x path="rm.abstracts.sprites.SpriteEnemy"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Enemy"/>
			<c path="rm.sprites.Sprite_Enemy"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteEnemy.SpriteEnemy_Impl_" params="" file="src/rm/abstracts/sprites/SpriteEnemy.hx" private="1" module="rm.abstracts.sprites.SpriteEnemy" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="battler">
				<c path="rm.objects.Game_Enemy"/>
				<x path="rm.abstracts.sprites.SpriteEnemy"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Enemy"/>
				<c path="rm.sprites.Sprite_Enemy"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpritePicture" params="" file="src/rm/abstracts/sprites/SpritePicture.hx">
		<from><icast><c path="rm.sprites.Sprite_Picture"/></icast></from>
		<this><c path="rm.sprites.Sprite_Picture"/></this>
		<to><icast><c path="rm.sprites.Sprite_Picture"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpritePicture.SpritePicture_Impl_" params="" file="src/rm/abstracts/sprites/SpritePicture.hx" private="1" module="rm.abstracts.sprites.SpritePicture" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="pictureId">
		<x path="Int"/>
		<x path="rm.abstracts.sprites.SpritePicture"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpritePicture.SpritePicture_Impl_" params="" file="src/rm/abstracts/sprites/SpritePicture.hx" private="1" module="rm.abstracts.sprites.SpritePicture" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="pictureId">
		<x path="Int"/>
		<x path="rm.abstracts.sprites.SpritePicture"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteStateIcon" params="" file="src/rm/abstracts/sprites/SpriteStateIcon.hx">
		<from><icast><c path="rm.sprites.Sprite_StateIcon"/></icast></from>
		<this><c path="rm.sprites.Sprite_StateIcon"/></this>
		<to><icast><c path="rm.sprites.Sprite_StateIcon"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteStateIcon.SpriteStateIcon_Impl_" params="" file="src/rm/abstracts/sprites/SpriteStateIcon.hx" private="1" module="rm.abstracts.sprites.SpriteStateIcon" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteStateIcon"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteStateIcon.SpriteStateIcon_Impl_" params="" file="src/rm/abstracts/sprites/SpriteStateIcon.hx" private="1" module="rm.abstracts.sprites.SpriteStateIcon" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteStateIcon"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteStateOverlay" params="" file="src/rm/abstracts/sprites/SpriteStateOverlay.hx">
		<from><icast><c path="rm.sprites.Sprite_StateOverlay"/></icast></from>
		<this><c path="rm.sprites.Sprite_StateOverlay"/></this>
		<to><icast><c path="rm.sprites.Sprite_StateOverlay"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteStateOverlay.SpriteStateOverlay_Impl_" params="" file="src/rm/abstracts/sprites/SpriteStateOverlay.hx" private="1" module="rm.abstracts.sprites.SpriteStateOverlay" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteStateOverlay"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteStateOverlay.SpriteStateOverlay_Impl_" params="" file="src/rm/abstracts/sprites/SpriteStateOverlay.hx" private="1" module="rm.abstracts.sprites.SpriteStateOverlay" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteStateOverlay"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteTimer" params="" file="src/rm/abstracts/sprites/SpriteTimer.hx">
		<from><icast><c path="rm.sprites.Sprite_Timer"/></icast></from>
		<this><c path="rm.sprites.Sprite_Timer"/></this>
		<to><icast><c path="rm.sprites.Sprite_Timer"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteTimer.SpriteTimer_Impl_" params="" file="src/rm/abstracts/sprites/SpriteTimer.hx" private="1" module="rm.abstracts.sprites.SpriteTimer" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteTimer"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteTimer.SpriteTimer_Impl_" params="" file="src/rm/abstracts/sprites/SpriteTimer.hx" private="1" module="rm.abstracts.sprites.SpriteTimer" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpriteTimer"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpriteWeapon" params="" file="src/rm/abstracts/sprites/SpriteWeapon.hx">
		<from><icast><c path="rm.sprites.Sprite_Weapon"/></icast></from>
		<this><c path="rm.sprites.Sprite_Weapon"/></this>
		<to><icast><c path="rm.sprites.Sprite_Weapon"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpriteWeapon.SpriteWeapon_Impl_" params="" file="src/rm/abstracts/sprites/SpriteWeapon.hx" private="1" module="rm.abstracts.sprites.SpriteWeapon" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.sprites.SpriteWeapon"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.sprites.Sprite_Weapon"/>
			<c path="rm.sprites.Sprite_Weapon"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpriteWeapon.SpriteWeapon_Impl_" params="" file="src/rm/abstracts/sprites/SpriteWeapon.hx" private="1" module="rm.abstracts.sprites.SpriteWeapon" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.sprites.SpriteWeapon"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.sprites.Sprite_Weapon"/>
				<c path="rm.sprites.Sprite_Weapon"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.sprites.SpritesetBase" params="" file="src/rm/abstracts/sprites/SpritesetBase.hx">
		<from><icast><c path="rm.sprites.Spriteset_Base"/></icast></from>
		<this><c path="rm.sprites.Spriteset_Base"/></this>
		<to><icast><c path="rm.sprites.Spriteset_Base"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpritesetBase.SpritesetBase_Impl_" params="" file="src/rm/abstracts/sprites/SpritesetBase.hx" private="1" module="rm.abstracts.sprites.SpritesetBase" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpritesetBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpritesetBase.SpritesetBase_Impl_" params="" file="src/rm/abstracts/sprites/SpritesetBase.hx" private="1" module="rm.abstracts.sprites.SpritesetBase" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpritesetBase"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpritesetBattle" params="" file="src/rm/abstracts/sprites/SpritesetBattle.hx">
		<from><icast><c path="rm.sprites.Spriteset_Battle"/></icast></from>
		<this><c path="rm.sprites.Spriteset_Battle"/></this>
		<to><icast><c path="rm.sprites.Spriteset_Battle"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpritesetBattle.SpritesetBattle_Impl_" params="" file="src/rm/abstracts/sprites/SpritesetBattle.hx" private="1" module="rm.abstracts.sprites.SpritesetBattle" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpritesetBattle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpritesetBattle.SpritesetBattle_Impl_" params="" file="src/rm/abstracts/sprites/SpritesetBattle.hx" private="1" module="rm.abstracts.sprites.SpritesetBattle" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.sprites.SpritesetBattle"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.sprites.SpritesetMap" params="" file="src/rm/abstracts/sprites/SpritesetMap.hx">
		<from><icast><c path="rm.sprites.Spriteset_Map"/></icast></from>
		<this><c path="rm.sprites.Spriteset_Map"/></this>
		<to><icast><c path="rm.sprites.Spriteset_Map"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.sprites._SpritesetMap.SpritesetMap_Impl_" params="" file="src/rm/abstracts/sprites/SpritesetMap.hx" private="1" module="rm.abstracts.sprites.SpritesetMap" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="?bitmap">
		<c path="rm.core.Bitmap"/>
		<x path="rm.abstracts.sprites.SpritesetMap"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.sprites._SpritesetMap.SpritesetMap_Impl_" params="" file="src/rm/abstracts/sprites/SpritesetMap.hx" private="1" module="rm.abstracts.sprites.SpritesetMap" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="?bitmap">
		<c path="rm.core.Bitmap"/>
		<x path="rm.abstracts.sprites.SpritesetMap"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowActorCommand" params="" file="src/rm/abstracts/windows/WindowActorCommand.hx">
		<from><icast><c path="rm.windows.Window_ActorCommand"/></icast></from>
		<this><c path="rm.windows.Window_ActorCommand"/></this>
		<to><icast><c path="rm.windows.Window_ActorCommand"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowActorCommand.WindowActorCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowActorCommand.hx" private="1" module="rm.abstracts.windows.WindowActorCommand" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.windows.WindowActorCommand"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowActorCommand.WindowActorCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowActorCommand.hx" private="1" module="rm.abstracts.windows.WindowActorCommand" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.windows.WindowActorCommand"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowBase" params="" file="src/rm/abstracts/windows/WindowBase.hx">
		<from><icast><c path="rm.windows.Window_Base"/></icast></from>
		<this><c path="rm.windows.Window_Base"/></this>
		<to><icast><c path="rm.windows.Window_Base"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBase.WindowBase_Impl_" params="" file="src/rm/abstracts/windows/WindowBase.hx" private="1" module="rm.abstracts.windows.WindowBase" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="x:y:width:height">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowBase"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="rm.windows.Window_Base"/>
			<c path="rm.windows.Window_Base"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
	<destroyContents public="1" get="inline" set="null" line="22" static="1">
		<f a="this">
			<c path="rm.windows.Window_Base"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</destroyContents>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBase.WindowBase_Impl_" params="" file="src/rm/abstracts/windows/WindowBase.hx" private="1" module="rm.abstracts.windows.WindowBase" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowBase"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="rm.windows.Window_Base"/>
				<c path="rm.windows.Window_Base"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
		<destroyContents public="1" get="inline" set="null" line="22" static="1">
			<f a="this">
				<c path="rm.windows.Window_Base"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</destroyContents>
	</class>
	<abstract path="rm.abstracts.windows.WindowBattleActor" params="" file="src/rm/abstracts/windows/WindowBattleActor.hx">
		<from><icast><c path="rm.windows.Window_BattleActor"/></icast></from>
		<this><c path="rm.windows.Window_BattleActor"/></this>
		<to><icast><c path="rm.windows.Window_BattleActor"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBattleActor.WindowBattleActor_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleActor.hx" private="1" module="rm.abstracts.windows.WindowBattleActor" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleActor"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBattleActor.WindowBattleActor_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleActor.hx" private="1" module="rm.abstracts.windows.WindowBattleActor" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleActor"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowBattleEnemy" params="" file="src/rm/abstracts/windows/WindowBattleEnemy.hx">
		<from><icast><c path="rm.windows.Window_BattleEnemy"/></icast></from>
		<this><c path="rm.windows.Window_BattleEnemy"/></this>
		<to><icast><c path="rm.windows.Window_BattleEnemy"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBattleEnemy.WindowBattleEnemy_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleEnemy.hx" private="1" module="rm.abstracts.windows.WindowBattleEnemy" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleEnemy"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBattleEnemy.WindowBattleEnemy_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleEnemy.hx" private="1" module="rm.abstracts.windows.WindowBattleEnemy" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleEnemy"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowBattleItem" params="" file="src/rm/abstracts/windows/WindowBattleItem.hx">
		<from><icast><c path="rm.windows.Window_BattleItem"/></icast></from>
		<this><c path="rm.windows.Window_BattleItem"/></this>
		<to><icast><c path="rm.windows.Window_BattleItem"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBattleItem.WindowBattleItem_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleItem.hx" private="1" module="rm.abstracts.windows.WindowBattleItem" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleItem"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBattleItem.WindowBattleItem_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleItem.hx" private="1" module="rm.abstracts.windows.WindowBattleItem" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleItem"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowBattleLog" params="" file="src/rm/abstracts/windows/WindowBattleLog.hx">
		<from><icast><c path="rm.windows.Window_BattleLog"/></icast></from>
		<this><c path="rm.windows.Window_BattleLog"/></this>
		<to><icast><c path="rm.windows.Window_BattleLog"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBattleLog.WindowBattleLog_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleLog.hx" private="1" module="rm.abstracts.windows.WindowBattleLog" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?x:?y:?width:?height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleLog"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBattleLog.WindowBattleLog_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleLog.hx" private="1" module="rm.abstracts.windows.WindowBattleLog" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?x:?y:?width:?height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleLog"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowBattleSkill" params="" file="src/rm/abstracts/windows/WindowBattleSkill.hx">
		<from><icast><c path="rm.windows.Window_BattleSkill"/></icast></from>
		<this><c path="rm.windows.Window_BattleSkill"/></this>
		<to><icast><c path="rm.windows.Window_BattleSkill"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBattleSkill.WindowBattleSkill_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleSkill.hx" private="1" module="rm.abstracts.windows.WindowBattleSkill" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleSkill"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBattleSkill.WindowBattleSkill_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleSkill.hx" private="1" module="rm.abstracts.windows.WindowBattleSkill" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleSkill"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowBattleStatus" params="" file="src/rm/abstracts/windows/WindowBattleStatus.hx">
		<from><icast><c path="rm.windows.Window_BattleStatus"/></icast></from>
		<this><c path="rm.windows.Window_BattleStatus"/></this>
		<to><icast><c path="rm.windows.Window_BattleStatus"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowBattleStatus.WindowBattleStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleStatus.hx" private="1" module="rm.abstracts.windows.WindowBattleStatus" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?x:?y:?width:?height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleStatus"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowBattleStatus.WindowBattleStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowBattleStatus.hx" private="1" module="rm.abstracts.windows.WindowBattleStatus" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?x:?y:?width:?height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowBattleStatus"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowChoiceList" params="" file="src/rm/abstracts/windows/WindowChoiceList.hx">
		<from><icast><c path="rm.windows.Window_ChoiceList"/></icast></from>
		<this><c path="rm.windows.Window_ChoiceList"/></this>
		<to><icast><c path="rm.windows.Window_ChoiceList"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowChoiceList.WindowChoiceList_Impl_" params="" file="src/rm/abstracts/windows/WindowChoiceList.hx" private="1" module="rm.abstracts.windows.WindowChoiceList" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="?messageWindow">
			<c path="rm.windows.Window_Message"/>
			<x path="rm.abstracts.windows.WindowChoiceList"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="rm.windows.Window_ChoiceList"/>
			<c path="rm.windows.Window_ChoiceList"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowChoiceList.WindowChoiceList_Impl_" params="" file="src/rm/abstracts/windows/WindowChoiceList.hx" private="1" module="rm.abstracts.windows.WindowChoiceList" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="?messageWindow">
				<c path="rm.windows.Window_Message"/>
				<x path="rm.abstracts.windows.WindowChoiceList"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="rm.windows.Window_ChoiceList"/>
				<c path="rm.windows.Window_ChoiceList"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowCommand" params="" file="src/rm/abstracts/windows/WindowCommand.hx">
		<from><icast><c path="rm.windows.Window_Command"/></icast></from>
		<this><c path="rm.windows.Window_Command"/></this>
		<to><icast><c path="rm.windows.Window_Command"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowCommand.WindowCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowCommand.hx" private="1" module="rm.abstracts.windows.WindowCommand" final="1">
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="x:y:?width:?height">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowCommand"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Creates a new Window_Command.
  * Takes x, y, width, height.
  * Width and height are optional and for rm.
  * @param x
  * @param y
  * @param width
  * @param height</haxe_doc>
	</_new>
	<raw public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<c path="rm.windows.Window_Command"/>
			<c path="rm.windows.Window_Command"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowCommand.WindowCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowCommand.hx" private="1" module="rm.abstracts.windows.WindowCommand" final="1">
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="x:y:?width:?height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowCommand"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Creates a new Window_Command.
  * Takes x, y, width, height.
  * Width and height are optional and for rm.
  * @param x
  * @param y
  * @param width
  * @param height</haxe_doc>
		</_new>
		<raw public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<c path="rm.windows.Window_Command"/>
				<c path="rm.windows.Window_Command"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowDebugEdit" params="" file="src/rm/abstracts/windows/WindowDebugEdit.hx">
		<from><icast><c path="rm.windows.Window_DebugEdit"/></icast></from>
		<this><c path="rm.windows.Window_DebugEdit"/></this>
		<to><icast><c path="rm.windows.Window_DebugEdit"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowDebugEdit.WindowDebugEdit_Impl_" params="" file="src/rm/abstracts/windows/WindowDebugEdit.hx" private="1" module="rm.abstracts.windows.WindowDebugEdit" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowDebugEdit"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowDebugEdit.WindowDebugEdit_Impl_" params="" file="src/rm/abstracts/windows/WindowDebugEdit.hx" private="1" module="rm.abstracts.windows.WindowDebugEdit" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowDebugEdit"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowDebugRange" params="" file="src/rm/abstracts/windows/WindowDebugRange.hx">
		<from><icast><c path="rm.windows.Window_DebugRange"/></icast></from>
		<this><c path="rm.windows.Window_DebugRange"/></this>
		<to><icast><c path="rm.windows.Window_DebugRange"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowDebugRange.WindowDebugRange_Impl_" params="" file="src/rm/abstracts/windows/WindowDebugRange.hx" private="1" module="rm.abstracts.windows.WindowDebugRange" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowDebugRange"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowDebugRange.WindowDebugRange_Impl_" params="" file="src/rm/abstracts/windows/WindowDebugRange.hx" private="1" module="rm.abstracts.windows.WindowDebugRange" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowDebugRange"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowEquipItem" params="" file="src/rm/abstracts/windows/WindowEquipItem.hx">
		<from><icast><c path="rm.windows.Window_EquipItem"/></icast></from>
		<this><c path="rm.windows.Window_EquipItem"/></this>
		<to><icast><c path="rm.windows.Window_EquipItem"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowEquipItem.WindowEquipItem_Impl_" params="" file="src/rm/abstracts/windows/WindowEquipItem.hx" private="1" module="rm.abstracts.windows.WindowEquipItem" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="x:y:width:height">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowEquipItem"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="rm.windows.Window_EquipItem"/>
			<c path="rm.windows.Window_EquipItem"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowEquipItem.WindowEquipItem_Impl_" params="" file="src/rm/abstracts/windows/WindowEquipItem.hx" private="1" module="rm.abstracts.windows.WindowEquipItem" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowEquipItem"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="rm.windows.Window_EquipItem"/>
				<c path="rm.windows.Window_EquipItem"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowEquipSlot" params="" file="src/rm/abstracts/windows/WindowEquipSlot.hx">
		<from><icast><c path="rm.windows.Window_EquipSlot"/></icast></from>
		<this><c path="rm.windows.Window_EquipSlot"/></this>
		<to><icast><c path="rm.windows.Window_EquipSlot"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowEquipSlot.WindowEquipSlot_Impl_" params="" file="src/rm/abstracts/windows/WindowEquipSlot.hx" private="1" module="rm.abstracts.windows.WindowEquipSlot" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowEquipSlot"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowEquipSlot.WindowEquipSlot_Impl_" params="" file="src/rm/abstracts/windows/WindowEquipSlot.hx" private="1" module="rm.abstracts.windows.WindowEquipSlot" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowEquipSlot"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowGameEnd" params="" file="src/rm/abstracts/windows/WindowGameEnd.hx">
		<from><icast><c path="rm.windows.Window_GameEnd"/></icast></from>
		<this><c path="rm.windows.Window_GameEnd"/></this>
		<to><icast><c path="rm.windows.Window_GameEnd"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowGameEnd.WindowGameEnd_Impl_" params="" file="src/rm/abstracts/windows/WindowGameEnd.hx" private="1" module="rm.abstracts.windows.WindowGameEnd" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.windows.WindowGameEnd"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.windows.Window_GameEnd"/>
			<c path="rm.windows.Window_GameEnd"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowGameEnd.WindowGameEnd_Impl_" params="" file="src/rm/abstracts/windows/WindowGameEnd.hx" private="1" module="rm.abstracts.windows.WindowGameEnd" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.windows.WindowGameEnd"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.windows.Window_GameEnd"/>
				<c path="rm.windows.Window_GameEnd"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowGold" params="" file="src/rm/abstracts/windows/WindowGold.hx">
		<from><icast><c path="rm.windows.Window_Gold"/></icast></from>
		<this><c path="rm.windows.Window_Gold"/></this>
		<to><icast><c path="rm.windows.Window_Gold"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowGold.WindowGold_Impl_" params="" file="src/rm/abstracts/windows/WindowGold.hx" private="1" module="rm.abstracts.windows.WindowGold" final="1"><raw public="1" get="inline" set="null" line="8" static="1">
	<f a="this">
		<c path="rm.windows.Window_Gold"/>
		<c path="rm.windows.Window_Gold"/>
	</f>
	<meta><m n=":impl"/></meta>
</raw></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowGold.WindowGold_Impl_" params="" file="src/rm/abstracts/windows/WindowGold.hx" private="1" module="rm.abstracts.windows.WindowGold" final="1"><raw public="1" get="inline" set="null" line="8" static="1">
	<f a="this">
		<c path="rm.windows.Window_Gold"/>
		<c path="rm.windows.Window_Gold"/>
	</f>
	<meta><m n=":impl"/></meta>
</raw></class>
	<abstract path="rm.abstracts.windows.WindowHelp" params="" file="src/rm/abstracts/windows/WindowHelp.hx">
		<from><icast><c path="rm.windows.Window_Help"/></icast></from>
		<this><c path="rm.windows.Window_Help"/></this>
		<to><icast><c path="rm.windows.Window_Help"/></icast></to>
		<impl><class path="rm.abstracts.windows._WindowHelp.WindowHelp_Impl_" params="" file="src/rm/abstracts/windows/WindowHelp.hx" private="1" module="rm.abstracts.windows.WindowHelp" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="numLines">
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowHelp"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="10" static="1">
		<f a="this">
			<c path="rm.windows.Window_Help"/>
			<c path="rm.windows.Window_Help"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowHelp.WindowHelp_Impl_" params="" file="src/rm/abstracts/windows/WindowHelp.hx" private="1" module="rm.abstracts.windows.WindowHelp" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="numLines">
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowHelp"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="10" static="1">
			<f a="this">
				<c path="rm.windows.Window_Help"/>
				<c path="rm.windows.Window_Help"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowHorzCommand" params="" file="src/rm/abstracts/windows/WindowHorzCommand.hx">
		<from><icast><c path="rm.windows.Window_HorzCommand"/></icast></from>
		<this><c path="rm.windows.Window_HorzCommand"/></this>
		<to><icast><c path="rm.windows.Window_HorzCommand"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowHorzCommand.WindowHorzCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowHorzCommand.hx" private="1" module="rm.abstracts.windows.WindowHorzCommand" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="x:y">
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowHorzCommand"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="rm.windows.Window_HorzCommand"/>
			<c path="rm.windows.Window_HorzCommand"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowHorzCommand.WindowHorzCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowHorzCommand.hx" private="1" module="rm.abstracts.windows.WindowHorzCommand" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowHorzCommand"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="rm.windows.Window_HorzCommand"/>
				<c path="rm.windows.Window_HorzCommand"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowItemCategory" params="" file="src/rm/abstracts/windows/WindowItemCategory.hx">
		<from><icast><c path="rm.windows.Window_ItemCategory"/></icast></from>
		<this><c path="rm.windows.Window_ItemCategory"/></this>
		<to><icast><c path="rm.windows.Window_ItemCategory"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowItemCategory.WindowItemCategory_Impl_" params="" file="src/rm/abstracts/windows/WindowItemCategory.hx" private="1" module="rm.abstracts.windows.WindowItemCategory" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowItemCategory"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowItemCategory.WindowItemCategory_Impl_" params="" file="src/rm/abstracts/windows/WindowItemCategory.hx" private="1" module="rm.abstracts.windows.WindowItemCategory" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowItemCategory"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowMapName" params="" file="src/rm/abstracts/windows/WindowMapName.hx">
		<from><icast><c path="rm.windows.Window_MapName"/></icast></from>
		<this><c path="rm.windows.Window_MapName"/></this>
		<to><icast><c path="rm.windows.Window_MapName"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowMapName.WindowMapName_Impl_" params="" file="src/rm/abstracts/windows/WindowMapName.hx" private="1" module="rm.abstracts.windows.WindowMapName" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.windows.WindowMapName"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.windows.Window_MapName"/>
			<c path="rm.windows.Window_MapName"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowMapName.WindowMapName_Impl_" params="" file="src/rm/abstracts/windows/WindowMapName.hx" private="1" module="rm.abstracts.windows.WindowMapName" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.windows.WindowMapName"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.windows.Window_MapName"/>
				<c path="rm.windows.Window_MapName"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowMenuCommand" params="" file="src/rm/abstracts/windows/WindowMenuCommand.hx">
		<from><icast><c path="rm.windows.Window_MenuCommand"/></icast></from>
		<this><c path="rm.windows.Window_MenuCommand"/></this>
		<to><icast><c path="rm.windows.Window_MenuCommand"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowMenuCommand.WindowMenuCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowMenuCommand.hx" private="1" module="rm.abstracts.windows.WindowMenuCommand" final="1"><raw public="1" get="inline" set="null" line="9" static="1">
	<f a="this">
		<c path="rm.windows.Window_MenuCommand"/>
		<c path="rm.windows.Window_MenuCommand"/>
	</f>
	<meta><m n=":impl"/></meta>
</raw></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowMenuCommand.WindowMenuCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowMenuCommand.hx" private="1" module="rm.abstracts.windows.WindowMenuCommand" final="1"><raw public="1" get="inline" set="null" line="9" static="1">
	<f a="this">
		<c path="rm.windows.Window_MenuCommand"/>
		<c path="rm.windows.Window_MenuCommand"/>
	</f>
	<meta><m n=":impl"/></meta>
</raw></class>
	<abstract path="rm.abstracts.windows.WindowMenuStatus" params="" file="src/rm/abstracts/windows/WindowMenuStatus.hx">
		<from><icast><c path="rm.windows.Window_MenuStatus"/></icast></from>
		<this><c path="rm.windows.Window_MenuStatus"/></this>
		<to><icast><c path="rm.windows.Window_MenuStatus"/></icast></to>
		<meta>
			<m n="forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowMenuStatus.WindowMenuStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowMenuStatus.hx" private="1" module="rm.abstracts.windows.WindowMenuStatus" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="x:y">
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowMenuStatus"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="rm.windows.Window_MenuStatus"/>
			<c path="rm.windows.Window_MenuStatus"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowMenuStatus.WindowMenuStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowMenuStatus.hx" private="1" module="rm.abstracts.windows.WindowMenuStatus" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowMenuStatus"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="rm.windows.Window_MenuStatus"/>
				<c path="rm.windows.Window_MenuStatus"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowMessage" params="" file="src/rm/abstracts/windows/WindowMessage.hx">
		<from><icast><c path="rm.windows.Window_Message"/></icast></from>
		<this><c path="rm.windows.Window_Message"/></this>
		<to><icast><c path="rm.windows.Window_Message"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowMessage.WindowMessage_Impl_" params="" file="src/rm/abstracts/windows/WindowMessage.hx" private="1" module="rm.abstracts.windows.WindowMessage" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="x:y:width:height">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowMessage"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="rm.windows.Window_Message"/>
			<c path="rm.windows.Window_Message"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowMessage.WindowMessage_Impl_" params="" file="src/rm/abstracts/windows/WindowMessage.hx" private="1" module="rm.abstracts.windows.WindowMessage" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowMessage"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="rm.windows.Window_Message"/>
				<c path="rm.windows.Window_Message"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowNameEdit" params="" file="src/rm/abstracts/windows/WindowNameEdit.hx">
		<from><icast><c path="rm.windows.Window_NameEdit"/></icast></from>
		<this><c path="rm.windows.Window_NameEdit"/></this>
		<to><icast><c path="rm.windows.Window_NameEdit"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowNameEdit.WindowNameEdit_Impl_" params="" file="src/rm/abstracts/windows/WindowNameEdit.hx" private="1" module="rm.abstracts.windows.WindowNameEdit" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="actor:maxLength">
		<c path="rm.objects.Game_Actor"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowNameEdit"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowNameEdit.WindowNameEdit_Impl_" params="" file="src/rm/abstracts/windows/WindowNameEdit.hx" private="1" module="rm.abstracts.windows.WindowNameEdit" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="actor:maxLength">
		<c path="rm.objects.Game_Actor"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowNameEdit"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowNameInput" params="" file="src/rm/abstracts/windows/WindowNameInput.hx">
		<from><icast><c path="rm.windows.Window_NameInput"/></icast></from>
		<this><c path="rm.windows.Window_NameInput"/></this>
		<to><icast><c path="rm.windows.Window_NameInput"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStactics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowNameInput.WindowNameInput_Impl_" params="" file="src/rm/abstracts/windows/WindowNameInput.hx" private="1" module="rm.abstracts.windows.WindowNameInput" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="windowNameEdit">
		<c path="rm.windows.Window_NameEdit"/>
		<x path="rm.abstracts.windows.WindowNameInput"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowNameInput.WindowNameInput_Impl_" params="" file="src/rm/abstracts/windows/WindowNameInput.hx" private="1" module="rm.abstracts.windows.WindowNameInput" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="windowNameEdit">
		<c path="rm.windows.Window_NameEdit"/>
		<x path="rm.abstracts.windows.WindowNameInput"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowNumberInput" params="" file="src/rm/abstracts/windows/WindowNumberInput.hx">
		<from><icast><c path="rm.windows.Window_NumberInput"/></icast></from>
		<this><c path="rm.windows.Window_NumberInput"/></this>
		<to><icast><c path="rm.windows.Window_NumberInput"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowNumberInput.WindowNumberInput_Impl_" params="" file="src/rm/abstracts/windows/WindowNumberInput.hx" private="1" module="rm.abstracts.windows.WindowNumberInput" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="messageWindow">
		<c path="rm.windows.Window_Message"/>
		<x path="rm.abstracts.windows.WindowNumberInput"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowNumberInput.WindowNumberInput_Impl_" params="" file="src/rm/abstracts/windows/WindowNumberInput.hx" private="1" module="rm.abstracts.windows.WindowNumberInput" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="messageWindow">
		<c path="rm.windows.Window_Message"/>
		<x path="rm.abstracts.windows.WindowNumberInput"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowOptions" params="" file="src/rm/abstracts/windows/WindowOptions.hx">
		<from><icast><c path="rm.windows.Window_Options"/></icast></from>
		<this><c path="rm.windows.Window_Options"/></this>
		<to><icast><c path="rm.windows.Window_Options"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowOptions.WindowOptions_Impl_" params="" file="src/rm/abstracts/windows/WindowOptions.hx" private="1" module="rm.abstracts.windows.WindowOptions" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="rm.abstracts.windows.WindowOptions"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="rm.windows.Window_Options"/>
			<c path="rm.windows.Window_Options"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowOptions.WindowOptions_Impl_" params="" file="src/rm/abstracts/windows/WindowOptions.hx" private="1" module="rm.abstracts.windows.WindowOptions" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="rm.abstracts.windows.WindowOptions"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="rm.windows.Window_Options"/>
				<c path="rm.windows.Window_Options"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowPartyCommand" params="" file="src/rm/abstracts/windows/WindowPartyCommand.hx">
		<from><icast><c path="rm.windows.Window_PartyCommand"/></icast></from>
		<this><c path="rm.windows.Window_PartyCommand"/></this>
		<to><icast><c path="rm.windows.Window_PartyCommand"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowPartyCommand.WindowPartyCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowPartyCommand.hx" private="1" module="rm.abstracts.windows.WindowPartyCommand" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.windows.WindowPartyCommand"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowPartyCommand.WindowPartyCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowPartyCommand.hx" private="1" module="rm.abstracts.windows.WindowPartyCommand" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a=""><x path="rm.abstracts.windows.WindowPartyCommand"/></f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowSavefileList" params="" file="src/rm/abstracts/windows/WindowSavefileList.hx">
		<from><icast><c path="rm.windows.Window_SavefileList"/></icast></from>
		<this><c path="rm.windows.Window_SavefileList"/></this>
		<to><icast><c path="rm.windows.Window_SavefileList"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowSavefileList.WindowSavefileList_Impl_" params="" file="src/rm/abstracts/windows/WindowSavefileList.hx" private="1" module="rm.abstracts.windows.WindowSavefileList" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSavefileList"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowSavefileList.WindowSavefileList_Impl_" params="" file="src/rm/abstracts/windows/WindowSavefileList.hx" private="1" module="rm.abstracts.windows.WindowSavefileList" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSavefileList"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowScrollText" params="" file="src/rm/abstracts/windows/WindowScrollText.hx">
		<from><icast><c path="rm.windows.Window_ScrollText"/></icast></from>
		<this><c path="rm.windows.Window_ScrollText"/></this>
		<to><icast><c path="rm.windows.Window_ScrollText"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowScrollText.WindowScrollText_Impl_" params="" file="src/rm/abstracts/windows/WindowScrollText.hx" private="1" module="rm.abstracts.windows.WindowScrollText" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?x:?y:?width:?height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowScrollText"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowScrollText.WindowScrollText_Impl_" params="" file="src/rm/abstracts/windows/WindowScrollText.hx" private="1" module="rm.abstracts.windows.WindowScrollText" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="?x:?y:?width:?height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowScrollText"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowScrollable" params="" file="src/rm/abstracts/windows/WindowScrollable.hx">
		<from><icast><c path="rm.windows.Window_Scrollable"/></icast></from>
		<this><c path="rm.windows.Window_Scrollable"/></this>
		<to><icast><c path="rm.windows.Window_Scrollable"/></icast></to>
		<impl><class path="rm.abstracts.windows._WindowScrollable.WindowScrollable_Impl_" params="" file="src/rm/abstracts/windows/WindowScrollable.hx" private="1" module="rm.abstracts.windows.WindowScrollable" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowScrollable"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowScrollable.WindowScrollable_Impl_" params="" file="src/rm/abstracts/windows/WindowScrollable.hx" private="1" module="rm.abstracts.windows.WindowScrollable" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowScrollable"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowSelectable" params="" file="src/rm/abstracts/windows/WindowSelectable.hx">
		<from><icast><c path="rm.windows.Window_Selectable"/></icast></from>
		<this><c path="rm.windows.Window_Selectable"/></this>
		<to><icast><c path="rm.windows.Window_Selectable"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowSelectable.WindowSelectable_Impl_" params="" file="src/rm/abstracts/windows/WindowSelectable.hx" private="1" module="rm.abstracts.windows.WindowSelectable" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="x:y:width:height">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowSelectable"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="19" static="1">
		<f a="this">
			<c path="rm.windows.Window_Selectable"/>
			<c path="rm.windows.Window_Selectable"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowSelectable.WindowSelectable_Impl_" params="" file="src/rm/abstracts/windows/WindowSelectable.hx" private="1" module="rm.abstracts.windows.WindowSelectable" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowSelectable"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="19" static="1">
			<f a="this">
				<c path="rm.windows.Window_Selectable"/>
				<c path="rm.windows.Window_Selectable"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowShopBuy" params="" file="src/rm/abstracts/windows/WindowShopBuy.hx">
		<from><icast><c path="rm.windows.Window_ShopBuy"/></icast></from>
		<this><c path="rm.windows.Window_ShopBuy"/></this>
		<to><icast><c path="rm.windows.Window_ShopBuy"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowShopBuy.WindowShopBuy_Impl_" params="" file="src/rm/abstracts/windows/WindowShopBuy.hx" private="1" module="rm.abstracts.windows.WindowShopBuy" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="x:y:height:shopGoods">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><c path="Array"><x path="Any"/></c></c>
		<x path="rm.abstracts.windows.WindowShopBuy"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowShopBuy.WindowShopBuy_Impl_" params="" file="src/rm/abstracts/windows/WindowShopBuy.hx" private="1" module="rm.abstracts.windows.WindowShopBuy" final="1"><_new public="1" get="inline" set="null" line="8" static="1">
	<f a="x:y:height:shopGoods">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><c path="Array"><x path="Any"/></c></c>
		<x path="rm.abstracts.windows.WindowShopBuy"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowShopNumber" params="" file="src/rm/abstracts/windows/WindowShopNumber.hx">
		<from><icast><c path="rm.windows.Window_ShopNumber"/></icast></from>
		<this><c path="rm.windows.Window_ShopNumber"/></this>
		<to><icast><c path="rm.windows.Window_ShopNumber"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowShopNumber.WindowShopNumber_Impl_" params="" file="src/rm/abstracts/windows/WindowShopNumber.hx" private="1" module="rm.abstracts.windows.WindowShopNumber" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowShopNumber"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowShopNumber.WindowShopNumber_Impl_" params="" file="src/rm/abstracts/windows/WindowShopNumber.hx" private="1" module="rm.abstracts.windows.WindowShopNumber" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowShopNumber"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowShopSell" params="" file="src/rm/abstracts/windows/WindowShopSell.hx">
		<from><icast><c path="rm.windows.Window_ShopSell"/></icast></from>
		<this><c path="rm.windows.Window_ShopSell"/></this>
		<to><icast><c path="rm.windows.Window_ShopSell"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowShopSell.WindowShopSell_Impl_" params="" file="src/rm/abstracts/windows/WindowShopSell.hx" private="1" module="rm.abstracts.windows.WindowShopSell" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowShopSell"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowShopSell.WindowShopSell_Impl_" params="" file="src/rm/abstracts/windows/WindowShopSell.hx" private="1" module="rm.abstracts.windows.WindowShopSell" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowShopSell"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowShopStatus" params="" file="src/rm/abstracts/windows/WindowShopStatus.hx">
		<from><icast><c path="rm.windows.Window_ShopStatus"/></icast></from>
		<this><c path="rm.windows.Window_ShopStatus"/></this>
		<to><icast><c path="rm.windows.Window_ShopStatus"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowShopStatus.WindowShopStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowShopStatus.hx" private="1" module="rm.abstracts.windows.WindowShopStatus" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowShopStatus"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowShopStatus.WindowShopStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowShopStatus.hx" private="1" module="rm.abstracts.windows.WindowShopStatus" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowShopStatus"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowSkillList" params="" file="src/rm/abstracts/windows/WindowSkillList.hx">
		<from><icast><c path="rm.windows.Window_SkillList"/></icast></from>
		<this><c path="rm.windows.Window_SkillList"/></this>
		<to><icast><c path="rm.windows.Window_SkillList"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowSkillList.WindowSkillList_Impl_" params="" file="src/rm/abstracts/windows/WindowSkillList.hx" private="1" module="rm.abstracts.windows.WindowSkillList" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSkillList"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowSkillList.WindowSkillList_Impl_" params="" file="src/rm/abstracts/windows/WindowSkillList.hx" private="1" module="rm.abstracts.windows.WindowSkillList" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSkillList"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowSkillStatus" params="" file="src/rm/abstracts/windows/WindowSkillStatus.hx">
		<from><icast><c path="rm.windows.Window_SkillStatus"/></icast></from>
		<this><c path="rm.windows.Window_SkillStatus"/></this>
		<to><icast><c path="rm.windows.Window_SkillStatus"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowSkillStatus.WindowSkillStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowSkillStatus.hx" private="1" module="rm.abstracts.windows.WindowSkillStatus" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSkillStatus"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowSkillStatus.WindowSkillStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowSkillStatus.hx" private="1" module="rm.abstracts.windows.WindowSkillStatus" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSkillStatus"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowSkillType" params="" file="src/rm/abstracts/windows/WindowSkillType.hx">
		<from><icast><c path="rm.windows.Window_SkillType"/></icast></from>
		<this><c path="rm.windows.Window_SkillType"/></this>
		<to><icast><c path="rm.windows.Window_SkillType"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowSkillType.WindowSkillType_Impl_" params="" file="src/rm/abstracts/windows/WindowSkillType.hx" private="1" module="rm.abstracts.windows.WindowSkillType" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSkillType"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowSkillType.WindowSkillType_Impl_" params="" file="src/rm/abstracts/windows/WindowSkillType.hx" private="1" module="rm.abstracts.windows.WindowSkillType" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y">
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowSkillType"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowStatus" params="" file="src/rm/abstracts/windows/WindowStatus.hx">
		<from><icast><c path="rm.windows.Window_Status"/></icast></from>
		<this><c path="rm.windows.Window_Status"/></this>
		<to><icast><c path="rm.windows.Window_Status"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowStatus.WindowStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowStatus.hx" private="1" module="rm.abstracts.windows.WindowStatus" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="x:y:width:height">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="rm.abstracts.windows.WindowStatus"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<raw public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="rm.windows.Window_Status"/>
			<c path="rm.windows.Window_Status"/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
</class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowStatus.WindowStatus_Impl_" params="" file="src/rm/abstracts/windows/WindowStatus.hx" private="1" module="rm.abstracts.windows.WindowStatus" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="rm.abstracts.windows.WindowStatus"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<raw public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="rm.windows.Window_Status"/>
				<c path="rm.windows.Window_Status"/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
	</class>
	<abstract path="rm.abstracts.windows.WindowStatusBase" params="" file="src/rm/abstracts/windows/WindowStatusBase.hx">
		<from><icast><c path="rm.windows.Window_StatusBase"/></icast></from>
		<this><c path="rm.windows.Window_StatusBase"/></this>
		<to><icast><c path="rm.windows.Window_StatusBase"/></icast></to>
		<impl><class path="rm.abstracts.windows._WindowStatusBase.WindowStatusBase_Impl_" params="" file="src/rm/abstracts/windows/WindowStatusBase.hx" private="1" module="rm.abstracts.windows.WindowStatusBase" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowStatusBase"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowStatusBase.WindowStatusBase_Impl_" params="" file="src/rm/abstracts/windows/WindowStatusBase.hx" private="1" module="rm.abstracts.windows.WindowStatusBase" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="x:y:width:height">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="rm.abstracts.windows.WindowStatusBase"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="rm.abstracts.windows.WindowTitleCommand" params="" file="src/rm/abstracts/windows/WindowTitleCommand.hx">
		<from><icast><c path="rm.windows.Window_TitleCommand"/></icast></from>
		<this><c path="rm.windows.Window_TitleCommand"/></this>
		<to><icast><c path="rm.windows.Window_TitleCommand"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.abstracts.windows._WindowTitleCommand.WindowTitleCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowTitleCommand.hx" private="1" module="rm.abstracts.windows.WindowTitleCommand" final="1"><raw public="1" get="inline" set="null" line="9" static="1">
	<f a="this">
		<c path="rm.windows.Window_TitleCommand"/>
		<c path="rm.windows.Window_TitleCommand"/>
	</f>
	<meta><m n=":impl"/></meta>
</raw></class></impl>
	</abstract>
	<class path="rm.abstracts.windows._WindowTitleCommand.WindowTitleCommand_Impl_" params="" file="src/rm/abstracts/windows/WindowTitleCommand.hx" private="1" module="rm.abstracts.windows.WindowTitleCommand" final="1"><raw public="1" get="inline" set="null" line="9" static="1">
	<f a="this">
		<c path="rm.windows.Window_TitleCommand"/>
		<c path="rm.windows.Window_TitleCommand"/>
	</f>
	<meta><m n=":impl"/></meta>
</raw></class>
	<class path="rm.core.Bitmap" params="" file="src/rm/core/Bitmap.hx" extern="1">
		<load public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a image file and returns a new bitmap object.
  *
  * @static
  * @method load
  * @param {String} url The image url of the texture
  * @return Bitmap</haxe_doc>
		</load>
		<snap public="1" set="method" static="1">
			<f a="stage">
				<c path="rm.core.Stage"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Takes a snapshot of the game screen and returns a new bitmap object.
  *
  * @static
  * @method snap
  * @param {Stage} stage The stage object
  * @return Bitmap</haxe_doc>
		</snap>
		<fontFace public="1">
			<c path="String"/>
			<haxe_doc>* The face name of the font.
  *
  * @property fontFace
  * @type String</haxe_doc>
		</fontFace>
		<fontSize public="1">
			<x path="Int"/>
			<haxe_doc>* The size of the font in pixels.
  *
  * @property fontSize
  * @type Number</haxe_doc>
		</fontSize>
		<fontItalic public="1">
			<x path="Int"/>
			<haxe_doc>* Whether the font is italic.
  *
  * @property fontItalic
  * @type Boolean</haxe_doc>
		</fontItalic>
		<textColor public="1">
			<c path="String"/>
			<haxe_doc>* The color of the text in CSS format.
  *
  * @property textColor
  * @type String</haxe_doc>
		</textColor>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>* The color of the outline of the text in CSS format.
  *
  * @property outlineColor
  * @type String</haxe_doc>
		</outlineColor>
		<outlineWidth public="1">
			<x path="Int"/>
			<haxe_doc>* The width of the outline of the text.
  *
  * @property outlineWidth
  * @type Number</haxe_doc>
		</outlineWidth>
		<url public="1">
			<c path="String"/>
			<haxe_doc>* [read-only] The url of the image file.
  *
  * @property url
  * @type String</haxe_doc>
		</url>
		<baseTexture public="1">
			<c path="pixi.core.textures.BaseTexture"/>
			<haxe_doc>* [read-only] The base texture that holds the image.
  *
  * @property baseTexture
  * @type PIXI.BaseTexture</haxe_doc>
		</baseTexture>
		<canvas public="1">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>* [read-only] The bitmap canvas.
  *
  * @property canvas
  * @type HTMLCanvasElement</haxe_doc>
		</canvas>
		<context public="1">
			<c path="js.html.CanvasRenderingContext2D"/>
			<haxe_doc>* [read-only] The 2d context of the bitmap canvas.
  *
  * @property context
  * @type CanvasRenderingContext2D</haxe_doc>
		</context>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The width of the bitmap.
  *
  * @property width
  * @type Number</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The height of the bitmap.
  *
  * @property height
  * @type Number</haxe_doc>
		</height>
		<rect public="1">
			<c path="rm.core.Rectangle"/>
			<haxe_doc>* [read-only] The rectangle of the bitmap.
  *
  * @property rect
  * @type Rectangle</haxe_doc>
		</rect>
		<smooth public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether the smooth scaling is applied.
  *
  * @property smooth
  * @type Boolean</haxe_doc>
		</smooth>
		<paintOpacity public="1">
			<x path="Float"/>
			<haxe_doc>* The opacity of the drawing object in the range (0, 255).
  *
  * @property paintOpacity
  * @type Number</haxe_doc>
		</paintOpacity>
		<cacheEntry public="1">
			<c path="rm.core.CacheEntry"/>
			<haxe_doc>* Cache entry, for images. In all cases _url is the same as cacheEntry.key
  * @type CacheEntry</haxe_doc>
		</cacheEntry>
		<isReady public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the bitmap is ready to render.
  *
  * @method isReady
  * @return {Boolean} True if the bitmap is ready to render</haxe_doc>
		</isReady>
		<isError public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether a loading error has occurred.
  *
  * @method isError
  * @return {Boolean} True if a loading error has occurred</haxe_doc>
		</isError>
		<resize public="1" set="method">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resizes the bitmap.
  *
  * @method resize
  * @param {Number} width The new width of the bitmap
  * @param {Number} height The new height of the bitmap</haxe_doc>
		</resize>
		<blt public="1" set="method">
			<f a="source:sx:sy:sw:sh:dx:dy:?dw:?dh">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Performs a block transfer.
  *
  * @method blt
  * @param {Bitmap} source The bitmap to draw
  * @param {Number} sx The x coordinate in the source
  * @param {Number} sy The y coordinate in the source
  * @param {Number} sw The width of the source image
  * @param {Number} sh The height of the source image
  * @param {Number} dx The x coordinate in the destination
  * @param {Number} dy The y coordinate in the destination
  * @param {Number} [dw=sw] The width to draw the image in the destination
  * @param {Number} [dh=sh] The height to draw the image in the destination</haxe_doc>
		</blt>
		<getPixel public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns pixel color at the specified point.
  *
  * @method getPixel
  * @param {Number} x The x coordinate of the pixel in the bitmap
  * @param {Number} y The y coordinate of the pixel in the bitmap
  * @return {String} The pixel color (hex format)</haxe_doc>
		</getPixel>
		<getAlphaPixel public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns alpha pixel value at the specified point.
  *
  * @method getAlphaPixel
  * @param {Number} x The x coordinate of the pixel in the bitmap
  * @param {Number} y The y coordinate of the pixel in the bitmap
  * @return {String} The alpha value</haxe_doc>
		</getAlphaPixel>
		<clearRect public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Clears the specified rectangle.
  *
  * @method clearRect
  * @param {Number} x The x coordinate for the upper-left corner
  * @param {Number} y The y coordinate for the upper-left corner
  * @param {Number} width The width of the rectangle to clear
  * @param {Number} height The height of the rectangle to clear</haxe_doc>
		</clearRect>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the entire bitmap.
  *
  * @method clear</haxe_doc>
		</clear>
		<fillRect public="1" set="method">
			<f a="x:y:width:height:color">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills the specified rectangle.
  *
  * @method fillRect
  * @param {Number} x The x coordinate for the upper-left corner
  * @param {Number} y The y coordinate for the upper-left corner
  * @param {Number} width The width of the rectangle to clear
  * @param {Number} height The height of the rectangle to clear
  * @param {String} color The color of the rectangle in CSS format</haxe_doc>
		</fillRect>
		<fillAll public="1" set="method">
			<f a="color">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills the entire bitmap.
  *
  * @method fillAll
  * @param {String} color The color of the rectangle in CSS format</haxe_doc>
		</fillAll>
		<gradientFillRect public="1" set="method">
			<f a="x:y:width:height:color1:color2:?vertical">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the rectangle with a gradation.
  *
  * @method gradientFillRect
  * @param {Number} x The x coordinate for the upper-left corner
  * @param {Number} y The y coordinate for the upper-left corner
  * @param {Number} width The width of the rectangle to clear
  * @param {Number} height The height of the rectangle to clear
  * @param {String} color1 The start color of the gradation
  * @param {String} color2 The end color of the gradation
  * @param {Boolean} vertical Whether it draws a vertical gradient</haxe_doc>
		</gradientFillRect>
		<drawCircle public="1" set="method">
			<f a="x:y:radius:color">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draw the filled circle.
  *
  * @method drawCircle
  * @param {Number} x The x coordinate of the center of the circle
  * @param {Number} y The y coordinate of the center of the circle
  * @param {Number} radius The radius of the circle
  * @param {String} color The color of the circle in CSS format</haxe_doc>
		</drawCircle>
		<drawText public="1" set="method">
			<f a="text:x:y:maxWidth:lineHeight:?align">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the outline text to the bitmap.
  *
  * @method drawText
  * @param {String} text The text that will be drawn
  * @param {Number} x The x coordinate for the left of the text
  * @param {Number} y The y coordinate for the top of the text
  * @param {Number} maxWidth The maximum allowed width of the text
  * @param {Number} lineHeight The height of the text line
  * @param {String} align The alignment of the text</haxe_doc>
		</drawText>
		<measureTextWidth public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the width of the specified text.
  *
  * @method measureTextWidth
  * @param {String} text The text to be measured
  * @return {Number} The width of the text in pixels</haxe_doc>
		</measureTextWidth>
		<adjustTone public="1" set="method">
			<f a="r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the color tone of the entire bitmap.
  *
  * @method adjustTone
  * @param {Number} r The red strength in the range (-255, 255)
  * @param {Number} g The green strength in the range (-255, 255)
  * @param {Number} b The blue strength in the range (-255, 255)</haxe_doc>
		</adjustTone>
		<rotateHue public="1" set="method">
			<f a="offset">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Rotates the hue of the entire bitmap.
  *
  * @method rotateHue
  * @param {Number} offset The hue offset in 360 degrees</haxe_doc>
		</rotateHue>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Applies a blur effect to the bitmap.
  *
  * @method blur</haxe_doc>
		</blur>
		<addLoadListener public="1" set="method">
			<f a="listner">
				<f a="bitmap">
					<c path="rm.core.Bitmap"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add a callback function that will be called when the bitmap is loaded.
  *
  * @method addLoadListener
  * @param {Function} listner The callback function</haxe_doc>
		</addLoadListener>
		<touch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* touch the resource
  * @method touch</haxe_doc>
		</touch>
		<bltImage public="1" set="method">
			<f a="source:sx:sy:sw:sh:dx:dy:?dw:?dh">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Performs a block transfer, using assumption that original image was not modified (no hue)
  *
  * @method blt
  * @param {Bitmap} source The bitmap to draw
  * @param {Int} sx The x coordinate in the source
  * @param {Int} sy The y coordinate in the source
  * @param {Int} sw The width of the source image
  * @param {Int} sh The height of the source image
  * @param {Int} dx The x coordinate in the destination
  * @param {Int} dy The y coordinate in the destination
  * @param {Int} [dw=sw] The width to draw the image in the destination
  * @param {Int} [dh=sh] The height to draw the image in the destination</haxe_doc>
		</bltImage>
		<_canvas><c path="js.html.CanvasElement"/></_canvas>
		<_context><c path="js.html.CanvasRenderingContext2D"/></_context>
		<_baseTexture><c path="pixi.core.textures.BaseTexture"/></_baseTexture>
		<_image><c path="js.html.ImageElement"/></_image>
		<_url><c path="String"/></_url>
		<_paintOpacity><x path="Float"/></_paintOpacity>
		<_smooth><x path="Bool"/></_smooth>
		<_loadListeners><f a=""><x path="Void"/></f></_loadListeners>
		<_isLoading><x path="Bool"/></_isLoading>
		<_hasError><x path="Bool"/></_hasError>
		<_makeFontNameText set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* @method _makeFontNameText
  * @return {String} FontNameText
  * @private</haxe_doc>
		</_makeFontNameText>
		<_drawTextOutline set="method">
			<f a="text:tx:ty:maxWidth">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawTextOutline
  * @param {String} text
  * @param {Number} tx
  * @param {Number} ty
  * @param {Number} maxWidth
  * @private</haxe_doc>
		</_drawTextOutline>
		<_drawTextBody set="method">
			<f a="text:tx:ty:maxWidth">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawTextBody
  * @param {String} text
  * @param {Number} tx
  * @param {Number} ty
  * @param {Number} maxWidth
  * @private</haxe_doc>
		</_drawTextBody>
		<_onLoad set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _onLoad
  * @private</haxe_doc>
		</_onLoad>
		<_callLoadListeners set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _callLoadListeners
  * @private</haxe_doc>
		</_callLoadListeners>
		<_onError set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _onError
  * @private</haxe_doc>
		</_onError>
		<_setDirty set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _setDirty
  * @private</haxe_doc>
		</_setDirty>
		<new public="1" set="method">
			<f a="?width:?height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The basic object that represents an image.
  *
  * @class Bitmap
  * @constructor
  * @param {Int} width The width of the bitmap
  * @param {Int} height The height of the bitmap</haxe_doc>
		</new>
		<haxe_doc>* Allows you to map pixels to the screen or draw rectangles.</haxe_doc>
		<meta><m n=":native"><e>"Bitmap"</e></m></meta>
	</class>
	<class path="rm.core.CacheEntry" params="" file="src/rm/core/CacheEntry.hx" extern="1">
		<free public="1" set="method">
			<f a="?byTTL">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* frees the resource</haxe_doc>
		</free>
		<allocate public="1" set="method">
			<f a=""><c path="rm.core.CacheEntry"/></f>
			<haxe_doc>* Allocates the resource
  * @returns {CacheEntry}</haxe_doc>
		</allocate>
		<setTimeToLive public="1" set="method">
			<f a="?ticks:?seconds">
				<x path="Int"/>
				<x path="Int"/>
				<c path="rm.core.CacheEntry"/>
			</f>
			<haxe_doc>* Sets the time to live
  * @param {number} ticks TTL in ticks, 0 if not set
  * @param {number} time TTL in seconds, 0 if not set
  * @returns {CacheEntry}</haxe_doc>
		</setTimeToLive>
		<isStillAlive public="1" set="method"><f a=""><x path="Bool"/></f></isStillAlive>
		<touch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* makes sure that resource wont freed by Time To Live
  * if resource was already freed by TTL, put it in cache again</haxe_doc>
		</touch>
		<new public="1" set="method">
			<f a="cache:key:item">
				<c path="rm.core.CacheMap"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The resource class. Allows to be collected as a garbage if not use for some time or ticks
  *
  * @class CacheEntry
  * @constructor
  * @param {ResourceManager} resource manager
  * @param {string} key, url of the resource
  * @param {string} item - Bitmap, HTML5Audio, WebAudio - whatever you want to store in the cache</haxe_doc>
		</new>
		<meta><m n=":native"><e>"CacheEntry"</e></m></meta>
	</class>
	<class path="rm.core.CacheMap" params="" file="src/rm/core/CacheMap.hx" extern="1">
		<checkTTL public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* checks ttl of all elements and removes dead ones</haxe_doc>
		</checkTTL>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* cache item
  * @param key url of cache element
  * @returns {*|null}</haxe_doc>
		</getItem>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<setItem public="1" set="method"><f a="key:item">
	<c path="String"/>
	<x path="Any"/>
	<c path="rm.core.CacheEntry"/>
</f></setItem>
		<update public="1" set="method"><f a="ticks:delta">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method">
			<f a="manager">
				<c path="rm.managers.ImageManager"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Cache for images, audio, or any other kind of resource
  * @param manager
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"CacheMap"</e></m></meta>
	</class>
	<class path="rm.core.Graphics" params="" file="src/rm/core/Graphics.hx" extern="1">
		<frameCount public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The total frame count of the game screen.
  *
  * @static
  * @property frameCount
  * @type Number</haxe_doc>
		</frameCount>
		<BLEND_NORMAL public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The alias of PIXI.blendModes.NORMAL.
  *
  * @static
  * @property BLEND_NORMAL
  * @type Number
  * @final</haxe_doc>
		</BLEND_NORMAL>
		<BLEND_ADD public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The alias of PIXI.blendModes.ADD.
  *
  * @static
  * @property BLEND_ADD
  * @type Number
  * @final</haxe_doc>
		</BLEND_ADD>
		<BLEND_MULTIPLY public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The alias of PIXI.blendModes.MULTIPLY.
  *
  * @static
  * @property BLEND_MULTIPLY
  * @type Number
  * @final</haxe_doc>
		</BLEND_MULTIPLY>
		<BLEND_SCREEN public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The alias of PIXI.blendModes.SCREEN.
  *
  * @static
  * @property BLEND_SCREEN
  * @type Number
  * @final</haxe_doc>
		</BLEND_SCREEN>
		<width public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The width of the game screen.
  *
  * @static
  * @property width
  * @type Number</haxe_doc>
		</width>
		<height public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The height of the game screen.
  *
  * @static
  * @property height
  * @type Number</haxe_doc>
		</height>
		<boxWidth public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The width of the window display area.
  *
  * @static
  * @property boxWidth
  * @type Number</haxe_doc>
		</boxWidth>
		<boxHeight public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The height of the window display area.
  *
  * @static
  * @property boxHeight
  * @type Number</haxe_doc>
		</boxHeight>
		<scale public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* The zoom scale of the game screen.
  *
  * @static
  * @property scale
  * @type Number</haxe_doc>
		</scale>
		<initialize public="1" set="method" static="1">
			<f a="?width:?height:?type">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Initializes the graphics system.
  *
  * @static
  * @method initialize
  * @param {Number} width The width of the game screen
  * @param {Number} height The height of the game screen
  * @param {String} type The type of the renderer.
  *                 'canvas', 'webgl', or 'auto'.</haxe_doc>
		</initialize>
		<tickStart public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Marks the beginning of each frame for FPSMeter.
  *
  * @static
  * @method tickStart</haxe_doc>
		</tickStart>
		<tickEnd public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Marks the end of each frame for FPSMeter.
  *
  * @static
  * @method tickEnd</haxe_doc>
		</tickEnd>
		<render public="1" set="method" static="1">
			<f a="?stage">
				<c path="rm.core.Stage"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Renders the stage to the game screen.
  *
  * @static
  * @method render
  * @param {Stage} stage The stage object to be rendered</haxe_doc>
		</render>
		<isWebGL public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the renderer type is WebGL.
  *
  * @static
  * @method isWebGL
  * @return {Boolean} True if the renderer type is WebGL</haxe_doc>
		</isWebGL>
		<hasWebGL public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the current browser supports WebGL.
  *
  * @static
  * @method hasWebGL
  * @return {Boolean} True if the current browser supports WebGL.</haxe_doc>
		</hasWebGL>
		<canUseDifferenceBlend public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the canvas blend mode 'difference' is supported.
  *
  * @static
  * @method canUseDifferenceBlend
  * @return {Boolean} True if the canvas blend mode 'difference' is supported</haxe_doc>
		</canUseDifferenceBlend>
		<canUseSaturationBlend public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the canvas blend mode 'saturation' is supported.
  *
  * @static
  * @method canUseSaturationBlend
  * @return {Boolean} True if the canvas blend mode 'saturation' is supported</haxe_doc>
		</canUseSaturationBlend>
		<setLoadingImage public="1" set="method" static="1">
			<f a="src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the source of the "Now Loading" image.
  *
  * @static
  * @method setLoadingImage
  * @param {String} Path of image</haxe_doc>
		</setLoadingImage>
		<startLoading public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the counter for displaying the "Now Loading" image.
  *
  * @static
  * @method startLoading</haxe_doc>
		</startLoading>
		<updateLoading public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Increments the loading counter and displays the "Now Loading" image if necessary.
  *
  * @static
  * @method updateLoading</haxe_doc>
		</updateLoading>
		<endLoading public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Erases the "Now Loading" image.
  *
  * @static
  * @method endLoading</haxe_doc>
		</endLoading>
		<printError public="1" set="method" static="1">
			<f a="name:message">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Displays the error text to the screen.
  *
  * @static
  * @method printError
  * @param {String} name The name of the error
  * @param {String} message The message of the error</haxe_doc>
		</printError>
		<showFps public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the FPSMeter element.
  *
  * @static
  * @method showFps</haxe_doc>
		</showFps>
		<hideFps public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the FPSMeter element.
  *
  * @static
  * @method hideFps</haxe_doc>
		</hideFps>
		<loadFont public="1" set="method" static="1">
			<f a="name:url">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Loads a font file.
  *
  * @static
  * @method loadFont
  * @param {String} name The face name of the font
  * @param {String} url The url of the font file</haxe_doc>
		</loadFont>
		<isFontLoaded public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether the font file is loaded.
  *
  * @static
  * @method isFontLoaded
  * @param {String} name The face name of the font
  * @return {Boolean} True if the font file is loaded</haxe_doc>
		</isFontLoaded>
		<playVideo public="1" set="method" static="1">
			<f a="src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts playback of a video.
  *
  * @static
  * @method playVideo
  * @param {String} src</haxe_doc>
		</playVideo>
		<isVideoPlaying public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the video is playing.
  *
  * @static
  * @method isVideoPlaying
  * @return {Boolean} True if the video is playing</haxe_doc>
		</isVideoPlaying>
		<canPlayVideoType public="1" set="method" static="1">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether the browser can play the specified video type.
  *
  * @static
  * @method canPlayVideoType
  * @param {String} type The video type to test support for
  * @return {Boolean} True if the browser can play the specified video type</haxe_doc>
		</canPlayVideoType>
		<pageToCanvasX public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Converts an x coordinate on the page to the corresponding
  * x coordinate on the canvas area.
  *
  * @static
  * @method pageToCanvasX
  * @param {Number} x The x coordinate on the page to be converted
  * @return {Number} The x coordinate on the canvas area</haxe_doc>
		</pageToCanvasX>
		<pageToCanvasY public="1" set="method" static="1">
			<f a="y">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Converts a y coordinate on the page to the corresponding
  * y coordinate on the canvas area.
  *
  * @static
  * @method pageToCanvasY
  * @param {Number} y The y coordinate on the page to be converted
  * @return {Number} The y coordinate on the canvas area</haxe_doc>
		</pageToCanvasY>
		<isInsideCanvas public="1" set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether the specified point is inside the game canvas area.
  *
  * @static
  * @method isInsideCanvas
  * @param {Number} x The x coordinate on the canvas area
  * @param {Number} y The y coordinate on the canvas area
  * @return {Boolean} True if the specified point is inside the game canvas area</haxe_doc>
		</isInsideCanvas>
		<callGC public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Calls pixi.js garbage collector</haxe_doc>
		</callGC>
		<_width static="1"><x path="Int"/></_width>
		<_height static="1"><x path="Int"/></_height>
		<_rendererType static="1"><c path="String"/></_rendererType>
		<_boxWidth static="1"><x path="Int"/></_boxWidth>
		<_boxHeight static="1"><x path="Int"/></_boxHeight>
		<_scale static="1"><x path="Float"/></_scale>
		<_realScale static="1"><x path="Float"/></_realScale>
		<_errorPrinter static="1"><x path="Bool"/></_errorPrinter>
		<_canvas static="1"><c path="js.html.CanvasElement"/></_canvas>
		<_video static="1"><c path="js.html.VideoElement"/></_video>
		<_upperCanvas static="1"><c path="js.html.CanvasElement"/></_upperCanvas>
		<renderer public="1" static="1">
			<c path="pixi.core.renderers.AbstractRenderer"/>
			<meta><m n=":native"><e>"_renderer"</e></m></meta>
		</renderer>
		<_renderer static="1"><c path="pixi.core.renderers.AbstractRenderer"/></_renderer>
		<_fpsMeter static="1"><c path="jsfps.fpsmeter.FPSMeter"/></_fpsMeter>
		<_modeBox static="1"><c path="js.html.DivElement"/></_modeBox>
		<_skipCount static="1"><x path="Int"/></_skipCount>
		<_maxSkip static="1"><x path="Int"/></_maxSkip>
		<_rendered static="1"><x path="Bool"/></_rendered>
		<_loadingImage static="1"><c path="js.html.ImageElement"/></_loadingImage>
		<_loadingCount static="1"><x path="Int"/></_loadingCount>
		<_fpsMeterToggled static="1"><x path="Bool"/></_fpsMeterToggled>
		<_stretchEnabled static="1"><x path="Bool"/></_stretchEnabled>
		<_canUseDifferenceBlend static="1"><x path="Bool"/></_canUseDifferenceBlend>
		<_canUseSaturationBlend static="1"><x path="Bool"/></_canUseSaturationBlend>
		<_hiddenCanvas static="1"><c path="js.html.CanvasElement"/></_hiddenCanvas>
		<_createAllElements set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createAllElements
  * @private</haxe_doc>
		</_createAllElements>
		<_updateAllElements set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateAllElements
  * @private</haxe_doc>
		</_updateAllElements>
		<_updateRealScale set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateRealScale
  * @private</haxe_doc>
		</_updateRealScale>
		<_makeErrorHtml set="method" static="1">
			<f a="name:message">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _makeErrorHtml
  * @param {String} name
  * @param {String} message
  * @return {String}
  * @private</haxe_doc>
		</_makeErrorHtml>
		<_defaultStretchMode set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* @static
  * @method _defaultStretchMode
  * @private</haxe_doc>
		</_defaultStretchMode>
		<_testCanvasBlendModes set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _testCanvasBlendModes
  * @private</haxe_doc>
		</_testCanvasBlendModes>
		<_modifyExistingElements set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _modifyExistingElements
  * @private</haxe_doc>
		</_modifyExistingElements>
		<_createErrorPrinter set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createErrorPrinter
  * @private</haxe_doc>
		</_createErrorPrinter>
		<_updateErrorPrinter set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateErrorPrinter
  * @private</haxe_doc>
		</_updateErrorPrinter>
		<_createCanvas set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createCanvas
  * @private</haxe_doc>
		</_createCanvas>
		<_updateCanvas set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateCanvas
  * @private</haxe_doc>
		</_updateCanvas>
		<_createVideo set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createVideo
  * @private</haxe_doc>
		</_createVideo>
		<_updateVideo set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateVideo
  * @private</haxe_doc>
		</_updateVideo>
		<_createUpperCanvas set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createUpperCanvas
  * @private</haxe_doc>
		</_createUpperCanvas>
		<_updateUpperCanvas set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateUpperCanvas
  * @private</haxe_doc>
		</_updateUpperCanvas>
		<_clearUpperCanvas set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _clearUpperCanvas
  * @private</haxe_doc>
		</_clearUpperCanvas>
		<_paintUpperCanvas set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _paintUpperCanvas
  * @private</haxe_doc>
		</_paintUpperCanvas>
		<_createRenderer set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createRenderer
  * @private</haxe_doc>
		</_createRenderer>
		<_updateRenderer set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateRenderer
  * @private</haxe_doc>
		</_updateRenderer>
		<_createFPSMeter set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createFPSMeter
  * @private</haxe_doc>
		</_createFPSMeter>
		<_createModeBox set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createModeBox
  * @private</haxe_doc>
		</_createModeBox>
		<_createGameFontLoader set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _createGameFontLoader
  * @private</haxe_doc>
		</_createGameFontLoader>
		<_createFontLoader set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _createFontLoader
  * @param {String} name
  * @private</haxe_doc>
		</_createFontLoader>
		<_centerElement set="method" static="1">
			<f a="element">
				<c path="js.html.CanvasElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _centerElement
  * @param {HTMLCanvasElement} element
  * @private</haxe_doc>
		</_centerElement>
		<_disableTextSelection set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _disableTextSelection
  * @private</haxe_doc>
		</_disableTextSelection>
		<_disableContextMenu set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _disableContextMenu
  * @private</haxe_doc>
		</_disableContextMenu>
		<_applyCanvasFilter set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _applyCanvasFilter
  * @private</haxe_doc>
		</_applyCanvasFilter>
		<_onVideoLoad set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onVideoLoad
  * @private</haxe_doc>
		</_onVideoLoad>
		<_onVideoError set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onVideoError
  * @private</haxe_doc>
		</_onVideoError>
		<_onVideoEnd set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onVideoEnd
  * @private</haxe_doc>
		</_onVideoEnd>
		<_updateVisibility set="method" static="1">
			<f a="videoVisible">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _updateVisibility
  * @param {Boolean} videoVisible
  * @private</haxe_doc>
		</_updateVisibility>
		<_isVideoVisible set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* @static
  * @method _isVideoVisible
  * @return {Boolean}
  * @private</haxe_doc>
		</_isVideoVisible>
		<_setupEventHandlers set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _setupEventHandlers
  * @private</haxe_doc>
		</_setupEventHandlers>
		<_onWindowResize set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onWindowResize
  * @private</haxe_doc>
		</_onWindowResize>
		<_onKeyDown set="method" static="1">
			<f a="event">
				<c path="js.html.KeyboardEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onKeyDown
  * @param {KeyboardEvent} event
  * @private</haxe_doc>
		</_onKeyDown>
		<_switchFPSMeter set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _switchFPSMeter
  * @private</haxe_doc>
		</_switchFPSMeter>
		<_switchStretchMode set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _switchStretchMode
  * @return {Boolean}
  * @private</haxe_doc>
		</_switchStretchMode>
		<_switchFullScreen set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _switchFullScreen
  * @private</haxe_doc>
		</_switchFullScreen>
		<_isFullScreen set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* @static
  * @method _isFullScreen
  * @return {Boolean}
  * @private</haxe_doc>
		</_isFullScreen>
		<_requestFullScreen set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _requestFullScreen
  * @private</haxe_doc>
		</_requestFullScreen>
		<_cancelFullScreen set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _cancelFullScreen
  * @private</haxe_doc>
		</_cancelFullScreen>
		<haxe_doc>* The static class that carries out graphics processing.
 *
 * @class Graphics</haxe_doc>
		<meta><m n=":native"><e>"Graphics"</e></m></meta>
	</class>
	<class path="rm.core.HTML5Audio" params="" file="src/rm/core/HTML5Audio.hx" extern="1">
		<_initialized><x path="Bool"/></_initialized>
		<_unlocked><x path="Bool"/></_unlocked>
		<_audioElement><c path="js.html.AudioElement"/></_audioElement>
		<_gainTweenInterval><x path="Int"/></_gainTweenInterval>
		<_tweenGain><x path="Int"/></_tweenGain>
		<_tweenTargetGain><x path="Int"/></_tweenTargetGain>
		<_tweenGainStep><x path="Int"/></_tweenGainStep>
		<_staticSePath><x path="Bool"/></_staticSePath>
		<_volume><x path="Int"/></_volume>
		<_loadListeners><c path="Array"><f a=""><x path="Void"/></f></c></_loadListeners>
		<_hasError><x path="Bool"/></_hasError>
		<_autoPlay><x path="Bool"/></_autoPlay>
		<_isLoading><x path="Bool"/></_isLoading>
		<_buffered><x path="Bool"/></_buffered>
		<url public="1">
			<c path="String"/>
			<haxe_doc>* [read-only] The url of the audio file.
  *
  * @property url
  * @type String</haxe_doc>
		</url>
		<volume public="1">
			<x path="Int"/>
			<haxe_doc>* The volume of the audio.
  *
  * @property volume
  * @type Number</haxe_doc>
		</volume>
		<setup public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets up the Html5 Audio.
  *
  * @static
  * @method setup
  * @param {String} url The url of the audio file</haxe_doc>
		</setup>
		<initialize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the audio system.
  *
  * @static
  * @method initialize
  * @return {Boolean} True if the audio system is available</haxe_doc>
		</initialize>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the audio data.
  *
  * @static
  * @method clear</haxe_doc>
		</clear>
		<setStaticSe public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the URL of static se.
  *
  * @static
  * @param {String} url</haxe_doc>
		</setStaticSe>
		<isReady public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the audio data is ready to play.
  *
  * @static
  * @method isReady
  * @return {Boolean} True if the audio data is ready to play</haxe_doc>
		</isReady>
		<isError public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether a loading error has occurred.
  *
  * @static
  * @method isError
  * @return {Boolean} True if a loading error has occurred</haxe_doc>
		</isError>
		<isPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the audio is playing.
  *
  * @static
  * @method isPlaying
  * @return {Boolean} True if the audio is playing</haxe_doc>
		</isPlaying>
		<play public="1" set="method">
			<f a="loop:offset">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Plays the audio.
  *
  * @static
  * @method play
  * @param {Boolean} loop Whether the audio data play in a loop
  * @param {Number} offset The start position to play in seconds</haxe_doc>
		</play>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the audio.
  *
  * @static
  * @method stop</haxe_doc>
		</stop>
		<fadeIn public="1" set="method">
			<f a="duration">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Performs the audio fade-in.
  *
  * @static
  * @method fadeIn
  * @param {Number} duration Fade-in time in seconds</haxe_doc>
		</fadeIn>
		<fadeOut public="1" set="method">
			<f a="duration">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Performs the audio fade-out.
  *
  * @static
  * @method fadeOut
  * @param {Number} duration Fade-out time in seconds</haxe_doc>
		</fadeOut>
		<seek public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Gets the seek position of the audio.
  *
  * @static
  * @method seek</haxe_doc>
		</seek>
		<addLoadListener set="method">
			<f a="listner">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add a callback function that will be called when the audio data is loaded.
  *
  * @static
  * @method addLoadListener
  * @param {Function} listner The callback function</haxe_doc>
		</addLoadListener>
		<_setupEventHandlers set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _setupEventHandlers
  * @private</haxe_doc>
		</_setupEventHandlers>
		<_onTouchStart set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onTouchStart
  * @private</haxe_doc>
		</_onTouchStart>
		<_onVisibilityChange set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onVisibilityChange
  * @private</haxe_doc>
		</_onVisibilityChange>
		<_onLoadedData set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onLoadedData
  * @private</haxe_doc>
		</_onLoadedData>
		<_onError set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onError
  * @private</haxe_doc>
		</_onError>
		<_onEnded set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onEnded
  * @private</haxe_doc>
		</_onEnded>
		<_onHide set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onHide
  * @private</haxe_doc>
		</_onHide>
		<_onShow set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onShow
  * @private</haxe_doc>
		</_onShow>
		<_load set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _load
  * @param {String} url
  * @private</haxe_doc>
		</_load>
		<_startPlaying set="method">
			<f a="loop:offset">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _startPlaying
  * @param {Boolean} loop
  * @param {Number} offset
  * @private</haxe_doc>
		</_startPlaying>
		<_onLoad set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onLoad
  * @private</haxe_doc>
		</_onLoad>
		<_startGainTweenfunction set="method">
			<f a="duration">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _startGainTween
  * @params {Number} duration
  * @private</haxe_doc>
		</_startGainTweenfunction>
		<_applyTweenValue set="method">
			<f a="volume">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _applyTweenValue
  * @param {Number} volume
  * @private</haxe_doc>
		</_applyTweenValue>
		<meta><m n=":native"><e>"HTML5Audio"</e></m></meta>
	</class>
	<class path="rm.core.Input" params="" file="src/rm/core/Input.hx" extern="1">
		<keyRepeatWait public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The wait time of the key repeat in frames.
  *
  * @static
  * @property keyRepeatWait
  * @type Number</haxe_doc>
		</keyRepeatWait>
		<keyRepeatInterval public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* The interval of the key repeat in frames.
  *
  * @static
  * @property keyRepeatInterval
  * @type Number</haxe_doc>
		</keyRepeatInterval>
		<keyMapper public="1" static="1">
			<c path="js.lib.Object"/>
			<haxe_doc>* A hash table to convert from a virtual key code to a mapped key name.
  *
  * @static
  * @property keyMapper
  * @type Object
  * ```
  * {
   [key:number]:string
  }
  * ```</haxe_doc>
		</keyMapper>
		<gamepadMapper public="1" static="1">
			<c path="js.lib.Object"/>
			<haxe_doc>* A hash table to convert from a gamepad button to a mapped key name.
  *
  * @static
  * @property gamepadMapper
  * @type Object
  * ```
  * {
   [key:number]:String
  }
  * ```</haxe_doc>
		</gamepadMapper>
		<dir4 public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The four direction value as a number of the numpad, or 0 for neutral.
  *
  * @static
  * @property dir4
  * @type Number</haxe_doc>
		</dir4>
		<dir8 public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The eight direction value as a number of the numpad, or 0 for neutral.
  *
  * @static
  * @property dir8
  * @type Number</haxe_doc>
		</dir8>
		<date public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The time of the last input in milliseconds.
  *
  * @static
  * @property date
  * @type Number</haxe_doc>
		</date>
		<initialize public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the input system.
  *
  * @static
  * @method initialize</haxe_doc>
		</initialize>
		<clear public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears all the input data.
  *
  * @static
  * @method clear</haxe_doc>
		</clear>
		<update public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the input data.
  *
  * @static
  * @method update</haxe_doc>
		</update>
		<isPressed public="1" set="method" static="1">
			<f a="keyName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether a key is currently pressed down.
  *
  * @static
  * @method isPressed
  * @param {String} keyName The mapped name of the key
  * @return {Boolean} True if the key is pressed</haxe_doc>
		</isPressed>
		<isTriggered public="1" set="method" static="1">
			<f a="keyName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether a key is just pressed.
  *
  * @static
  * @method isTriggered
  * @param {String} keyName The mapped name of the key
  * @return {Boolean} True if the key is triggered</haxe_doc>
		</isTriggered>
		<nisRepeated public="1" set="method" static="1">
			<f a="keyName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether a key is just pressed or a key repeat occurred.
  *
  * @static
  * @method isRepeated
  * @param {String} keyName The mapped name of the key
  * @return {Boolean} True if the key is repeated</haxe_doc>
		</nisRepeated>
		<isLongPressed public="1" set="method" static="1">
			<f a="keyName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks whether a key is kept depressed.
  *
  * @static
  * @method isLongPressed
  * @param {String} keyName The mapped name of the key
  * @return {Boolean} True if the key is long-pressed</haxe_doc>
		</isLongPressed>
		<_wrapNwjsAlert set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _wrapNwjsAlert
  * @private</haxe_doc>
		</_wrapNwjsAlert>
		<_setupEventHandlers set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _setupEventHandlers
  * @private</haxe_doc>
		</_setupEventHandlers>
		<_onKeyDown set="method" static="1">
			<f a="event">
				<c path="js.html.KeyboardEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onKeyDown
  * @param {KeyboardEvent} event
  * @private</haxe_doc>
		</_onKeyDown>
		<_shouldPreventDefault set="method" static="1">
			<f a="keyCode">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* @static
  * @method _shouldPreventDefault
  * @param {Number} keyCode
  * @return {Boolean}
  * @private</haxe_doc>
		</_shouldPreventDefault>
		<_onKeyUp set="method" static="1">
			<f a="event">
				<c path="js.html.KeyboardEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onKeyUp
  * @param {KeyboardEvent} event
  * @private</haxe_doc>
		</_onKeyUp>
		<_onLostFocus set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _onLostFocus
  * @private</haxe_doc>
		</_onLostFocus>
		<_pollGamepads set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _pollGamepads
  * @private</haxe_doc>
		</_pollGamepads>
		<_updateGamepadState set="method" static="1">
			<f a="gamepad">
				<c path="js.html.Gamepad"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _updateGamepadState
  * @param {Gamepad} gamepad
  * @private</haxe_doc>
		</_updateGamepadState>
		<_updateDirection set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _updateDirection
  * @private</haxe_doc>
		</_updateDirection>
		<_currentState>
			<c path="js.lib.Object"/>
			<haxe_doc>* Current Input State Object
  * ```
  * {
   [key:string]:Bool
  };
  * ```</haxe_doc>
		</_currentState>
		<_previousState>
			<c path="js.lib.Object"/>
			<haxe_doc>* Previous Input State Object
  * ```
  * {
   [key:string]:Bool
  };
  * ```</haxe_doc>
		</_previousState>
		<_gamepadStates><c path="Array"><c path="Array"><x path="Bool"/></c></c></_gamepadStates>
		<_latestButton><c path="String"/></_latestButton>
		<_pressedTime><x path="Float"/></_pressedTime>
		<_dir4><x path="Int"/></_dir4>
		<_dir8><x path="Int"/></_dir8>
		<_preferredAxis><c path="String"/></_preferredAxis>
		<_date><x path="Int"/></_date>
		<_signX set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* @static
  * @method _signX
  * @return {Number}
  * @private</haxe_doc>
		</_signX>
		<_signY set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* @static
  * @method _signY
  * @return {Number}
  * @private</haxe_doc>
		</_signY>
		<_makeNumpadDirection set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* @static
  * @method _makeNumpadDirection
  * @param {Number} x
  * @param {Number} y
  * @return {Number}
  * @private</haxe_doc>
		</_makeNumpadDirection>
		<_isEscapeCompatible set="method">
			<f a="keyName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* @static
  * @method _isEscapeCompatible
  * @param {String} keyName
  * @return {Boolean}
  * @private</haxe_doc>
		</_isEscapeCompatible>
		<meta><m n=":native"><e>"Input"</e></m></meta>
	</class>
	<class path="rm.core.JsonEx" params="" file="src/rm/core/JsonEx.hx" extern="1">
		<makeDeepCopy public="1" set="method" static="1">
			<f a="object">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* Makes a deep copy of the specified object.
  *
  * @static
  * @method makeDeepCopy
  * @param {Object} object The object to be copied
  * @return {Object} The copied object</haxe_doc>
		</makeDeepCopy>
		<stringify public="1" set="method" static="1">
			<f a="object">
				<x path="Any"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Converts an object to a JSON string with object information.
  *
  * @static
  * @method stringify
  * @param {Object} object The object to be converted
  * @return {String} The JSON string</haxe_doc>
		</stringify>
		<parse public="1" set="method" static="1">
			<f a="json">
				<c path="String"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* Parses a JSON string and reconstructs the corresponding object.
  *
  * @static
  * @method parse
  * @param {String} json The JSON string
  * @return {Object} The reconstructed object</haxe_doc>
		</parse>
		<_encode set="method" static="1">
			<f a="value:depth">
				<x path="Any"/>
				<x path="Int"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* @static
  * @method _encode
  * @param {Object} value
  * @param {Number} depth
  * @return {Object}
  * @private</haxe_doc>
		</_encode>
		<_decode set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* @static
  * @method _decode
  * @param {Object} value
  * @return {Object}
  * @private</haxe_doc>
		</_decode>
		<_getConstructorName set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<c path="String"/>
			</f>
			<haxe_doc>* @static
  * @method _getConstructorName
  * @param {Object} value
  * @return {String}
  * @private</haxe_doc>
		</_getConstructorName>
		<_resetPrototype set="method" static="1">
			<f a="value:prototype">
				<x path="Any"/>
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* @static
  * @method _resetPrototype
  * @param {Object} value
  * @param {Object} prototype
  * @return {Object}
  * @private</haxe_doc>
		</_resetPrototype>
		<maxDepth public="1">
			<x path="Int"/>
			<haxe_doc>* The maximum depth of objects.
  *
  * @static
  * @property maxDepth
  * @type Number
  * @default 100</haxe_doc>
		</maxDepth>
		<haxe_doc>* The static class that handles JSON with object information.
 *
 * @class JsonEx</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"JsonEx"</e></m>
		</meta>
	</class>
	<class path="rm.core.Point" params="" file="src/rm/core/Point.hx" extern="1">
		<extends path="pixi.core.math.Point"/>
		<_x public="1" override="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"x"</e></m></meta>
			<haxe_doc>* The x coordinate.
  *
  * @property x
  * @type Number</haxe_doc>
		</_x>
		<_y public="1" override="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"y"</e></m></meta>
			<haxe_doc>* The y coordinate.
  *
  * @property y
  * @type Number</haxe_doc>
		</_y>
		<new public="1" set="method">
			<f a="?x:?y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The point class.
  *
  * @class Point
  * @constructor
  * @param {Number} x The x coordinate
  * @param {Number} y The y coordinate</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Point"</e></m></meta>
	</class>
	<class path="rm.core.Rectangle" params="" file="src/rm/core/Rectangle.hx" extern="1">
		<extends path="pixi.core.math.shapes.Rectangle"/>
		<emptyRectangle public="1" static="1">
			<c path="rm.core.Rectangle"/>
			<haxe_doc>* @static
  * @property emptyRectangle
  * @type Rectangle</haxe_doc>
		</emptyRectangle>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The rectangle class.
  *
  * @class Rectangle
  * @constructor
  * @param {Number} x The x coordinate for the upper-left corner
  * @param {Number} y The y coordinate for the upper-left corner
  * @param {Number} width The width of the rectangle
  * @param {Number} height The height of the rectangle</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Rectangle"</e></m>
		</meta>
	</class>
	<class path="rm.core.ScreenSprite" params="" file="src/rm/core/ScreenSprite.hx" extern="1">
		<extends path="pixi.core.sprites.Sprite"/>
		<opacity public="1">
			<x path="Int"/>
			<haxe_doc>* The opacity of the sprite (0 to 255).
  *
  * @property opacity
  * @type Number</haxe_doc>
		</opacity>
		<setBlack public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets black to the color of the screen sprite.
  *
  * @method setBlack</haxe_doc>
		</setBlack>
		<setWhite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets white to the color of the screen sprite.
  *
  * @method setWhite</haxe_doc>
		</setWhite>
		<setColor public="1" set="method">
			<f a="?r:?g:?b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the color of the screen sprite by values.
  *
  * @method setColor
  * @param {Number} r The red value in the range (0, 255)
  * @param {Number} g The green value in the range (0, 255)
  * @param {Number} b The blue value in the range (0, 255)</haxe_doc>
		</setColor>
		<_graphics><c path="pixi.core.graphics.Graphics"/></_graphics>
		<_red>
			<x path="Int"/>
			<haxe_doc>* The red value in range (0, 255)</haxe_doc>
		</_red>
		<_green>
			<x path="Int"/>
			<haxe_doc>* The blue value in range (0, 255)</haxe_doc>
		</_green>
		<_blue>
			<x path="Int"/>
			<haxe_doc>* The blue value in range (0, 255)</haxe_doc>
		</_blue>
		<_colorText>
			<c path="String"/>
			<haxe_doc>* The string for color text</haxe_doc>
		</_colorText>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The sprite which covers the entire game screen.
  *
  * @class ScreenSprite
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ScreenSprite"</e></m></meta>
	</class>
	<class path="rm.core.Tilemap" params="" file="src/rm/core/Tilemap.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<TILE_ID_A1 public="1" static="1"><x path="Int"/></TILE_ID_A1>
		<TILE_ID_A2 public="1" static="1"><x path="Int"/></TILE_ID_A2>
		<TILE_ID_A3 public="1" static="1"><x path="Int"/></TILE_ID_A3>
		<TILE_ID_A4 public="1" static="1"><x path="Int"/></TILE_ID_A4>
		<TILE_ID_A5 public="1" static="1"><x path="Int"/></TILE_ID_A5>
		<TILE_ID_B public="1" static="1"><x path="Int"/></TILE_ID_B>
		<TILE_ID_C public="1" static="1"><x path="Int"/></TILE_ID_C>
		<TILE_ID_D public="1" static="1"><x path="Int"/></TILE_ID_D>
		<TILE_ID_E public="1" static="1"><x path="Int"/></TILE_ID_E>
		<TILE_ID_MAX public="1" static="1"><x path="Int"/></TILE_ID_MAX>
		<FLOOR_AUTOTILE_TABLE public="1" static="1"><c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c></FLOOR_AUTOTILE_TABLE>
		<WALL_AUTOTILE_TABLE public="1" static="1"><c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c></WALL_AUTOTILE_TABLE>
		<WATERFALL_AUTOTILE_TABLE public="1" static="1"><c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c></WATERFALL_AUTOTILE_TABLE>
		<isVisibleTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isVisibleTile>
		<isAutotile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isAutotile>
		<getAutotileKind public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Int"/>
</f></getAutotileKind>
		<getAutotileShape public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Int"/>
</f></getAutotileShape>
		<makeAutotileId public="1" set="method" static="1"><f a="kind:shape">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></makeAutotileId>
		<isSameKindTile public="1" set="method" static="1"><f a="tileID1:tileID2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isSameKindTile>
		<isTileA1 public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTileA1>
		<isTileA2 public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTileA2>
		<isTileA3 public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTileA3>
		<isTileA4 public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTileA4>
		<isTileA5 public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTileA5>
		<isWaterTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWaterTile>
		<isWaterfallTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWaterfallTile>
		<isGroundTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isGroundTile>
		<isShadowingTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isShadowingTile>
		<isRoofTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isRoofTile>
		<isWallTopTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWallTopTile>
		<isWallSideTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWallSideTile>
		<isWallTile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWallTile>
		<isFloorTypeAutotile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isFloorTypeAutotile>
		<isWallTypeAutotile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWallTypeAutotile>
		<isWaterfallTypeAutotile public="1" set="method" static="1"><f a="tileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWaterfallTypeAutotile>
		<bitmaps public="1">
			<c path="Array"><c path="rm.core.Bitmap"/></c>
			<haxe_doc>* The bitmaps used as a tileset.
  *
  * @property bitmaps
  * @type Array</haxe_doc>
		</bitmaps>
		<origin public="1">
			<c path="rm.core.Point"/>
			<haxe_doc>* The origin point of the tilemap for scrolling.
  *
  * @property origin
  * @type Point</haxe_doc>
		</origin>
		<flags public="1">
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* The tileset flags.
  *
  * @property flags
  * @type Array</haxe_doc>
		</flags>
		<animationCount public="1">
			<x path="Int"/>
			<haxe_doc>* The animation count for autotiles.
  *
  * @property animationCount
  * @type Number</haxe_doc>
		</animationCount>
		<horizontalWrap public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether the tilemap loops horizontal.
  *
  * @property horizontalWrap
  * @type Boolean</haxe_doc>
		</horizontalWrap>
		<verticalWrap public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether the tilemap loops vertical.
  *
  * @property verticalWrap
  * @type Boolean</haxe_doc>
		</verticalWrap>
		<tileWidth public="1">
			<x path="Int"/>
			<haxe_doc>* The width of the screen in pixels.
  *
  * @property width
  * @type Number</haxe_doc>
		</tileWidth>
		<tileHeight public="1">
			<x path="Int"/>
			<haxe_doc>* The height of a tile in pixels.
  *
  * @property tileHeight
  * @type Number</haxe_doc>
		</tileHeight>
		<setData public="1" set="method">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the tilemap data.
  *
  * @method setData
  * @param {Number} width The width of the map in number of tiles
  * @param {Number} height The height of the map in number of tiles
  * @param {Array} data The one dimensional array for the map data</haxe_doc>
		</setData>
		<isReady public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the tileset is ready to render.
  *
  * @method isReady
  * @type Boolean
  * @return {Boolean} True if the tilemap is ready</haxe_doc>
		</isReady>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the tilemap for each frame.
  *
  * @method update</haxe_doc>
		</update>
		<updateTransform public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method updateTransform
  * @private</haxe_doc>
		</updateTransform>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Forces to repaint the entire static
  *
  * @method refresh</haxe_doc>
		</refresh>
		<addChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container.
  *
  * @method addChild
  * @param {PIXI.DisplayObject} child The child to add
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" override="1">
			<f a="child:index">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container at a specified index.
  *
  * @method addChildAt
  * @param {PIXI.DisplayObject} child The child to add
  * @param {Number} index The index to place the child in
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChildAt>
		<removeChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the container.
  *
  * @method removeChild
  * @param {PIXI.DisplayObject} child The child to remove
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the specified index position.
  *
  * @method removeChildAt
  * @param {Number} index The index to get the child from
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChildAt>
		<refreshTileset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Forces to refresh the tileset
  *
  * @method refresh</haxe_doc>
		</refreshTileset>
		<_margin><x path="Int"/></_margin>
		<_width><x path="Int"/></_width>
		<_height><x path="Int"/></_height>
		<_tileWidth><x path="Int"/></_tileWidth>
		<_tileHeight><x path="Int"/></_tileHeight>
		<_mapWidth><x path="Int"/></_mapWidth>
		<_mapHeight><x path="Int"/></_mapHeight>
		<_mapData><c path="Array"><x path="Int"/></c></_mapData>
		<_layerWidth><x path="Int"/></_layerWidth>
		<_layerHeight><x path="Int"/></_layerHeight>
		<_lastTiles><c path="Array"><c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c></c></_lastTiles>
		<_lowerLayer><c path="rm.core.Sprite"/></_lowerLayer>
		<_upperLayer><c path="rm.core.Sprite"/></_upperLayer>
		<_createLayers set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _createLayers
  * @private</haxe_doc>
		</_createLayers>
		<_updateLayerPositions set="method">
			<f a="startX:startY">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _updateLayerPositions
  * @param {Number} startX
  * @param {Number} startY
  * @private</haxe_doc>
		</_updateLayerPositions>
		<_paintAllTiles set="method">
			<f a="startX:startY">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _paintAllTiles
  * @param {Number} startX
  * @param {Number} startY
  * @private</haxe_doc>
		</_paintAllTiles>
		<_paintTiles set="method">
			<f a="startX:startY:x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _paintTiles
  * @param {Number} startX
  * @param {Number} startY
  * @param {Number} x
  * @param {Number} y
  * @private</haxe_doc>
		</_paintTiles>
		<_readLastTiles set="method">
			<f a="i:x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* @method _readLastTiles
  * @param {Number} i
  * @param {Number} x
  * @param {Number} y
  * @private</haxe_doc>
		</_readLastTiles>
		<_writeLastTiles set="method">
			<f a="i:x:y:tiles">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _writeLastTiles
  * @param {Number} i
  * @param {Number} x
  * @param {Number} y
  * @param {Array} tiles
  * @private</haxe_doc>
		</_writeLastTiles>
		<_drawTile set="method">
			<f a="bitmap:tileId:dx:dy">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawTile
  * @param {Bitmap} bitmap
  * @param {Number} tileId
  * @param {Number} dx
  * @param {Number} dy
  * @private</haxe_doc>
		</_drawTile>
		<_drawNormalTile set="method">
			<f a="bitmap:tileId:dx:dy">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawNormalTile
  * @param {Bitmap} bitmap
  * @param {Number} tileId
  * @param {Number} dx
  * @param {Number} dy
  * @private</haxe_doc>
		</_drawNormalTile>
		<_drawAutotile set="method">
			<f a="bitmap:tileId:dx:dy">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawAutotile
  * @param {Bitmap} bitmap
  * @param {Number} tileId
  * @param {Number} dx
  * @param {Number} dy
  * @private</haxe_doc>
		</_drawAutotile>
		<_drawTableEdge set="method">
			<f a="bitmap:tileId:dx:dy">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawTableEdge
  * @param {Bitmap} bitmap
  * @param {Number} tileId
  * @param {Number} dx
  * @param {Number} dy
  * @private</haxe_doc>
		</_drawTableEdge>
		<_drawShadow set="method">
			<f a="bitmap:shadowBits:dx:dy">
				<c path="rm.core.Bitmap"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _drawShadow
  * @param {Bitmap} bitmap
  * @param {Number} shadowBits
  * @param {Number} dx
  * @param {Number} dy
  * @private</haxe_doc>
		</_drawShadow>
		<_readMapData set="method">
			<f a="x:y:z">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* @method _readMapData
  * @param {Number} x
  * @param {Number} y
  * @param {Number} z
  * @return {Number}
  * @private</haxe_doc>
		</_readMapData>
		<_isHigherTile set="method">
			<f a="tileId">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* @method _isHigherTile
  * @param {Number} tileId
  * @return {Boolean}
  * @private</haxe_doc>
		</_isHigherTile>
		<_isTableTile set="method">
			<f a="tileId">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* @method _isTableTile
  * @param {Number} tileId
  * @return {Boolean}
  * @private</haxe_doc>
		</_isTableTile>
		<_isOverpassPosition set="method">
			<f a="mx:my">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* @method _isOverpassPosition
  * @param {Number} mx
  * @param {Number} my
  * @return {Boolean}
  * @private</haxe_doc>
		</_isOverpassPosition>
		<_sortChildren set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _sortChildren
  * @private</haxe_doc>
		</_sortChildren>
		<_compareChildOrder set="method">
			<f a="a:b">
				<c path="rm.core.Sprite"/>
				<c path="rm.core.Sprite"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* @method _compareChildOrder
  * @param {Sprite} a
  * @param {Sprite} b
  * @private</haxe_doc>
		</_compareChildOrder>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* [read-only] The array of children of the sprite.
  *
  * @property children
  * @type Array<PIXI.DisplayObject>]]></haxe_doc>
		</new>
		<meta><m n=":native"><e>"Tilemap"</e></m></meta>
	</class>
	<class path="rm.core.ShaderTilemap" params="" file="src/rm/core/ShaderTilemap.hx" extern="1">
		<extends path="rm.core.Tilemap"/>
		<_hackRenderer set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.AbstractRenderer"/>
				<c path="pixi.core.renderers.AbstractRenderer"/>
			</f>
			<haxe_doc>* Uploads animation state in renderer
  *
  * @method _hackRenderer
  * @param {PIXI.SystemRenderer} pixi renderer
  * @private</haxe_doc>
		</_hackRenderer>
		<renderWebGL public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* PIXI render method
  *
  * @method renderWebGL
  * @param {PIXI.WebGLRenderer} pixi renderer</haxe_doc>
		</renderWebGL>
		<renderCanvas public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* PIXI render method
  *
  * @method renderCanvas
  * @param {PIXI.CanvasRenderer} pixi renderer</haxe_doc>
		</renderCanvas>
		<refresh public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Forces to repaint the entire tilemap AND update bitmaps list if needed
  *
  * @method refresh</haxe_doc>
		</refresh>
		<refreshTileset public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Call after you update tileset
  *
  * @method refreshTileset</haxe_doc>
		</refreshTileset>
		<meta><m n=":native"><e>"ShaderTilemap"</e></m></meta>
	</class>
	<class path="rm.core.TilingSprite" params="" file="src/rm/core/TilingSprite.hx" extern="1">
		<extends path="pixi.extras.TilingSprite"/>
		<origin public="1">
			<c path="rm.core.Point"/>
			<haxe_doc>* The origin point of the tiling sprite for scrolling.
  *
  * @property origin
  * @type Point</haxe_doc>
		</origin>
		<bitmap public="1">
			<c path="rm.core.Bitmap"/>
			<haxe_doc>* The image for the tiling sprite.
  *
  * @property bitmap
  * @type Bitmap</haxe_doc>
		</bitmap>
		<opacity public="1">
			<x path="Int"/>
			<haxe_doc>* The opacity of the tiling sprite (0 to 255).
  *
  * @property opacity
  * @type Number</haxe_doc>
		</opacity>
		<visibility public="1">
			<x path="Bool"/>
			<haxe_doc>* The visibility of the tiling sprite.
  *
  * @property visible
  * @type Boolean</haxe_doc>
		</visibility>
		<_x public="1" override="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"x"</e></m></meta>
			<haxe_doc>* The x coordinate of the tiling sprite.
  *
  * @property x
  * @type Number</haxe_doc>
		</_x>
		<_y public="1" override="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"y"</e></m></meta>
			<haxe_doc>* The y coordinate of the tiling sprite.
  *
  * @property y
  * @type Number</haxe_doc>
		</_y>
		<spriteId public="1"><x path="Int"/></spriteId>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the tiling sprite for each frame.
  *
  * @method update</haxe_doc>
		</update>
		<updateTransform public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method updateTransform
  * @private</haxe_doc>
		</updateTransform>
		<move public="1" set="method">
			<f a="?x:?y:?width:?height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the x, y, width, and height all at once.
  *
  * @method move
  * @param {Number} x The x coordinate of the tiling sprite
  * @param {Number} y The y coordinate of the tiling sprite
  * @param {Number} width The width of the tiling sprite
  * @param {Number} height The height of the tiling sprite</haxe_doc>
		</move>
		<setFrame public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Specifies the region of the image that the tiling sprite will use.
  *
  * @method setFrame
  * @param {Number} x The x coordinate of the frame
  * @param {Number} y The y coordinate of the frame
  * @param {Number} width The width of the frame
  * @param {Number} height The height of the frame</haxe_doc>
		</setFrame>
		<updateTransformTS public="1" set="method"><f a=""><x path="Void"/></f></updateTransformTS>
		<_bitmap><c path="rm.core.Bitmap"/></_bitmap>
		<_width><x path="Int"/></_width>
		<_height><x path="Int"/></_height>
		<_frame><c path="rm.core.Rectangle"/></_frame>
		<_onBitmapLoad set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _onBitmapLoad
  * @private</haxe_doc>
		</_onBitmapLoad>
		<_refresh set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _refresh
  * @private</haxe_doc>
		</_refresh>
		<_renderCanvas set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderCanvas
  * @param {PIXI.CanvasRenderer} renderer
  * @private</haxe_doc>
		</_renderCanvas>
		<_renderWebGL set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderWebGL
  * @param {PIXI.WebGLRenderer} renderer
  * @private</haxe_doc>
		</_renderWebGL>
		<generateTilingTexture public="1" set="method">
			<f a="arg">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method generateTilingTexture
  * @param {Boolean} arg</haxe_doc>
		</generateTilingTexture>
		<new public="1" set="method">
			<f a="bitmap">
				<c path="rm.core.Bitmap"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* The sprite object for a tiling image.
  *
  * @class TilingSprite
  * @constructor
  * @param {Bitmap} bitmap The image for the tiling sprite</haxe_doc>
		</new>
		<meta><m n=":native"><e>"TilingSprite"</e></m></meta>
	</class>
	<class path="rm.core.ToneFilter" params="" file="src/rm/core/ToneFilter.hx" extern="1">
		<extends path="pixi.filters.colormatrix.ColorMatrixFilter"/>
		<adjustHue public="1" set="method">
			<f a="?value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the hue.
  *
  * @method adjustHue
  * @param {Number} value The hue value in the range (-360, 360)</haxe_doc>
		</adjustHue>
		<adjustSaturation public="1" set="method">
			<f a="?value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the saturation.
  *
  * @method adjustSaturation
  * @param {Number} value The saturation value in the range (-255, 255)</haxe_doc>
		</adjustSaturation>
		<adjustTone public="1" set="method">
			<f a="?r:?g:?b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the tone.
  *
  * @method adjustTone
  * @param {Number} r The red strength in the range (-255, 255)
  * @param {Number} g The green strength in the range (-255, 255)
  * @param {Number} b The blue strength in the range (-255, 255)</haxe_doc>
		</adjustTone>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The color matrix filter for WebGL.
  *
  * @class ToneFilter
  * @extends PIXI.Filter
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ToneFilter"</e></m></meta>
	</class>
	<class path="rm.core.ToneSprite" params="" file="src/rm/core/ToneSprite.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the tone.
  *
  * @method reset</haxe_doc>
		</clear>
		<setTone public="1" set="method">
			<f a="r:g:b:gray">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the tone.
  *
  * @method setTone
  * @param {Number} r The red strength in the range (-255, 255)
  * @param {Number} g The green strength in the range (-255, 255)
  * @param {Number} b The blue strength in the range (-255, 255)
  * @param {Number} gray The grayscale level in the range (0, 255)</haxe_doc>
		</setTone>
		<_red><x path="Int"/></_red>
		<_green><x path="Int"/></_green>
		<_blue><x path="Int"/></_blue>
		<_gray><x path="Int"/></_gray>
		<_renderCanvas set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderCanvas
  * @param {PIXI.CanvasRenderer} renderer
  * @private</haxe_doc>
		</_renderCanvas>
		<_renderWebGL set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _renderWebGL
  * @param {PIXI.WebGLRenderer} renderer
  * @private</haxe_doc>
		</_renderWebGL>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The sprite which changes the screen color in 2D canvas mode.
  *
  * @class ToneSprite
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ToneSprite"</e></m></meta>
	</class>
	<class path="rm.core.TouchInput" params="" file="src/rm/core/TouchInput.hx" extern="1">
		<_mousePressed static="1"><x path="Bool"/></_mousePressed>
		<_screenPressed static="1"><x path="Bool"/></_screenPressed>
		<_pressedTime static="1"><x path="Int"/></_pressedTime>
		<_events static="1"><t path="rm.types.TouchInputEvents"/></_events>
		<_triggered static="1"><x path="Bool"/></_triggered>
		<_cancelled static="1"><x path="Bool"/></_cancelled>
		<_moved static="1"><x path="Bool"/></_moved>
		<_released static="1"><x path="Bool"/></_released>
		<_wheelX static="1"><x path="Float"/></_wheelX>
		<_wheelY static="1"><x path="Float"/></_wheelY>
		<_x static="1"><x path="Int"/></_x>
		<_y static="1"><x path="Int"/></_y>
		<_date static="1"><x path="Int"/></_date>
		<px public="1" static="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"_x"</e></m></meta>
		</px>
		<py public="1" static="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"_y"</e></m></meta>
		</py>
		<keyRepeatWait public="1" static="1">
			<x path="rm.types.Frames"/>
			<haxe_doc>* The wait time of the pseudo key repeat in frames.
  *
  * @static
  * @property keyRepeatWait
  * @type Number</haxe_doc>
		</keyRepeatWait>
		<keyRepeatInterval public="1" static="1">
			<x path="rm.types.Frames"/>
			<haxe_doc>* The interval of the pseudo key repeat in frames.
  *
  * @static
  * @property keyRepeatInterval
  * @type Number</haxe_doc>
		</keyRepeatInterval>
		<wheelX public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* [read-only] The horizontal scroll amount.
  *
  * @static
  * @property wheelX
  * @type Number</haxe_doc>
		</wheelX>
		<wheelY public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* [read-only] The vertical scroll amount.
  *
  * @static
  * @property wheelY
  * @type Number</haxe_doc>
		</wheelY>
		<x public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The x coordinate on the canvas area of the latest touch event.
  *
  * @static
  * @property x
  * @type Number</haxe_doc>
		</x>
		<y public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The y coordinate on the canvas area of the latest touch event.
  *
  * @static
  * @property y
  * @type Number</haxe_doc>
		</y>
		<date public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* [read-only] The time of the last input in milliseconds.
  *
  * @static
  * @property date
  * @type Number</haxe_doc>
		</date>
		<initialize public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the touch system.
  *
  * @static
  * @method initialize</haxe_doc>
		</initialize>
		<clear public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears all the touch data.
  *
  * @static
  * @method clear</haxe_doc>
		</clear>
		<update public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the touch data.
  *
  * @static
  * @method update</haxe_doc>
		</update>
		<isPressed public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the mouse button or touchscreen is currently pressed down.
  *
  * @static
  * @method isPressed
  * @return {Boolean} True if the mouse button or touchscreen is pressed</haxe_doc>
		</isPressed>
		<isTriggered public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the left mouse button or touchscreen is just pressed.
  *
  * @static
  * @method isTriggered
  * @return {Boolean} True if the mouse button or touchscreen is triggered</haxe_doc>
		</isTriggered>
		<isRepeated public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the left mouse button or touchscreen is just pressed
  * or a pseudo key repeat occurred.
  *
  * @static
  * @method isRepeated
  * @return {Boolean} True if the mouse button or touchscreen is repeated</haxe_doc>
		</isRepeated>
		<isLongPressed public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the left mouse button or touchscreen is kept depressed.
  *
  * @static
  * @method isLongPressed
  * @return {Boolean} True if the left mouse button or touchscreen is long-pressed</haxe_doc>
		</isLongPressed>
		<isCancelled public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the right mouse button is just pressed.
  *
  * @static
  * @method isCancelled
  * @return {Boolean} True if the right mouse button is just pressed</haxe_doc>
		</isCancelled>
		<isMoved public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the mouse or a finger on the touchscreen is moved.
  *
  * @static
  * @method isMoved
  * @return {Boolean} True if the mouse or a finger on the touchscreen is moved</haxe_doc>
		</isMoved>
		<isReleased public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks whether the left mouse button or touchscreen is released.
  *
  * @static
  * @method isReleased
  * @return {Boolean} True if the mouse button or touchscreen is released</haxe_doc>
		</isReleased>
		<_setupEventHandlers set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @static
  * @method _setupEventHandlers
  * @private</haxe_doc>
		</_setupEventHandlers>
		<_onMouseDown set="method" static="1">
			<f a="event">
				<c path="js.html.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onMouseDown
  * @param {MouseEvent} event
  * @private</haxe_doc>
		</_onMouseDown>
		<_onLeftButtonDown set="method" static="1">
			<f a="event">
				<c path="js.html.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onLeftButtonDown
  * @param {MouseEvent} event
  * @private</haxe_doc>
		</_onLeftButtonDown>
		<_onMiddleButtonDown set="method" static="1">
			<f a="event">
				<c path="js.html.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onMiddleButtonDown
  * @param {MouseEvent} event
  * @private</haxe_doc>
		</_onMiddleButtonDown>
		<_onRightButtonDown set="method" static="1">
			<f a="event">
				<c path="js.html.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onRightButtonDown
  * @param {MouseEvent} event
  * @private</haxe_doc>
		</_onRightButtonDown>
		<_onMouseMove set="method" static="1">
			<f a="event">
				<c path="js.html.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onMouseMove
  * @param {MouseEvent} event
  * @private</haxe_doc>
		</_onMouseMove>
		<_onMouseUp set="method" static="1">
			<f a="event">
				<c path="js.html.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onMouseUp
  * @param {MouseEvent} event
  * @private</haxe_doc>
		</_onMouseUp>
		<_onWheel set="method" static="1">
			<f a="event">
				<c path="js.html.WheelEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onWheel
  * @param {WheelEvent} event
  * @private</haxe_doc>
		</_onWheel>
		<_onTouchStart set="method" static="1">
			<f a="event">
				<c path="js.html.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onTouchStart
  * @param {TouchEvent} event
  * @private</haxe_doc>
		</_onTouchStart>
		<_onTouchMove set="method" static="1">
			<f a="event">
				<c path="js.html.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onTouchMove
  * @param {TouchEvent} event
  * @private</haxe_doc>
		</_onTouchMove>
		<_onTouchEnd set="method" static="1">
			<f a="event">
				<c path="js.html.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onTouchEnd
  * @param {TouchEvent} event
  * @private</haxe_doc>
		</_onTouchEnd>
		<_onTouchCancel set="method" static="1">
			<f a="event">
				<c path="js.html.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onTouchCancel
  * @param {TouchEvent} event
  * @private</haxe_doc>
		</_onTouchCancel>
		<_onPointerDown set="method" static="1">
			<f a="event">
				<c path="js.html.PointerEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onPointerDown
  * @param {PointerEvent} event
  * @private</haxe_doc>
		</_onPointerDown>
		<_onTrigger set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onTrigger
  * @param {Number} x
  * @param {Number} y
  * @private</haxe_doc>
		</_onTrigger>
		<_onCancel set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onCancel
  * @param {Number} x
  * @param {Number} y
  * @private</haxe_doc>
		</_onCancel>
		<_onMove set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onMove
  * @param {Number} x
  * @param {Number} y
  * @private</haxe_doc>
		</_onMove>
		<_onRelease set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @static
  * @method _onRelease
  * @param {Number} x
  * @param {Number} y
  * @private</haxe_doc>
		</_onRelease>
		<meta><m n=":native"><e>"TouchInput"</e></m></meta>
	</class>
	<class path="rm.core.Weather" params="" file="src/rm/core/Weather.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<type public="1">
			<c path="String"/>
			<haxe_doc>* The type of the weather in ['none', 'rain', 'storm', 'snow'].
  *
  * @property type
  * @type String</haxe_doc>
		</type>
		<power public="1">
			<x path="Int"/>
			<haxe_doc>* The power of the weather in the range (0, 9).
  *
  * @property power
  * @type Number</haxe_doc>
		</power>
		<origin public="1">
			<c path="rm.core.Point"/>
			<haxe_doc>* The origin point of the weather for scrolling.
  *
  * @property origin
  * @type Point</haxe_doc>
		</origin>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the weather for each frame.
  *
  * @method update</haxe_doc>
		</update>
		<_width><x path="Int"/></_width>
		<_height><x path="Int"/></_height>
		<_sprites><c path="Array"><c path="rm.core.Sprite"/></c></_sprites>
		<_rainBitmap><c path="rm.core.Bitmap"/></_rainBitmap>
		<_stormBitmap><c path="rm.core.Bitmap"/></_stormBitmap>
		<_snowBitmap><c path="rm.core.Bitmap"/></_snowBitmap>
		<_dimmerSprite><c path="rm.core.ScreenSprite"/></_dimmerSprite>
		<_createBitmaps set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _createBitmaps
  * @private</haxe_doc>
		</_createBitmaps>
		<_createDimmer set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _createDimmer
  * @private</haxe_doc>
		</_createDimmer>
		<_updateDimmer set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _updateDimmer
  * @private</haxe_doc>
		</_updateDimmer>
		<_updateAllSprites set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _updateAllSprites
  * @private</haxe_doc>
		</_updateAllSprites>
		<_addSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _addSprite
  * @private</haxe_doc>
		</_addSprite>
		<_removeSprite set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @method _removeSprite
  * @private</haxe_doc>
		</_removeSprite>
		<_updateSprite set="method">
			<f a="sprite">
				<c path="rm.core.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _updateSprite
  * @param {Sprite} sprite
  * @private</haxe_doc>
		</_updateSprite>
		<_updateRainSprite set="method">
			<f a="sprite">
				<c path="rm.core.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _updateRainSprite
  * @param {Sprite} sprite
  * @private</haxe_doc>
		</_updateRainSprite>
		<_updateStormSprite set="method">
			<f a="sprite">
				<c path="rm.core.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _updateStormSprite
  * @param {Sprite} sprite
  * @private</haxe_doc>
		</_updateStormSprite>
		<_updateSnowSprite set="method">
			<f a="sprite">
				<c path="rm.core.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _updateSnowSprite
  * @param {Sprite} sprite
  * @private</haxe_doc>
		</_updateSnowSprite>
		<_rebornSprite set="method">
			<f a="sprite">
				<c path="rm.core.Sprite"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _rebornSprite
  * @param {Sprite} sprite
  * @private</haxe_doc>
		</_rebornSprite>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The weather effect which displays rain, storm, or snow.
  *
  * @class Weather
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Weather"</e></m></meta>
	</class>
	<class path="rm.core.WindowLayer" params="" file="src/rm/core/WindowLayer.hx" extern="1">
		<extends path="pixi.core.display.Container"/>
		<voidFilter public="1">
			<c path="pixi.core.renderers.webgl.filters.Filter"/>
			<haxe_doc>* The width of the window layer in pixels.
  *
  * @property width
  * @type Number</haxe_doc>
		</voidFilter>
		<move public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the x, y, width, and height all at once.
  *
  * @method move
  * @param {Number} x The x coordinate of the window layer
  * @param {Number} y The y coordinate of the window layer
  * @param {Number} width The width of the window layer
  * @param {Number} height The height of the window layer</haxe_doc>
		</move>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the window layer for each frame.
  *
  * @method update</haxe_doc>
		</update>
		<addChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container.
  *
  * @method addChild
  * @param {PIXI.DisplayObject} child The child to add
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" override="1">
			<f a="child:index">
				<c path="pixi.core.display.DisplayObject"/>
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Adds a child to the container at a specified index.
  *
  * @method addChildAt
  * @param {PIXI.DisplayObject} child The child to add
  * @param {Number} index The index to place the child in
  * @return {PIXI.DisplayObject} The child that was added</haxe_doc>
		</addChildAt>
		<removeChild public="1" set="method" override="1">
			<f a="child">
				<c path="pixi.core.display.DisplayObject"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the container.
  *
  * @method removeChild
  * @param {PIXI.DisplayObject} child The child to remove
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<c path="pixi.core.display.DisplayObject"/>
			</f>
			<haxe_doc>* Removes a child from the specified index position.
  *
  * @method removeChildAt
  * @param {Number} index The index to get the child from
  * @return {PIXI.DisplayObject} The child that was removed</haxe_doc>
		</removeChildAt>
		<_renderCanvas set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_renderCanvas"</e></m></meta>
			<haxe_doc>* @method _renderCanvas
  * @param {PIXI.CanvasRenderer} renderer
  * @private</haxe_doc>
		</_renderCanvas>
		<renderCanvas public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_renderCanvas"</e></m></meta>
			<haxe_doc>* @method _renderCanvas
  * @param {PIXI.CanvasRenderer} renderer
  * @private</haxe_doc>
		</renderCanvas>
		<_renderWebGL set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_renderWebGL"</e></m></meta>
			<haxe_doc>* @method _renderWebGL
  * @param {PIXI.WebGLRenderer} renderer
  * @private</haxe_doc>
		</_renderWebGL>
		<renderWebGL public="1" set="method">
			<f a="renderer">
				<c path="pixi.core.renderers.webgl.Renderer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_renderWebGL"</e></m></meta>
			<haxe_doc>* @method _renderWebGL
  * @param {PIXI.WebGLRenderer} renderer
  * @private</haxe_doc>
		</renderWebGL>
		<_width><x path="Int"/></_width>
		<_height><x path="Int"/></_height>
		<_tempCanvas><c path="js.html.CanvasElement"/></_tempCanvas>
		<_translationMatrix><c path="Array"><x path="Float"/></c></_translationMatrix>
		<_windowMask><c path="pixi.core.graphics.Graphics"/></_windowMask>
		<_renderSprite><c path="pixi.core.display.Container"/></_renderSprite>
		<_canvasClearWindowRect set="method">
			<f a="renderSession:window">
				<c path="pixi.core.renderers.canvas.CanvasRenderer"/>
				<c path="js.html.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _canvasClearWindowRect
  * @param {PIXI.CanvasRenderer} renderSession
  * @param {Window} window
  * @private</haxe_doc>
		</_canvasClearWindowRect>
		<_maskWindow set="method">
			<f a="window">
				<c path="rm.core._Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @method _maskWindow
  * @param {Window} window
  * @private</haxe_doc>
		</_maskWindow>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The layer which contains game windows.
  *
  * @class WindowLayer
  * @constructor</haxe_doc>
		</new>
		<meta><m n=":native"><e>"WindowLayer"</e></m></meta>
	</class>
	<class path="rm.managers.AudioManager" params="" file="src/rm/managers/AudioManager.hx" extern="1">
		<_bgmVolume static="1"><x path="Int"/></_bgmVolume>
		<_bgsVolume static="1"><x path="Int"/></_bgsVolume>
		<_meVolume static="1"><x path="Int"/></_meVolume>
		<_seVolume static="1"><x path="Int"/></_seVolume>
		<_currentBgm static="1"><t path="rm.types.AudioParameters"/></_currentBgm>
		<_currentBgs static="1"><t path="rm.types.AudioParameters"/></_currentBgs>
		<_bgmBuffer static="1"><c path="rm.core.HTML5Audio"/></_bgmBuffer>
		<_bgsBuffer static="1"><c path="rm.core.HTML5Audio"/></_bgsBuffer>
		<_meBuffer static="1"><c path="rm.core.HTML5Audio"/></_meBuffer>
		<_seBuffers static="1"><c path="Array"><c path="rm.core.HTML5Audio"/></c></_seBuffers>
		<_staticBuffers static="1"><c path="Array"><c path="rm.core.HTML5Audio"/></c></_staticBuffers>
		<_replayFadeTime static="1"><x path="Int"/></_replayFadeTime>
		<_path static="1"><c path="String"/></_path>
		<_blobUrl static="1"><c path="String"/></_blobUrl>
		<bgmVolume static="1"><x path="Int"/></bgmVolume>
		<bgsVolume static="1"><x path="Int"/></bgsVolume>
		<meVolume static="1"><x path="Int"/></meVolume>
		<seVolume static="1"><x path="Int"/></seVolume>
		<playBgm public="1" set="method" static="1"><f a="bgm:?pos">
	<t path="rm.types.AudioParameters"/>
	<x path="Float"/>
	<x path="Void"/>
</f></playBgm>
		<replayBgm public="1" set="method" static="1"><f a="bgm">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></replayBgm>
		<isCurrentBgm public="1" set="method" static="1"><f a="bgm">
	<t path="rm.types.AudioParameters"/>
	<x path="Bool"/>
</f></isCurrentBgm>
		<updateBgmParameters public="1" set="method" static="1"><f a="bgm">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></updateBgmParameters>
		<pdateCurrentBgm public="1" set="method" static="1"><f a="bgm:pos">
	<t path="rm.types.AudioParameters"/>
	<x path="Float"/>
	<x path="Void"/>
</f></pdateCurrentBgm>
		<stopBgm public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopBgm>
		<fadeOutBgm public="1" set="method" static="1"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></fadeOutBgm>
		<fadeInBgm public="1" set="method" static="1"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></fadeInBgm>
		<playBgs public="1" set="method" static="1"><f a="bgs:?pos">
	<t path="rm.types.AudioParameters"/>
	<x path="Float"/>
	<x path="Void"/>
</f></playBgs>
		<replayBgs public="1" set="method" static="1"><f a="bgs">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></replayBgs>
		<isCurrentBgs public="1" set="method" static="1"><f a="bgs">
	<t path="rm.types.AudioParameters"/>
	<x path="Bool"/>
</f></isCurrentBgs>
		<updateBgsParameters public="1" set="method" static="1"><f a="bgs">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></updateBgsParameters>
		<updateCurrentBgs public="1" set="method" static="1"><f a="bgs:pos">
	<t path="rm.types.AudioParameters"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateCurrentBgs>
		<stopBgs public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopBgs>
		<fadeOutBgs public="1" set="method" static="1"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></fadeOutBgs>
		<fadeInBgs public="1" set="method" static="1"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></fadeInBgs>
		<playMe public="1" set="method" static="1"><f a="me">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></playMe>
		<updateMeParameters public="1" set="method" static="1"><f a="me">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></updateMeParameters>
		<fadeOutMe public="1" set="method" static="1"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></fadeOutMe>
		<stopMe public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopMe>
		<playSe public="1" set="method" static="1"><f a="se">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></playSe>
		<updateSeParameters public="1" set="method" static="1"><f a="buffer:se">
	<t path="rm.types.AudioParameters"/>
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></updateSeParameters>
		<stopSe public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopSe>
		<playStaticSe public="1" set="method" static="1"><f a="se">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></playStaticSe>
		<loadStaticSe public="1" set="method" static="1"><f a="se">
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></loadStaticSe>
		<isStaticSe public="1" set="method" static="1"><f a="se">
	<t path="rm.types.AudioParameters"/>
	<x path="Bool"/>
</f></isStaticSe>
		<stopAll public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopAll>
		<saveBgm public="1" set="method" static="1"><f a=""><t path="rm.types.AudioParameters"/></f></saveBgm>
		<saveBgs public="1" set="method" static="1"><f a=""><t path="rm.types.AudioParameters"/></f></saveBgs>
		<makeEmptyAudioObject public="1" set="method" static="1"><f a=""><t path="rm.types.AudioParameters"/></f></makeEmptyAudioObject>
		<createBuffer public="1" set="method" static="1"><f a=""><c path="rm.core.HTML5Audio"/></f></createBuffer>
		<updateBufferParameters public="1" set="method" static="1"><f a="buffer:configVolume:audio">
	<t path="rm.types.AudioParameters"/>
	<x path="Int"/>
	<t path="rm.types.AudioParameters"/>
	<x path="Void"/>
</f></updateBufferParameters>
		<audioFileExt public="1" set="method" static="1"><f a=""><c path="String"/></f></audioFileExt>
		<shouldUseHtml5Audio public="1" set="method" static="1"><f a=""><c path="String"/></f></shouldUseHtml5Audio>
		<checkErrors public="1" set="method" static="1"><f a=""><x path="Void"/></f></checkErrors>
		<checkWebAudioError public="1" set="method" static="1"><f a="?webAudio">
	<c path="rm.core.HTML5Audio"/>
	<x path="Void"/>
</f></checkWebAudioError>
		<playEncryptedBgm public="1" set="method" static="1"><f a="bgm:?pos">
	<t path="rm.types.AudioParameters"/>
	<x path="Float"/>
	<x path="Void"/>
</f></playEncryptedBgm>
		<createDecryptBuffer public="1" set="method" static="1"><f a="url:bgm:?pos">
	<c path="String"/>
	<t path="rm.types.AudioParameters"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createDecryptBuffer>
		<haxe_doc>* Static class that handles BGM, BGS, ME, and SE.</haxe_doc>
		<meta><m n=":native"><e>"AudioManager"</e></m></meta>
	</class>
	<class path="rm.managers.BattleManager" params="" file="src/rm/managers/BattleManager.hx" extern="1">
		<haxe_doc>* Manages the game battles to process all of the
 * events that happen within.</haxe_doc>
		<meta><m n=":native"><e>"BattleManager"</e></m></meta>
	</class>
	<class path="rm.managers.ColorManager" params="" file="src/rm/managers/ColorManager.hx" extern="1">
		<loadWindowSkin public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the window skin into ColorManager.</haxe_doc>
		</loadWindowSkin>
		<textColor public="1" set="method" static="1">
			<f a="windowSkinColorIndex">
				<x path="Int"/>
				<x path="rm.types.Color"/>
			</f>
			<haxe_doc>* Loads the text color using the window skin color Index.
  * @param windowSkinColorIndex
  * @returns Color</haxe_doc>
		</textColor>
		<normalColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the normal color, index 0
  * of the window skin.</haxe_doc>
		</normalColor>
		<systemColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the system color; index 16 on the window skin.
  * @return Color</haxe_doc>
		</systemColor>
		<crisisColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the crisis color; index 17 on the window skin.
  * @return Color</haxe_doc>
		</crisisColor>
		<deathColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the death color; index 18 on the window skin.
  * @return Color</haxe_doc>
		</deathColor>
		<gaugeBackColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the  gauge back color; index 19 on the window skin.
  * @return Color</haxe_doc>
		</gaugeBackColor>
		<hpGaugeColor1 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the hp gauge color 1. Index 20 on the window skin.
  * @return Color</haxe_doc>
		</hpGaugeColor1>
		<hpGaugeColor2 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the hp guage color 2. Index 21 on the window skin.
  * @return Color</haxe_doc>
		</hpGaugeColor2>
		<mpGaugeColor1 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the mp gauge color 1. Index 22 on the window skin.
  * @return Color</haxe_doc>
		</mpGaugeColor1>
		<mpGaugeColor2 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the mp gauge color 2. Index 23 on the window skin.
  * @return Color</haxe_doc>
		</mpGaugeColor2>
		<mpCostColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the mp cost color. Index 23 on the window skin.
  * @return Color</haxe_doc>
		</mpCostColor>
		<powerUpColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the power up color. Index 24 on the window skin.
  * @return Color</haxe_doc>
		</powerUpColor>
		<powerDownColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the power down color. Index 25 on the window skin.
  * @return Color</haxe_doc>
		</powerDownColor>
		<ctGaugeColor1 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the ct gauge color 1. Index 26 on the window skin.
  * @return Color</haxe_doc>
		</ctGaugeColor1>
		<ctGaugeColor2 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the ct gauge color 2. Index 27 on the window skin.
  * @return Color</haxe_doc>
		</ctGaugeColor2>
		<tpGaugeColor1 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the tp gauge color 1. Index 28 on the window skin.
  * @return Color</haxe_doc>
		</tpGaugeColor1>
		<tpGaugeColor2 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the tp gauge color 2. Index 29 on the window skin.
  * @return Color</haxe_doc>
		</tpGaugeColor2>
		<tpCostColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the tp cost color. Index 29 on the window skin.
  * @return Color</haxe_doc>
		</tpCostColor>
		<pendingColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Uses the pending color.
  * @return Color</haxe_doc>
		</pendingColor>
		<hpColor public="1" set="method" static="1">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="rm.types.Color"/>
			</f>
			<haxe_doc><![CDATA[* Given the actor status the color is different.
  * Alive -> Normal Color
  * Dying -> Crisis Color
  * Dead -> Death Color
  * If it's not an actor, it returns the normal color.
  * @param actor
  * @return Color]]></haxe_doc>
		</hpColor>
		<mpColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Based on actor; currently returns normal color.
  * @return Color</haxe_doc>
		</mpColor>
		<tpColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Based on actor; currently returns normal color.
  * @return Color</haxe_doc>
		</tpColor>
		<paramChangeTextColor public="1" set="method" static="1">
			<f a="change">
				<x path="Int"/>
				<x path="rm.types.Color"/>
			</f>
			<haxe_doc><![CDATA[* This returns the text color based on change.
  * change > 0 -> Power Up Color
  * change < 0 -> Power Down Color
  * else -> Normal color.
  * @param change
  * @return Color]]></haxe_doc>
		</paramChangeTextColor>
		<damageColor public="1" set="method" static="1">
			<f a="colorType">
				<x path="rm.types.DamageColorType"/>
				<x path="rm.types.Color"/>
			</f>
			<haxe_doc><![CDATA[* Returns the color based on Color Type.
  * 0 -> HP Damage Color
  * 1 -> HP Recover Color
  * 2 -> MP Damage Color
  * 3 -> MP Recover Color
  * Number -> Default Color
  * @param colorType
  * @return Color]]></haxe_doc>
		</damageColor>
		<outlineColor public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Returns the color "rgba(0, 0, 0, 0.6)"
  * @return Color</haxe_doc>
		</outlineColor>
		<dimColor1 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Returns the color "rgba(0, 0, 0, 0.6)"
  * @return Color</haxe_doc>
		</dimColor1>
		<dimColor2 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Returns the color "rgba(0, 0, 0, 0)"
  * @return Color</haxe_doc>
		</dimColor2>
		<itemBackColor1 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Returns the color "rgba(32, 32, 32, 0.5)"
  * @return Color</haxe_doc>
		</itemBackColor1>
		<itemBackColor2 public="1" set="method" static="1">
			<f a=""><x path="rm.types.Color"/></f>
			<haxe_doc>* Returns the color "rgba(0, 0, 0, 0.5)"
  * @return Color</haxe_doc>
		</itemBackColor2>
		<_windowSkin><c path="rm.core.Bitmap"/></_windowSkin>
		<meta><m n=":native"><e>"ColorManager"</e></m></meta>
	</class>
	<class path="rm.managers.ConfigManager" params="" file="src/rm/managers/ConfigManager.hx" extern="1">
		<load public="1" set="method" static="1"><f a=""><x path="Void"/></f></load>
		<save public="1" set="method" static="1"><f a=""><x path="Void"/></f></save>
		<makeData public="1" set="method" static="1"><f a=""><t path="rm.types.ConfigData"/></f></makeData>
		<applyData public="1" set="method" static="1"><f a="config">
	<t path="rm.types.ConfigData"/>
	<x path="Void"/>
</f></applyData>
		<readFlag public="1" set="method" static="1"><f a="config:name">
	<t path="rm.types.ConfigData"/>
	<c path="String"/>
	<x path="Bool"/>
</f></readFlag>
		<readVolume public="1" set="method" static="1"><f a="config:name">
	<t path="rm.types.ConfigData"/>
	<c path="String"/>
	<x path="Int"/>
</f></readVolume>
		<haxe_doc>* Manages the configuration of RPGMakerMZ Config Data.</haxe_doc>
		<meta><m n=":native"><e>"ConfigManager"</e></m></meta>
	</class>
	<class path="rm.managers.DataManager" params="" file="src/rm/managers/DataManager.hx" extern="1">
		<_globalId static="1"><c path="String"/></_globalId>
		<_lastAccessedId static="1"><x path="Int"/></_lastAccessedId>
		<_errorUrl static="1"><x path="Any"/></_errorUrl>
		<_databaseFiles static="1">
			<c path="Array"><x path="Any"/></c>
			<haxe_doc>* Database Files are a JSON like Object</haxe_doc>
		</_databaseFiles>
		<loadDatabase public="1" set="method" static="1"><f a=""><x path="Void"/></f></loadDatabase>
		<loadDataFile public="1" set="method" static="1"><f a="name:src">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></loadDataFile>
		<isDatabaseLoaded public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isDatabaseLoaded>
		<loadMapData public="1" set="method" static="1"><f a="mapId">
	<x path="Int"/>
	<x path="Void"/>
</f></loadMapData>
		<makeEmptyMap public="1" set="method" static="1"><f a=""><x path="Void"/></f></makeEmptyMap>
		<isMapLoaded public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isMapLoaded>
		<onLoad public="1" set="method" static="1"><f a="object">
	<x path="Any"/>
	<x path="Void"/>
</f></onLoad>
		<extractMetaData public="1" set="method" static="1">
			<f a="data">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Extracts Meta Data. A Json Like Object
  * @param data</haxe_doc>
		</extractMetaData>
		<checkError public="1" set="method" static="1"><f a=""><x path="Void"/></f></checkError>
		<isBattleTest public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isBattleTest>
		<isEventTest public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isEventTest>
		<isSkill public="1" set="method" static="1">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns a Bool value given an item.
  * Item being a database object representing a skill.
  * @static
  * @param {object} item
  * @returns {Bool}
  * @memberof DataManager</haxe_doc>
		</isSkill>
		<isItem public="1" set="method" static="1">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns a Bool value given an item.
  * Item must be a database item to be true.
  * @static
  * @param {object} item
  * @returns {Bool}
  * @memberof DataManager</haxe_doc>
		</isItem>
		<isWeapon public="1" set="method" static="1">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns a Bool value given an item.
  * Item must be a database weapon to be true.
  * @static
  * @param {object} item
  * @returns {Bool}
  * @memberof DataManager</haxe_doc>
		</isWeapon>
		<isArmor public="1" set="method" static="1">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns a Bool value given an item.
  * Item must be a database armor to be true.
  * @static
  * @param {object} item
  * @returns {Bool}
  * @memberof DataManager</haxe_doc>
		</isArmor>
		<createGameObjects public="1" set="method" static="1"><f a=""><x path="Void"/></f></createGameObjects>
		<setupNewGame public="1" set="method" static="1"><f a=""><x path="Void"/></f></setupNewGame>
		<setupBattleTest public="1" set="method" static="1"><f a=""><x path="Void"/></f></setupBattleTest>
		<setupEventTest public="1" set="method" static="1"><f a=""><x path="Void"/></f></setupEventTest>
		<loadGlobalInfo public="1" set="method" static="1"><f a=""><x path="Void"/></f></loadGlobalInfo>
		<saveGlobalInfo public="1" set="method" static="1">
			<f a="info">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* JSON like object
  * @param info</haxe_doc>
		</saveGlobalInfo>
		<isThisGameFile public="1" set="method" static="1">
			<f a="savefileId">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns a Bool value given a savefileId.
  * If the savefileId exists; the value will be true.
  * @static
  * @param {number} savefileId
  * @returns {Bool}
  * @memberof DataManager</haxe_doc>
		</isThisGameFile>
		<isAnySavefileExists public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isAnySavefileExists>
		<latestSavefileId public="1" set="method" static="1"><f a=""><x path="Int"/></f></latestSavefileId>
		<loadAllSavefileImages public="1" set="method" static="1"><f a=""><x path="Void"/></f></loadAllSavefileImages>
		<loadSavefileImages public="1" set="method" static="1">
			<f a="info">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* JSON Like Object for save file images</haxe_doc>
		</loadSavefileImages>
		<maxSavefiles public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number of save files
  * allocated in the game.
  * @static
  * @returns {number}
  * @memberof DataManager</haxe_doc>
		</maxSavefiles>
		<saveGame public="1" set="method" static="1">
			<f a="savefileId">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Saves the RPGMakerMV game given a savefileId.
  * Returns true if successful.
  * @static
  * @param {number} savefileId
  * @returns {Bool}
  * @memberof DataManager</haxe_doc>
		</saveGame>
		<loadGame public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></loadGame>
		<lastAccessedSavefileId public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the last accessed save fileId upon
  * saving or loading the game.
  * @static
  * @returns {number}
  * @memberof DataManager</haxe_doc>
		</lastAccessedSavefileId>
		<saveGameWithoutRescue public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></saveGameWithoutRescue>
		<loadGameWithoutRescue public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></loadGameWithoutRescue>
		<selectSavefileForNewGame public="1" set="method" static="1"><f a=""><x path="Void"/></f></selectSavefileForNewGame>
		<makeSavefileInfo public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a new save file on the global
  * save file information containing important
  * data such as play time, characters, timestamp.
  * @static
  * @memberof DataManager</haxe_doc>
		</makeSavefileInfo>
		<makeSaveContents public="1" set="method" static="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Creates the save file contents when saving your game.
  * Good for aliasing when you want to add more data
  * to the game's save contents.
  * @static
  * @returns {object}
  * @memberof DataManager</haxe_doc>
		</makeSaveContents>
		<extractSaveContents public="1" set="method" static="1">
			<f a="contents">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Extracts the save file contents into the game's
  * variables. An excellent method to alias when you
  * wish to extend the game's save contents for a plugin.
  * @static
  * @param {object} contents
  * @memberof DataManager</haxe_doc>
		</extractSaveContents>
		<haxe_doc>* Manages the game data: saving, loading, meta data,
 * and map information.</haxe_doc>
		<meta><m n=":native"><e>"DataManager"</e></m></meta>
	</class>
	<typedef path="rm.managers.Effect" params="" file="src/rm/managers/EffectManager.hx" module="rm.managers.EffectManager"><x path="Any"/></typedef>
	<class path="rm.managers.EffectManager" params="" file="src/rm/managers/EffectManager.hx" extern="1">
		<_cache static="1"><x path="haxe.DynamicAccess"><d/></x></_cache>
		<_errorUrls static="1"><c path="Array"><d/></c></_errorUrls>
		<load public="1" set="method" static="1">
			<f a="fileName">
				<c path="String"/>
				<t path="rm.managers.Effect"/>
			</f>
			<haxe_doc>* Load the Effect from a file.
  * @param fileName
  * @return Effect</haxe_doc>
		</load>
		<startLoading public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<t path="rm.managers.Effect"/>
			</f>
			<haxe_doc>* Starts loading  the Effect from URL
  * @param url
  * @return Effect</haxe_doc>
		</startLoading>
		<clear public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the cache and releases the Effect from
  * Graphics.</haxe_doc>
		</clear>
		<onLoad public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Not Implemented</haxe_doc>
		</onLoad>
		<makeUrl public="1" set="method" static="1">
			<f a="fileName">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Makes a url to an Effekseer file.
  * @param fileName
  * @return String</haxe_doc>
		</makeUrl>
		<checkErrors public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks the error in the errorUrls.</haxe_doc>
		</checkErrors>
		<throwLoadError public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Throws the loading error.
  * @param url</haxe_doc>
		</throwLoadError>
		<isReady public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the EffectManager is ready.
  * @return Bool</haxe_doc>
		</isReady>
		<meta><m n=":native"><e>"EffectManager"</e></m></meta>
	</class>
	<class path="rm.managers.ImageManager" params="" file="src/rm/managers/ImageManager.hx" extern="1">
		<iconWidth public="1" static="1">
			<x path="Int"/>
			<haxe_doc>*  returns 32</haxe_doc>
		</iconWidth>
		<iconHeight public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* returns 32</haxe_doc>
		</iconHeight>
		<faceWidth public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* 144</haxe_doc>
		</faceWidth>
		<faceHeight public="1" static="1">
			<x path="Int"/>
			<haxe_doc>* returns 144</haxe_doc>
		</faceHeight>
		<_cache static="1"><x path="haxe.DynamicAccess"><d/></x></_cache>
		<_system static="1"><x path="haxe.DynamicAccess"><d/></x></_system>
		<_emptyBitmap static="1"><c path="rm.core.Bitmap"/></_emptyBitmap>
		<cache public="1" static="1">
			<x path="haxe.DynamicAccess"><d/></x>
			<meta><m n=":native"><e>"_cache"</e></m></meta>
		</cache>
		<system public="1" static="1">
			<x path="haxe.DynamicAccess"><d/></x>
			<meta><m n=":native"><e>"_system"</e></m></meta>
		</system>
		<emptyBitmap public="1" static="1">
			<c path="rm.core.Bitmap"/>
			<meta><m n=":native"><e>"_emptyBitmap"</e></m></meta>
		</emptyBitmap>
		<loadBitmapFromUrl public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads the bitmap from url and returns it.
  * @param url
  * @return Bitmap</haxe_doc>
		</loadBitmapFromUrl>
		<throwLoadError public="1" set="method" static="1">
			<f a="bitmap">
				<c path="rm.core.Bitmap"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Throws a load error and retries loading the bitmap.
  * @param bitmap</haxe_doc>
		</throwLoadError>
		<loadFace public="1" set="method" static="1"><f a="filename:?hue">
	<c path="String"/>
	<x path="Int"/>
	<c path="rm.core.Bitmap"/>
</f></loadFace>
		<loadParallax public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/parallaxes/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadParallax>
		<loadPicture public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/pictures/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadPicture>
		<loadAnimation public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/animations/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadAnimation>
		<loadBattleback1 public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/battlebacks1/' folder
  *  and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadBattleback1>
		<loadBattleback2 public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/battlebacks2/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadBattleback2>
		<loadEnemy public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/enemies/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadEnemy>
		<loadCharacter public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/characters/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadCharacter>
		<loadSvActor public="1" set="method" static="1"><f a="filename:?hue">
	<c path="String"/>
	<x path="Int"/>
	<c path="rm.core.Bitmap"/>
</f></loadSvActor>
		<loadSvEnemy public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/sv_enemies/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadSvEnemy>
		<loadSystem public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from 'img/system/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadSystem>
		<loadTileset public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/tilesets/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadTileset>
		<loadTitle1 public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/titles1/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadTitle1>
		<loadTitle2 public="1" set="method" static="1">
			<f a="filename:?hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from the 'img/titles2/' folder
  * and returns it.
  * @param {string} filename
  * @param {number} [hue]
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadTitle2>
		<loadBitmap public="1" set="method" static="1">
			<f a="folder:filename:hue:smooth">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object from any folder and returns it.
  *
  * @param {string} folder
  * @param {string} filename
  * @param {number} hue
  * @param {boolean} smooth
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadBitmap>
		<loadEmptyBitmap public="1" set="method" static="1">
			<f a="path:hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads an empty Bitmap object and returns it.
  *
  * @param {string} path
  * @param {number} hue
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadEmptyBitmap>
		<loadNormalBitmap public="1" set="method" static="1">
			<f a="path:hue">
				<c path="String"/>
				<x path="Int"/>
				<c path="rm.core.Bitmap"/>
			</f>
			<haxe_doc>* Loads a Bitmap object given a path
  * and returns it.
  * @param {string} path
  * @param {number} hue
  * @returns {Bitmap}
  * @memberof ImageManagerStatic</haxe_doc>
		</loadNormalBitmap>
		<clear public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the image cache in RPGMakerMV.
  *
  * @memberof ImageManagerStatic</haxe_doc>
		</clear>
		<isReady public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the image cache
  * is ready.
  * @returns {boolean}
  * @memberof ImageManagerStatic</haxe_doc>
		</isReady>
		<isObjectCharacter public="1" set="method" static="1">
			<f a="filename">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the given filename
  * is an object character. Must contain
  * a  '!' in the file name to be an
  * object character.
  * @param {string} filename
  * @returns {boolean}
  * @memberof ImageManagerStatic</haxe_doc>
		</isObjectCharacter>
		<isBigCharacter public="1" set="method" static="1">
			<f a="filename">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the given filename is
  * a large character. Must contain a '$'
  * in the file name to be a large character.
  * @param {string} filename
  * @returns {boolean}
  * @memberof ImageManagerStatic</haxe_doc>
		</isBigCharacter>
		<isZeroParallax public="1" set="method" static="1"><f a="filename">
	<c path="String"/>
	<x path="Bool"/>
</f></isZeroParallax>
		<haxe_doc>* Static class that manages images. Loading the images
 * and create bitmap objects.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"ImageManager"</e></m>
		</meta>
	</class>
	<class path="rm.managers.PluginManager" params="" file="src/rm/managers/PluginManager.hx" extern="1">
		<_path static="1"><c path="String"/></_path>
		<_scripts static="1"><c path="Array"><c path="String"/></c></_scripts>
		<_errorUrls static="1"><c path="Array"><c path="String"/></c></_errorUrls>
		<setup public="1" set="method" static="1"><f a="plugins">
	<c path="Array"><t path="rm.types.PluginSettings"/></c>
	<x path="Void"/>
</f></setup>
		<checkErrors public="1" set="method" static="1"><f a=""><x path="Void"/></f></checkErrors>
		<parameters public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* Returns all of the plugin parameters for an RPGMakerMZ
  * plugin in a JSON Like String Format.
  * Should typedef this for ease of parsing.
  * @param name
  * @return Any</haxe_doc>
		</parameters>
		<loadScript public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Uses internally by the Plugin Manager to load
  * the plugin scripts.
  * @param name</haxe_doc>
		</loadScript>
		<onError public="1" set="method" static="1"><f a="e">
	<c path="js.html.Event"/>
	<x path="Void"/>
</f></onError>
		<registerCommand public="1" set="method" static="1">
			<f a="pluginName:commandName:lambda">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<x path="Any"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Regsters a new plugin command in MZ using a lambda expression
    * The Variable of the lambda should be transformed into the appropriate
    * typed def struct for your use case for your command.
  * Example Syntax For Commented Parameters
  *
        *```js
        //Should be in comment

    @command PluginCommandFunctionName
   @text My Plugin Command
   @desc Plugin Command Description Text

   @arg Actors
    @text Which Actors?
   @type actor[]
   @desc Select which Actor ID(s) to affect.
   @default ["1"]

   @arg State
   @text State
   @type state
   @desc Which State to apply?
   @default 1

    PluginManager.registerCommand("TestPlugin", "PluginCommandFunctionName", args => {
     // Get Arguments
     const actorIds = JSON.parse(args.Actors);
     const stateId = args.State;

     // Use the arguments
     for (const actorId of actorIds) {
        const actor = $gameParty.members().find(member => member.actorId() === Number(actorId));
        if (actor) {
         actor.addState(stateId);
        }
     }
    });
    * ```
    * @param pluginName
    * @param commandName
    * @param lambda]]></haxe_doc>
		</registerCommand>
		<haxe_doc>* Static class that manages plugins</haxe_doc>
		<meta><m n=":native"><e>"PluginManager"</e></m></meta>
	</class>
	<class path="rm.managers.SceneManager" params="" file="src/rm/managers/SceneManager.hx" extern="1">
		<_scene static="1"><x path="Any"/></_scene>
		<_nextScene static="1"><x path="Any"/></_nextScene>
		<_stack static="1"><c path="Array"><x path="Any"/></c></_stack>
		<_screenWidth static="1"><x path="Int"/></_screenWidth>
		<_screenHeight static="1"><x path="Int"/></_screenHeight>
		<_backgroundBitmap static="1"><c path="rm.core.Bitmap"/></_backgroundBitmap>
		<_boxWidth static="1"><x path="Int"/></_boxWidth>
		<_boxHeight static="1"><x path="Int"/></_boxHeight>
		<_deltaTime static="1"><x path="Float"/></_deltaTime>
		<_currentTime static="1"><x path="Float"/></_currentTime>
		<_accumulator static="1"><x path="Int"/></_accumulator>
		<currentScene public="1" static="1">
			<x path="Any"/>
			<meta><m n=":native"><e>"_scene"</e></m></meta>
			<haxe_doc>* Convenience variable for getting the current scene.</haxe_doc>
		</currentScene>
		<preferableRendererType public="1" set="method" static="1"><f a=""><c path="String"/></f></preferableRendererType>
		<shouldUseCanvasRenderer public="1" set="method" static="1"><f a=""><x path="Bool"/></f></shouldUseCanvasRenderer>
		<initialize public="1" set="method" static="1"><f a=""><x path="Void"/></f></initialize>
		<initGraphics public="1" set="method" static="1"><f a=""><x path="Void"/></f></initGraphics>
		<initAudio public="1" set="method" static="1"><f a=""><x path="Void"/></f></initAudio>
		<initInput public="1" set="method" static="1"><f a=""><x path="Void"/></f></initInput>
		<initNwjs public="1" set="method" static="1"><f a=""><x path="Void"/></f></initNwjs>
		<update public="1" set="method" static="1"><f a=""><x path="Void"/></f></update>
		<terminate public="1" set="method" static="1"><f a=""><x path="Void"/></f></terminate>
		<tickStart public="1" set="method" static="1"><f a=""><x path="Void"/></f></tickStart>
		<tickEnd public="1" set="method" static="1"><f a=""><x path="Void"/></f></tickEnd>
		<changeScene public="1" set="method" static="1"><f a=""><x path="Void"/></f></changeScene>
		<updateScene public="1" set="method" static="1"><f a=""><x path="Void"/></f></updateScene>
		<renderScene public="1" set="method" static="1"><f a=""><x path="Void"/></f></renderScene>
		<onSceneCreate public="1" set="method" static="1"><f a=""><x path="Void"/></f></onSceneCreate>
		<onSceneStart public="1" set="method" static="1"><f a=""><x path="Void"/></f></onSceneStart>
		<onSceneLoading public="1" set="method" static="1"><f a=""><x path="Void"/></f></onSceneLoading>
		<onError public="1" set="method" static="1"><f a="e">
	<c path="js.html.Event"/>
	<x path="Void"/>
</f></onError>
		<onKeyDown public="1" set="method" static="1"><f a="event">
	<c path="js.html.KeyboardEvent"/>
	<x path="Void"/>
</f></onKeyDown>
		<catchException public="1" set="method" static="1"><f a="e">
	<c path="js.html.Event"/>
	<x path="Void"/>
</f></catchException>
		<isSceneChanging public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isSceneChanging>
		<isCurrentSceneBusy public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isCurrentSceneBusy>
		<isCurrentSceneStarted public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isCurrentSceneStarted>
		<isNextScene public="1" set="method" static="1"><f a="sceneClass">
	<x path="Any"/>
	<x path="Bool"/>
</f></isNextScene>
		<isPreviousScene public="1" set="method" static="1"><f a="sceneClass">
	<x path="Any"/>
	<x path="Bool"/>
</f></isPreviousScene>
		<goto public="1" set="method" static="1">
			<f a="sceneClass">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Goes to the scene passed in.
  * @param sceneClass</haxe_doc>
		</goto>
		<push public="1" set="method" static="1">
			<f a="sceneClass">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pushes the scene passed in to the scene stack.
  * Immediately goes to the scene passed in.
  * @param sceneClass</haxe_doc>
		</push>
		<pop public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pops the current scene from the stack.</haxe_doc>
		</pop>
		<exit public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Exits the current scene.</haxe_doc>
		</exit>
		<clearStack public="1" set="method" static="1"><f a=""><x path="Void"/></f></clearStack>
		<stop public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the current scene.</haxe_doc>
		</stop>
		<prepareNextScene public="1" set="method" static="1"><f a=""><x path="Void"/></f></prepareNextScene>
		<snap public="1" set="method" static="1"><f a=""><c path="rm.core.Bitmap"/></f></snap>
		<snapForBackground public="1" set="method" static="1"><f a=""><x path="Void"/></f></snapForBackground>
		<backgroundBitmap public="1" set="method" static="1"><f a=""><c path="rm.core.Bitmap"/></f></backgroundBitmap>
		<updateManagers public="1" set="method" static="1"><f a="ticks:delta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateManagers>
		<showDevTools public="1" set="method" static="1"><f a=""><x path="Void"/></f></showDevTools>
		<haxe_doc>* Manages the scenes of the game.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"SceneManager"</e></m>
		</meta>
	</class>
	<class path="rm.managers.SoundManager" params="" file="src/rm/managers/SoundManager.hx" extern="1">
		<preloadImportantSounds public="1" set="method" static="1"><f a=""><x path="Void"/></f></preloadImportantSounds>
		<loadSystemSound public="1" set="method" static="1"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></loadSystemSound>
		<playSystemSound public="1" set="method" static="1"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></playSystemSound>
		<playCursor public="1" set="method" static="1"><f a=""><x path="Void"/></f></playCursor>
		<playOk public="1" set="method" static="1"><f a=""><x path="Void"/></f></playOk>
		<playCancel public="1" set="method" static="1"><f a=""><x path="Void"/></f></playCancel>
		<playBuzzer public="1" set="method" static="1"><f a=""><x path="Void"/></f></playBuzzer>
		<playEquip public="1" set="method" static="1"><f a=""><x path="Void"/></f></playEquip>
		<playSave public="1" set="method" static="1"><f a=""><x path="Void"/></f></playSave>
		<playLoad public="1" set="method" static="1"><f a=""><x path="Void"/></f></playLoad>
		<playBattleStart public="1" set="method" static="1"><f a=""><x path="Void"/></f></playBattleStart>
		<playEscape public="1" set="method" static="1"><f a=""><x path="Void"/></f></playEscape>
		<playEnemyAttack public="1" set="method" static="1"><f a=""><x path="Void"/></f></playEnemyAttack>
		<playEnemyDamage public="1" set="method" static="1"><f a=""><x path="Void"/></f></playEnemyDamage>
		<playEnemyCollapse public="1" set="method" static="1"><f a=""><x path="Void"/></f></playEnemyCollapse>
		<playBossCollapse1 public="1" set="method" static="1"><f a=""><x path="Void"/></f></playBossCollapse1>
		<playBossCollapse2 public="1" set="method" static="1"><f a=""><x path="Void"/></f></playBossCollapse2>
		<playActorDamage public="1" set="method" static="1"><f a=""><x path="Void"/></f></playActorDamage>
		<playActorCollapse public="1" set="method" static="1"><f a=""><x path="Void"/></f></playActorCollapse>
		<playRecovery public="1" set="method" static="1"><f a=""><x path="Void"/></f></playRecovery>
		<playMiss public="1" set="method" static="1"><f a=""><x path="Void"/></f></playMiss>
		<playEvasion public="1" set="method" static="1"><f a=""><x path="Void"/></f></playEvasion>
		<playMagicEvasion public="1" set="method" static="1"><f a=""><x path="Void"/></f></playMagicEvasion>
		<playReflection public="1" set="method" static="1"><f a=""><x path="Void"/></f></playReflection>
		<playShop public="1" set="method" static="1"><f a=""><x path="Void"/></f></playShop>
		<playUseItem public="1" set="method" static="1"><f a=""><x path="Void"/></f></playUseItem>
		<playUseSkill public="1" set="method" static="1"><f a=""><x path="Void"/></f></playUseSkill>
		<haxe_doc>* Static class that plays sound effects defined in the database.</haxe_doc>
		<meta><m n=":native"><e>"SoundManager"</e></m></meta>
	</class>
	<class path="rm.managers.StorageManager" params="" file="src/rm/managers/StorageManager.hx" extern="1">
		<save public="1" set="method" static="1"><f a="savefileId:json">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></save>
		<load public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></load>
		<exists public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Void"/>
</f></remove>
		<backup public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Void"/>
</f></backup>
		<backupExists public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></backupExists>
		<cleanBackup public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></cleanBackup>
		<restoreBackup public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Void"/>
</f></restoreBackup>
		<isLocalMode public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isLocalMode>
		<saveToLocalFile public="1" set="method" static="1"><f a="savefileId:json">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></saveToLocalFile>
		<loadFromLocalFile public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></loadFromLocalFile>
		<loadFromLocalBackupFile public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></loadFromLocalBackupFile>
		<localFileBackupExists public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></localFileBackupExists>
		<localFileExists public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></localFileExists>
		<removeLocalFile public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Void"/>
</f></removeLocalFile>
		<saveToWebStorage public="1" set="method" static="1"><f a="savefileId:json">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></saveToWebStorage>
		<loadFromWebStorage public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></loadFromWebStorage>
		<loadFromWebStorageBackup public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></loadFromWebStorageBackup>
		<webStorageBackupExists public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></webStorageBackupExists>
		<webStorageExists public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Bool"/>
</f></webStorageExists>
		<removeWebStorage public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<x path="Void"/>
</f></removeWebStorage>
		<localFileDirectoryPath public="1" set="method" static="1"><f a=""><c path="String"/></f></localFileDirectoryPath>
		<localFilePath public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></localFilePath>
		<webStorageKey public="1" set="method" static="1"><f a="savefileId">
	<x path="Int"/>
	<c path="String"/>
</f></webStorageKey>
		<haxe_doc>* The static class that manages storage of save game data.</haxe_doc>
		<meta><m n=":native"><e>"StorageManager"</e></m></meta>
	</class>
	<class path="rm.managers.TextManager" params="" file="src/rm/managers/TextManager.hx" extern="1">
		<currencyUnit public="1" static="1"><c path="String"/></currencyUnit>
		<level public="1" static="1"><c path="String"/></level>
		<levelA public="1" static="1"><c path="String"/></levelA>
		<hp public="1" static="1"><c path="String"/></hp>
		<hpA public="1" static="1"><c path="String"/></hpA>
		<mp public="1" static="1"><c path="String"/></mp>
		<mpA public="1" static="1"><c path="String"/></mpA>
		<tp public="1" static="1"><c path="String"/></tp>
		<tpA public="1" static="1"><c path="String"/></tpA>
		<exp public="1" static="1"><c path="String"/></exp>
		<expA public="1" static="1"><c path="String"/></expA>
		<fight public="1" static="1"><c path="String"/></fight>
		<escape public="1" static="1"><c path="String"/></escape>
		<attack public="1" static="1"><c path="String"/></attack>
		<guard public="1" static="1"><c path="String"/></guard>
		<item public="1" static="1"><c path="String"/></item>
		<skill public="1" static="1"><c path="String"/></skill>
		<equip public="1" static="1"><c path="String"/></equip>
		<status public="1" static="1"><c path="String"/></status>
		<formation public="1" static="1"><c path="String"/></formation>
		<save public="1" static="1"><c path="String"/></save>
		<gameEnd public="1" static="1"><c path="String"/></gameEnd>
		<options public="1" static="1"><c path="String"/></options>
		<weapon public="1" static="1"><c path="String"/></weapon>
		<armor public="1" static="1"><c path="String"/></armor>
		<keyItem public="1" static="1"><c path="String"/></keyItem>
		<equip2 public="1" static="1"><c path="String"/></equip2>
		<optimize public="1" static="1"><c path="String"/></optimize>
		<clear public="1" static="1"><c path="String"/></clear>
		<newGame public="1" static="1"><c path="String"/></newGame>
		<continue_ public="1" static="1"><c path="String"/></continue_>
		<toTitle public="1" static="1"><c path="String"/></toTitle>
		<cancel public="1" static="1"><c path="String"/></cancel>
		<buy public="1" static="1"><c path="String"/></buy>
		<sell public="1" static="1"><c path="String"/></sell>
		<alwaysDash public="1" static="1"><c path="String"/></alwaysDash>
		<commandRemember public="1" static="1"><c path="String"/></commandRemember>
		<bgmVolume public="1" static="1"><c path="String"/></bgmVolume>
		<bgsVolume public="1" static="1"><c path="String"/></bgsVolume>
		<meVolume public="1" static="1"><c path="String"/></meVolume>
		<seVolume public="1" static="1"><c path="String"/></seVolume>
		<possession public="1" static="1"><c path="String"/></possession>
		<expTotal public="1" static="1"><c path="String"/></expTotal>
		<expNext public="1" static="1"><c path="String"/></expNext>
		<saveMessage public="1" static="1"><c path="String"/></saveMessage>
		<loadMessage public="1" static="1"><c path="String"/></loadMessage>
		<file public="1" static="1"><c path="String"/></file>
		<partyName public="1" static="1"><c path="String"/></partyName>
		<emerge public="1" static="1"><c path="String"/></emerge>
		<preemptive public="1" static="1"><c path="String"/></preemptive>
		<surprise public="1" static="1"><c path="String"/></surprise>
		<escapeStart public="1" static="1"><c path="String"/></escapeStart>
		<escapeFailure public="1" static="1"><c path="String"/></escapeFailure>
		<victory public="1" static="1"><c path="String"/></victory>
		<defeat public="1" static="1"><c path="String"/></defeat>
		<obtainExp public="1" static="1"><c path="String"/></obtainExp>
		<obtainGold public="1" static="1"><c path="String"/></obtainGold>
		<obtainItem public="1" static="1"><c path="String"/></obtainItem>
		<levelUp public="1" static="1"><c path="String"/></levelUp>
		<obtainSkill public="1" static="1"><c path="String"/></obtainSkill>
		<useItem public="1" static="1"><c path="String"/></useItem>
		<criticalToEnemy public="1" static="1"><c path="String"/></criticalToEnemy>
		<criticalToActor public="1" static="1"><c path="String"/></criticalToActor>
		<actorDamage public="1" static="1"><c path="String"/></actorDamage>
		<actorRecovery public="1" static="1"><c path="String"/></actorRecovery>
		<actorGain public="1" static="1"><c path="String"/></actorGain>
		<actorLoss public="1" static="1"><c path="String"/></actorLoss>
		<actorDrain public="1" static="1"><c path="String"/></actorDrain>
		<actorNoDamage public="1" static="1"><c path="String"/></actorNoDamage>
		<actorNoHit public="1" static="1"><c path="String"/></actorNoHit>
		<enemyDamage public="1" static="1"><c path="String"/></enemyDamage>
		<enemyRecovery public="1" static="1"><c path="String"/></enemyRecovery>
		<enemyGain public="1" static="1"><c path="String"/></enemyGain>
		<enemyLoss public="1" static="1"><c path="String"/></enemyLoss>
		<enemyDrain public="1" static="1"><c path="String"/></enemyDrain>
		<enemyNoDamage public="1" static="1"><c path="String"/></enemyNoDamage>
		<enemyNoHit public="1" static="1"><c path="String"/></enemyNoHit>
		<evasion public="1" static="1"><c path="String"/></evasion>
		<magicEvasion public="1" static="1"><c path="String"/></magicEvasion>
		<magicReflection public="1" static="1"><c path="String"/></magicReflection>
		<counterAttack public="1" static="1"><c path="String"/></counterAttack>
		<substitute public="1" static="1"><c path="String"/></substitute>
		<buffAdd public="1" static="1"><c path="String"/></buffAdd>
		<debuffAdd public="1" static="1"><c path="String"/></debuffAdd>
		<buffRemove public="1" static="1"><c path="String"/></buffRemove>
		<actionFailure public="1" static="1"><c path="String"/></actionFailure>
		<basic public="1" set="method" static="1"><f a="basicId">
	<x path="Int"/>
	<c path="String"/>
</f></basic>
		<param public="1" set="method" static="1"><f a="paramId">
	<x path="Int"/>
	<c path="String"/>
</f></param>
		<command public="1" set="method" static="1"><f a="commandId">
	<x path="Int"/>
	<c path="String"/>
</f></command>
		<message public="1" set="method" static="1"><f a="messageId">
	<c path="String"/>
	<c path="String"/>
</f></message>
		<getter public="1" set="method" static="1"><f a="method:param">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></getter>
		<haxe_doc>* The static class that handles terms and messages.</haxe_doc>
		<meta><m n=":native"><e>"TextManager"</e></m></meta>
	</class>
	<class path="rm.objects.Game_Action" params="" file="src/rm/objects/Game_Action.hx" extern="1">
		<EFFECT_RECOVER_HP public="1" static="1"><x path="Int"/></EFFECT_RECOVER_HP>
		<EFFECT_RECOVER_MP public="1" static="1"><x path="Int"/></EFFECT_RECOVER_MP>
		<EFFECT_GAIN_TP public="1" static="1"><x path="Int"/></EFFECT_GAIN_TP>
		<EFFECT_ADD_STATE public="1" static="1"><x path="Int"/></EFFECT_ADD_STATE>
		<EFFECT_REMOVE_STATE public="1" static="1"><x path="Int"/></EFFECT_REMOVE_STATE>
		<EFFECT_ADD_BUFF public="1" static="1"><x path="Int"/></EFFECT_ADD_BUFF>
		<EFFECT_ADD_DEBUFF public="1" static="1"><x path="Int"/></EFFECT_ADD_DEBUFF>
		<EFFECT_REMOVE_BUFF public="1" static="1"><x path="Int"/></EFFECT_REMOVE_BUFF>
		<EFFECT_REMOVE_DEBUFF public="1" static="1"><x path="Int"/></EFFECT_REMOVE_DEBUFF>
		<EFFECT_SPECIAL public="1" static="1"><x path="Int"/></EFFECT_SPECIAL>
		<EFFECT_GROW public="1" static="1"><x path="Int"/></EFFECT_GROW>
		<EFFECT_LEARN_SKILL public="1" static="1"><x path="Int"/></EFFECT_LEARN_SKILL>
		<EFFECT_COMMON_EVENT public="1" static="1"><x path="Int"/></EFFECT_COMMON_EVENT>
		<SPECIAL_EFFECT_ESCAPE public="1" static="1"><x path="Int"/></SPECIAL_EFFECT_ESCAPE>
		<HITTYPE_CERTAIN public="1" static="1"><x path="Int"/></HITTYPE_CERTAIN>
		<HITTYPE_PHYSICAL public="1" static="1"><x path="Int"/></HITTYPE_PHYSICAL>
		<HITTYPE_MAGICAL public="1" static="1"><x path="Int"/></HITTYPE_MAGICAL>
		<_subjectActorId><x path="Int"/></_subjectActorId>
		<_subjectEnemyIndex><x path="Int"/></_subjectEnemyIndex>
		<_targetIndex><x path="Int"/></_targetIndex>
		<_forcing><x path="Bool"/></_forcing>
		<_item><c path="rm.objects.Game_Item"/></_item>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<setSubject public="1" set="method"><f a="subject">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></setSubject>
		<subject public="1" set="method"><f a=""><c path="rm.objects.Game_Battler"/></f></subject>
		<friendsUnit public="1" set="method"><f a=""><c path="rm.objects.Game_Unit"/></f></friendsUnit>
		<opponentsUnit public="1" set="method"><f a=""><c path="rm.objects.Game_Unit"/></f></opponentsUnit>
		<setEnemyAction public="1" set="method"><f a="action">
	<t path="rm.types.EnemyAction"/>
	<x path="Void"/>
</f></setEnemyAction>
		<setAttack public="1" set="method"><f a=""><x path="Void"/></f></setAttack>
		<setGuard public="1" set="method"><f a=""><x path="Void"/></f></setGuard>
		<setSkill public="1" set="method"><f a="skillId">
	<x path="Int"/>
	<x path="Void"/>
</f></setSkill>
		<setItem public="1" set="method"><f a="itemId">
	<x path="Int"/>
	<x path="Void"/>
</f></setItem>
		<setItemObject public="1" set="method"><f a="object">
	<t path="rm.types.UsableItem"/>
	<x path="Void"/>
</f></setItemObject>
		<setTarget public="1" set="method"><f a="targetIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></setTarget>
		<item public="1" set="method"><f a=""><t path="rm.types.UsableItem"/></f></item>
		<isSkill public="1" set="method"><f a=""><x path="Bool"/></f></isSkill>
		<isItem public="1" set="method"><f a=""><x path="Bool"/></f></isItem>
		<numRepeats public="1" set="method"><f a=""><x path="Int"/></f></numRepeats>
		<checkItemScope public="1" set="method"><f a="list">
	<c path="Array"><x path="Int"/></c>
	<x path="Bool"/>
</f></checkItemScope>
		<isForOpponent public="1" set="method"><f a=""><x path="Bool"/></f></isForOpponent>
		<isForFriend public="1" set="method"><f a=""><x path="Bool"/></f></isForFriend>
		<isForDeadFriend public="1" set="method"><f a=""><x path="Bool"/></f></isForDeadFriend>
		<isForUser public="1" set="method"><f a=""><x path="Bool"/></f></isForUser>
		<isForOne public="1" set="method"><f a=""><x path="Bool"/></f></isForOne>
		<isForRandom public="1" set="method"><f a=""><x path="Bool"/></f></isForRandom>
		<isForAll public="1" set="method"><f a=""><x path="Bool"/></f></isForAll>
		<needsSelection public="1" set="method"><f a=""><x path="Int"/></f></needsSelection>
		<numTargets public="1" set="method"><f a=""><x path="Int"/></f></numTargets>
		<checkDamageType public="1" set="method"><f a="list">
	<c path="Array"><x path="Int"/></c>
	<x path="Bool"/>
</f></checkDamageType>
		<isHpEffect public="1" set="method"><f a=""><x path="Bool"/></f></isHpEffect>
		<isMpEffect public="1" set="method"><f a=""><x path="Bool"/></f></isMpEffect>
		<isDamage public="1" set="method"><f a=""><x path="Bool"/></f></isDamage>
		<isRecover public="1" set="method"><f a=""><x path="Bool"/></f></isRecover>
		<isDrain public="1" set="method"><f a=""><x path="Bool"/></f></isDrain>
		<isHpRecover public="1" set="method"><f a=""><x path="Bool"/></f></isHpRecover>
		<isMpRecover public="1" set="method"><f a=""><x path="Bool"/></f></isMpRecover>
		<isCertainHit public="1" set="method"><f a=""><x path="Bool"/></f></isCertainHit>
		<isPhysical public="1" set="method"><f a=""><x path="Bool"/></f></isPhysical>
		<isMagical public="1" set="method"><f a=""><x path="Bool"/></f></isMagical>
		<isAttack public="1" set="method"><f a=""><x path="Bool"/></f></isAttack>
		<isGuard public="1" set="method"><f a=""><x path="Bool"/></f></isGuard>
		<isMagicSkill public="1" set="method"><f a=""><x path="Bool"/></f></isMagicSkill>
		<decideRandomTarget public="1" set="method"><f a=""><x path="Void"/></f></decideRandomTarget>
		<setConfusion public="1" set="method"><f a=""><x path="Void"/></f></setConfusion>
		<prepare public="1" set="method"><f a=""><x path="Void"/></f></prepare>
		<isValid public="1" set="method"><f a=""><x path="Bool"/></f></isValid>
		<speed public="1" set="method"><f a=""><x path="Float"/></f></speed>
		<makeTargets public="1" set="method"><f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f></makeTargets>
		<repeatTargets public="1" set="method"><f a="targets">
	<c path="Array"><c path="rm.objects.Game_Battler"/></c>
	<c path="Array"><c path="rm.objects.Game_Battler"/></c>
</f></repeatTargets>
		<confusionTarget public="1" set="method"><f a=""><c path="rm.objects.Game_Battler"/></f></confusionTarget>
		<targetsForOpponents public="1" set="method"><f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f></targetsForOpponents>
		<targetsForFriends public="1" set="method"><f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f></targetsForFriends>
		<evaluate public="1" set="method"><f a=""><x path="Float"/></f></evaluate>
		<itemTargetCandidates public="1" set="method"><f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f></itemTargetCandidates>
		<evaluateWithTarget public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></evaluateWithTarget>
		<testApply public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Bool"/>
</f></testApply>
		<hasItemAnyValidEffects public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Bool"/>
</f></hasItemAnyValidEffects>
		<testItemEffect public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Bool"/>
</f></testItemEffect>
		<itemCnt public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></itemCnt>
		<itemMrf public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></itemMrf>
		<itemHit public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></itemHit>
		<itemEva public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></itemEva>
		<itemCri public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></itemCri>
		<apply public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></apply>
		<makeDamageValue public="1" set="method"><f a="target:critical">
	<c path="rm.objects.Game_Battler"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></makeDamageValue>
		<evalDamageFormula public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></evalDamageFormula>
		<calcElementRate public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></calcElementRate>
		<elementsMaxRate public="1" set="method"><f a="target:elements">
	<c path="rm.objects.Game_Battler"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></elementsMaxRate>
		<applyCritical public="1" set="method"><f a="damage">
	<x path="Int"/>
	<x path="Float"/>
</f></applyCritical>
		<applyVariance public="1" set="method"><f a="damage:variance">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></applyVariance>
		<applyGuard public="1" set="method"><f a="damage:target">
	<x path="Int"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></applyGuard>
		<executeDamage public="1" set="method"><f a="target:value">
	<c path="rm.objects.Game_Battler"/>
	<x path="Int"/>
	<x path="Void"/>
</f></executeDamage>
		<executeHpDamage public="1" set="method"><f a="target:value">
	<c path="rm.objects.Game_Battler"/>
	<x path="Int"/>
	<x path="Void"/>
</f></executeHpDamage>
		<executeMpDamage public="1" set="method"><f a="target:value">
	<c path="rm.objects.Game_Battler"/>
	<x path="Int"/>
	<x path="Void"/>
</f></executeMpDamage>
		<gainDrainedHp public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></gainDrainedHp>
		<gainDrainedMp public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></gainDrainedMp>
		<applyItemEffect public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></applyItemEffect>
		<itemEffectRecoverHp public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectRecoverHp>
		<itemEffectRecoverMp public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectRecoverMp>
		<itemEffectGainTp public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectGainTp>
		<itemEffectAddState public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectAddState>
		<itemEffectAddAttackState public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectAddAttackState>
		<itemEffectAddNormalState public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectAddNormalState>
		<itemEffectRemoveState public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectRemoveState>
		<itemEffectAddBuff public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectAddBuff>
		<itemEffectAddDebuff public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectAddDebuff>
		<itemEffectRemoveBuff public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectRemoveBuff>
		<itemEffectRemoveDebuff public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectRemoveDebuff>
		<itemEffectSpecial public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectSpecial>
		<itemEffectGrow public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectGrow>
		<itemEffectLearnSkill public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectLearnSkill>
		<itemEffectCommonEvent public="1" set="method"><f a="target:effect">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.Effect"/>
	<x path="Void"/>
</f></itemEffectCommonEvent>
		<makeSuccess public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></makeSuccess>
		<applyItemUserEffect public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></applyItemUserEffect>
		<lukEffectRate public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Float"/>
</f></lukEffectRate>
		<applyGlobal public="1" set="method"><f a=""><x path="Void"/></f></applyGlobal>
		<new public="1" set="method"><f a="subject:forcing">
	<c path="rm.objects.Game_Battler"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Game_Action
 * The game object class representing a battle action.
 * @class Game_Action</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Action"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_ActionResult" params="" file="src/rm/objects/Game_ActionResult.hx" extern="1">
		<used public="1"><x path="Bool"/></used>
		<missed public="1"><x path="Bool"/></missed>
		<evaded public="1"><x path="Bool"/></evaded>
		<physical public="1"><x path="Bool"/></physical>
		<drain public="1"><x path="Bool"/></drain>
		<critical public="1"><x path="Bool"/></critical>
		<success public="1"><x path="Bool"/></success>
		<hpAffected public="1"><x path="Bool"/></hpAffected>
		<hpDamage public="1"><x path="Int"/></hpDamage>
		<mpDamage public="1"><x path="Int"/></mpDamage>
		<tpDamage public="1"><x path="Int"/></tpDamage>
		<addedStates public="1"><c path="Array"><x path="rm.types.StateId"/></c></addedStates>
		<removedStates public="1"><c path="Array"><x path="rm.types.StateId"/></c></removedStates>
		<addedBuffs public="1"><c path="Array"><x path="rm.types.StateId"/></c></addedBuffs>
		<addedDebuffs public="1"><c path="Array"><x path="rm.types.BuffId"/></c></addedDebuffs>
		<removedBuffs public="1"><c path="Array"><x path="rm.types.BuffId"/></c></removedBuffs>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the game action result.
  *
  * @memberof Game_ActionResult</haxe_doc>
		</clear>
		<addedStateObjects public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.State"/></c></f>
			<haxe_doc><![CDATA[* Returns the added states from the action result.
  *
  * @returns {Array<RPG.State>}
  * @memberof Game_ActionResult]]></haxe_doc>
		</addedStateObjects>
		<removedStateObjects public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.State"/></c></f>
			<haxe_doc><![CDATA[* Returns the removes states from the result.
  *
  * @returns {Array<RPG.State>}
  * @memberof Game_ActionResult]]></haxe_doc>
		</removedStateObjects>
		<isStatusAffected public="1" set="method"><f a=""><x path="Bool"/></f></isStatusAffected>
		<isHit public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the action result is a hit.
  *
  * @returns {Bool}
  * @memberof Game_ActionResult</haxe_doc>
		</isHit>
		<isStateAdded public="1" set="method"><f a="stateId">
	<x path="rm.types.StateId"/>
	<x path="Bool"/>
</f></isStateAdded>
		<pushAddedState public="1" set="method"><f a="stateId">
	<x path="rm.types.StateId"/>
	<x path="Void"/>
</f></pushAddedState>
		<isStateRemoved public="1" set="method"><f a="stateId">
	<x path="rm.types.StateId"/>
	<x path="Bool"/>
</f></isStateRemoved>
		<pushRemovedState public="1" set="method"><f a="stateId">
	<x path="rm.types.StateId"/>
	<x path="Void"/>
</f></pushRemovedState>
		<isBuffAdded public="1" set="method">
			<f a="paramId">
				<x path="rm.types.BuffId"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the a buff is added to the specified param
  * from the action result.
  * @param {number} paramId
  * @returns {Bool}
  * @memberof Game_ActionResult</haxe_doc>
		</isBuffAdded>
		<pushAddedBuff public="1" set="method"><f a="paramId">
	<x path="rm.types.BuffId"/>
	<x path="Void"/>
</f></pushAddedBuff>
		<isDebuffAdded public="1" set="method"><f a="paramId">
	<x path="rm.types.BuffId"/>
	<x path="Bool"/>
</f></isDebuffAdded>
		<pushAddedDebuff public="1" set="method"><f a="paramId">
	<x path="rm.types.BuffId"/>
	<x path="Void"/>
</f></pushAddedDebuff>
		<isBuffRemoved public="1" set="method"><f a="paramId">
	<x path="rm.types.BuffId"/>
	<x path="Bool"/>
</f></isBuffRemoved>
		<pushRemovedBuff public="1" set="method"><f a="paramId">
	<x path="rm.types.BuffId"/>
	<x path="Void"/>
</f></pushRemovedBuff>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Game_ActionResult
 *
 * The game object declare class for a result of a battle action. For convinience, all
 * member variables in this declare class are public.
 * @class Game_ActionResult</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_ActionResult"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_BattlerBase" params="" file="src/rm/objects/Game_BattlerBase.hx" extern="1">
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_BattlerBase"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Battler" params="" file="src/rm/objects/Game_Battler.hx" extern="1">
		<extends path="rm.objects.Game_BattlerBase"/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Battler"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Actor" params="" file="src/rm/objects/Game_Actor.hx" extern="1">
		<extends path="rm.objects.Game_Battler"/>
		<_actorId><x path="Int"/></_actorId>
		<_name><c path="String"/></_name>
		<_nickname><c path="String"/></_nickname>
		<_profile><c path="String"/></_profile>
		<_classId><x path="Int"/></_classId>
		<_level><x path="Int"/></_level>
		<_characterName><c path="String"/></_characterName>
		<_characterIndex><x path="Int"/></_characterIndex>
		<_faceName><c path="String"/></_faceName>
		<_faceIndex><x path="Int"/></_faceIndex>
		<_battlerName><c path="String"/></_battlerName>
		<_exp><c path="js.lib.Object"/></_exp>
		<_skills><c path="Array"><x path="Int"/></c></_skills>
		<_equips><c path="Array"><c path="rm.objects.Game_Item"/></c></_equips>
		<_actionInputIndex><x path="Int"/></_actionInputIndex>
		<_lastMenuSkill><c path="rm.objects.Game_Item"/></_lastMenuSkill>
		<_lastBattleSkill><c path="rm.objects.Game_Item"/></_lastBattleSkill>
		<_lastCommandSymbol><c path="String"/></_lastCommandSymbol>
		<_stateSteps><c path="js.lib.Object"/></_stateSteps>
		<level public="1">
			<x path="Int"/>
			<haxe_doc>[read-only]</haxe_doc>
		</level>
		<setup public="1" set="method"><f a="actorId">
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<actorId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the id of the actor.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</actorId>
		<actor public="1" set="method">
			<f a=""><t path="rm.types.Actor"/></f>
			<haxe_doc>* Returns the database information of the actor.
  *
  * @returns {Actor}
  * @memberof Game_Actor</haxe_doc>
		</actor>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the actor's name.
  * @return String</haxe_doc>
		</name>
		<setName public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the actor name.
  *
  * @param {String} name
  * @memberof Game_Actor</haxe_doc>
		</setName>
		<nickname public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the nickname of the actor.
  *
  * @returns {String}
  * @memberof Game_Actor</haxe_doc>
		</nickname>
		<setNickname public="1" set="method">
			<f a="nickname">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the nickname of the actor.
  *
  * @param {String} nickname
  * @memberof Game_Actor</haxe_doc>
		</setNickname>
		<profile public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the actor profile.
  *
  * @returns {String}
  * @memberof Game_Actor</haxe_doc>
		</profile>
		<setProfile public="1" set="method">
			<f a="profile">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the actor profile.
  *
  * @param {String} profile
  * @memberof Game_Actor</haxe_doc>
		</setProfile>
		<faceName public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the face name of the actor; this is
  * the image of faces for the actor.
  * @returns {String}
  * @memberof Game_Actor</haxe_doc>
		</faceName>
		<faceIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the face index of the actor.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</faceIndex>
		<clearStates public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears all states from the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</clearStates>
		<eraseState public="1" set="method">
			<f a="stateId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Erase the specified state from the actor.
  *
  * @param {Int} stateId
  * @memberof Game_Actor</haxe_doc>
		</eraseState>
		<resetStateCounts public="1" set="method">
			<f a="stateId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Reset state count of the specified state.
  *
  * @param {Int} stateId
  * @memberof Game_Actor</haxe_doc>
		</resetStateCounts>
		<initImages public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initialize images of the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</initImages>
		<expForLevel public="1" set="method">
			<f a="level">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the exp required to level.
  *
  * @param {Int} level
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</expForLevel>
		<initExp public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initialize exp of the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</initExp>
		<currentExp public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current experience points of the actor.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</currentExp>
		<currentLevelExp public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current level's experience for the actor.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</currentLevelExp>
		<nextLevelExp public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the experience points for the next level of the actor.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</nextLevelExp>
		<nextRequiredExp public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the next required experience points for the actor to level up.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</nextRequiredExp>
		<maxLevel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns the maximum level of the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</maxLevel>
		<isMaxLevel public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the actor is max level.
  *
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isMaxLevel>
		<initSkills public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initialize actor skills.
  *
  * @memberof Game_Actor</haxe_doc>
		</initSkills>
		<initEquips public="1" set="method">
			<f a="equips">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Initialize actor equipment in the given slots.
  *
  * @param {Array<Int>} equips
  * @memberof Game_Actor]]></haxe_doc>
		</initEquips>
		<equipSlots public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc><![CDATA[* Returns the equip slots of the actor.
  *
  * @returns {Array<Int>}
  * @memberof Game_Actor]]></haxe_doc>
		</equipSlots>
		<equips public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.EquipItem"/></c></f>
			<haxe_doc><![CDATA[* Returns the equipment of the actor.
  *
  * @returns {Array<EquipItem>}
  * @memberof Game_Actor]]></haxe_doc>
		</equips>
		<weapons public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.Weapon"/></c></f>
			<haxe_doc><![CDATA[* Returns the weapon of the actor.
  *
  * @returns {Array<Weapon>}
  * @memberof Game_Actor]]></haxe_doc>
		</weapons>
		<armors public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.Armor"/></c></f>
			<haxe_doc><![CDATA[* Returns the armor of the actor.
  *
  * @returns {Array<Armor>}
  * @memberof Game_Actor]]></haxe_doc>
		</armors>
		<hasWeapon public="1" set="method">
			<f a="weapon">
				<t path="rm.types.Weapon"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the actor has a weapon.
  *
  * @param {Weapon} weapon
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</hasWeapon>
		<hasArmor public="1" set="method">
			<f a="armor">
				<t path="rm.types.Armor"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the actor has armor.
  *
  * @param {Armor} armor
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</hasArmor>
		<isEquipChangeOk public="1" set="method">
			<f a="slotId">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the equip change is okay in the given slot.
  *
  * @param {Int} slotId
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isEquipChangeOk>
		<changeEquip public="1" set="method">
			<f a="slotId:item">
				<x path="Int"/>
				<t path="rm.types.EquipItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the actor equipment in the given slot with the
  * given equip item. Places the original item into the party
  * inventory.
  * @param {Int} slotId
  * @param {EquipItem} item
  * @memberof Game_Actor</haxe_doc>
		</changeEquip>
		<forceChangeEquip public="1" set="method">
			<f a="slotId:item">
				<x path="Int"/>
				<t path="rm.types.EquipItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Forces the actor to change equipment in the given slot
  * with the given equip item without placing the item back into
  * the party inventory.
  * @param {Int} slotId
  * @param {EquipItem} item
  * @memberof Game_Actor</haxe_doc>
		</forceChangeEquip>
		<tradeItemWithParty public="1" set="method">
			<f a="newItem:oldItem">
				<t path="rm.types.EquipItem"/>
				<t path="rm.types.EquipItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Trades the new item with the old item in the party inventory.
  *
  * @param {EquipItem} newItem
  * @param {EquipItem} oldItem
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</tradeItemWithParty>
		<changeEquipById public="1" set="method">
			<f a="etypeId:itemId">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the actor equip with an item based on the equip id.
  *
  * @param {Int} etypeId
  * @param {Int} itemId
  * @memberof Game_Actor</haxe_doc>
		</changeEquipById>
		<isEquipped public="1" set="method">
			<f a="item">
				<t path="rm.types.EquipItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the actor is equipped with the specific item.
  *
  * @param {EquipItem} item
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isEquipped>
		<discardEquip public="1" set="method">
			<f a="item">
				<t path="rm.types.EquipItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Discards the given equip item from the actor; item
  * is not return to the party inventory.
  * @param {EquipItem} item
  * @memberof Game_Actor</haxe_doc>
		</discardEquip>
		<releaseUnequippableItems public="1" set="method">
			<f a="forcing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Returns items the actor can't normally equip to the party inventory.
  *
  * @param {Bool} forcing
  * @memberof Game_Actor</haxe_doc>
		</releaseUnequippableItems>
		<clearEquipments public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the actor's equipment; items are returned to the inventory.
  *
  * @memberof Game_Actor</haxe_doc>
		</clearEquipments>
		<optimizeEquipments public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Optimize the actor's equipment.
  *
  * @memberof Game_Actor</haxe_doc>
		</optimizeEquipments>
		<bestEquipItem public="1" set="method">
			<f a="slotId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Equips the best item in the given slot.
  *
  * @param {Int} slotId
  * @memberof Game_Actor</haxe_doc>
		</bestEquipItem>
		<calcEquipItemPerformance public="1" set="method">
			<f a="item">
				<t path="rm.types.EquipItem"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Calculates the equip item performance and returns the sum/difference.
  *
  * @param {EquipItem} item
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</calcEquipItemPerformance>
		<isSkillWtypeOk public="1" set="method"><f a="skill">
	<t path="rm.types.Skill"/>
	<x path="Bool"/>
</f></isSkillWtypeOk>
		<isWtypeEquipped public="1" set="method"><f a="wtypeId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWtypeEquipped>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</refresh>
		<friendsUnit public="1" set="method"><f a=""><c path="rm.objects.Game_Party"/></f></friendsUnit>
		<opponentsUnit public="1" set="method"><f a=""><c path="rm.objects.Game_Troop"/></f></opponentsUnit>
		<isBattleMember public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the actor is a member in battle.
  *
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isBattleMember>
		<isFormationChangeOk public="1" set="method"><f a=""><x path="Bool"/></f></isFormationChangeOk>
		<currentClass public="1" set="method">
			<f a=""><t path="rm.types.RPGClass"/></f>
			<haxe_doc>* Returns the current class of the actor from the database.
  *
  * @returns {Class}
  * @memberof Game_Actor</haxe_doc>
		</currentClass>
		<isClass public="1" set="method">
			<f a="gameClass">
				<t path="rm.types.RPGClass"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the actor is the specified class from the database.
  *
  * @param {Class} gameClass
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isClass>
		<skills public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.Skill"/></c></f>
			<haxe_doc><![CDATA[* Returns the actor's skills; even if the skills are not usable.
  *
  * @returns {Array<Skill>}
  * @memberof Game_Actor]]></haxe_doc>
		</skills>
		<usableSkills public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.Skill"/></c></f>
			<haxe_doc><![CDATA[* Returns the usable skills of the actor.
  *
  * @returns {Array<Skill>}
  * @memberof Game_Actor]]></haxe_doc>
		</usableSkills>
		<attackElements public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc><![CDATA[* Returns the attack element ids.
  *
  * @returns {Array<Int>}
  * @memberof Game_Actor]]></haxe_doc>
		</attackElements>
		<hasNoWeapons public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the actor has no weapon.
  *
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</hasNoWeapons>
		<bareHandsElementId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the element id of barehanded attacks.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</bareHandsElementId>
		<attackAnimationId1 public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the first attack animation id.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</attackAnimationId1>
		<attackAnimationId2 public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the second attack animation id.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</attackAnimationId2>
		<bareHandsAnimationId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the animation id for a barehanded attack.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</bareHandsAnimationId>
		<changeExp public="1" set="method">
			<f a="exp:show">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Change the actor experience points; leveling up the actor
  * if it's above the required exp for the current level.
  * If show is set to true, actor level up with be displayed.
  * @param {Int} exp
  * @param {Bool} show
  * @memberof Game_Actor</haxe_doc>
		</changeExp>
		<levelUp public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Level up the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</levelUp>
		<levelDown public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Level down the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</levelDown>
		<findNewSkills public="1" set="method"><f a="lastSkills">
	<c path="Array"><t path="rm.types.Skill"/></c>
	<c path="Array"><t path="rm.types.Skill"/></c>
</f></findNewSkills>
		<displayLevelUp public="1" set="method">
			<f a="newSkills">
				<c path="Array"><t path="rm.types.Skill"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Displays the actor level up in a message window, with the learned skills.
  *
  * @param {Array<Skill>} newSkills
  * @memberof Game_Actor]]></haxe_doc>
		</displayLevelUp>
		<gainExp public="1" set="method">
			<f a="exp">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Gives the specified exp to the actor.
  *
  * @param {Int} exp
  * @memberof Game_Actor</haxe_doc>
		</gainExp>
		<finalExpRate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the final exp rate of the actor based on if the actor
  * is a reserved party member or an active battle member.
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</finalExpRate>
		<benchMembersExpRate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the exp rate of actors not in battle; this is set in the database.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</benchMembersExpRate>
		<shouldDisplayLevelUp public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the actor should display level up in a message window.
  *
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</shouldDisplayLevelUp>
		<changeLevel public="1" set="method">
			<f a="level:show">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the actor level; if show is set to true,
  * the actor level will be displayed.
  * @param {Int} level
  * @param {Bool} show
  * @memberof Game_Actor</haxe_doc>
		</changeLevel>
		<learnSkill public="1" set="method">
			<f a="skillId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Actor learns the specified skill given the skill id.
  *
  * @param {Int} skillId
  * @memberof Game_Actor</haxe_doc>
		</learnSkill>
		<forgetSkill public="1" set="method">
			<f a="skillId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Actor forgets the specified skill given the skill id from
  * the actor's usable skills.
  * @param {Int} skillId
  * @memberof Game_Actor</haxe_doc>
		</forgetSkill>
		<isLearnedSkill public="1" set="method">
			<f a="skillId">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the actor has learned the specified
  * skill given the specified skill id.
  * @param {Int} skillId
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isLearnedSkill>
		<changeClass public="1" set="method">
			<f a="classId:keepExp">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the actor class; if keep is true, the actor
  * will retain their experience points.
  * @param {Int} classId
  * @param {Bool} keepExp
  * @memberof Game_Actor</haxe_doc>
		</changeClass>
		<setCharacterImage public="1" set="method"><f a="characterName:characterIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setCharacterImage>
		<setFaceImage public="1" set="method">
			<f a="faceName:faceIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the face image of the actor given the face image (from database)
  * and face index within the iamge.
  *
  * @param {String} faceName
  * @param {Int} faceIndex
  * @memberof Game_Actor</haxe_doc>
		</setFaceImage>
		<setBattlerImage public="1" set="method">
			<f a="battlerName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the battler image of the actor; this is the sprite displayed
  * in the side view mode.
  * @param {String} battlerName
  * @memberof Game_Actor</haxe_doc>
		</setBattlerImage>
		<isSpriteVisible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the actor sprite is visible.
  *
  * @returns {Bool}
  * @memberof Game_Actor</haxe_doc>
		</isSpriteVisible>
		<startAnimation public="1" set="method">
			<f a="animationId:mirror:delay">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts the animation on the actor given the specified animation id;
  * if  mirror is set to true, the animation will be mirrored. If a delay is enter,
  * the animation will be delayed.
  * @param {Int} animationId
  * @param {Bool} mirror
  * @param {Int} delay
  * @memberof Game_Actor</haxe_doc>
		</startAnimation>
		<performAttack public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Performs the attack motion for the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</performAttack>
		<performVictory public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Perform the victory motion for the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</performVictory>
		<performEscape public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Performs the escape motion for the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</performEscape>
		<makeActionList public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Action"/></c></f>
			<haxe_doc><![CDATA[* Creates the action list for the actor.
  *
  * @returns {Array<Game_Action>}
  * @memberof Game_Actor]]></haxe_doc>
		</makeActionList>
		<makeAutoBattleActions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the auto battle actions for the game actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</makeAutoBattleActions>
		<makeConfusionActions public="1" set="method"><f a=""><x path="Void"/></f></makeConfusionActions>
		<onPlayerWalk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when the player walks on the map scene.
  *
  * @memberof Game_Actor</haxe_doc>
		</onPlayerWalk>
		<updateStateSteps public="1" set="method"><f a="state">
	<t path="rm.types.State"/>
	<x path="Void"/>
</f></updateStateSteps>
		<showAddedStates public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the added states to the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</showAddedStates>
		<showRemovedStates public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the removed states from the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</showRemovedStates>
		<stepsForTurn public="1" set="method"><f a=""><x path="Int"/></f></stepsForTurn>
		<turnEndOnMap public="1" set="method"><f a=""><x path="Void"/></f></turnEndOnMap>
		<checkFloorEffect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks the effect of the floor on the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</checkFloorEffect>
		<executeFloorDamage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Executes the floor dmaage on the actor.
  *
  * @memberof Game_Actor</haxe_doc>
		</executeFloorDamage>
		<basicFloorDamage public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the basic floor damage.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</basicFloorDamage>
		<maxFloorDamage public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the max floor damage.
  *
  * @returns {Int}
  * @memberof Game_Actor</haxe_doc>
		</maxFloorDamage>
		<performMapDamage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Perform damage to the actor on the map scene.
  *
  * @memberof Game_Actor</haxe_doc>
		</performMapDamage>
		<clearActions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears all of the actor's animations.
  *
  * @memberof Game_Actor</haxe_doc>
		</clearActions>
		<inputtingAction public="1" set="method">
			<f a=""><c path="rm.objects.Game_Action"/></f>
			<haxe_doc>* Returns action the actor is inputting.
  *
  * @returns {Game_Action}
  * @memberof Game_Actor</haxe_doc>
		</inputtingAction>
		<selectNextCommand public="1" set="method"><f a=""><x path="Bool"/></f></selectNextCommand>
		<selectPreviousCommand public="1" set="method"><f a=""><x path="Bool"/></f></selectPreviousCommand>
		<lastMenuSkill public="1" set="method">
			<f a=""><t path="rm.types.Skill"/></f>
			<haxe_doc>* Returns the last menu skill of the actor.
  *
  * @returns {Skill}
  * @memberof Game_Actor</haxe_doc>
		</lastMenuSkill>
		<setLastMenuSkill public="1" set="method"><f a="skill">
	<t path="rm.types.Skill"/>
	<x path="Void"/>
</f></setLastMenuSkill>
		<lastBattleSkill public="1" set="method">
			<f a=""><t path="rm.types.Skill"/></f>
			<haxe_doc>* Returns the last battle skill of the actor.
  *
  * @returns {Skill}
  * @memberof Game_Actor</haxe_doc>
		</lastBattleSkill>
		<setLastBattleSkill public="1" set="method"><f a="skill">
	<t path="rm.types.Skill"/>
	<x path="Void"/>
</f></setLastBattleSkill>
		<lastCommandSymbol public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the last command symbol that the actor used.
  *
  * @returns {String}
  * @memberof Game_Actor</haxe_doc>
		</lastCommandSymbol>
		<setLastCommandSymbol public="1" set="method">
			<f a="symbol">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the last command symbol to the given symbol; this is the
  * selected command in the battle menu.
  * @param {String} symbol
  * @memberof Game_Actor</haxe_doc>
		</setLastCommandSymbol>
		<new public="1" set="method"><f a="actorId">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Actor"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Actors" params="" file="src/rm/objects/Game_Actors.hx" extern="1">
		<_data><c path="Array"><c path="rm.objects.Game_Actor"/></c></_data>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<actor public="1" set="method">
			<f a="actorId">
				<x path="Int"/>
				<c path="rm.objects.Game_Actor"/>
			</f>
			<haxe_doc>* Returns the actor with the specified id.
  *
  * @param {number} actorId
  * @returns {Game_Actor}
  * @memberof Game_Actors</haxe_doc>
		</actor>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Actors"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_CharacterBase" params="" file="src/rm/objects/Game_CharacterBase.hx" extern="1">
		<_x><x path="Int"/></_x>
		<_y><x path="Int"/></_y>
		<_realX><x path="Int"/></_realX>
		<_realY><x path="Int"/></_realY>
		<_moveSpeed><x path="Int"/></_moveSpeed>
		<_moveFrequency><x path="Int"/></_moveFrequency>
		<_opacity><x path="Int"/></_opacity>
		<_blendMode><x path="Int"/></_blendMode>
		<_direction><x path="Int"/></_direction>
		<_pattern><x path="Int"/></_pattern>
		<_priorityType><x path="Int"/></_priorityType>
		<_tileId><x path="Int"/></_tileId>
		<_characterName><c path="String"/></_characterName>
		<_characterIndex><x path="Int"/></_characterIndex>
		<_isObjectCharacter><x path="Bool"/></_isObjectCharacter>
		<_walkAnime><x path="Bool"/></_walkAnime>
		<_stepAnime><x path="Bool"/></_stepAnime>
		<_directionFix><x path="Bool"/></_directionFix>
		<_through><x path="Bool"/></_through>
		<_transparent><x path="Bool"/></_transparent>
		<_bushDepth><x path="Int"/></_bushDepth>
		<_animationId><x path="Int"/></_animationId>
		<_balloonId><x path="Int"/></_balloonId>
		<_animationPlaying><x path="Bool"/></_animationPlaying>
		<_balloonPlaying><x path="Bool"/></_balloonPlaying>
		<_animationCount><x path="Int"/></_animationCount>
		<_stopCount><x path="Int"/></_stopCount>
		<_jumpCount><x path="Int"/></_jumpCount>
		<_jumpPeak><x path="Int"/></_jumpPeak>
		<_movementSuccess><x path="Bool"/></_movementSuccess>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<x public="1">
			<x path="Int"/>
			<haxe_doc>[read-only]</haxe_doc>
		</x>
		<y public="1">
			<x path="Int"/>
			<haxe_doc>[read-only]</haxe_doc>
		</y>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<pos public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></pos>
		<posNt public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></posNt>
		<moveSpeed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the move speed of the game character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</moveSpeed>
		<setMoveSpeed public="1" set="method"><f a="moveSpeed">
	<x path="Int"/>
	<x path="Void"/>
</f></setMoveSpeed>
		<moveFrequency public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the move frequency of the character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</moveFrequency>
		<setMoveFrequency public="1" set="method"><f a="moveFrequency">
	<x path="Int"/>
	<x path="Void"/>
</f></setMoveFrequency>
		<opacity public="1" set="method"><f a=""><x path="Int"/></f></opacity>
		<setOpacity public="1" set="method"><f a="opacity">
	<x path="Int"/>
	<x path="Void"/>
</f></setOpacity>
		<blendMode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the blend mode of the character;
  * these are represented by Ints.
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</blendMode>
		<setBlendMode public="1" set="method">
			<f a="blendMode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the blend mode of the character;
  * these are represented by Ints.
  * @param {Int} blendMode
  * @memberof Game_CharacterBase</haxe_doc>
		</setBlendMode>
		<isNormalPriority public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is
  * normal priority; this means you can collide with them.
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isNormalPriority>
		<setPriorityType public="1" set="method"><f a="priorityType">
	<x path="Int"/>
	<x path="Void"/>
</f></setPriorityType>
		<isMoving public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is moving.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isMoving>
		<isJumping public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is jumping.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isJumping>
		<jumpHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the jump height of base character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</jumpHeight>
		<isStopping public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is stopping.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isStopping>
		<checkStop public="1" set="method"><f a="threshold">
	<x path="Int"/>
	<x path="Bool"/>
</f></checkStop>
		<resetStopCount public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the step count of the character.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</resetStopCount>
		<realMoveSpeed public="1" set="method"><f a=""><x path="Int"/></f></realMoveSpeed>
		<distancePerFrame public="1" set="method"><f a=""><x path="Int"/></f></distancePerFrame>
		<isDashing public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is dashing.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isDashing>
		<isDebugThrough public="1" set="method"><f a=""><x path="Bool"/></f></isDebugThrough>
		<straighten public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Straightens the character.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</straighten>
		<reverseDir public="1" set="method"><f a="d">
	<x path="Int"/>
	<x path="Int"/>
</f></reverseDir>
		<canPass public="1" set="method"><f a="x:y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></canPass>
		<canPassDiagonally public="1" set="method"><f a="x:y:horz:vert">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></canPassDiagonally>
		<isMapPassable public="1" set="method"><f a="x:y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isMapPassable>
		<isCollidedWithCharacters public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCollidedWithCharacters>
		<isCollidedWithEvents public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCollidedWithEvents>
		<isCollidedWithVehicles public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCollidedWithVehicles>
		<setPosition public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPosition>
		<copyPosition public="1" set="method"><f a="character">
	<c path="rm.objects.Game_Player"/>
	<x path="Void"/>
</f></copyPosition>
		<locate public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></locate>
		<direction public="1" set="method"><f a=""><x path="Int"/></f></direction>
		<setDirection public="1" set="method">
			<f a="d">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the direction of the character based on numpad
  * directions.
  * @param {Int} d
  * @memberof Game_CharacterBase</haxe_doc>
		</setDirection>
		<isTile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is a tile; these
  * are events without character sprites.
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isTile>
		<isObjectCharacter public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is an object character;
  * these are events with character sprites.
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isObjectCharacter>
		<shiftY public="1" set="method"><f a=""><x path="Int"/></f></shiftY>
		<scrolledX public="1" set="method"><f a=""><x path="Int"/></f></scrolledX>
		<scrolledY public="1" set="method"><f a=""><x path="Int"/></f></scrolledY>
		<screenX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the character's scrreen x position.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</screenX>
		<screenY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the character's screen y position.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</screenY>
		<screenZ public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the character's screen z position.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</screenZ>
		<isNearTheScreen public="1" set="method"><f a=""><x path="Bool"/></f></isNearTheScreen>
		<update public="1" set="method"><f a=""><x path="Void"/></f></update>
		<updateStop public="1" set="method"><f a=""><x path="Void"/></f></updateStop>
		<updateJump public="1" set="method"><f a=""><x path="Void"/></f></updateJump>
		<updateMove public="1" set="method"><f a=""><x path="Void"/></f></updateMove>
		<updateAnimation public="1" set="method"><f a=""><x path="Void"/></f></updateAnimation>
		<animationWait public="1" set="method"><f a=""><x path="Int"/></f></animationWait>
		<updateAnimationCount public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the character's animation count.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</updateAnimationCount>
		<updatePattern public="1" set="method"><f a=""><x path="Void"/></f></updatePattern>
		<maxPattern public="1" set="method"><f a=""><x path="Int"/></f></maxPattern>
		<pattern public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the pattern of the character; these are the walking
  * patterns.
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</pattern>
		<setPattern public="1" set="method">
			<f a="pattern">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the pattern of the character, given
  * a pattern Int.
  * @param {Int} pattern
  * @memberof Game_CharacterBase</haxe_doc>
		</setPattern>
		<isOriginalPattern public="1" set="method"><f a=""><x path="Bool"/></f></isOriginalPattern>
		<resetPattern public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the pattern of the character.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</resetPattern>
		<refreshBushDepth public="1" set="method"><f a=""><x path="Void"/></f></refreshBushDepth>
		<isOnLadder public="1" set="method"><f a=""><x path="Bool"/></f></isOnLadder>
		<isOnBush public="1" set="method"><f a=""><x path="Bool"/></f></isOnBush>
		<terrainTag public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the terrain tag of the character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</terrainTag>
		<regionId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the region id of the character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</regionId>
		<increaseSteps public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Increases the character steps.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</increaseSteps>
		<tileId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the tile id of character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</tileId>
		<characterName public="1" set="method"><f a=""><c path="String"/></f></characterName>
		<characterIndex public="1" set="method"><f a=""><x path="Int"/></f></characterIndex>
		<setImage public="1" set="method"><f a="characterName:characterIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setImage>
		<setTileImage public="1" set="method"><f a="tileId">
	<x path="Int"/>
	<x path="Void"/>
</f></setTileImage>
		<checkEventTriggerTouchFront public="1" set="method"><f a="d">
	<x path="Int"/>
	<x path="Void"/>
</f></checkEventTriggerTouchFront>
		<checkEventTriggerTouch public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></checkEventTriggerTouch>
		<isMovementSucceeded public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isMovementSucceeded>
		<setMovementSuccess public="1" set="method"><f a="success">
	<x path="Bool"/>
	<x path="Void"/>
</f></setMovementSuccess>
		<moveStraight public="1" set="method"><f a="d">
	<x path="Int"/>
	<x path="Void"/>
</f></moveStraight>
		<moveDiagonally public="1" set="method"><f a="horz:vert">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveDiagonally>
		<jump public="1" set="method"><f a="xPlus:yPlus">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></jump>
		<hasWalkAnime public="1" set="method"><f a=""><x path="Bool"/></f></hasWalkAnime>
		<setWalkAnime public="1" set="method"><f a="walkAnime">
	<x path="Bool"/>
	<x path="Void"/>
</f></setWalkAnime>
		<hasStepAnime public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character has step animation.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</hasStepAnime>
		<setStepAnime public="1" set="method"><f a="stepAnime">
	<x path="Bool"/>
	<x path="Void"/>
</f></setStepAnime>
		<isDirectionFixed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is set to a fixed direction.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isDirectionFixed>
		<setDirectionFix public="1" set="method">
			<f a="directionFix">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the character to be fixed in a specified direction
  * given a Bool value.
  * @param {Bool} directionFix
  * @memberof Game_CharacterBase</haxe_doc>
		</setDirectionFix>
		<isThrough public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the character is set to pass through.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isThrough>
		<setThrough public="1" set="method"><f a="through">
	<x path="Bool"/>
	<x path="Void"/>
</f></setThrough>
		<isTransparent public="1" set="method"><f a=""><x path="Bool"/></f></isTransparent>
		<bushDepth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the bush depth around the character.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</bushDepth>
		<setTransparent public="1" set="method"><f a="transparent">
	<x path="Bool"/>
	<x path="Void"/>
</f></setTransparent>
		<requestAnimation public="1" set="method">
			<f a="animationId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Requests an animation given the animation id.
  *
  * @param {Int} animationId
  * @memberof Game_CharacterBase</haxe_doc>
		</requestAnimation>
		<requestBalloon public="1" set="method">
			<f a="balloonId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Requests the balloon animation given the balloon id.
  *
  * @param {Int} balloonId
  * @memberof Game_CharacterBase</haxe_doc>
		</requestBalloon>
		<animationId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the animation id.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</animationId>
		<balloonId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the id of the balloon animation.
  *
  * @returns {Int}
  * @memberof Game_CharacterBase</haxe_doc>
		</balloonId>
		<startAnimation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the requested animation.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</startAnimation>
		<startBalloon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stars a balloon animation.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</startBalloon>
		<isAnimationPlaying public="1" set="method"><f a=""><x path="Bool"/></f></isAnimationPlaying>
		<isBalloonPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if a balloon animation is playing.
  *
  * @returns {Bool}
  * @memberof Game_CharacterBase</haxe_doc>
		</isBalloonPlaying>
		<endAnimation public="1" set="method"><f a=""><x path="Void"/></f></endAnimation>
		<endBalloon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Ends the balloon animation on the character.
  *
  * @memberof Game_CharacterBase</haxe_doc>
		</endBalloon>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The super class of Game Character. It handles basic
 * information such as coordinates, images, and more
 * shared by all characters.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_CharacterBase"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Character" params="" file="src/rm/objects/Game_Character.hx" extern="1">
		<extends path="rm.objects.Game_CharacterBase"/>
		<ROUTE_END public="1" static="1"><x path="Int"/></ROUTE_END>
		<ROUTE_MOVE_DOWN public="1" static="1"><x path="Int"/></ROUTE_MOVE_DOWN>
		<ROUTE_MOVE_LEFT public="1" static="1"><x path="Int"/></ROUTE_MOVE_LEFT>
		<ROUTE_MOVE_RIGHT public="1" static="1"><x path="Int"/></ROUTE_MOVE_RIGHT>
		<ROUTE_MOVE_UP public="1" static="1"><x path="Int"/></ROUTE_MOVE_UP>
		<ROUTE_MOVE_LOWER_L public="1" static="1"><x path="Int"/></ROUTE_MOVE_LOWER_L>
		<ROUTE_MOVE_LOWER_R public="1" static="1"><x path="Int"/></ROUTE_MOVE_LOWER_R>
		<ROUTE_MOVE_UPPER_L public="1" static="1"><x path="Int"/></ROUTE_MOVE_UPPER_L>
		<ROUTE_MOVE_UPPER_R public="1" static="1"><x path="Int"/></ROUTE_MOVE_UPPER_R>
		<ROUTE_MOVE_RANDOM public="1" static="1"><x path="Int"/></ROUTE_MOVE_RANDOM>
		<ROUTE_MOVE_TOWARD public="1" static="1"><x path="Int"/></ROUTE_MOVE_TOWARD>
		<ROUTE_MOVE_AWAY public="1" static="1"><x path="Int"/></ROUTE_MOVE_AWAY>
		<ROUTE_MOVE_FORWARD public="1" static="1"><x path="Int"/></ROUTE_MOVE_FORWARD>
		<ROUTE_MOVE_BACKWARD public="1" static="1"><x path="Int"/></ROUTE_MOVE_BACKWARD>
		<ROUTE_JUMP public="1" static="1"><x path="Int"/></ROUTE_JUMP>
		<ROUTE_WAIT public="1" static="1"><x path="Int"/></ROUTE_WAIT>
		<ROUTE_TURN_DOWN public="1" static="1"><x path="Int"/></ROUTE_TURN_DOWN>
		<ROUTE_TURN_LEFT public="1" static="1"><x path="Int"/></ROUTE_TURN_LEFT>
		<ROUTE_TURN_RIGHT public="1" static="1"><x path="Int"/></ROUTE_TURN_RIGHT>
		<ROUTE_TURN_UP public="1" static="1"><x path="Int"/></ROUTE_TURN_UP>
		<ROUTE_TURN_90D_R public="1" static="1"><x path="Int"/></ROUTE_TURN_90D_R>
		<ROUTE_TURN_90D_L public="1" static="1"><x path="Int"/></ROUTE_TURN_90D_L>
		<ROUTE_TURN_180D public="1" static="1"><x path="Int"/></ROUTE_TURN_180D>
		<ROUTE_TURN_90D_R_L public="1" static="1"><x path="Int"/></ROUTE_TURN_90D_R_L>
		<ROUTE_TURN_RANDOM public="1" static="1"><x path="Int"/></ROUTE_TURN_RANDOM>
		<ROUTE_TURN_TOWARD public="1" static="1"><x path="Int"/></ROUTE_TURN_TOWARD>
		<ROUTE_TURN_AWAY public="1" static="1"><x path="Int"/></ROUTE_TURN_AWAY>
		<ROUTE_SWITCH_ON public="1" static="1"><x path="Int"/></ROUTE_SWITCH_ON>
		<ROUTE_SWITCH_OFF public="1" static="1"><x path="Int"/></ROUTE_SWITCH_OFF>
		<ROUTE_CHANGE_SPEED public="1" static="1"><x path="Int"/></ROUTE_CHANGE_SPEED>
		<ROUTE_CHANGE_FREQ public="1" static="1"><x path="Int"/></ROUTE_CHANGE_FREQ>
		<ROUTE_WALK_ANIME_ON public="1" static="1"><x path="Int"/></ROUTE_WALK_ANIME_ON>
		<ROUTE_WALK_ANIME_OFF public="1" static="1"><x path="Int"/></ROUTE_WALK_ANIME_OFF>
		<ROUTE_STEP_ANIME_ON public="1" static="1"><x path="Int"/></ROUTE_STEP_ANIME_ON>
		<ROUTE_STEP_ANIME_OFF public="1" static="1"><x path="Int"/></ROUTE_STEP_ANIME_OFF>
		<ROUTE_DIR_FIX_ON public="1" static="1"><x path="Int"/></ROUTE_DIR_FIX_ON>
		<ROUTE_DIR_FIX_OFF public="1" static="1"><x path="Int"/></ROUTE_DIR_FIX_OFF>
		<ROUTE_THROUGH_ON public="1" static="1"><x path="Int"/></ROUTE_THROUGH_ON>
		<ROUTE_THROUGH_OFF public="1" static="1"><x path="Int"/></ROUTE_THROUGH_OFF>
		<ROUTE_TRANSPARENT_ON public="1" static="1"><x path="Int"/></ROUTE_TRANSPARENT_ON>
		<ROUTE_TRANSPARENT_OFF public="1" static="1"><x path="Int"/></ROUTE_TRANSPARENT_OFF>
		<ROUTE_CHANGE_IMAGE public="1" static="1"><x path="Int"/></ROUTE_CHANGE_IMAGE>
		<ROUTE_CHANGE_OPACITY public="1" static="1"><x path="Int"/></ROUTE_CHANGE_OPACITY>
		<ROUTE_CHANGE_BLEND_MODE public="1" static="1"><x path="Int"/></ROUTE_CHANGE_BLEND_MODE>
		<ROUTE_PLAY_SE public="1" static="1"><x path="Int"/></ROUTE_PLAY_SE>
		<ROUTE_SCRIPT public="1" static="1"><x path="Int"/></ROUTE_SCRIPT>
		<_moveRouteForcing><x path="Bool"/></_moveRouteForcing>
		<_moveRoute><t path="rm.types.MoveRoute"/></_moveRoute>
		<_moveRouteIndex><x path="Int"/></_moveRouteIndex>
		<_originalMoveRoute><t path="rm.types.MoveRoute"/></_originalMoveRoute>
		<_originalMoveRouteIndex><x path="Int"/></_originalMoveRouteIndex>
		<_waitCount><x path="Int"/></_waitCount>
		<initMembers public="1" set="method" override="1"><f a=""><x path="Void"/></f></initMembers>
		<memorizeMoveRoute public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Memorizes the movement route.
  *
  * @memberof Game_Character</haxe_doc>
		</memorizeMoveRoute>
		<restoreMoveRoute public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Restores the original movement route.
  *
  * @memberof Game_Character</haxe_doc>
		</restoreMoveRoute>
		<isMoveRouteForcing public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the move route is being forced.
  *
  * @returns {Bool}
  * @memberof Game_Character</haxe_doc>
		</isMoveRouteForcing>
		<setMoveRoute public="1" set="method">
			<f a="moveRoute">
				<t path="rm.types.MoveRoute"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the move route of the game character.
  *
  * @param {RPG.MoveRoute} moveRoute
  * @memberof Game_Character</haxe_doc>
		</setMoveRoute>
		<forceMoveRoute public="1" set="method">
			<f a="moveRoute">
				<t path="rm.types.MoveRoute"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Forces the move route of the game character.
  *
  * @param {RPG.MoveRoute} moveRoute
  * @memberof Game_Character</haxe_doc>
		</forceMoveRoute>
		<updateStop public="1" set="method" override="1"><f a=""><x path="Void"/></f></updateStop>
		<updateRoutineMove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the game character's move routine.
  *
  * @memberof Game_Character</haxe_doc>
		</updateRoutineMove>
		<processMoveCommand public="1" set="method">
			<f a="command">
				<t path="rm.types.MoveCommand"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes the given move commands.
  *
  * @param {RPG.MoveCommand} command
  * @memberof Game_Character</haxe_doc>
		</processMoveCommand>
		<deltaXFrom public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></deltaXFrom>
		<deltaYFrom public="1" set="method"><f a="y">
	<x path="Int"/>
	<x path="Int"/>
</f></deltaYFrom>
		<moveRandom public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Move's the game character at random.
  *
  * @memberof Game_Character</haxe_doc>
		</moveRandom>
		<moveTowardCharacter public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the game character toward the other game character.
  *
  * @param {Game_Character} character
  * @memberof Game_Character</haxe_doc>
		</moveTowardCharacter>
		<moveAwayFromCharacter public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the game character away from the other game character.
  *
  * @param {Game_Character} character
  * @memberof Game_Character</haxe_doc>
		</moveAwayFromCharacter>
		<turnTowardCharacter public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Turns the game character toward the other game character.
  *
  * @param {Game_Character} character
  * @memberof Game_Character</haxe_doc>
		</turnTowardCharacter>
		<turnAwayFromCharacter public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Turns the game character away from the other game character.
  *
  * @param {Game_Character} character
  * @memberof Game_Character</haxe_doc>
		</turnAwayFromCharacter>
		<turnTowardPlayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Turns the game character toward the player.
  *
  * @memberof Game_Character</haxe_doc>
		</turnTowardPlayer>
		<turnAwayFromPlayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Turns the game character away from the player.
  *
  * @memberof Game_Character</haxe_doc>
		</turnAwayFromPlayer>
		<moveTowardPlayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the game character toward the player.
  *
  * @memberof Game_Character</haxe_doc>
		</moveTowardPlayer>
		<moveAwayFromPlayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the game character away from the player.
  *
  * @memberof Game_Character</haxe_doc>
		</moveAwayFromPlayer>
		<moveForward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the game character forward.
  *
  * @memberof Game_Character</haxe_doc>
		</moveForward>
		<moveBackward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the game character backward.
  *
  * @memberof Game_Character</haxe_doc>
		</moveBackward>
		<processRouteEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handles the end of the move route.
  *
  * @memberof Game_Character</haxe_doc>
		</processRouteEnd>
		<advanceMoveRouteIndex public="1" set="method"><f a=""><x path="Void"/></f></advanceMoveRouteIndex>
		<turnRight90 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Turns the game character right by 90 degrees.
  *
  * @memberof Game_Character</haxe_doc>
		</turnRight90>
		<turnLeft90 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Turns the game character left by 90 degrees.
  *
  * @memberof Game_Character</haxe_doc>
		</turnLeft90>
		<turn180 public="1" set="method"><f a=""><x path="Void"/></f></turn180>
		<turnRightOrLeft90 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Turns the game character or left by 90 degrees.
  *
  * @memberof Game_Character</haxe_doc>
		</turnRightOrLeft90>
		<turnRandom public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Turns the game character at random.
  *
  * @memberof Game_Character</haxe_doc>
		</turnRandom>
		<swap public="1" set="method"><f a="character">
	<c path="rm.objects.Game_Character"/>
	<x path="Void"/>
</f></swap>
		<findDirectionTo public="1" set="method"><f a="goalX:goalY">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></findDirectionTo>
		<searchLimit public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the search limit for path finding.
  *
  * @returns {Int}
  * @memberof Game_Character</haxe_doc>
		</searchLimit>
		<haxe_doc>* Super class of Game_Player, Game_Follower, Game_Vehicle,
 * and Game_Event.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Character"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_CommonEvent" params="" file="src/rm/objects/Game_CommonEvent.hx" extern="1">
		<_commonEventId><x path="Int"/></_commonEventId>
		<_interpreter><c path="rm.objects.Game_Interpreter"/></_interpreter>
		<initialize public="1" set="method"><f a="commonEventId">
	<x path="Int"/>
	<x path="Void"/>
</f></initialize>
		<event public="1" set="method">
			<f a=""><t path="rm.types.CommonEvent"/></f>
			<haxe_doc>* Returns the common event information from the database.
  *
  * @returns {CommonEvent}
  * @memberof Game_CommonEvent</haxe_doc>
		</event>
		<list public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.EventCommand"/></c></f>
			<haxe_doc><![CDATA[* Returns the common event's list of event commands.
  *
  * @returns {Array<EventCommand>}
  * @memberof Game_CommonEvent]]></haxe_doc>
		</list>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the common event.
  *
  * @memberof Game_CommonEvent</haxe_doc>
		</refresh>
		<isActive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the common event is active.
  *
  * @returns {boolean}
  * @memberof Game_CommonEvent</haxe_doc>
		</isActive>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the common event.
  *
  * @memberof Game_CommonEvent</haxe_doc>
		</update>
		<new public="1" set="method"><f a="commonEventId">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_CommonEvent"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Enemy" params="" file="src/rm/objects/Game_Enemy.hx" extern="1">
		<extends path="rm.objects.Game_Battler"/>
		<_enemyId><x path="Int"/></_enemyId>
		<_letter><c path="String"/></_letter>
		<_plural><x path="Bool"/></_plural>
		<_screenX><x path="Int"/></_screenX>
		<_screenY><x path="Int"/></_screenY>
		<initialize public="1" set="method" override="1"><f a="enemyId:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initialize>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<setup public="1" set="method"><f a="enemyId:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<friendsUnit public="1" set="method">
			<f a=""><c path="rm.objects.Game_Troop"/></f>
			<haxe_doc>* Returns the other troops in the enemy team.
  *
  * @returns {Game_Troop}
  * @memberof Game_Enemy</haxe_doc>
		</friendsUnit>
		<opponentsUnit public="1" set="method">
			<f a=""><c path="rm.objects.Game_Party"/></f>
			<haxe_doc>* Returns the game party.
  *
  * @returns {Game_Party}
  * @memberof Game_Enemy</haxe_doc>
		</opponentsUnit>
		<isBattleMember public="1" set="method"><f a=""><x path="Bool"/></f></isBattleMember>
		<enemyId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the enemy id.
  *
  * @returns {number}
  * @memberof Game_Enemy</haxe_doc>
		</enemyId>
		<enemy public="1" set="method">
			<f a=""><t path="rm.types.Enemy"/></f>
			<haxe_doc>* Returns the enemy information from the database.
  *
  * @returns {RPG.Enemy}
  * @memberof Game_Enemy</haxe_doc>
		</enemy>
		<exp public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns the enemy's exp amount.
  *
  * @memberof Game_Enemy</haxe_doc>
		</exp>
		<gold public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns enemy's given gold.
  *
  * @memberof Game_Enemy</haxe_doc>
		</gold>
		<makeDropItems public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.BaseItem"/></c></f>
			<haxe_doc><![CDATA[* Creates the drop items for the enemy specified by the database.
  *
  * @returns {Array<RPG.BaseItem>}
  * @memberof Game_Enemy]]></haxe_doc>
		</makeDropItems>
		<dropItemRate public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the item drop rate of the enemy.
  *
  * @returns {number}
  * @memberof Game_Enemy</haxe_doc>
		</dropItemRate>
		<itemObject public="1" set="method"><f a="kind:dataId">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></itemObject>
		<isSpriteVisible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the enemy sprite is visible.
  *
  * @returns {boolean}
  * @memberof Game_Enemy</haxe_doc>
		</isSpriteVisible>
		<screenX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns enemy screen X coordinate.
  *
  * @returns {number}
  * @memberof Game_Enemy</haxe_doc>
		</screenX>
		<screenY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns enemy screen Y position.
  *
  * @returns {number}
  * @memberof Game_Enemy</haxe_doc>
		</screenY>
		<battlerHue public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the hue of the enemy.
  *
  * @returns {number}
  * @memberof Game_Enemy</haxe_doc>
		</battlerHue>
		<originalName public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the enemy original name.
  *
  * @returns {string}
  * @memberof Game_Enemy</haxe_doc>
		</originalName>
		<isLetterEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isLetterEmpty>
		<setLetter public="1" set="method"><f a="letter">
	<c path="String"/>
	<x path="Void"/>
</f></setLetter>
		<setPlural public="1" set="method"><f a="plural">
	<x path="Bool"/>
	<x path="Void"/>
</f></setPlural>
		<transform public="1" set="method">
			<f a="enemyId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Transform the enemy into another enemy based on id.
  *
  * @param {number} enemyId
  * @memberof Game_Enemy</haxe_doc>
		</transform>
		<meetsCondition public="1" set="method"><f a="action">
	<t path="rm.types.EnemyAction"/>
	<x path="Bool"/>
</f></meetsCondition>
		<meetsTurnCondition public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></meetsTurnCondition>
		<meetsHpCondition public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></meetsHpCondition>
		<meetsMpCondition public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></meetsMpCondition>
		<meetsStateCondition public="1" set="method"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></meetsStateCondition>
		<meetsPartyLevelCondition public="1" set="method"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></meetsPartyLevelCondition>
		<meetsSwitchCondition public="1" set="method"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></meetsSwitchCondition>
		<isActionValid public="1" set="method">
			<f a="action">
				<t path="rm.types.EnemyAction"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the enemy action is valid.
  *
  * @param {RPG.Enemy.Action} action
  * @returns {boolean}
  * @memberof Game_Enemy</haxe_doc>
		</isActionValid>
		<selectAction public="1" set="method"><f a="actionList:ratingZero">
	<c path="Array"><t path="rm.types.EnemyAction"/></c>
	<x path="Float"/>
	<t path="rm.types.EnemyAction"/>
</f></selectAction>
		<selectAllActions public="1" set="method"><f a="actionList">
	<c path="Array"><t path="rm.types.EnemyAction"/></c>
	<x path="Void"/>
</f></selectAllActions>
		<new public="1" set="method"><f a="enemyId:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Game_Enemy
 *
 * The game object declare class for an enemy.
 * @class Game_Enemy</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Enemy"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Event" params="" file="src/rm/objects/Game_Event.hx" extern="1">
		<extends path="rm.objects.Game_Character"/>
		<_mapId><x path="Int"/></_mapId>
		<_eventId><x path="Int"/></_eventId>
		<_moveType><x path="Int"/></_moveType>
		<_trigger><x path="Int"/></_trigger>
		<_starting><x path="Bool"/></_starting>
		<_erased><x path="Bool"/></_erased>
		<_pageIndex><x path="Int"/></_pageIndex>
		<_originalPattern><x path="Int"/></_originalPattern>
		<_originalDirection><x path="Int"/></_originalDirection>
		<_prelockDirection><x path="Int"/></_prelockDirection>
		<_locked><x path="Bool"/></_locked>
		<initialize public="1" set="method" override="1"><f a="mapId:eventId">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initialize>
		<initMembers public="1" set="method" override="1"><f a=""><x path="Void"/></f></initMembers>
		<eventId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the event id of the game event.
  *
  * @returns {Int}
  * @memberof Game_Event</haxe_doc>
		</eventId>
		<event public="1" set="method">
			<f a=""><t path="rm.types.Event"/></f>
			<haxe_doc>* Returns the event database information.
  *
  * @returns {RPG.Event}
  * @memberof Game_Event</haxe_doc>
		</event>
		<page public="1" set="method">
			<f a=""><t path="rm.types.EventPage"/></f>
			<haxe_doc>* Returns the event page created in the database.
  *
  * @returns {RPG.EventPage}
  * @memberof Game_Event</haxe_doc>
		</page>
		<list public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.EventCommand"/></c></f>
			<haxe_doc><![CDATA[* Returns the list of event commands on the current page of the game event.
  *
  * @returns {Array<RPG.EventCommand>}
  * @memberof Game_Event]]></haxe_doc>
		</list>
		<isCollidedWithCharacters public="1" set="method" override="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCollidedWithCharacters>
		<isCollidedWithEvents public="1" set="method" override="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCollidedWithEvents>
		<isCollidedWithPlayerCharacters public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the event has collided with the player character
  * at the specified x and y coordinates.
  * @param {Int} x
  * @param {Int} y
  * @returns {Bool}
  * @memberof Game_Event</haxe_doc>
		</isCollidedWithPlayerCharacters>
		<lock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Locks the game event.
  *
  * @memberof Game_Event</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Unlocks the game eveent.
  *
  * @memberof Game_Event</haxe_doc>
		</unlock>
		<updateStop public="1" set="method" override="1"><f a=""><x path="Void"/></f></updateStop>
		<updateSelfMovement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the self movement of the game event.
  *
  * @memberof Game_Event</haxe_doc>
		</updateSelfMovement>
		<stopCountThreshold public="1" set="method"><f a=""><x path="Int"/></f></stopCountThreshold>
		<moveTypeRandom public="1" set="method"><f a=""><x path="Void"/></f></moveTypeRandom>
		<moveTypeTowardPlayer public="1" set="method"><f a=""><x path="Void"/></f></moveTypeTowardPlayer>
		<isNearThePlayer public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game event is near the player.
  *
  * @returns {Bool}
  * @memberof Game_Event</haxe_doc>
		</isNearThePlayer>
		<moveTypeCustom public="1" set="method"><f a=""><x path="Void"/></f></moveTypeCustom>
		<isStarting public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the event is staring.
  *
  * @returns {Bool}
  * @memberof Game_Event</haxe_doc>
		</isStarting>
		<clearStartingFlag public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the starting flag.
  *
  * @memberof Game_Event</haxe_doc>
		</clearStartingFlag>
		<isTriggerIn public="1" set="method"><f a="triggers">
	<c path="Array"><x path="Int"/></c>
	<x path="Bool"/>
</f></isTriggerIn>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the game event.
  *
  * @memberof Game_Event</haxe_doc>
		</start>
		<erase public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Erases the event.
  *
  * @memberof Game_Event</haxe_doc>
		</erase>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the game event.
  *
  * @memberof Game_Event</haxe_doc>
		</refresh>
		<findProperPageIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Finds the proper page index of the game event for
  * event command processing.
  * @returns {Int}
  * @memberof Game_Event</haxe_doc>
		</findProperPageIndex>
		<meetsConditions public="1" set="method"><f a="page">
	<t path="rm.types.EventPage"/>
	<x path="Bool"/>
</f></meetsConditions>
		<setupPage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the event page.
  *
  * @memberof Game_Event</haxe_doc>
		</setupPage>
		<clearPageSettings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the page settings of the game event.
  *
  * @memberof Game_Event</haxe_doc>
		</clearPageSettings>
		<setupPageSettings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the event page settings.
  *
  * @memberof Game_Event</haxe_doc>
		</setupPageSettings>
		<isOriginalPattern public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isOriginalPattern>
		<resetPattern public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the pattern of the game event.
  *
  * @memberof Game_Event</haxe_doc>
		</resetPattern>
		<checkEventTriggerAuto public="1" set="method"><f a=""><x path="Void"/></f></checkEventTriggerAuto>
		<update public="1" set="method" override="1"><f a=""><x path="Void"/></f></update>
		<updateParallel public="1" set="method"><f a=""><x path="Void"/></f></updateParallel>
		<locate public="1" set="method" override="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></locate>
		<forceMoveRoute public="1" set="method" override="1">
			<f a="moveRoute">
				<t path="rm.types.MoveRoute"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Forces the game event to move along the specified route.
  *
  * @param {RPG.MoveRoute} moveRoute
  * @memberof Game_Event</haxe_doc>
		</forceMoveRoute>
		<new public="1" set="method"><f a="mapId:eventId">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* THe game object class for an event. It contains functionality
 * for event page switching and running parallel process events.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Event"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Follower" params="" file="src/rm/objects/Game_Follower.hx" extern="1">
		<extends path="rm.objects.Game_Character"/>
		<_memberIndex><x path="Int"/></_memberIndex>
		<refresh public="1" set="method"><f a=""><x path="Void"/></f></refresh>
		<actor public="1" set="method">
			<f a=""><c path="rm.objects.Game_Actor"/></f>
			<haxe_doc>* Returns the current actor.
  *
  * @returns {Game_Actor}
  * @memberof Game_Follower</haxe_doc>
		</actor>
		<isVisible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the follower is visible.
  *
  * @returns {Bool}
  * @memberof Game_Follower</haxe_doc>
		</isVisible>
		<update public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the game follower.
  *
  * @memberof Game_Follower</haxe_doc>
		</update>
		<chaseCharacter public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Has the follower chase a game actor.
  *
  * @param {Game_Character} character
  * @memberof Game_Follower</haxe_doc>
		</chaseCharacter>
		<new public="1" set="method"><f a="memberIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Game_Follower
 *
 * The game object declare class for a follower. A follower is an allied character,
 * other than the front character, displayed in the party.
 * @class Game_Follower</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Follower"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Followers" params="" file="src/rm/objects/Game_Followers.hx" extern="1">
		<_visible><x path="Bool"/></_visible>
		<_gathering><x path="Bool"/></_gathering>
		<_data><c path="Array"><c path="rm.objects.Game_Follower"/></c></_data>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<isVisible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the followers are visible.
  *
  * @returns {Bool}
  * @memberof Game_Followers</haxe_doc>
		</isVisible>
		<show public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows  the followers.
  *
  * @memberof Game_Followers</haxe_doc>
		</show>
		<hide public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the followers.
  *
  * @memberof Game_Followers</haxe_doc>
		</hide>
		<follower public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="rm.objects.Game_Follower"/>
			</f>
			<haxe_doc>* Returns the followers at the specified index.
  *
  * @param {number} index
  * @returns {Game_Follower}
  * @memberof Game_Followers</haxe_doc>
		</follower>
		<forEach public="1" set="method"><f a="callback:thisObject">
	<f a=""><x path="Void"/></f>
	<x path="Any"/>
	<x path="Void"/>
</f></forEach>
		<reverseEach public="1" set="method"><f a="callback:thisObject">
	<f a=""><x path="Void"/></f>
	<x path="Any"/>
	<x path="Void"/>
</f></reverseEach>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the game followers.
  *
  * @memberof Game_Followers</haxe_doc>
		</refresh>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the game followers.
  *
  * @memberof Game_Followers</haxe_doc>
		</update>
		<updateMove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the movement of game followers.
  *
  * @memberof Game_Followers</haxe_doc>
		</updateMove>
		<jumpAll public="1" set="method"><f a=""><x path="Void"/></f></jumpAll>
		<synchronize public="1" set="method"><f a="x:y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></synchronize>
		<gather public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Gathers the followers.
  *
  * @memberof Game_Followers</haxe_doc>
		</gather>
		<areGathering public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the followers are gathering.
  *
  * @returns {Bool}
  * @memberof Game_Followers</haxe_doc>
		</areGathering>
		<visibleFollowers public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Follower"/></c></f>
			<haxe_doc><![CDATA[* Returns the visible followers.
  *
  * @returns {Array<Game_Follower>}
  * @memberof Game_Followers]]></haxe_doc>
		</visibleFollowers>
		<areMoving public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the followers are moving.
  *
  * @returns {Bool}
  * @memberof Game_Followers</haxe_doc>
		</areMoving>
		<areGathered public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the followers are gathered.
  *
  * @returns {Bool}
  * @memberof Game_Followers</haxe_doc>
		</areGathered>
		<isSomeoneCollided public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the specified follower is collided at the specified x and y
  *coordinate.
  *
  * @param {number} x
  * @param {number} y
  * @returns {Bool}
  * @memberof Game_Followers</haxe_doc>
		</isSomeoneCollided>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Game_Followers
 *
 * The wrapper declare class for a follower array.
 * @class Game_Followers</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Followers"</e></m>
		</meta>
	</class>
	<typedef path="rm.objects.Branch" params="" file="src/rm/objects/Game_Interpreter.hx" module="rm.objects.Game_Interpreter"><a><Indent><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<x path="Bool"/>
</x></Indent></a></typedef>
	<class path="rm.objects.Game_Interpreter" params="" file="src/rm/objects/Game_Interpreter.hx" extern="1">
		<_depth><x path="Int"/></_depth>
		<_branch><c path="js.lib.Object"/></_branch>
		<_params><c path="Array"><x path="Any"/></c></_params>
		<_indent><x path="Int"/></_indent>
		<_frameCount><x path="Int"/></_frameCount>
		<_freezeChecker><x path="Int"/></_freezeChecker>
		<_mapId><x path="Int"/></_mapId>
		<_eventId><x path="Int"/></_eventId>
		<_list><c path="Array"><t path="rm.types.EventCommand"/></c></_list>
		<_index><x path="Int"/></_index>
		<_waitCount><x path="Int"/></_waitCount>
		<_waitMode><c path="String"/></_waitMode>
		<_comments><c path="String"/></_comments>
		<_character><c path="rm.objects.Game_Event"/></_character>
		<_childInterpreter><c path="rm.objects.Game_Interpreter"/></_childInterpreter>
		<checkOverflow public="1" set="method"><f a=""><x path="Void"/></f></checkOverflow>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the interpreter.
  *
  * @memberof Game_Interpreter</haxe_doc>
		</clear>
		<setup public="1" set="method">
			<f a="list:eventId">
				<c path="Array"><t path="rm.types.EventCommand"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets up the interpreter with the list of event commands, and the given
  * event Id.
  *
  * @param {Array<RPG.EventCommand>} list
  * @param {Int} eventId
  * @memberof Game_Interpreter]]></haxe_doc>
		</setup>
		<eventId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the currrent eventId.
  *
  * @returns {Int}
  * @memberof Game_Interpreter</haxe_doc>
		</eventId>
		<isOnCurrentMap public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the event is on the current map.
  *
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</isOnCurrentMap>
		<setupReservedCommonEvent public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true after setting up the reserved common event.
  *
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</setupReservedCommonEvent>
		<isRunning public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the interpreter is running.
  *
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</isRunning>
		<update public="1" set="method"><f a=""><x path="Void"/></f></update>
		<updateChild public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Updates the child game interpreter.
  *
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</updateChild>
		<updateWait public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Updates the wait of the game interpreter.
  *
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</updateWait>
		<updateWaitCount public="1" set="method"><f a=""><x path="Bool"/></f></updateWaitCount>
		<updateWaitMode public="1" set="method"><f a=""><x path="Bool"/></f></updateWaitMode>
		<setWaitMode public="1" set="method">
			<f a="waitMode">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the wait mode of the interpreter.
  *
  * @param {String} waitMode
  * @memberof Game_Interpreter</haxe_doc>
		</setWaitMode>
		<wait public="1" set="method">
			<f a="duration">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* sets a specified wait duration for the interpreter.
  *
  * @param {Int} duration
  * @memberof Game_Interpreter</haxe_doc>
		</wait>
		<fadeSpeed public="1" set="method"><f a=""><x path="Int"/></f></fadeSpeed>
		<executeCommand public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Executes the event command;
  * returns true or false based on execution.
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</executeCommand>
		<checkFreeze public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks if the interpreter has frozen.
  *
  * @returns {Bool}
  * @memberof Game_Interpreter</haxe_doc>
		</checkFreeze>
		<terminate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Terminates the game interpreter.
  *
  * @memberof Game_Interpreter</haxe_doc>
		</terminate>
		<skipBranch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Skips a conditional branch on the interpreter.
  *
  * @memberof Game_Interpreter</haxe_doc>
		</skipBranch>
		<currentCommand public="1" set="method">
			<f a=""><t path="rm.types.EventCommand"/></f>
			<haxe_doc>* Returns the current event command.
  *
  * @returns {RPG.EventCommand}
  * @memberof Game_Interpreter</haxe_doc>
		</currentCommand>
		<nextEventCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the next event code.
  *
  * @returns {Int}
  * @memberof Game_Interpreter</haxe_doc>
		</nextEventCode>
		<iterateActorId public="1" set="method"><f a="param:callback">
	<x path="Int"/>
	<f a="actor">
		<c path="rm.objects.Game_Actor"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iterateActorId>
		<iterateActorEx public="1" set="method"><f a="param1:param2:callback">
	<x path="Int"/>
	<x path="Int"/>
	<f a="actor">
		<c path="rm.objects.Game_Actor"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iterateActorEx>
		<iterateActorIndex public="1" set="method"><f a="param:callback">
	<x path="Int"/>
	<f a="actor">
		<c path="rm.objects.Game_Actor"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iterateActorIndex>
		<iterateEnemyIndex public="1" set="method"><f a="param:callback">
	<x path="Int"/>
	<f a="enemt">
		<c path="rm.objects.Game_Enemy"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iterateEnemyIndex>
		<iterateBattler public="1" set="method"><f a="param1:param2:callback">
	<x path="Int"/>
	<x path="Int"/>
	<f a="battler">
		<c path="rm.objects.Game_Battler"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iterateBattler>
		<character public="1" set="method"><f a="param">
	<x path="Int"/>
	<c path="rm.objects.Game_Character"/>
</f></character>
		<operateValue public="1" set="method"><f a="operation:operandType:operand">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></operateValue>
		<changeHp public="1" set="method"><f a="target:value:allowDeath">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></changeHp>
		<command101 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Text</haxe_doc>
		</command101>
		<command102 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Choices</haxe_doc>
		</command102>
		<setupChoices public="1" set="method"><f a="params">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></setupChoices>
		<command402 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* When [**]</haxe_doc>
		</command402>
		<command403 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* When Cancel</haxe_doc>
		</command403>
		<command103 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Input Number</haxe_doc>
		</command103>
		<setupNumInput public="1" set="method">
			<f a="params">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>*
  * @param params</haxe_doc>
		</setupNumInput>
		<command104 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Select Item</haxe_doc>
		</command104>
		<setupItemChoice public="1" set="method"><f a="params">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></setupItemChoice>
		<command105 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Scrolling Text</haxe_doc>
		</command105>
		<command108 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Comment</haxe_doc>
		</command108>
		<command111 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Conditional Branch</haxe_doc>
		</command111>
		<command411 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Else</haxe_doc>
		</command411>
		<command112 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Loop</haxe_doc>
		</command112>
		<command413 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Repeat Above</haxe_doc>
		</command413>
		<command113 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Break Loop</haxe_doc>
		</command113>
		<command115 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Exit Event Processing</haxe_doc>
		</command115>
		<command117 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Common Event</haxe_doc>
		</command117>
		<setupChild public="1" set="method"><f a="list:eventId">
	<c path="Array"><t path="rm.types.EventCommand"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setupChild>
		<command118 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Label</haxe_doc>
		</command118>
		<command119 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Jump to Label</haxe_doc>
		</command119>
		<jumpTo public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></jumpTo>
		<command121 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Control Switches</haxe_doc>
		</command121>
		<command122 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Control Variables</haxe_doc>
		</command122>
		<gameDataOperand public="1" set="method"><f a="type:param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gameDataOperand>
		<operateVariable public="1" set="method"><f a="variableId:operationType:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></operateVariable>
		<command123 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Control Self Switch</haxe_doc>
		</command123>
		<command124 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Control Timer</haxe_doc>
		</command124>
		<command125 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Gold</haxe_doc>
		</command125>
		<command126 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Items</haxe_doc>
		</command126>
		<command127 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Weapons</haxe_doc>
		</command127>
		<command128 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Armors</haxe_doc>
		</command128>
		<command129 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Party Member</haxe_doc>
		</command129>
		<command132 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Battle BGM</haxe_doc>
		</command132>
		<command133 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Victory ME</haxe_doc>
		</command133>
		<command134 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Save Access</haxe_doc>
		</command134>
		<command135 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Menu Access</haxe_doc>
		</command135>
		<command136 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Encounter Disable</haxe_doc>
		</command136>
		<command137 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Formation Access</haxe_doc>
		</command137>
		<command138 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Window Color</haxe_doc>
		</command138>
		<command139 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Defeat ME</haxe_doc>
		</command139>
		<command140 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Vehicle BGM</haxe_doc>
		</command140>
		<command201 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Transfer Player</haxe_doc>
		</command201>
		<command202 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Set Vehicle Location</haxe_doc>
		</command202>
		<command203 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Set Event Location</haxe_doc>
		</command203>
		<command204 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Scroll Map</haxe_doc>
		</command204>
		<command205 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Set Movement Route</haxe_doc>
		</command205>
		<command206 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Getting On and Off Vehicles</haxe_doc>
		</command206>
		<command211 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Transparency</haxe_doc>
		</command211>
		<command212 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Animation</haxe_doc>
		</command212>
		<command213 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Balloon Icon</haxe_doc>
		</command213>
		<command214 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Erase Event</haxe_doc>
		</command214>
		<command216 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Player Followers</haxe_doc>
		</command216>
		<command217 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Gather Followers</haxe_doc>
		</command217>
		<command221 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Fadeout Screen</haxe_doc>
		</command221>
		<command222 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Fadein Screen</haxe_doc>
		</command222>
		<command223 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Tint Screen</haxe_doc>
		</command223>
		<command224 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Flash Screen</haxe_doc>
		</command224>
		<command225 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Shake Screen</haxe_doc>
		</command225>
		<command230 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Wait</haxe_doc>
		</command230>
		<command231 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Picture</haxe_doc>
		</command231>
		<command232 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Move Picture</haxe_doc>
		</command232>
		<command233 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Rotate Picture</haxe_doc>
		</command233>
		<command234 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Tint Picture</haxe_doc>
		</command234>
		<command235 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Erase Picture</haxe_doc>
		</command235>
		<command236 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Set Weather Effect</haxe_doc>
		</command236>
		<command241 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Play BGM</haxe_doc>
		</command241>
		<command242 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Fadeout BGM</haxe_doc>
		</command242>
		<command243 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Save BGM</haxe_doc>
		</command243>
		<command244 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Resume BGM</haxe_doc>
		</command244>
		<command245 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Play BGS</haxe_doc>
		</command245>
		<command246 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Fadeout BGS</haxe_doc>
		</command246>
		<command249 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Play ME</haxe_doc>
		</command249>
		<command250 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Play SE</haxe_doc>
		</command250>
		<command251 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Stop SE</haxe_doc>
		</command251>
		<command261 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Play Movie</haxe_doc>
		</command261>
		<videoFileExt public="1" set="method"><f a=""><c path="String"/></f></videoFileExt>
		<command281 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Map Name Display</haxe_doc>
		</command281>
		<command282 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Tileset</haxe_doc>
		</command282>
		<command283 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Battle Back</haxe_doc>
		</command283>
		<command284 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Parallax</haxe_doc>
		</command284>
		<command285 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Get Location Info</haxe_doc>
		</command285>
		<command301 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Battle Processing</haxe_doc>
		</command301>
		<command601 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* If Win</haxe_doc>
		</command601>
		<command602 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* If Escape</haxe_doc>
		</command602>
		<command603 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* If Lose</haxe_doc>
		</command603>
		<command302 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Shop Processing</haxe_doc>
		</command302>
		<command303 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Name Input Processing</haxe_doc>
		</command303>
		<command311 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change HP</haxe_doc>
		</command311>
		<command312 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change MP</haxe_doc>
		</command312>
		<command326 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change TP</haxe_doc>
		</command326>
		<command313 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change State</haxe_doc>
		</command313>
		<command314 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Recover All</haxe_doc>
		</command314>
		<command315 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change EXP</haxe_doc>
		</command315>
		<command316 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Level</haxe_doc>
		</command316>
		<command317 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Parameter</haxe_doc>
		</command317>
		<command318 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Skill</haxe_doc>
		</command318>
		<command319 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Equipment</haxe_doc>
		</command319>
		<command320 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Name</haxe_doc>
		</command320>
		<command321 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Class</haxe_doc>
		</command321>
		<command322 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Actor Images</haxe_doc>
		</command322>
		<command323 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Vehicle Image</haxe_doc>
		</command323>
		<command324 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Nickname</haxe_doc>
		</command324>
		<command325 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Profile</haxe_doc>
		</command325>
		<command331 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Enemy HP</haxe_doc>
		</command331>
		<command332 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Enemy MP</haxe_doc>
		</command332>
		<command342 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Enemy TP</haxe_doc>
		</command342>
		<command333 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Change Enemy State</haxe_doc>
		</command333>
		<command334 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Enemy Recover All</haxe_doc>
		</command334>
		<command335 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Enemy Appear</haxe_doc>
		</command335>
		<command336 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Enemy Transform</haxe_doc>
		</command336>
		<command337 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Show Battle Animation</haxe_doc>
		</command337>
		<command339 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Force Action</haxe_doc>
		</command339>
		<command340 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Abort Battle</haxe_doc>
		</command340>
		<command351 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Open Menu Screen</haxe_doc>
		</command351>
		<command352 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Open Save Screen</haxe_doc>
		</command352>
		<command353 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Game Over</haxe_doc>
		</command353>
		<command354 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Return to Title Screen</haxe_doc>
		</command354>
		<command355 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Script</haxe_doc>
		</command355>
		<command356 public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Plugin Command</haxe_doc>
		</command356>
		<pluginCommand public="1" set="method"><f a="command:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></pluginCommand>
		<new public="1" set="method"><f a="depth">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Game_Interpreter
 *
 * The interpreter for running event commands.
 * @class Game_Interpreter</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Interpreter"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Item" params="" file="src/rm/objects/Game_Item.hx" extern="1">
		<_dataClass><c path="String"/></_dataClass>
		<_itemId><x path="Int"/></_itemId>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<isSkill public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true the item is a skill.
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isSkill>
		<isItem public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item is an item.
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isItem>
		<isUsableItem public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item is a usable item, similar to a potion.
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isUsableItem>
		<isWeapon public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item is a weapon.
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isWeapon>
		<isArmor public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item is an armor.
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isArmor>
		<isEquipItem public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item is equippable (weapon or armor).
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isEquipItem>
		<isNull public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item is 'null'.
  *
  * @returns {boolean}
  * @memberof Game_Item</haxe_doc>
		</isNull>
		<itemId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current itemId.
  *
  * @returns {number}
  * @memberof Game_Item</haxe_doc>
		</itemId>
		<object public="1" set="method"><f a=""><t path="rm.types.BaseItem"/></f></object>
		<setObject public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current item of the current Game_Item object.
  *
  * @param {RPG.BaseItem} item
  * @memberof Game_Item</haxe_doc>
		</setObject>
		<setEquip public="1" set="method"><f a="isWeapon:itemId">
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setEquip>
		<new public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Game_Item
 * The game object class for handling skills, items, weapons. armor.
 * This is required, because the save data should not include the database object itself.
 * @class Game_Item</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Item"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Map" params="" file="src/rm/objects/Game_Map.hx" extern="1">
		<_interpreter><c path="rm.objects.Game_Interpreter"/></_interpreter>
		<_mapId><x path="Int"/></_mapId>
		<_tilesetId><x path="Int"/></_tilesetId>
		<_events><c path="Array"><c path="rm.objects.Game_Event"/></c></_events>
		<_commonEvents><c path="Array"><c path="rm.objects.Game_CommonEvent"/></c></_commonEvents>
		<_vehicles><c path="Array"><c path="rm.objects.Game_Vehicle"/></c></_vehicles>
		<_displayX><x path="Int"/></_displayX>
		<_displayY><x path="Int"/></_displayY>
		<_nameDisplay><x path="Bool"/></_nameDisplay>
		<_scrollDirection><x path="Int"/></_scrollDirection>
		<_scrollRest><x path="Float"/></_scrollRest>
		<_scrollSpeed><x path="Float"/></_scrollSpeed>
		<_parallaxName><c path="String"/></_parallaxName>
		<_parallaxZero><x path="Bool"/></_parallaxZero>
		<_parallaxLoopX><x path="Bool"/></_parallaxLoopX>
		<_parallaxLoopY><x path="Bool"/></_parallaxLoopY>
		<_parallaxSx><x path="Int"/></_parallaxSx>
		<_parallaxSy><x path="Int"/></_parallaxSy>
		<_parallaxX><x path="Int"/></_parallaxX>
		<_parallaxY><x path="Int"/></_parallaxY>
		<_battleback1Name><c path="String"/></_battleback1Name>
		<_battleback2Name><c path="String"/></_battleback2Name>
		<_needsRefresh><x path="Bool"/></_needsRefresh>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<setup public="1" set="method"><f a="mapId">
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<isEventRunning public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if an event is running.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isEventRunning>
		<tileWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns tile width.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</tileWidth>
		<tileHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns tile height.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</tileHeight>
		<mapId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns map id.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</mapId>
		<tilesetId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the tileset id.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</tilesetId>
		<displayX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the display x coordinate.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</displayX>
		<displayY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the display y coordinate.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</displayY>
		<parallaxName public="1" set="method"><f a=""><c path="String"/></f></parallaxName>
		<battleback1Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the name of battle back 1.
  *
  * @returns {String}
  * @memberof Game_Map</haxe_doc>
		</battleback1Name>
		<battleback2Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the name of battle back 2.
  *
  * @returns {String}
  * @memberof Game_Map</haxe_doc>
		</battleback2Name>
		<requestRefresh public="1" set="method"><f a="mapId">
	<x path="Int"/>
	<x path="Void"/>
</f></requestRefresh>
		<isNameDisplayEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the name display is enabled.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isNameDisplayEnabled>
		<disableNameDisplay public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disables name display.
  *
  * @memberof Game_Map</haxe_doc>
		</disableNameDisplay>
		<enableNameDisplay public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Enable name display.
  *
  * @memberof Game_Map</haxe_doc>
		</enableNameDisplay>
		<createVehicles public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the vehicles for the game map.
  *
  * @memberof Game_Map</haxe_doc>
		</createVehicles>
		<refereshVehicles public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the vehicles on the game map.
  *
  * @memberof Game_Map</haxe_doc>
		</refereshVehicles>
		<vehicles public="1" set="method"><f a=""><c path="Array"><c path="rm.objects.Game_Vehicle"/></c></f></vehicles>
		<vehicle public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="rm.objects.Game_Vehicle"/>
			</f>
			<haxe_doc>* Returns the game vehicle specified by type.
  *
  * @param {String} type
  * @returns {Game_Vehicle}
  * @memberof Game_Map</haxe_doc>
		</vehicle>
		<boat public="1" set="method">
			<f a=""><c path="rm.objects.Game_Vehicle"/></f>
			<haxe_doc>* Returns the game boat.
  *
  * @returns {Game_Vehicle}
  * @memberof Game_Map</haxe_doc>
		</boat>
		<ship public="1" set="method">
			<f a=""><c path="rm.objects.Game_Vehicle"/></f>
			<haxe_doc>* Returns the game ship.
  *
  * @returns {Game_Vehicle}
  * @memberof Game_Map</haxe_doc>
		</ship>
		<airship public="1" set="method">
			<f a=""><c path="rm.objects.Game_Vehicle"/></f>
			<haxe_doc>* Returns the game airship.
  *
  * @returns {Game_Vehicle}
  * @memberof Game_Map</haxe_doc>
		</airship>
		<setupEvents public="1" set="method"><f a=""><x path="Void"/></f></setupEvents>
		<events public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Event"/></c></f>
			<haxe_doc><![CDATA[* Returns all events on the game map.
  *
  * @returns {Array<Game_Event>}
  * @memberof Game_Map]]></haxe_doc>
		</events>
		<event public="1" set="method">
			<f a="eventId">
				<x path="Int"/>
				<c path="rm.objects.Game_Event"/>
			</f>
			<haxe_doc>* Returns an event, given the event id.
  *
  * @param {Int} eventId
  * @returns {Game_Event}
  * @memberof Game_Map</haxe_doc>
		</event>
		<eraseEvent public="1" set="method">
			<f a="eventId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Erases the event given the event id.
  *
  * @param {Int} eventId
  * @memberof Game_Map</haxe_doc>
		</eraseEvent>
		<parallelCommonEvents public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.CommonEvent"/></c></f>
			<haxe_doc><![CDATA[* Returns all the parallel running common events.
  *
  * @returns {Array<RPG.CommonEvent>}
  * @memberof Game_Map]]></haxe_doc>
		</parallelCommonEvents>
		<setupScroll public="1" set="method"><f a=""><x path="Void"/></f></setupScroll>
		<setupParallax public="1" set="method"><f a=""><x path="Void"/></f></setupParallax>
		<setupBattleback public="1" set="method"><f a=""><x path="Void"/></f></setupBattleback>
		<setDisplayPos public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setDisplayPos>
		<parallaxOx public="1" set="method"><f a=""><x path="Int"/></f></parallaxOx>
		<parallaxOy public="1" set="method"><f a=""><x path="Int"/></f></parallaxOy>
		<tileset public="1" set="method">
			<f a=""><t path="rm.types.Tileset"/></f>
			<haxe_doc>* Returns the tilset of the game map.
  *
  * @returns {RPG.Tileset}
  * @memberof Game_Map</haxe_doc>
		</tileset>
		<tilesetFlags public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc><![CDATA[* Returns the tileset flags of the game map.
  *
  * @returns {Array<Int>}
  * @memberof Game_Map]]></haxe_doc>
		</tilesetFlags>
		<displayName public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the display name of the game map.
  *
  * @returns {String}
  * @memberof Game_Map</haxe_doc>
		</displayName>
		<width public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the map width.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</width>
		<height public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the map height.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</height>
		<data public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc><![CDATA[* Returns the map data.
  *
  * @returns {Array<Int>}
  * @memberof Game_Map]]></haxe_doc>
		</data>
		<isLoopHorizontal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the map loops horizontally.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isLoopHorizontal>
		<isLoopVertical public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the map loops vertically.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isLoopVertical>
		<isDashDisabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if dash is disabled on the map.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isDashDisabled>
		<encounterList public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.MapEncounter"/></c></f>
			<haxe_doc><![CDATA[* Returns the list of possible encounters on the current map.
  *
  * @returns {Array<RPG.Map.Encounter>}
  * @memberof Game_Map]]></haxe_doc>
		</encounterList>
		<encounterStep public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the Int of encounter steps on the map.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</encounterStep>
		<isOverworld public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the map is an over world map.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isOverworld>
		<screenTileX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the screen tile x coordinate.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</screenTileX>
		<screenTileY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the screen tile y coordinate.
  *
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</screenTileY>
		<adjustX public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></adjustX>
		<adjustY public="1" set="method"><f a="y">
	<x path="Int"/>
	<x path="Int"/>
</f></adjustY>
		<roundX public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundX>
		<roundY public="1" set="method"><f a="y">
	<x path="Int"/>
	<x path="Int"/>
</f></roundY>
		<xWithDirection public="1" set="method"><f a="x:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></xWithDirection>
		<yWithDirection public="1" set="method"><f a="y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></yWithDirection>
		<roundXWithDirection public="1" set="method"><f a="x:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></roundXWithDirection>
		<roundYWithDirection public="1" set="method"><f a="y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></roundYWithDirection>
		<deltaX public="1" set="method"><f a="x1:x2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></deltaX>
		<deltaY public="1" set="method"><f a="y1:y2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></deltaY>
		<distance public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></distance>
		<canvasToMapX public="1" set="method">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Converts the x coordinate from canvas to map coordinate x.
  *
  * @param {Int} x
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</canvasToMapX>
		<canvasToMapY public="1" set="method">
			<f a="y">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Converts the y coordinate from canvas to map y coordinate.
  *
  * @param {Int} y
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</canvasToMapY>
		<autoplay public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Auto plays the game map.
  *
  * @memberof Game_Map</haxe_doc>
		</autoplay>
		<refreshIfNeeded public="1" set="method"><f a=""><x path="Void"/></f></refreshIfNeeded>
		<refresh public="1" set="method"><f a=""><x path="Void"/></f></refresh>
		<refreshTileEvents public="1" set="method"><f a=""><x path="Void"/></f></refreshTileEvents>
		<eventsXy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="rm.objects.Game_Event"/></c>
			</f>
			<haxe_doc><![CDATA[* Returns the game events at the specified
  * x and y position.
  * @param {Int} x
  * @param {Int} y
  * @returns {Array<Game_Event>}
  * @memberof Game_Map]]></haxe_doc>
		</eventsXy>
		<eventsXyNt public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="rm.objects.Game_Event"/></c>
</f></eventsXyNt>
		<tileEventsXy public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="rm.objects.Game_Event"/></c>
</f></tileEventsXy>
		<eventIdXy public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></eventIdXy>
		<scrollDown public="1" set="method"><f a="distance">
	<x path="Int"/>
	<x path="Void"/>
</f></scrollDown>
		<scrollLeft public="1" set="method"><f a="distance">
	<x path="Int"/>
	<x path="Void"/>
</f></scrollLeft>
		<scrollRight public="1" set="method"><f a="distance">
	<x path="Int"/>
	<x path="Void"/>
</f></scrollRight>
		<scrollUp public="1" set="method"><f a="distance">
	<x path="Int"/>
	<x path="Void"/>
</f></scrollUp>
		<isValid public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the x and y coordinates are valid.
  *
  * @param {Int} x
  * @param {Int} y
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isValid>
		<checkPassage public="1" set="method"><f a="x:y:bit">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></checkPassage>
		<tileId public="1" set="method">
			<f a="x:y:z">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the tile id at the specified x, y, and z coordinates.
  *
  * @param {Int} x
  * @param {Int} y
  * @param {Int} z
  * @returns {Int}
  * @memberof Game_Map</haxe_doc>
		</tileId>
		<layeredTiles public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></layeredTiles>
		<allTiles public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></allTiles>
		<autotileType public="1" set="method"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></autotileType>
		<isPassable public="1" set="method"><f a="x:y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isPassable>
		<isBoatPassable public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isBoatPassable>
		<isShipPassable public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isShipPassable>
		<isAirshipLandOk public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isAirshipLandOk>
		<checkLayeredTilesFlags public="1" set="method"><f a="x:y:bit">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></checkLayeredTilesFlags>
		<isLadder public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the specified element at the given x and y coordinates
  * is a ladder.
  * @param {Int} x
  * @param {Int} y
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isLadder>
		<isBush public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isBush>
		<isCounter public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCounter>
		<isDamageFloor public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isDamageFloor>
		<terrainTag public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></terrainTag>
		<regionId public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></regionId>
		<startScroll public="1" set="method"><f a="direction:distance:speed">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></startScroll>
		<isScrolling public="1" set="method"><f a=""><x path="Bool"/></f></isScrolling>
		<update public="1" set="method">
			<f a="sceneActive">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the game map, given that the scene is active.
  *
  * @param {Bool} sceneActive
  * @memberof Game_Map</haxe_doc>
		</update>
		<updateScroll public="1" set="method"><f a=""><x path="Void"/></f></updateScroll>
		<scrollDistance public="1" set="method"><f a=""><x path="Int"/></f></scrollDistance>
		<doScroll public="1" set="method"><f a="direction:distance">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doScroll>
		<updateEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates all events on the map.
  *
  * @memberof Game_Map</haxe_doc>
		</updateEvents>
		<updateVehicles public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates all game vehicles on the map.
  *
  * @memberof Game_Map</haxe_doc>
		</updateVehicles>
		<updateParallax public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the map parallaxes.
  *
  * @memberof Game_Map</haxe_doc>
		</updateParallax>
		<changeTileset public="1" set="method">
			<f a="tilesetId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes them ap tileset, given the tileset id.
  *
  * @param {Int} tilesetId
  * @memberof Game_Map</haxe_doc>
		</changeTileset>
		<changeBattleback public="1" set="method"><f a="battleback1Name:battleback2Name">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></changeBattleback>
		<changeParallax public="1" set="method"><f a="name:loopX:loopY:sx:sy">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></changeParallax>
		<updateInterpreter public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the map's game interpreter.
  *
  * @memberof Game_Map</haxe_doc>
		</updateInterpreter>
		<unlockEvent public="1" set="method">
			<f a="eventId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Unlocks an event on the map given the event id.
  *
  * @param {Int} eventId
  * @memberof Game_Map</haxe_doc>
		</unlockEvent>
		<setupStartingEvent public="1" set="method"><f a=""><x path="Bool"/></f></setupStartingEvent>
		<setupTestEvent public="1" set="method"><f a=""><x path="Bool"/></f></setupTestEvent>
		<setupStartingMapEvent public="1" set="method"><f a=""><x path="Bool"/></f></setupStartingMapEvent>
		<setupAutorunCommonEvent public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Sets up an auto run common event.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</setupAutorunCommonEvent>
		<isAnyEventStarting public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if any event is starting on the map.
  *
  * @returns {Bool}
  * @memberof Game_Map</haxe_doc>
		</isAnyEventStarting>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object for the map. It contains scrolling and passage functions
 * along with the game interpreter.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Map"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Message" params="" file="src/rm/objects/Game_Message.hx" extern="1">
		<_texts><c path="Array"><c path="String"/></c></_texts>
		<_choices><c path="Array"><c path="String"/></c></_choices>
		<_faceName><c path="String"/></_faceName>
		<_faceIndex><x path="Int"/></_faceIndex>
		<_background><x path="Int"/></_background>
		<_positionType><x path="Int"/></_positionType>
		<_choiceDefaultType><x path="Int"/></_choiceDefaultType>
		<_choiceCancelType><x path="Int"/></_choiceCancelType>
		<_choiceBackground><x path="Int"/></_choiceBackground>
		<_choicePostionType><x path="Int"/></_choicePostionType>
		<_numInputVariableId><x path="Int"/></_numInputVariableId>
		<_numInputMaxDigits><x path="Int"/></_numInputMaxDigits>
		<_itemChoiceVariableId><x path="Int"/></_itemChoiceVariableId>
		<_itemChoiceItypeId><x path="Int"/></_itemChoiceItypeId>
		<_scrollMode><x path="Bool"/></_scrollMode>
		<_scrollSpeed><x path="Int"/></_scrollSpeed>
		<_scrollNoFast><x path="Bool"/></_scrollNoFast>
		<_choiceCallback><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></_choiceCallback>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<choices public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></choices>
		<faceName public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the name of the face image used for the message.
  *
  * @returns {String}
  * @memberof Game_Message</haxe_doc>
		</faceName>
		<faceIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the face index within the face image to display the
  * correct face.
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</faceIndex>
		<background public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the background associated with the message;
  * this is the background
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</background>
		<positionType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current position type of the message window.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</positionType>
		<choiceDefaultType public="1" set="method"><f a=""><x path="Int"/></f></choiceDefaultType>
		<choiceCancelType public="1" set="method"><f a=""><x path="Int"/></f></choiceCancelType>
		<choiceBackground public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the background type of the choice window.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</choiceBackground>
		<choicePositionType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the position of the choice window.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</choicePositionType>
		<numInputVariableId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number input variable id.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</numInputVariableId>
		<numInputMaxDigits public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number input maximum digits.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</numInputMaxDigits>
		<itemChoiceVariableId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the item choice variable id.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</itemChoiceVariableId>
		<itemChoiceItypeId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the item choice item type id.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</itemChoiceItypeId>
		<scrollMode public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the scroll mode is set to true.
  *
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</scrollMode>
		<scrollSpeed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the scroll speed.
  *
  * @returns {number}
  * @memberof Game_Message</haxe_doc>
		</scrollSpeed>
		<scrollNoFast public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the scroll is set to not being fast.
  *
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</scrollNoFast>
		<add public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds text to the game message object.
  *
  * @param {String} text
  * @memberof Game_Message</haxe_doc>
		</add>
		<setFaceImage public="1" set="method"><f a="faceName:faceIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setFaceImage>
		<setBackground public="1" set="method">
			<f a="background">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the background of the message window;
  * options are 0 (fully opaque), 1 (transparent), 2 (invisible background).
  * The default is 0.
  * @param {number} background
  * @memberof Game_Message</haxe_doc>
		</setBackground>
		<setPositionType public="1" set="method">
			<f a="positionType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the position of the message window;
  * default is 2.
  * @param {number} positionType
  * @memberof Game_Message</haxe_doc>
		</setPositionType>
		<setChoices public="1" set="method">
			<f a="choices:defaultType:cancelType">
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets the choices within the choice window;
  * sets the default and cancel choices for the window.
  * @param {Array<String>} choices
  * @param {number} defaultType
  * @param {number} cancelType
  * @memberof Game_Message]]></haxe_doc>
		</setChoices>
		<setChoiceBackground public="1" set="method"><f a="background">
	<x path="Int"/>
	<x path="Void"/>
</f></setChoiceBackground>
		<setChoicePositionType public="1" set="method">
			<f a="positionType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the position of the choice window associated with the
  * message window.
  * @param {number} positionType
  * @memberof Game_Message</haxe_doc>
		</setChoicePositionType>
		<setNumberInput public="1" set="method">
			<f a="variableId:maxDigits">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the number input and associates it with a variable id;
  * the max number of digits can also be set.
  * @param {number} variableId
  * @param {number} maxDigits
  * @memberof Game_Message</haxe_doc>
		</setNumberInput>
		<setItemChoice public="1" set="method">
			<f a="variableId:itemType">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the choice and associates it with a variable id;
  * sets the itemtype id associated with the choice.
  * @param {number} variableId
  * @param {number} itemType
  * @memberof Game_Message</haxe_doc>
		</setItemChoice>
		<setScroll public="1" set="method">
			<f a="speed:noFast">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the scroll speed of the message window;
  * disable fast movement if noFast is set to true.
  * @param {number} speed
  * @param {boolean} noFast
  * @memberof Game_Message</haxe_doc>
		</setScroll>
		<setChoiceCallback public="1" set="method">
			<f a="callback">
				<f a="n">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets a callback to be associated with a specific choice;
  * a callback is a JavaScript function that will be run when the
  * choice is selected.
  * @param {((n: number) => Void)} callback
  * @memberof Game_Message]]></haxe_doc>
		</setChoiceCallback>
		<onChoice public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></onChoice>
		<hasText public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game message object has text.
  *
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</hasText>
		<isChoice public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game message object has a set of choices.
  *
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</isChoice>
		<isNumberInput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game message object has a number input attached.
  *
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</isNumberInput>
		<isItemChoice public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game message object has an item choice attached.
  *
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</isItemChoice>
		<isBusy public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game message object has text, choices, number input,
  * or item choice.
  * @returns {boolean}
  * @memberof Game_Message</haxe_doc>
		</isBusy>
		<newPage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a new page for the text within the message window.
  *
  * @memberof Game_Message</haxe_doc>
		</newPage>
		<allText public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns all of the text contained within the message.
  *
  * @returns {String}
  * @memberof Game_Message</haxe_doc>
		</allText>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Message"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Unit" params="" file="src/rm/objects/Game_Unit.hx" extern="1">
		<_inBattle><x path="Bool"/></_inBattle>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<inBattle public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if unit is in battle.
  *
  * @returns {boolean}
  * @memberof Game_Unit</haxe_doc>
		</inBattle>
		<members public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f>
			<haxe_doc><![CDATA[* Returns the list of battlers.
  *
  * @returns {Array<Game_Battler>}
  * @memberof Game_Unit]]></haxe_doc>
		</members>
		<aliveMembers public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f>
			<haxe_doc><![CDATA[* Returns the list of alive battlers.
  *
  * @returns {Array<Game_Battler>}
  * @memberof Game_Unit]]></haxe_doc>
		</aliveMembers>
		<deadMembers public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f>
			<haxe_doc><![CDATA[* Returns the list of dead battlers.
  *
  * @returns {Array<Game_Battler>}
  * @memberof Game_Unit]]></haxe_doc>
		</deadMembers>
		<movableMembers public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Battler"/></c></f>
			<haxe_doc><![CDATA[* Returns the list of movable members.
  *
  * @returns {Array<Game_Battler>}
  * @memberof Game_Unit]]></haxe_doc>
		</movableMembers>
		<clearActions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the unit's actions.
  *
  * @memberof Game_Unit</haxe_doc>
		</clearActions>
		<agility public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the agility of the unit.
  *
  * @returns {Int}
  * @memberof Game_Unit</haxe_doc>
		</agility>
		<tgrSum public="1" set="method"><f a=""><x path="Int"/></f></tgrSum>
		<randomTarget public="1" set="method">
			<f a=""><c path="rm.objects.Game_Battler"/></f>
			<haxe_doc>* Returns a random target from the game unit.
  *
  * @returns {Game_Battler}
  * @memberof Game_Unit</haxe_doc>
		</randomTarget>
		<randomDeadTarget public="1" set="method">
			<f a=""><c path="rm.objects.Game_Battler"/></f>
			<haxe_doc>* Returns a random dead target from the game unit.
  *
  * @returns {Game_Battler}
  * @memberof Game_Unit</haxe_doc>
		</randomDeadTarget>
		<smoothTarget public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="rm.objects.Game_Battler"/>
</f></smoothTarget>
		<smoothDeadTarget public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="rm.objects.Game_Battler"/>
</f></smoothDeadTarget>
		<clearResults public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the action results.
  *
  * @memberof Game_Unit</haxe_doc>
		</clearResults>
		<onBattleStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when battle is started.
  *
  * @memberof Game_Unit</haxe_doc>
		</onBattleStart>
		<onBattleEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when battle has ended.
  *
  * @memberof Game_Unit</haxe_doc>
		</onBattleEnd>
		<makeActions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the action's of the game unit.
  *
  * @memberof Game_Unit</haxe_doc>
		</makeActions>
		<select public="1" set="method">
			<f a="activeMember">
				<c path="rm.objects.Game_Battler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Selects a member of the unit given a battler.
  *
  * @param {Game_Battler} activeMember
  * @memberof Game_Unit</haxe_doc>
		</select>
		<isAllDead public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if all members of the unit are dead.
  *
  * @returns {Bool}
  * @memberof Game_Unit</haxe_doc>
		</isAllDead>
		<substituteBattler public="1" set="method"><f a=""><c path="rm.objects.Game_Battler"/></f></substituteBattler>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[* Superclass of Game_Party & Game_Troop
 *
 * @class Game_Unit]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Unit"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Party" params="" file="src/rm/objects/Game_Party.hx" extern="1">
		<extends path="rm.objects.Game_Unit"/>
		<ABILITY_ENCOUNTER_HALF public="1" static="1"><x path="Int"/></ABILITY_ENCOUNTER_HALF>
		<ABILITY_ENCOUNTER_NONE public="1" static="1"><x path="Int"/></ABILITY_ENCOUNTER_NONE>
		<ABILITY_CANCEL_SURPRISE public="1" static="1"><x path="Int"/></ABILITY_CANCEL_SURPRISE>
		<ABILITY_RAISE_PREEMPTIVE public="1" static="1"><x path="Int"/></ABILITY_RAISE_PREEMPTIVE>
		<ABILITY_GOLD_DOUBLE public="1" static="1"><x path="Int"/></ABILITY_GOLD_DOUBLE>
		<ABILITY_DROP_ITEM_DOUBLE public="1" static="1"><x path="Int"/></ABILITY_DROP_ITEM_DOUBLE>
		<_gold><x path="Int"/></_gold>
		<_steps><x path="Int"/></_steps>
		<_lastItem><c path="rm.objects.Game_Item"/></_lastItem>
		<_menuActorId><x path="Int"/></_menuActorId>
		<_targetActorId><x path="Int"/></_targetActorId>
		<_actors><c path="Array"><c path="rm.objects.Game_Actor"/></c></_actors>
		<_items><c path="js.lib.Object"/></_items>
		<_weapons><c path="js.lib.Object"/></_weapons>
		<_armors><c path="js.lib.Object"/></_armors>
		<members public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Actor"/></c></f>
			<haxe_doc><![CDATA[* Returns all party members.
  *
  * @returns {Array<Game_Actor>}
  * @memberof Game_Party]]></haxe_doc>
		</members>
		<aliveMembers public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Actor"/></c></f>
			<haxe_doc><![CDATA[* Returns the living party members.
  *
  * @returns {Array<Game_Actor>}
  * @memberof Game_Party]]></haxe_doc>
		</aliveMembers>
		<deadMembers public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Actor"/></c></f>
			<haxe_doc><![CDATA[* Returns the dead party members.
  *
  * @returns {Array<Game_Actor>}
  * @memberof Game_Party]]></haxe_doc>
		</deadMembers>
		<movableMembers public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Actor"/></c></f>
			<haxe_doc><![CDATA[* Returns the movable members in the party.
  *
  * @returns {Array<Game_Actor>}
  * @memberof Game_Party]]></haxe_doc>
		</movableMembers>
		<battleMembers public="1" set="method">
			<f a=""><c path="Array"><c path="rm.objects.Game_Actor"/></c></f>
			<haxe_doc><![CDATA[* Returns the battle members in the party.
  *
  * @returns {Array<Game_Actor>}
  * @memberof Game_Party]]></haxe_doc>
		</battleMembers>
		<initAllItems public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initialize all party items.
  *
  * @memberof Game_Party</haxe_doc>
		</initAllItems>
		<exists public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game party exists.
  *
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</exists>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the size of the party.
  *
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</size>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game party is empty.
  *
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</isEmpty>
		<maxBattleMembers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum battle members in the party.
  *
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</maxBattleMembers>
		<leader public="1" set="method">
			<f a=""><c path="rm.objects.Game_Actor"/></f>
			<haxe_doc>* Returns the leader of the party.
  *
  * @returns {Game_Actor}
  * @memberof Game_Party</haxe_doc>
		</leader>
		<reviveBattleMembers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Revive the battle members of the party.
  *
  * @memberof Game_Party</haxe_doc>
		</reviveBattleMembers>
		<items public="1" set="method"><f a=""><c path="Array"><t path="rm.types.Item"/></c></f></items>
		<weapons public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.Weapon"/></c></f>
			<haxe_doc><![CDATA[* Returns the weapons of the party.
  *
  * @returns {Array<RPG.Weapon>}
  * @memberof Game_Party]]></haxe_doc>
		</weapons>
		<armors public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.Armor"/></c></f>
			<haxe_doc><![CDATA[* Returns the party's armor.
  *
  * @returns {Array<RPG.Armor>}
  * @memberof Game_Party]]></haxe_doc>
		</armors>
		<equipItems public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.EquipItem"/></c></f>
			<haxe_doc><![CDATA[* Returns the party's equippable items.
  *
  * @returns {Array<RPG.EquipItem>}
  * @memberof Game_Party]]></haxe_doc>
		</equipItems>
		<allItems public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.BaseItem"/></c></f>
			<haxe_doc><![CDATA[* Returns all items within the party's posession.
  * Items can be of equip item, or item type.
  * @returns {Array<RPG.BaseItem>}
  * @memberof Game_Party]]></haxe_doc>
		</allItems>
		<itemContainer public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<a><ItemId><x path="Int"/></ItemId></a>
</f></itemContainer>
		<setupStartingMembers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the starting party members.
  *
  * @memberof Game_Party</haxe_doc>
		</setupStartingMembers>
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<setupBattleTest public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up a test battle with the party.
  *
  * @memberof Game_Party</haxe_doc>
		</setupBattleTest>
		<setupBattleTestMembers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the battle test members.
  *
  * @memberof Game_Party</haxe_doc>
		</setupBattleTestMembers>
		<setupBattleTestItems public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the battle test items.
  *
  * @memberof Game_Party</haxe_doc>
		</setupBattleTestItems>
		<highestLevel public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the highest level in the party.
  *
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</highestLevel>
		<addActor public="1" set="method">
			<f a="actorId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds an actor to the party given the actor id.
  *
  * @param {Int} actorId
  * @memberof Game_Party</haxe_doc>
		</addActor>
		<removeActor public="1" set="method">
			<f a="actorId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes an actor from the party given the actor id.
  *
  * @param {Int} actorId
  * @memberof Game_Party</haxe_doc>
		</removeActor>
		<gold public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns party gold.
  *
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</gold>
		<gainGold public="1" set="method">
			<f a="amount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Increases the party gold given a specified amount.
  *
  * @param {Int} amount
  * @memberof Game_Party</haxe_doc>
		</gainGold>
		<loseGold public="1" set="method">
			<f a="amount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Decreases the party gold given a specified amount.
  *
  * @param {Int} amount
  * @memberof Game_Party</haxe_doc>
		</loseGold>
		<maxGold public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns maximum gold of the party.
  *
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</maxGold>
		<steps public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the Int of steps the party has taken.
  *
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</steps>
		<increaseSteps public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Increases the Int of steps the party has taken.
  *
  * @memberof Game_Party</haxe_doc>
		</increaseSteps>
		<numItems public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the Int of items in the possession of the party of the
  * given item.
  * @param {RPG.BaseItem} item
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</numItems>
		<maxItems public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the maximum Int of items of the given item.
  *
  * @param {RPG.BaseItem} item
  * @returns {Int}
  * @memberof Game_Party</haxe_doc>
		</maxItems>
		<hasMaxItems public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<x path="Bool"/>
</f></hasMaxItems>
		<hasItem public="1" set="method">
			<f a="item:includeEquip">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the party has the given item;
  * if includeEquip is set to true, this will also check party equipment.
  * @param {RPG.BaseItem} item
  * @param {Bool} includeEquip
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</hasItem>
		<isAnyMemberEquipped public="1" set="method">
			<f a="item">
				<t path="rm.types.EquipItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if any party member has the specified equip item.
  *
  * @param {RPG.EquipItem} item
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</isAnyMemberEquipped>
		<gainItem public="1" set="method"><f a="item:amount:includeEquip">
	<t path="rm.types.BaseItem"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></gainItem>
		<discardMembersEquip public="1" set="method"><f a="item:amount">
	<t path="rm.types.EquipItem"/>
	<x path="Int"/>
	<x path="Void"/>
</f></discardMembersEquip>
		<loseItem public="1" set="method"><f a="item:amount:includeEquip">
	<t path="rm.types.BaseItem"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></loseItem>
		<consumeItem public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Has the party consume the given item.
  *
  * @param {RPG.BaseItem} item
  * @memberof Game_Party</haxe_doc>
		</consumeItem>
		<canUse public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the party can use the item.
  *
  * @param {RPG.BaseItem} item
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</canUse>
		<canInput public="1" set="method"><f a=""><x path="Bool"/></f></canInput>
		<onPlayerWalk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when the player walks.
  *
  * @memberof Game_Party</haxe_doc>
		</onPlayerWalk>
		<menuActor public="1" set="method">
			<f a=""><c path="rm.objects.Game_Actor"/></f>
			<haxe_doc>* Returns the actor that will be used in the current menu;
  * this is for menu scenes that target one actor.
  * @returns {Game_Actor}
  * @memberof Game_Party</haxe_doc>
		</menuActor>
		<setMenuActor public="1" set="method"><f a="actor">
	<c path="rm.objects.Game_Actor"/>
	<x path="Void"/>
</f></setMenuActor>
		<makeMenuActorNext public="1" set="method"><f a=""><x path="Void"/></f></makeMenuActorNext>
		<makeMenuActorPrevious public="1" set="method"><f a=""><x path="Void"/></f></makeMenuActorPrevious>
		<targetActor public="1" set="method"><f a=""><c path="rm.objects.Game_Actor"/></f></targetActor>
		<setTargetActor public="1" set="method"><f a="actor">
	<c path="rm.objects.Game_Actor"/>
	<x path="Void"/>
</f></setTargetActor>
		<lastItem public="1" set="method">
			<f a=""><t path="rm.types.BaseItem"/></f>
			<haxe_doc>* Returns the last item selected by the game party.
  *
  * @returns {RPG.BaseItem}
  * @memberof Game_Party</haxe_doc>
		</lastItem>
		<setLastItem public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<x path="Void"/>
</f></setLastItem>
		<swapOrder public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapOrder>
		<charactersForSavefile public="1" set="method">
			<f a=""><c path="Array"><c path="Array"><x path="Any"/></c></c></f>
			<haxe_doc><![CDATA[* Returns the characters that go on the save life.
  *
  * @returns {Array<Array<any>>}
  * @memberof Game_Party]]></haxe_doc>
		</charactersForSavefile>
		<facesForSavefile public="1" set="method">
			<f a=""><c path="Array"><c path="Array"><x path="Any"/></c></c></f>
			<haxe_doc><![CDATA[* Returns the actor faces for the save file.
  *
  * @returns {Array<Array<any>>}
  * @memberof Game_Party]]></haxe_doc>
		</facesForSavefile>
		<partyAbility public="1" set="method"><f a="abilityId">
	<x path="Int"/>
	<x path="Bool"/>
</f></partyAbility>
		<hasEncounterHalf public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the encounter rate is set to half.
  *
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</hasEncounterHalf>
		<hasEncounterNone public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the encounter rate is set to none.
  *
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</hasEncounterNone>
		<hasCancelSurprise public="1" set="method"><f a=""><x path="Bool"/></f></hasCancelSurprise>
		<hasRaisePreemptive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the party has an increased chance of preemptive strike.
  *
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</hasRaisePreemptive>
		<hasGoldDouble public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the party has double gold in effect.
  *
  * @returns {Bool}
  * @memberof Game_Party</haxe_doc>
		</hasGoldDouble>
		<hasDropItemDouble public="1" set="method"><f a=""><x path="Bool"/></f></hasDropItemDouble>
		<ratePreemptive public="1" set="method"><f a="troopAgi">
	<x path="Int"/>
	<x path="Int"/>
</f></ratePreemptive>
		<rateSurprise public="1" set="method"><f a="troopAgi">
	<x path="Int"/>
	<x path="Int"/>
</f></rateSurprise>
		<performVictory public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Performs victory motion for the entire party.
  *
  * @memberof Game_Party</haxe_doc>
		</performVictory>
		<performEscape public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Performs escape motion for the entire party.
  *
  * @memberof Game_Party</haxe_doc>
		</performEscape>
		<removeBattleStates public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Remove battle states from all actors in the party.
  *
  * @memberof Game_Party</haxe_doc>
		</removeBattleStates>
		<requestMotionRefresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the motion on all actors in the party.
  *
  * @memberof Game_Party</haxe_doc>
		</requestMotionRefresh>
		<haxe_doc>* The game object for the party. Contains information
 * such as gold and items.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Party"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Picture" params="" file="src/rm/objects/Game_Picture.hx" extern="1">
		<_name>
			<c path="String"/>
			<haxe_doc>* _name property of the current picture.
  *
  * @protected
  * @type {string}
  * @memberof Game_Picture</haxe_doc>
		</_name>
		<_origin><x path="Float"/></_origin>
		<_x><x path="Int"/></_x>
		<_y><x path="Int"/></_y>
		<_scaleX><x path="Float"/></_scaleX>
		<_scaleY><x path="Float"/></_scaleY>
		<_opacity><x path="Int"/></_opacity>
		<_blendMode><x path="Int"/></_blendMode>
		<_targetX><x path="Int"/></_targetX>
		<_targetY><x path="Int"/></_targetY>
		<_targetScaleX><x path="Float"/></_targetScaleX>
		<_targetScaleY><x path="Float"/></_targetScaleY>
		<_targetOpacity><x path="Int"/></_targetOpacity>
		<_duration><x path="Int"/></_duration>
		<_tone><c path="Array"><x path="Int"/></c></_tone>
		<_toneTarget><c path="Array"><x path="Int"/></c></_toneTarget>
		<_toneDuration><x path="Int"/></_toneDuration>
		<_angle><x path="Float"/></_angle>
		<_rotationSpeed><x path="Float"/></_rotationSpeed>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the name of the game picture.
  *
  * @returns {string}
  * @memberof Game_Picture</haxe_doc>
		</name>
		<origin public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the origin of the game picture.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</origin>
		<x public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the picture x coordinate.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</x>
		<y public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the picture y coordinate.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</y>
		<scaleX public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns x scale of the game picture.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</scaleX>
		<scaleY public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the y scale of the game picture.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</scaleY>
		<opacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the opacity of the game picture.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</opacity>
		<blendMode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the blend mode of the game picture.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</blendMode>
		<tone public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc><![CDATA[* Returns the tone of the game picture.
  *
  * @returns {Array<number>}
  * @memberof Game_Picture]]></haxe_doc>
		</tone>
		<angle public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the angle of the game picture.
  *
  * @returns {number}
  * @memberof Game_Picture</haxe_doc>
		</angle>
		<initBasic public="1" set="method"><f a=""><x path="Void"/></f></initBasic>
		<initTarget public="1" set="method"><f a=""><x path="Void"/></f></initTarget>
		<initTone public="1" set="method"><f a=""><x path="Void"/></f></initTone>
		<initRotation public="1" set="method"><f a=""><x path="Void"/></f></initRotation>
		<show public="1" set="method"><f a="name:origin:x:y:scaleX:scaleY:opacity:blendMode">
	<c path="String"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></show>
		<move public="1" set="method"><f a="origin:x:y:scaleX:scaleY:opacity:blendMode:duration">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></move>
		<rotate public="1" set="method"><f a="speed">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<tint public="1" set="method"><f a="tone:duration">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></tint>
		<erase public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Erases the game picture.
  *
  * @memberof Game_Picture</haxe_doc>
		</erase>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the game picture.
  *
  * @memberof Game_Picture</haxe_doc>
		</update>
		<updateMove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the movement of the game picture.
  *
  * @memberof Game_Picture</haxe_doc>
		</updateMove>
		<updateTone public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the tone of the game picture.
  *
  * @memberof Game_Picture</haxe_doc>
		</updateTone>
		<updateRotation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the rotation of the game picture.
  *
  * @memberof Game_Picture</haxe_doc>
		</updateRotation>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------
 * The game object class for a picture.
 *</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Picture"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Player" params="" file="src/rm/objects/Game_Player.hx" extern="1">
		<extends path="rm.objects.Game_Character"/>
		<_vehicleType><c path="String"/></_vehicleType>
		<_vehicleGettingOn><x path="Bool"/></_vehicleGettingOn>
		<_vehicleGettingOff><x path="Bool"/></_vehicleGettingOff>
		<_dashing><x path="Bool"/></_dashing>
		<_needsMapReload><x path="Bool"/></_needsMapReload>
		<_transferring><x path="Bool"/></_transferring>
		<_newMapId><x path="Int"/></_newMapId>
		<_newX><x path="Int"/></_newX>
		<_newY><x path="Int"/></_newY>
		<_newDirection><x path="Int"/></_newDirection>
		<_fadeType><x path="Int"/></_fadeType>
		<_followers><c path="rm.objects.Game_Followers"/></_followers>
		<_encounterCount><x path="Int"/></_encounterCount>
		<clearTransferInfo public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the transfer information for the player.
  *
  * @memberof Game_Player</haxe_doc>
		</clearTransferInfo>
		<followers public="1" set="method">
			<f a=""><c path="rm.objects.Game_Followers"/></f>
			<haxe_doc>* Returns the player followers (party members).
  *
  * @returns {Game_Followers}
  * @memberof Game_Player</haxe_doc>
		</followers>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the game player.
  *
  * @memberof Game_Player</haxe_doc>
		</refresh>
		<isStopping public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is stopping.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isStopping>
		<reserveTransfer public="1" set="method">
			<f a="mapId:x:y:?d:?fadeType">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Reserves a transfer of the player to the specified map, at the given
  * x and y coordinates, facing the given direction (d). Using a specific fade.
  * @param {Int} mapId
  * @param {Int} x
  * @param {Int} y
  * @param {Int} [d]
  * @param {Int} [fadeType]
  * @memberof Game_Player</haxe_doc>
		</reserveTransfer>
		<requestMapReload public="1" set="method"><f a=""><x path="Void"/></f></requestMapReload>
		<isTransferring public="1" set="method"><f a=""><x path="Bool"/></f></isTransferring>
		<newMapId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the new map id.
  *
  * @returns {Int}
  * @memberof Game_Player</haxe_doc>
		</newMapId>
		<fadeType public="1" set="method"><f a=""><x path="Int"/></f></fadeType>
		<performTransfer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Performs a transfer of the player to a different area or map.
  *
  * @memberof Game_Player</haxe_doc>
		</performTransfer>
		<isMapPassable public="1" set="method" override="1"><f a="x:y:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isMapPassable>
		<vehicle public="1" set="method">
			<f a=""><c path="rm.objects.Game_Vehicle"/></f>
			<haxe_doc>* Returns the current vehicles the player is riding in.
  *
  * @returns {Game_Vehicle}
  * @memberof Game_Player</haxe_doc>
		</vehicle>
		<isInBoat public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is in a boat.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isInBoat>
		<isInShip public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is in a ship.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isInShip>
		<isInAirship public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is in an airship.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isInAirship>
		<isInVehicle public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is in a vehicle.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isInVehicle>
		<isNormal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is in their normal state.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isNormal>
		<isDashRing public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is dashing.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isDashRing>
		<isDebugThrough public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDebugThrough>
		<isCollided public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isCollided>
		<centerX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the player's center x coordinate.
  *
  * @returns {Int}
  * @memberof Game_Player</haxe_doc>
		</centerX>
		<centerY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the player's center y coordinate.
  *
  * @returns {Int}
  * @memberof Game_Player</haxe_doc>
		</centerY>
		<center public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></center>
		<locate public="1" set="method" override="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></locate>
		<increaseSteps public="1" set="method" override="1"><f a=""><x path="Void"/></f></increaseSteps>
		<makeEncounterCount public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the encounter count for the player.
  *
  * @memberof Game_Player</haxe_doc>
		</makeEncounterCount>
		<makeEncounterTroopId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Creates the encounter troop id and returns it.
  *
  * @returns {Int}
  * @memberof Game_Player</haxe_doc>
		</makeEncounterTroopId>
		<meetsEncounterConditions public="1" set="method"><f a="encounter">
	<t path="rm.types.MapEncounter"/>
	<x path="Bool"/>
</f></meetsEncounterConditions>
		<executeEncounter public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Executes an encounter.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</executeEncounter>
		<startMapEvent public="1" set="method">
			<f a="x:y:triggers:normal">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Has the player start a map event at the given x and y coordinates.
  * Also passing the triggers and whether the event start is normal.
  * @param {Int} x
  * @param {Int} y
  * @param {Array<Int>} triggers
  * @param {Bool} normal
  * @memberof Game_Player]]></haxe_doc>
		</startMapEvent>
		<moveByInput public="1" set="method"><f a=""><x path="Void"/></f></moveByInput>
		<canMove public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player can move.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</canMove>
		<getInputDirection public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Gets the input direction of the player as a Int.
  *
  * @returns {Int}
  * @memberof Game_Player</haxe_doc>
		</getInputDirection>
		<executeMove public="1" set="method"><f a="direction">
	<x path="Int"/>
	<x path="Void"/>
</f></executeMove>
		<update public="1" set="method" override="1"><f a="?sceneActive">
	<x path="Bool"/>
	<x path="Void"/>
</f></update>
		<updateDashing public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the dashing of the player.
  *
  * @memberof Game_Player</haxe_doc>
		</updateDashing>
		<isDashButtonPressed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the dash button is pressed.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isDashButtonPressed>
		<updateScroll public="1" set="method"><f a="lastScrolledX:lastScrolledY">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></updateScroll>
		<updateVehicle public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the vehicle.
  *
  * @memberof Game_Player</haxe_doc>
		</updateVehicle>
		<updateVehicleGetOn public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the player getting on the vehicle.
  *
  * @memberof Game_Player</haxe_doc>
		</updateVehicleGetOn>
		<updateVehicleGetOff public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the player getting off the vehicle.
  *
  * @memberof Game_Player</haxe_doc>
		</updateVehicleGetOff>
		<updateNonmoving public="1" set="method"><f a="wasMoving">
	<x path="Bool"/>
	<x path="Void"/>
</f></updateNonmoving>
		<triggerAction public="1" set="method"><f a=""><x path="Bool"/></f></triggerAction>
		<triggerButtonAction public="1" set="method"><f a=""><x path="Bool"/></f></triggerButtonAction>
		<triggerTouchAction public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player triggered a touch action.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</triggerTouchAction>
		<triggerTouchActionD1 public="1" set="method"><f a="x1:y1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></triggerTouchActionD1>
		<triggerTouchActionD2 public="1" set="method"><f a="x2:y2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></triggerTouchActionD2>
		<triggerTouchActionD3 public="1" set="method"><f a="x2:y2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></triggerTouchActionD3>
		<updateEncounterCount public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the player encounter count.
  *
  * @memberof Game_Player</haxe_doc>
		</updateEncounterCount>
		<canEncounter public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player can encounter enemies.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</canEncounter>
		<encounterProgressValue public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the encounter progress value of the player.
  *
  * @returns {Int}
  * @memberof Game_Player</haxe_doc>
		</encounterProgressValue>
		<checkEventTriggerHere public="1" set="method"><f a="triggers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></checkEventTriggerHere>
		<checkEventTriggerThere public="1" set="method"><f a="triggers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></checkEventTriggerThere>
		<canStartLocalEvents public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player can start local events.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</canStartLocalEvents>
		<getOnOffVehicle public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is getting on/off a vehicle.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</getOnOffVehicle>
		<getOnVehicle public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is getting on a vehicle.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</getOnVehicle>
		<getOffVehicle public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is getting off a vehicle.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</getOffVehicle>
		<forceMoveForward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Forces the player to move forward.
  *
  * @memberof Game_Player</haxe_doc>
		</forceMoveForward>
		<isOnDamageFloor public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player is on a floor that does damage.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</isOnDamageFloor>
		<moveStraight public="1" set="method" override="1">
			<f a="d">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the player straight, given a direction.
  *
  * @param {Int} d
  * @memberof Game_Player</haxe_doc>
		</moveStraight>
		<moveDiagonally public="1" set="method" override="1">
			<f a="horz:vert">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Moves the player diagonally, given a horizontal
  * and vertical direction. The numpad represents the directions.
  * @param {Int} horz
  * @param {Int} vert
  * @memberof Game_Player</haxe_doc>
		</moveDiagonally>
		<jump public="1" set="method" override="1">
			<f a="xPlus:yPlus">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Has the player jump in the given direction at the specified
  * x and y coordinate. This x and y will be added to the player's current
  * position.
  * @param {Int} xPlus
  * @param {Int} yPlus
  * @memberof Game_Player</haxe_doc>
		</jump>
		<showFollowers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the player followers.
  *
  * @memberof Game_Player</haxe_doc>
		</showFollowers>
		<hideFollowers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the player followers.
  *
  * @memberof Game_Player</haxe_doc>
		</hideFollowers>
		<gatherFollowers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Gather followers around the player.
  *
  * @memberof Game_Player</haxe_doc>
		</gatherFollowers>
		<areFollowersGathering public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the followers are currently gathering.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</areFollowersGathering>
		<areFollowersGathered public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the followers are gathered.
  *
  * @returns {Bool}
  * @memberof Game_Player</haxe_doc>
		</areFollowersGathered>
		<haxe_doc>* The game object class for the player. It contains,
 * encounter information, x, y, vehicle type, and whether
 * the player is dashing. The Game Player State is this
 * object.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Player"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Screen" params="" file="src/rm/objects/Game_Screen.hx" extern="1">
		<_shake><x path="Int"/></_shake>
		<_shakePower><x path="Int"/></_shakePower>
		<_shakeSpeed><x path="Int"/></_shakeSpeed>
		<_shakeDuration><x path="Int"/></_shakeDuration>
		<_shakeDirection><x path="Int"/></_shakeDirection>
		<_zoomX>
			<x path="Float"/>
			<haxe_doc>* _zoomX property of the game screen.
  *
  * @protected
  * @type {number}
  * @memberof Game_Screen</haxe_doc>
		</_zoomX>
		<_zoomY>
			<x path="Float"/>
			<haxe_doc>* _zoomY property of the game screen.
  *
  * @protected
  * @type {number}
  * @memberof Game_Screen</haxe_doc>
		</_zoomY>
		<_zoomScale><x path="Float"/></_zoomScale>
		<_zoomScaleTarget><x path="Float"/></_zoomScaleTarget>
		<_zoomDuration><x path="Int"/></_zoomDuration>
		<_weatherType><c path="String"/></_weatherType>
		<_weatherPower><x path="Float"/></_weatherPower>
		<_weatherPowerTarget><x path="Int"/></_weatherPowerTarget>
		<_weatherDuration><x path="Int"/></_weatherDuration>
		<_brightness>
			<x path="Float"/>
			<haxe_doc>* The _brightness property of the game screen;
  * returned when calling the brightness method.
  * @protected
  * @type {number}
  * @memberof Game_Screen</haxe_doc>
		</_brightness>
		<_fadeOutDuration><x path="Int"/></_fadeOutDuration>
		<_fadeInDuration><x path="Int"/></_fadeInDuration>
		<_tone><c path="Array"><x path="Int"/></c></_tone>
		<_toneTarget><c path="Array"><x path="Int"/></c></_toneTarget>
		<_toneDuration><x path="Int"/></_toneDuration>
		<_flashColor><c path="Array"><x path="Int"/></c></_flashColor>
		<_flashDuration><x path="Int"/></_flashDuration>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<_pictures>
			<c path="Array"><c path="rm.objects.Game_Picture"/></c>
			<haxe_doc><![CDATA[* The array of Game_Pictures that are
  * attached to the game screen.
  * @protected
  * @type {Array<Game_Picture>}
  * @memberof Game_Screen]]></haxe_doc>
		</_pictures>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<onBattleStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when the battle starts in game; prepares
  * the screen for the battle scene.
  * @memberof Game_Screen</haxe_doc>
		</onBattleStart>
		<brightness public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the brightness of the game screen.
  *
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</brightness>
		<tone public="1" set="method"><f a=""><c path="Array"><x path="Int"/></c></f></tone>
		<flashColor public="1" set="method"><f a=""><c path="Array"><x path="Int"/></c></f></flashColor>
		<shake public="1" set="method"><f a=""><x path="Float"/></f></shake>
		<zoomX public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the  zoom x coordinate of the screen.
  *
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</zoomX>
		<zoomY public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the zoom y coordiante of the screen.
  *
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</zoomY>
		<zoomScale public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the zoom scale of the screen.
  *
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</zoomScale>
		<weatherType public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the current weather type.
  *
  * @returns {string}
  * @memberof Game_Screen</haxe_doc>
		</weatherType>
		<weatherPower public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the weather power.
  *
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</weatherPower>
		<picture public="1" set="method">
			<f a="pictureId">
				<x path="Int"/>
				<c path="rm.objects.Game_Picture"/>
			</f>
			<haxe_doc>* Returns the specified picture given the picture id.
  *
  * @param {number} pictureId
  * @returns {Game_Picture}
  * @memberof Game_Screen</haxe_doc>
		</picture>
		<realPictureId public="1" set="method">
			<f a="pictureId">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the real picture id, given the picture id.
  *
  * @param {number} pictureId
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</realPictureId>
		<clearFade public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the screen fade.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearFade>
		<clearTone public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the screen tone.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearTone>
		<clearFlash public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the screen flash.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearFlash>
		<clearShake public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the screen shake.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearShake>
		<clearZoom public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the screen zoom.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearZoom>
		<clearWeather public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the screen weather.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearWeather>
		<clearPictures public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the pictures set on the game screen.
  *
  * @memberof Game_Screen</haxe_doc>
		</clearPictures>
		<eraseBattlePictures public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Erases the battle pictures.
  *
  * @memberof Game_Screen</haxe_doc>
		</eraseBattlePictures>
		<maxPictures public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number of pictures set on the game screen.
  *
  * @returns {number}
  * @memberof Game_Screen</haxe_doc>
		</maxPictures>
		<startFadeOut public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></startFadeOut>
		<startFadeIn public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Void"/>
</f></startFadeIn>
		<startTint public="1" set="method"><f a="tone:duration">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></startTint>
		<startFlash public="1" set="method"><f a="color:duration">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></startFlash>
		<startShake public="1" set="method"><f a="power:speed:duration">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></startShake>
		<startZoom public="1" set="method"><f a="x:y:scale:duration">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></startZoom>
		<setZoom public="1" set="method"><f a="x:y:scale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setZoom>
		<changeWeather public="1" set="method"><f a="type:power:duration">
	<c path="String"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></changeWeather>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the game screen.
  *
  * @memberof Game_Screen</haxe_doc>
		</update>
		<updateFadeOut public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the screen fade out.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateFadeOut>
		<updateFadeIn public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the screen fade in.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateFadeIn>
		<updateTone public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the screen tone.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateTone>
		<updateFlash public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update the screen flash.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateFlash>
		<updateShake public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update the screen shake.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateShake>
		<updateZoom public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update the screen zoom.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateZoom>
		<updateWeather public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update the screen weather.
  *
  * @memberof Game_Screen</haxe_doc>
		</updateWeather>
		<updatePictures public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update the screen pictures.
  *
  * @memberof Game_Screen</haxe_doc>
		</updatePictures>
		<startFlashForDamage public="1" set="method"><f a=""><x path="Void"/></f></startFlashForDamage>
		<showPicture public="1" set="method"><f a="pictureId:name:origin:x:y:scaleX:scaleY:opacity:blendMode">
	<x path="Int"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></showPicture>
		<movePicture public="1" set="method"><f a="pictureId:origin:x:y:scaleX:scaleY:opacity:blendMode:duration">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></movePicture>
		<rotatePicture public="1" set="method"><f a="pictureId:speed">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotatePicture>
		<tintPicture public="1" set="method"><f a="pictureId:tone:duration">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></tintPicture>
		<erasePicture public="1" set="method">
			<f a="pictureId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Erases a picture from the screen given the respected picture id.
  *
  * @param {number} pictureId
  * @memberof Game_Screen</haxe_doc>
		</erasePicture>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object class for screen effect data, such as
 * changes in color tone and flashes.
 * aliased as $gameScreen.
 * @class Game_Screen</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Screen"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_SelfSwitches" params="" file="src/rm/objects/Game_SelfSwitches.hx" extern="1">
		<_data><a><key><c path="Array"><x path="Any"/></c></key></a></_data>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the array of data for the game's self switches.
  *
  * @memberof Game_SelfSwitches</haxe_doc>
		</clear>
		<value public="1" set="method">
			<f a="key">
				<c path="Array"><x path="Any"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Returns the value of the switch at the current key;
  * the value is a boolean (true or false).
  * @param {Array<any>} key
  * @returns {boolean}
  * @memberof Game_SelfSwitches]]></haxe_doc>
		</value>
		<setValue public="1" set="method">
			<f a="key:value">
				<c path="Array"><x path="Any"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets the value of the key of the respected self switch.
  *
  * @param {Array<any>} key
  * @param {boolean} value
  * @memberof Game_SelfSwitches]]></haxe_doc>
		</setValue>
		<onChange public="1" set="method"><f a=""><x path="Void"/></f></onChange>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>*  The game object class for self switches.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_SelfSwitches"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Switches" params="" file="src/rm/objects/Game_Switches.hx" extern="1">
		<_data><c path="Array"><x path="Bool"/></c></_data>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<value public="1" set="method"><f a="switchId">
	<x path="Int"/>
	<x path="Bool"/>
</f></value>
		<setValue public="1" set="method"><f a="switchId:value">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setValue>
		<onChange public="1" set="method"><f a=""><x path="Void"/></f></onChange>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object class for game switches.
 *
 * @class Game_Switches</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Switches"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_System" params="" file="src/rm/objects/Game_System.hx" extern="1">
		<_saveEnabled><x path="Bool"/></_saveEnabled>
		<_menuEnabled><x path="Bool"/></_menuEnabled>
		<_encounterEnabled><x path="Bool"/></_encounterEnabled>
		<_formationEnabled><x path="Bool"/></_formationEnabled>
		<_battleCount><x path="Int"/></_battleCount>
		<_winCount><x path="Int"/></_winCount>
		<_escapeCount><x path="Int"/></_escapeCount>
		<_saveCount><x path="Int"/></_saveCount>
		<_versionId><x path="Int"/></_versionId>
		<_framesOnSave><x path="Int"/></_framesOnSave>
		<_bgmOnSave><t path="rm.types.AudioFile"/></_bgmOnSave>
		<_bgsOnSave><t path="rm.types.AudioFile"/></_bgsOnSave>
		<_windowTone><c path="Array"><x path="Int"/></c></_windowTone>
		<_battleBgm><t path="rm.types.AudioFile"/></_battleBgm>
		<_victoryMe><t path="rm.types.AudioFile"/></_victoryMe>
		<_defeatMe><t path="rm.types.AudioFile"/></_defeatMe>
		<_savedBgm><t path="rm.types.AudioFile"/></_savedBgm>
		<_walkingBgm><t path="rm.types.AudioFile"/></_walkingBgm>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<isJapanese public="1" set="method"><f a=""><x path="Bool"/></f></isJapanese>
		<isChinese public="1" set="method"><f a=""><x path="Bool"/></f></isChinese>
		<isKorean public="1" set="method"><f a=""><x path="Bool"/></f></isKorean>
		<isCJK public="1" set="method"><f a=""><x path="Bool"/></f></isCJK>
		<isRussian public="1" set="method"><f a=""><x path="Bool"/></f></isRussian>
		<isSideView public="1" set="method"><f a=""><x path="Bool"/></f></isSideView>
		<isAutoSaveEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isAutoSaveEnabled>
		<isSaveEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isSaveEnabled>
		<disableSave public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disables the ability to save the game.
  *
  * @memberof Game_System</haxe_doc>
		</disableSave>
		<enableSave public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Enables the ability to save the game.
  *
  * @memberof Game_System</haxe_doc>
		</enableSave>
		<isMenuEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the menu is enabled.
  *
  * @returns {Bool}
  * @memberof Game_System</haxe_doc>
		</isMenuEnabled>
		<disableMenu public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disables the menu from being accessed.
  *
  * @memberof Game_System</haxe_doc>
		</disableMenu>
		<enableMenu public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Enables the menu to be accessed.
  *
  * @memberof Game_System</haxe_doc>
		</enableMenu>
		<isEncounterEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isEncounterEnabled>
		<disableEncounter public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns true if the player can encounter enemies.
  *
  * @memberof Game_System</haxe_doc>
		</disableEncounter>
		<enableEncounter public="1" set="method"><f a=""><x path="Void"/></f></enableEncounter>
		<isFormationEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isFormationEnabled>
		<disableFormation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disables the use of the formation command in the menu.
  *
  * @memberof Game_System</haxe_doc>
		</disableFormation>
		<enableFormation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Enables the use of the formation command in the menu.
  *
  * @memberof Game_System</haxe_doc>
		</enableFormation>
		<battleCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of battles the player has participated in.
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</battleCount>
		<winCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of the wins the player has gained in battle.
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</winCount>
		<escapeCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of battles the player has escaped from in battle.
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</escapeCount>
		<saveCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of saves the player has made in game.
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</saveCount>
		<versionId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the version id represented in the database.
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</versionId>
		<savefileId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current save file id
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</savefileId>
		<setSavefileId public="1" set="method">
			<f a="savefileId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the save file id
  *
  * @returns {Void}
  * @memberof Game_System</haxe_doc>
		</setSavefileId>
		<windowTone public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc><![CDATA[* Returns the tone of the window in the database.
  *
  * @returns {Array<Int>}
  * @memberof Game_System]]></haxe_doc>
		</windowTone>
		<setWindowTone public="1" set="method">
			<f a="value">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets the window tone, given an array
  * of rgb. Example:  [0, 255, 255].
  * @param {Array<Int>} value
  * @memberof Game_System]]></haxe_doc>
		</setWindowTone>
		<battleBgm public="1" set="method">
			<f a=""><t path="rm.types.AudioFile"/></f>
			<haxe_doc>* Returns the current battle background music.
  *
  * @returns {AudioFile}
  * @memberof Game_System</haxe_doc>
		</battleBgm>
		<setBattleBgm public="1" set="method">
			<f a="value">
				<t path="rm.types.AudioFile"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the battle background music.
  *
  * @param {AudioFile} value
  * @memberof Game_System</haxe_doc>
		</setBattleBgm>
		<victoryMe public="1" set="method">
			<f a=""><t path="rm.types.AudioFile"/></f>
			<haxe_doc>* Returns the victory musical effect.
  *
  * @returns {AudioFile}
  * @memberof Game_System</haxe_doc>
		</victoryMe>
		<setVictoryMe public="1" set="method">
			<f a="value">
				<t path="rm.types.AudioFile"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the victory musical effect.
  *
  * @param {AudioFile} value
  * @memberof Game_System</haxe_doc>
		</setVictoryMe>
		<defeatMe public="1" set="method">
			<f a=""><t path="rm.types.AudioFile"/></f>
			<haxe_doc>* Returns the defeat musical effect.
  *
  * @returns {AudioFile}
  * @memberof Game_System</haxe_doc>
		</defeatMe>
		<onBattleStart public="1" set="method"><f a=""><x path="Void"/></f></onBattleStart>
		<onBattleWin public="1" set="method"><f a=""><x path="Void"/></f></onBattleWin>
		<onBattleEscape public="1" set="method"><f a=""><x path="Void"/></f></onBattleEscape>
		<onBeforeSave public="1" set="method"><f a=""><x path="Void"/></f></onBeforeSave>
		<onAfterLoad public="1" set="method"><f a=""><x path="Void"/></f></onAfterLoad>
		<playtime public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the total play time.
  *
  * @returns {number}
  * @memberof Game_System</haxe_doc>
		</playtime>
		<playtimeText public="1" set="method"><f a=""><c path="String"/></f></playtimeText>
		<saveBgm public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Saves background music to the game system object.
  *
  * @memberof Game_System</haxe_doc>
		</saveBgm>
		<replayBgm public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Replays the saved background music.
  *
  * @memberof Game_System</haxe_doc>
		</replayBgm>
		<saveWalkingBgm public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Saves the walking background music.
  *
  * @memberof Game_System</haxe_doc>
		</saveWalkingBgm>
		<replayWalkingBgm public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Replays the saved walking background music.
  *
  * @memberof Game_System</haxe_doc>
		</replayWalkingBgm>
		<saveWalkingBgm2 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Saves the second walking bgm from the map data.
  *
  * @memberof Game_System</haxe_doc>
		</saveWalkingBgm2>
		<mainFontFace public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the main font face
  *
  * @returns {String}
  * @memberof Game_System</haxe_doc>
		</mainFontFace>
		<numberFontFace public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the font face for number
  *
  * @returns {String}
  * @memberof Game_System</haxe_doc>
		</numberFontFace>
		<mainFontSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the main font size
  *
  * @returns {Int}
  * @memberof Game_System</haxe_doc>
		</mainFontSize>
		<windowPadding public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window padding
  *
  * @returns {Int}
  * @memberof Game_System</haxe_doc>
		</windowPadding>
		<haxe_doc>* Game_System
 * The game object class representing system data.
 * @class Game_System</haxe_doc>
		<meta><m n=":native"><e>"Game_System"</e></m></meta>
	</class>
	<class path="rm.objects.Game_Temp" params="" file="src/rm/objects/Game_Temp.hx" extern="1">
		<_isPlaytest><x path="Bool"/></_isPlaytest>
		<_commonEventId><x path="Int"/></_commonEventId>
		<_destinationX><x path="Int"/></_destinationX>
		<_destinationY><x path="Int"/></_destinationY>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<isPlaytest public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the game is in Play Test mode.
  *
  * @returns {boolean}
  * @memberof Game_Temp</haxe_doc>
		</isPlaytest>
		<reserveCommonEvent public="1" set="method">
			<f a="commonEventId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Reserves the given commonEventId to be processed later.
  *
  * @param {number} commonEventId
  * @memberof Game_Temp</haxe_doc>
		</reserveCommonEvent>
		<clearCommonEvent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the current reserved common event.
  *
  * @memberof Game_Temp</haxe_doc>
		</clearCommonEvent>
		<isCommonEventReserved public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if a common event has been reserved.
  *
  * @returns {boolean}
  * @memberof Game_Temp</haxe_doc>
		</isCommonEventReserved>
		<reservedCommonEvent public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns common event data from the database.
  *
  * @returns {any}
  * @memberof Game_Temp</haxe_doc>
		</reservedCommonEvent>
		<setDestination public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the destination of the player for movement.
  *
  * @param {number} x
  * @param {number} y
  * @memberof Game_Temp</haxe_doc>
		</setDestination>
		<clearDestination public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the destination of movement for the player.
  *
  * @memberof Game_Temp</haxe_doc>
		</clearDestination>
		<isDestinationValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the destination for the player to move to is valid.
  *
  * @returns {boolean}
  * @memberof Game_Temp</haxe_doc>
		</isDestinationValid>
		<destinationX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the x coordinate of the destination.
  *
  * @returns {number}
  * @memberof Game_Temp</haxe_doc>
		</destinationX>
		<destinationY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the y coordinate of the destination.
  *
  * @returns {number}
  * @memberof Game_Temp</haxe_doc>
		</destinationY>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object class for temporary data that is not
 * included in the save data.
 * @class Game_Temp</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Temp"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Timer" params="" file="src/rm/objects/Game_Timer.hx" extern="1">
		<_frames><x path="Int"/></_frames>
		<_working><x path="Bool"/></_working>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<update public="1" set="method">
			<f a="sceneActive">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the game timer.
  *
  * @param {boolean} sceneActive
  * @memberof Game_Timer</haxe_doc>
		</update>
		<start public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts the timer with the specified number of frames as count.
  *
  * @param {number} count
  * @memberof Game_Timer</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the timer.
  *
  * @memberof Game_Timer</haxe_doc>
		</stop>
		<isWorking public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns true if the timer is working and counting down.
  *
  * @returns {boolean}
  * @memberof Game_Timer</haxe_doc>
		</isWorking>
		<seconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of seconds on the timer.
  *
  * @returns {number}
  * @memberof Game_Timer</haxe_doc>
		</seconds>
		<onExpire public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when the time expires on the timer.
  *
  * @memberof Game_Timer</haxe_doc>
		</onExpire>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object class for the timer.
 *
 * @class Game_Timer</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Timer"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Troop" params="" file="src/rm/objects/Game_Troop.hx" extern="1">
		<extends path="rm.objects.Game_Unit"/>
		<LETTER_TABLE_HALF public="1" static="1"><c path="Array"><c path="String"/></c></LETTER_TABLE_HALF>
		<LETTER_TABLE_FULL public="1" static="1"><c path="Array"><c path="String"/></c></LETTER_TABLE_FULL>
		<_interpreter><c path="rm.objects.Game_Interpreter"/></_interpreter>
		<_troopId><x path="Int"/></_troopId>
		<_eventFlags>
			<x path="haxe.DynamicAccess"><x path="Bool"/></x>
			<haxe_doc>* _eventFlags:{
   [Number]:Bool
  }</haxe_doc>
		</_eventFlags>
		<_enemies><c path="Array"><c path="rm.objects.Game_Enemy"/></c></_enemies>
		<_turnCount><x path="Int"/></_turnCount>
		<_namesCount>
			<x path="haxe.DynamicAccess"><x path="Int"/></x>
			<haxe_doc>* {
   [name:string]:number
  }</haxe_doc>
		</_namesCount>
		<members public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Enemy"/></c></f>
			<haxe_doc><![CDATA[* Returns all enemies in the battle.
  *
  * @returns {Array<Game_Enemy>}
  * @memberof Game_Troop]]></haxe_doc>
		</members>
		<aliveMembers public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Enemy"/></c></f>
			<haxe_doc><![CDATA[* Returns all alive enemies.
  *
  * @returns {Array<Game_Enemy>}
  * @memberof Game_Troop]]></haxe_doc>
		</aliveMembers>
		<deadMembers public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Enemy"/></c></f>
			<haxe_doc><![CDATA[* Returns all dead enemies.
  *
  * @returns {Array<Game_Enemy>}
  * @memberof Game_Troop]]></haxe_doc>
		</deadMembers>
		<movableMembers public="1" set="method" override="1">
			<f a=""><c path="Array"><c path="rm.objects.Game_Enemy"/></c></f>
			<haxe_doc><![CDATA[* Returns movable enemies.
  *
  * @returns {Array<Game_Enemy>}
  * @memberof Game_Troop]]></haxe_doc>
		</movableMembers>
		<isEventRunning public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if event is running.
  *
  * @returns {boolean}
  * @memberof Game_Troop</haxe_doc>
		</isEventRunning>
		<updateInterpreter public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the game interpreter.
  *
  * @memberof Game_Troop</haxe_doc>
		</updateInterpreter>
		<turnCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the turn count.
  *
  * @returns {number}
  * @memberof Game_Troop</haxe_doc>
		</turnCount>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<troop public="1" set="method">
			<f a=""><t path="rm.types.Troop"/></f>
			<haxe_doc>* Returns troop information from the database.
  *
  * @returns {RPG.Troop}
  * @memberof Game_Troop</haxe_doc>
		</troop>
		<setup public="1" set="method"><f a="troopId">
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<makeUniqueNames public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates unique names for each enemy.
  *
  * @memberof Game_Troop</haxe_doc>
		</makeUniqueNames>
		<letterTable public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc><![CDATA[* Returns the letter table for enemy troops.
  *
  * @returns {Array<string>}
  * @memberof Game_Troop]]></haxe_doc>
		</letterTable>
		<enemyNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc><![CDATA[* Returns the name of enemies within the troop.
  *
  * @returns {Array<string>}
  * @memberof Game_Troop]]></haxe_doc>
		</enemyNames>
		<meetsConditions public="1" set="method"><f a="page">
	<t path="rm.types.EventPage"/>
	<x path="Bool"/>
</f></meetsConditions>
		<setupBattleEvent public="1" set="method"><f a=""><x path="Void"/></f></setupBattleEvent>
		<increaseTurn public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Increases the turn number.
  *
  * @memberof Game_Troop</haxe_doc>
		</increaseTurn>
		<expTotal public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the total exp of all members of the enemy troop.
  *
  * @returns {number}
  * @memberof Game_Troop</haxe_doc>
		</expTotal>
		<goldTotal public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Return the total gold of all enemies.
  *
  * @returns {number}
  * @memberof Game_Troop</haxe_doc>
		</goldTotal>
		<goldRate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the gold rate based on game party gold rate.
  *
  * @returns {number}
  * @memberof Game_Troop</haxe_doc>
		</goldRate>
		<makeDropItems public="1" set="method">
			<f a=""><c path="Array"><t path="rm.types.BaseItem"/></c></f>
			<haxe_doc><![CDATA[* Creates the drop items for all members of the enemy troop, and
  * returns the item information.
  * @returns {Array<RPG.BaseItem>}
  * @memberof Game_Troop]]></haxe_doc>
		</makeDropItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Game_Troop
 *
 * The game object declare class for a troop and the battle-related data.
 * @class Game_Troop</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Troop"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Variables" params="" file="src/rm/objects/Game_Variables.hx" extern="1">
		<_data><c path="Array"><x path="Int"/></c></_data>
		<initialize public="1" set="method"><f a=""><x path="Void"/></f></initialize>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<value public="1" set="method"><f a="variableId">
	<x path="Int"/>
	<x path="Int"/>
</f></value>
		<setValue public="1" set="method"><f a="variableId:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setValue>
		<onChange public="1" set="method"><f a=""><x path="Void"/></f></onChange>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object class for game variables.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Variables"</e></m>
		</meta>
	</class>
	<class path="rm.objects.Game_Vehicle" params="" file="src/rm/objects/Game_Vehicle.hx" extern="1">
		<extends path="rm.objects.Game_Character"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The game object class for a vehicle.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Game_Vehicle"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Message" params="" file="src/rm/scenes/Scene_Message.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<isMessageWindowClosing public="1"><x path="Bool"/></isMessageWindowClosing>
		<__choiceListWindow public="1">
			<c path="rm.windows.Window_ChoiceList"/>
			<meta><m n=":native"><e>"_choiceListWindow"</e></m></meta>
		</__choiceListWindow>
		<_choiceListWindow><c path="rm.windows.Window_ChoiceList"/></_choiceListWindow>
		<__eventItemWindow public="1">
			<c path="rm.windows.Window_EventItem"/>
			<meta><m n=":native"><e>"_eventItemWindow"</e></m></meta>
		</__eventItemWindow>
		<_eventItemWindow><c path="rm.windows.Window_EventItem"/></_eventItemWindow>
		<__nameBoxWindow public="1">
			<c path="rm.windows.Window_NameBox"/>
			<meta><m n=":native"><e>"_nameBoxWindow"</e></m></meta>
		</__nameBoxWindow>
		<_nameBoxWindow><c path="rm.windows.Window_NameBox"/></_nameBoxWindow>
		<__numberInputWindow public="1">
			<c path="rm.windows.Window_NumberInput"/>
			<meta><m n=":native"><e>"_numberInputWindow"</e></m></meta>
		</__numberInputWindow>
		<_numberInputWindow><c path="rm.windows.Window_NumberInput"/></_numberInputWindow>
		<createAllWindows public="1" set="method"><f a=""><x path="Void"/></f></createAllWindows>
		<createMessageWindow public="1" set="method"><f a=""><x path="Void"/></f></createMessageWindow>
		<messageWindowRect public="1" set="method"><f a=""><x path="Void"/></f></messageWindowRect>
		<createScrollTextWindow public="1" set="method"><f a=""><x path="Void"/></f></createScrollTextWindow>
		<scrollTextWindowRect public="1" set="method"><f a=""><x path="Void"/></f></scrollTextWindowRect>
		<createGoldWindow public="1" set="method"><f a=""><x path="Void"/></f></createGoldWindow>
		<goldWindowRect public="1" set="method"><f a=""><x path="Void"/></f></goldWindowRect>
		<createNameBoxWindow public="1" set="method"><f a=""><x path="Void"/></f></createNameBoxWindow>
		<createChoiceListWindow public="1" set="method"><f a=""><x path="Void"/></f></createChoiceListWindow>
		<createNumberInputWindow public="1" set="method"><f a=""><x path="Void"/></f></createNumberInputWindow>
		<createEventItemWindow public="1" set="method"><f a=""><x path="Void"/></f></createEventItemWindow>
		<eventItemWindowRect public="1" set="method"><f a=""><x path="Void"/></f></eventItemWindowRect>
		<associateWindows public="1" set="method"><f a=""><x path="Void"/></f></associateWindows>
		<meta><m n=":native"><e>"Scene_Message"</e></m></meta>
	</class>
	<class path="rm.scenes.Scene_Battle" params="" file="src/rm/scenes/Scene_Battle.hx" extern="1">
		<extends path="rm.scenes.Scene_Message"/>
		<_spriteset><c path="rm.sprites.Spriteset_Battle"/></_spriteset>
		<_statusWindow><c path="rm.windows.Window_BattleStatus"/></_statusWindow>
		<_partyCommandWindow><c path="rm.windows.Window_PartyCommand"/></_partyCommandWindow>
		<_actorCommandWindow><c path="rm.windows.Window_ActorCommand"/></_actorCommandWindow>
		<_skillWindow><c path="rm.windows.Window_BattleSkill"/></_skillWindow>
		<_itemWindow><c path="rm.windows.Window_BattleItem"/></_itemWindow>
		<_actorWindow><c path="rm.windows.Window_BattleActor"/></_actorWindow>
		<_enemyWindow><c path="rm.windows.Window_BattleEnemy"/></_enemyWindow>
		<_logWindow><c path="rm.windows.Window_BattleLog"/></_logWindow>
		<_helpWindow><c path="rm.windows.Window_Help"/></_helpWindow>
		<_messageWindow><c path="rm.windows.Window_Message"/></_messageWindow>
		<_scrollTextWindow><c path="rm.windows.Window_ScrollText"/></_scrollTextWindow>
		<updateBattleProcess public="1" set="method"><f a=""><x path="Void"/></f></updateBattleProcess>
		<isAnyInputWindowActive public="1" set="method"><f a=""><x path="Bool"/></f></isAnyInputWindowActive>
		<changeInputWindow public="1" set="method"><f a=""><x path="Void"/></f></changeInputWindow>
		<updateVisibility public="1" set="method"><f a=""><x path="Void"/></f></updateVisibility>
		<updateLogWindowVisibility public="1" set="method"><f a=""><x path="Void"/></f></updateLogWindowVisibility>
		<updateStatusWindowVisibility public="1" set="method"><f a=""><x path="Void"/></f></updateStatusWindowVisibility>
		<updateInputWindowVisibility public="1" set="method"><f a=""><x path="Void"/></f></updateInputWindowVisibility>
		<needsInputWindowChange public="1" set="method"><f a=""><x path="Bool"/></f></needsInputWindowChange>
		<isTimeActive public="1" set="method"><f a=""><x path="Bool"/></f></isTimeActive>
		<shouldAutosave public="1" set="method"><f a=""><x path="Bool"/></f></shouldAutosave>
		<updateStatusWindowPosition public="1" set="method"><f a=""><x path="Void"/></f></updateStatusWindowPosition>
		<statusWindowX public="1" set="method"><f a=""><x path="Int"/></f></statusWindowX>
		<shouldOpenStatusWindow public="1" set="method"><f a=""><x path="Bool"/></f></shouldOpenStatusWindow>
		<logWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></logWindowRect>
		<statusWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></statusWindowRect>
		<partyCommandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></partyCommandWindowRect>
		<actorCommandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></actorCommandWindowRect>
		<helpWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></helpWindowRect>
		<skillWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></skillWindowRect>
		<itemWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></itemWindowRect>
		<actorWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></actorWindowRect>
		<enemyWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></enemyWindowRect>
		<helpAreaTop public="1" set="method"><f a=""><x path="Int"/></f></helpAreaTop>
		<helpAreaBottom public="1" set="method"><f a=""><x path="Int"/></f></helpAreaBottom>
		<helpAreaHeight public="1" set="method"><f a=""><x path="Int"/></f></helpAreaHeight>
		<mainAreaTop public="1" set="method"><f a=""><x path="Int"/></f></mainAreaTop>
		<mainAreaBottom public="1" set="method"><f a=""><x path="Int"/></f></mainAreaBottom>
		<mainAreaHeight public="1" set="method"><f a=""><x path="Int"/></f></mainAreaHeight>
		<buttonAreaTop public="1" set="method" override="1"><f a=""><x path="Int"/></f></buttonAreaTop>
		<windowAreaHeight public="1" set="method"><f a=""><x path="Int"/></f></windowAreaHeight>
		<createButtons public="1" set="method"><f a=""><x path="Void"/></f></createButtons>
		<needsCancelButton public="1" set="method"><f a=""><x path="Void"/></f></needsCancelButton>
		<createCancelButton public="1" set="method"><f a=""><x path="Void"/></f></createCancelButton>
		<needsPageButtons public="1" set="method"><f a=""><x path="Void"/></f></needsPageButtons>
		<createPageButtons public="1" set="method"><f a=""><x path="Void"/></f></createPageButtons>
		<updatePageButtons public="1" set="method"><f a=""><x path="Void"/></f></updatePageButtons>
		<arePageButtonsEnabled public="1" set="method"><f a=""><x path="Bool"/></f></arePageButtonsEnabled>
		<closeCommandWindows public="1" set="method"><f a=""><x path="Void"/></f></closeCommandWindows>
		<hideSubInputWindows public="1" set="method"><f a=""><x path="Void"/></f></hideSubInputWindows>
		<startEnemySelection public="1" set="method"><f a=""><x path="Void"/></f></startEnemySelection>
		<stop public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the battle scene.
 *
 * @memberof Scene_Battle</haxe_doc>
		</stop>
		<needsSlowFadeOut public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the battle needs a slow fade out.
 *
 * @returns {boolean}
 * @memberof Scene_Battle</haxe_doc>
		</needsSlowFadeOut>
		<updateStatusWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the status window on the battle scene.
 *
 * @memberof Scene_Battle</haxe_doc>
		</updateStatusWindow>
		<updateWindowPositions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the position of the battle scene windows.
 *
 * @memberof Scene_Battle</haxe_doc>
		</updateWindowPositions>
		<createDisplayObjects public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates all the display objects including:
 * the spritesheet, window layer, windows, and more.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createDisplayObjects>
		<createSpriteset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the spriteset within
 * the battle scene. This includes
 * sprites for actors, enemies, etc.
 * @memberof Scene_Battle</haxe_doc>
		</createSpriteset>
		<createAllWindows public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates all the windows within the
 * battle scene.
 * @memberof Scene_Battle</haxe_doc>
		</createAllWindows>
		<createLogWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the log window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createLogWindow>
		<createStatusWindow public="1" set="method"><f a=""><x path="Void"/></f></createStatusWindow>
		<createPartyCommandWindow public="1" set="method"><f a=""><x path="Void"/></f></createPartyCommandWindow>
		<createActorCommandWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the actor command window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createActorCommandWindow>
		<createHelpWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the help window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createHelpWindow>
		<createSkillWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the skill window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createSkillWindow>
		<createItemWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the item window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createItemWindow>
		<createActorWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the actor window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createActorWindow>
		<createEnemyWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the enemy window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createEnemyWindow>
		<createMessageWindow public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the message window on the battle scene.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createMessageWindow>
		<createScrollTextWindow public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the scroll text window.
 *
 * @memberof Scene_Battle</haxe_doc>
		</createScrollTextWindow>
		<refreshStatus public="1" set="method"><f a=""><x path="Void"/></f></refreshStatus>
		<startPartyCommandSelection public="1" set="method"><f a=""><x path="Void"/></f></startPartyCommandSelection>
		<commandFight public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the fight command on battle start..
 *
 * @memberof Scene_Battle</haxe_doc>
		</commandFight>
		<commandEscape public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the escape command on battle start.
 *
 * @memberof Scene_Battle</haxe_doc>
		</commandEscape>
		<startActorCommandSelection public="1" set="method"><f a=""><x path="Void"/></f></startActorCommandSelection>
		<commandAttack public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the attack command.
 *
 * @memberof Scene_Battle</haxe_doc>
		</commandAttack>
		<commandSkill public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*
 * Handler for the skill command.
 *
 * @memberof Scene_Battle</haxe_doc>
		</commandSkill>
		<commandGuard public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the guard command.
 *
 * @memberof Scene_Battle</haxe_doc>
		</commandGuard>
		<commandItem public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the item command.
 *
 * @memberof Scene_Battle</haxe_doc>
		</commandItem>
		<selectNextCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Selects the next command in the battle scene.
 *
 * @memberof Scene_Battle</haxe_doc>
		</selectNextCommand>
		<selectPreviousCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Selects the previous command in the battle scene.
 *
 * @memberof Scene_Battle</haxe_doc>
		</selectPreviousCommand>
		<selectActorSelection public="1" set="method"><f a=""><x path="Void"/></f></selectActorSelection>
		<onActorOk public="1" set="method"><f a=""><x path="Void"/></f></onActorOk>
		<onActorCancel public="1" set="method"><f a=""><x path="Void"/></f></onActorCancel>
		<selectEnemySelection public="1" set="method"><f a=""><x path="Void"/></f></selectEnemySelection>
		<onEnemyOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when an enemy is selected.
 *
 * @memberof Scene_Battle</haxe_doc>
		</onEnemyOk>
		<onEnemyCancel public="1" set="method"><f a=""><x path="Void"/></f></onEnemyCancel>
		<onSkillOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when a skill is selected.
 *
 * @memberof Scene_Battle</haxe_doc>
		</onSkillOk>
		<onSkillCancel public="1" set="method"><f a=""><x path="Void"/></f></onSkillCancel>
		<onItemOk public="1" set="method"><f a=""><x path="Void"/></f></onItemOk>
		<onItemCancel public="1" set="method"><f a=""><x path="Void"/></f></onItemCancel>
		<onSelectAction public="1" set="method"><f a=""><x path="Void"/></f></onSelectAction>
		<endCommandSelection public="1" set="method"><f a=""><x path="Void"/></f></endCommandSelection>
		<haxe_doc>* Scene class of the battle screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Battle"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Boot" params="" file="src/rm/scenes/Scene_Boot.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<_startDate><c path="js.lib.Date"/></_startDate>
		<__databaseLoaded public="1">
			<x path="Bool"/>
			<meta><m n="native"><e>"_databaseLoaded"</e></m></meta>
		</__databaseLoaded>
		<_databaseLoaded><x path="Bool"/></_databaseLoaded>
		<onDatabaseLoaded public="1" set="method"><f a=""><x path="Void"/></f></onDatabaseLoaded>
		<setEncryptionInfo public="1" set="method"><f a=""><x path="Void"/></f></setEncryptionInfo>
		<loadPlayerData public="1" set="method"><f a=""><x path="Void"/></f></loadPlayerData>
		<loadGameFonts public="1" set="method"><f a=""><x path="Void"/></f></loadGameFonts>
		<isPlayerDataLoaded public="1" set="method"><f a=""><x path="Void"/></f></isPlayerDataLoaded>
		<startNormalGame public="1" set="method"><f a=""><x path="Void"/></f></startNormalGame>
		<resizeScreen public="1" set="method"><f a=""><x path="Void"/></f></resizeScreen>
		<adjustBoxSize public="1" set="method"><f a=""><x path="Void"/></f></adjustBoxSize>
		<adjustWindow public="1" set="method"><f a=""><x path="Void"/></f></adjustWindow>
		<loadSystemImages public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the system images upon booting the game.</haxe_doc>
		</loadSystemImages>
		<loadSystemWindowImage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the system window image for showing all windows in game.</haxe_doc>
		</loadSystemWindowImage>
		<isGameFontLoaded public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the game font is loaded.
  * @return Bool</haxe_doc>
		</isGameFontLoaded>
		<updateDocumentTitle public="1" set="method"><f a=""><x path="Void"/></f></updateDocumentTitle>
		<checkPlayerLocation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks the player location upon booting the game.</haxe_doc>
		</checkPlayerLocation>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Boot"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_MenuBase" params="" file="src/rm/scenes/Scene_MenuBase.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<_actor>
			<c path="rm.objects.Game_Actor"/>
			<haxe_doc>* The current actor selected in the base menu scene.
  *
  * @protected
  * @type {Game_Actor}
  * @memberof Scene_MenuBase</haxe_doc>
		</_actor>
		<_backgroundSprite>
			<c path="rm.core.Sprite"/>
			<haxe_doc>* The background sprite used to display the scene background.
  *
  * @protected
  * @type {Sprite}
  * @memberof Scene_MenuBase</haxe_doc>
		</_backgroundSprite>
		<_helpWindow>
			<c path="rm.windows.Window_Help"/>
			<haxe_doc>* The help window attached to the base menu scene.
  *
  * @protected
  * @type {Window_Help}
  * @memberof Scene_MenuBase</haxe_doc>
		</_helpWindow>
		<actor public="1" set="method">
			<f a=""><c path="rm.objects.Game_Actor"/></f>
			<haxe_doc>* Returns the current game actor.
  *
  * @returns {Game_Actor}
  * @memberof Scene_MenuBase</haxe_doc>
		</actor>
		<__cancelButton public="1">
			<c path="rm.sprites.Sprite_Button"/>
			<meta><m n=":native"><e>"_cancelButton"</e></m></meta>
		</__cancelButton>
		<_cancelButton><c path="rm.sprites.Sprite_Button"/></_cancelButton>
		<__pageupButton public="1">
			<c path="rm.sprites.Sprite_Button"/>
			<meta><m n=":native"><e>"_pageupButton"</e></m></meta>
		</__pageupButton>
		<_pageupButton><c path="rm.sprites.Sprite_Button"/></_pageupButton>
		<__pagedownButton public="1">
			<c path="rm.sprites.Sprite_Button"/>
			<meta><m n=":native"><e>"_pagedownButton"</e></m></meta>
		</__pagedownButton>
		<_pagedownButton><c path="rm.sprites.Sprite_Button"/></_pagedownButton>
		<helpAreaTop public="1" set="method"><f a=""><x path="Void"/></f></helpAreaTop>
		<helpAreaBottom public="1" set="method"><f a=""><x path="Void"/></f></helpAreaBottom>
		<helpAreaHeight public="1" set="method"><f a=""><x path="Void"/></f></helpAreaHeight>
		<mainAreaTop public="1" set="method"><f a=""><x path="Void"/></f></mainAreaTop>
		<mainAreaBottom public="1" set="method"><f a=""><x path="Void"/></f></mainAreaBottom>
		<mainAreaHeight public="1" set="method"><f a=""><x path="Void"/></f></mainAreaHeight>
		<helpWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></helpWindowRect>
		<createButtons public="1" set="method"><f a=""><x path="Void"/></f></createButtons>
		<needsCancelButton public="1" set="method"><f a=""><x path="Bool"/></f></needsCancelButton>
		<createCancelButton public="1" set="method"><f a=""><x path="Void"/></f></createCancelButton>
		<needsPageButtons public="1" set="method"><f a=""><x path="Bool"/></f></needsPageButtons>
		<createPageButtons public="1" set="method"><f a=""><x path="Void"/></f></createPageButtons>
		<updatePageButtons public="1" set="method"><f a=""><x path="Void"/></f></updatePageButtons>
		<arePageButtonsEnabled public="1" set="method"><f a=""><x path="Bool"/></f></arePageButtonsEnabled>
		<updateActor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the current actor.
  *
  * @memberof Scene_MenuBase</haxe_doc>
		</updateActor>
		<createBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the background of the base menu scene.
  *
  * @memberof Scene_MenuBase</haxe_doc>
		</createBackground>
		<setBackgroundOpacity public="1" set="method">
			<f a="opacity">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the background opacity of the base menu scene background.
  *
  * @param {number} opacity
  * @memberof Scene_MenuBase</haxe_doc>
		</setBackgroundOpacity>
		<createHelpWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the help window.
  *
  * @memberof Scene_MenuBase</haxe_doc>
		</createHelpWindow>
		<nextActor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves to the next actor in the party.
  *
  * @memberof Scene_MenuBase</haxe_doc>
		</nextActor>
		<previousActor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves to the previous actor in the party.
  *
  * @memberof Scene_MenuBase</haxe_doc>
		</previousActor>
		<onActorChange public="1" set="method"><f a=""><x path="Void"/></f></onActorChange>
		<haxe_doc>* The super class of all menu-type scenes</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_MenuBase"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Debug" params="" file="src/rm/scenes/Scene_Debug.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<createRangeWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the range window.
  *
  * @memberof Scene_Debug</haxe_doc>
		</createRangeWindow>
		<rangeWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></rangeWindowRect>
		<editWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></editWindowRect>
		<debugHelpWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></debugHelpWindowRect>
		<createEditWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the edit window.
  *
  * @memberof Scene_Debug</haxe_doc>
		</createEditWindow>
		<createDebugHelpWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the debug help .window.
  *
  * @memberof Scene_Debug</haxe_doc>
		</createDebugHelpWindow>
		<onRangeOk public="1" set="method"><f a=""><x path="Void"/></f></onRangeOk>
		<onEditCancel public="1" set="method"><f a=""><x path="Void"/></f></onEditCancel>
		<refreshHelpWindow public="1" set="method"><f a=""><x path="Void"/></f></refreshHelpWindow>
		<helpText public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the help text within the
  * debug scene.
  * @returns {String}
  * @memberof Scene_Debug</haxe_doc>
		</helpText>
		<haxe_doc>* Scene class of the debug menu screen.</haxe_doc>
	</class>
	<class path="rm.scenes.Scene_Equip" params="" file="src/rm/scenes/Scene_Equip.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_statusWindow><c path="rm.windows.Window_EquipStatus"/></_statusWindow>
		<_commandWindow><c path="rm.windows.Window_EquipCommand"/></_commandWindow>
		<_slotWindow><c path="rm.windows.Window_EquipSlot"/></_slotWindow>
		<_itemWindow><c path="rm.windows.Window_EquipItem"/></_itemWindow>
		<statusWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></statusWindowRect>
		<commandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></commandWindowRect>
		<slotWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></slotWindowRect>
		<itemWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></itemWindowRect>
		<executeEquipChange public="1" set="method"><f a=""><x path="Void"/></f></executeEquipChange>
		<createStatusWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the status window within the equip scene.
  *
  * @memberof Scene_Equip</haxe_doc>
		</createStatusWindow>
		<createCommandWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the status window within the equip scene.
  *
  * @memberof Scene_Equip</haxe_doc>
		</createCommandWindow>
		<createSlotWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the slot window within the  equip scene.
  *
  * @memberof Scene_Equip</haxe_doc>
		</createSlotWindow>
		<createItemWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the item window within the equip scene.
  *
  * @memberof Scene_Equip</haxe_doc>
		</createItemWindow>
		<refreshActor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the actor within the equip scene.
  *
  * @memberof Scene_Equip</haxe_doc>
		</refreshActor>
		<commandEquip public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the equip command.
  *
  * @memberof Scene_Equip</haxe_doc>
		</commandEquip>
		<commandOptimize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the optimize command.
  *
  * @memberof Scene_Equip</haxe_doc>
		</commandOptimize>
		<commandClear public="1" set="method"><f a=""><x path="Void"/></f></commandClear>
		<onSlotOk public="1" set="method"><f a=""><x path="Void"/></f></onSlotOk>
		<onSlotCancel public="1" set="method"><f a=""><x path="Void"/></f></onSlotCancel>
		<onItemOk public="1" set="method"><f a=""><x path="Void"/></f></onItemOk>
		<onItemCancel public="1" set="method"><f a=""><x path="Void"/></f></onItemCancel>
		<onActorChange public="1" set="method" override="1"><f a=""><x path="Void"/></f></onActorChange>
		<haxe_doc>* Scene class of the equipment screen.</haxe_doc>
		<meta><m n=":native"><e>"Scene_Equip"</e></m></meta>
	</class>
	<class path="rm.scenes.Scene_File" params="" file="src/rm/scenes/Scene_File.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_listWindow><c path="rm.windows.Window_SavefileList"/></_listWindow>
		<isSavefileEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isSavefileEnabled>
		<listWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></listWindowRect>
		<needsAutosave public="1" set="method"><f a=""><x path="Bool"/></f></needsAutosave>
		<firstSavefileId public="1" set="method"><f a=""><x path="Int"/></f></firstSavefileId>
		<savefileId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current savefileId.
  *
  * @memberof Scene_File</haxe_doc>
		</savefileId>
		<createHelpWindow public="1" set="method" override="1"><f a=""><x path="Void"/></f></createHelpWindow>
		<createListWindow public="1" set="method"><f a=""><x path="Void"/></f></createListWindow>
		<mode public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* The current mode of the scene;
  * the modes are 'save' or 'load'.
  * @memberof Scene_File</haxe_doc>
		</mode>
		<activateListWindow public="1" set="method"><f a=""><x path="Void"/></f></activateListWindow>
		<helpWindowText public="1" set="method"><f a=""><c path="String"/></f></helpWindowText>
		<onSavefileOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when a
  * save file is selected within the file scene.
  * @memberof Scene_File</haxe_doc>
		</onSavefileOk>
		<haxe_doc>*  Super class of Scene_Save and Scene_Load</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_File"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_GameEnd" params="" file="src/rm/scenes/Scene_GameEnd.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_commandWindow><c path="rm.windows.Window_GameEnd"/></_commandWindow>
		<commandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></commandWindowRect>
		<stop public="1" set="method" override="1"><f a=""><x path="Void"/></f></stop>
		<createBackground public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the background for
  * the game end scene.
  * @memberof Scene_GameEnd</haxe_doc>
		</createBackground>
		<createCommandWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the command window
  * for the game end screen.
  * @memberof Scene_GameEnd</haxe_doc>
		</createCommandWindow>
		<commandToTitle public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when to title
  * is clicked within the game end screen.
  * @memberof Scene_GameEnd</haxe_doc>
		</commandToTitle>
		<haxe_doc>* Scene class of the game end screen.</haxe_doc>
		<meta><m n=":native"><e>"Scene_GameEnd"</e></m></meta>
	</class>
	<class path="rm.scenes.Scene_GameOver" params="" file="src/rm/scenes/Scene_GameOver.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<_backSprite><c path="rm.core.Sprite"/></_backSprite>
		<adjustBackground public="1" set="method"><f a=""><x path="Void"/></f></adjustBackground>
		<stop public="1" set="method" override="1"><f a=""><x path="Void"/></f></stop>
		<playGameoverMusic public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays the game over music
  * within the game over scene.
  * @memberof Scene_Gameover</haxe_doc>
		</playGameoverMusic>
		<createBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the background of
  * the game over scene.
  * @memberof Scene_Gameover</haxe_doc>
		</createBackground>
		<isTriggered public="1" set="method"><f a=""><x path="Bool"/></f></isTriggered>
		<gotoTitle public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns to the title scene (Scene_Title).
  * @memberof Scene_Gameover</haxe_doc>
		</gotoTitle>
		<haxe_doc>* Scene class of the game over screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_GameOver"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_ItemBase" params="" file="src/rm/scenes/Scene_ItemBase.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<_actorWindow><c path="rm.windows.Window_MenuActor"/></_actorWindow>
		<_itemWindow><c path="rm.windows.Window_Selectable"/></_itemWindow>
		<actorWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></actorWindowRect>
		<createActorWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the actor window within the base item scene.
  *
  * @memberof Scene_ItemBase</haxe_doc>
		</createActorWindow>
		<item public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns the item attached to the item window within the base item scene.
  *
  * @returns {*}
  * @memberof Scene_ItemBase</haxe_doc>
		</item>
		<user public="1" set="method">
			<f a=""><c path="rm.objects.Game_Actor"/></f>
			<haxe_doc>* Returns the current game actor.
  *
  * @returns {Game_Actor}
  * @memberof Scene_ItemBase</haxe_doc>
		</user>
		<isCursorLeft public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the cursor is left.
  *
  * @returns {boolean}
  * @memberof Scene_ItemBase</haxe_doc>
		</isCursorLeft>
		<showSubWindow public="1" set="method">
			<f a="window">
				<c path="rm.windows.Window_Base"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Shows the sub window.
  *
  * @param {Window_Base} window
  * @memberof Scene_ItemBase</haxe_doc>
		</showSubWindow>
		<hideSubWindow public="1" set="method">
			<f a="window">
				<c path="rm.windows.Window_Base"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Hides the sub window.
  *
  * @param {Window_Base} window
  * @memberof Scene_ItemBase</haxe_doc>
		</hideSubWindow>
		<onActorOk public="1" set="method"><f a=""><x path="Void"/></f></onActorOk>
		<onActorCancel public="1" set="method"><f a=""><x path="Void"/></f></onActorCancel>
		<determineItem public="1" set="method"><f a=""><x path="Void"/></f></determineItem>
		<useItem public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Uses the current item.
  *
  * @memberof Scene_ItemBase</haxe_doc>
		</useItem>
		<activateItemWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Activates the item window.
  *
  * @memberof Scene_ItemBase</haxe_doc>
		</activateItemWindow>
		<itemTargetActors public="1" set="method"><f a=""><c path="rm.objects.Game_Actor"/></f></itemTargetActors>
		<canUse public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the user (game actor) can use the item.
  *
  * @returns {boolean}
  * @memberof Scene_ItemBase</haxe_doc>
		</canUse>
		<isItemEffectsValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item effects are valid on the public function target(the user).
  *
  * @returns {boolean}
  * @memberof Scene_ItemBase</haxe_doc>
		</isItemEffectsValid>
		<applyItem public="1" set="method"><f a=""><x path="Void"/></f></applyItem>
		<checkCommonEvent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks the common event set on the item.
  *
  * @memberof Scene_ItemBase</haxe_doc>
		</checkCommonEvent>
		<haxe_doc><![CDATA[* Super class of all public function item(skill, items, etc) screen scenes.
 * Super class of Scene_Item & Scene_Skill.]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_ItemBase"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Item" params="" file="src/rm/scenes/Scene_Item.hx" extern="1">
		<extends path="rm.scenes.Scene_ItemBase"/>
		<_categoryWindow><c path="rm.windows.Window_ItemCategory"/></_categoryWindow>
		<categoryWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></categoryWindowRect>
		<itemWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></itemWindowRect>
		<createCategoryWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the category window on the
  * item scene.
  * @memberof Scene_Item</haxe_doc>
		</createCategoryWindow>
		<createItemWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the item window on the item
  * scene.
  * @memberof Scene_Item</haxe_doc>
		</createItemWindow>
		<onCategoryOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when a cataegory is selected
  * on the item scene.
  * @memberof Scene_Item</haxe_doc>
		</onCategoryOk>
		<onItemOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when an item is selected
  * on the item scene.
  * @memberof Scene_Item</haxe_doc>
		</onItemOk>
		<onItemCancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when an item selection
  * is canceled on the item scene.
  * @memberof Scene_Item</haxe_doc>
		</onItemCancel>
		<playSeForItem public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays a sound effect when the
  * item is confirmed.
  * @memberof Scene_Item</haxe_doc>
		</playSeForItem>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Scene_Item
 *
 * The scene class of the item screen.
 * @class Scene_Item
 * @extends {Scene_ItemBase}</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Item"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Load" params="" file="src/rm/scenes/Scene_Load.hx" extern="1">
		<extends path="rm.scenes.Scene_File"/>
		<_loadSuccess><x path="Bool"/></_loadSuccess>
		<mode public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the mode of the
  * load scene.
  * @returns {string}
  * @memberof Scene_Load</haxe_doc>
		</mode>
		<helpWindowText public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the help window text on the
  * game load scene.
  * @returns {string}
  * @memberof Scene_Load</haxe_doc>
		</helpWindowText>
		<executeLoad public="1" set="method"><f a="saveFileId">
	<x path="Int"/>
	<x path="Void"/>
</f></executeLoad>
		<firstSavefileIndex public="1" set="method"><f a=""><x path="Int"/></f></firstSavefileIndex>
		<onSavefileOk public="1" set="method" override="1"><f a=""><x path="Void"/></f></onSavefileOk>
		<onLoadSuccess public="1" set="method"><f a=""><x path="Void"/></f></onLoadSuccess>
		<onLoadFailure public="1" set="method"><f a=""><x path="Void"/></f></onLoadFailure>
		<reloadMapIfUpdated public="1" set="method"><f a=""><x path="Void"/></f></reloadMapIfUpdated>
		<haxe_doc>* The scene class of the load game screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Load"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Map" params="" file="src/rm/scenes/Scene_Map.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<_waitCount><x path="Int"/></_waitCount>
		<_encounterEffectDuration><x path="Int"/></_encounterEffectDuration>
		<_mapLoaded><x path="Bool"/></_mapLoaded>
		<_touchCount><x path="Int"/></_touchCount>
		<_transfer><x path="Bool"/></_transfer>
		<_spriteset><c path="rm.sprites.Spriteset_Map"/></_spriteset>
		<_mapNameWindow><c path="rm.windows.Window_MapName"/></_mapNameWindow>
		<_scrollTextWindow><c path="rm.windows.Window_ScrollText"/></_scrollTextWindow>
		<_messageWindow><c path="rm.windows.Window_Message"/></_messageWindow>
		<__lastMapWasNull public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"_lastMapWasNull"</e></m></meta>
		</__lastMapWasNull>
		<_lastMapWasNull><x path="Bool"/></_lastMapWasNull>
		<shouldAutosave public="1" set="method"><f a=""><x path="Bool"/></f></shouldAutosave>
		<onTransferEnd public="1" set="method"><f a=""><x path="Void"/></f></onTransferEnd>
		<isPlayerActive public="1" set="method"><f a=""><x path="Bool"/></f></isPlayerActive>
		<updateMenuButton public="1" set="method"><f a=""><x path="Void"/></f></updateMenuButton>
		<hideMenuButton public="1" set="method"><f a=""><x path="Void"/></f></hideMenuButton>
		<updateMapNameWindow public="1" set="method"><f a=""><x path="Void"/></f></updateMapNameWindow>
		<isAnyButtonPressed public="1" set="method"><f a=""><x path="Bool"/></f></isAnyButtonPressed>
		<onMapTouch public="1" set="method"><f a=""><x path="Void"/></f></onMapTouch>
		<mapNameWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></mapNameWindowRect>
		<createButtons public="1" set="method"><f a=""><x path="Void"/></f></createButtons>
		<createMenuButton public="1" set="method"><f a=""><x path="Void"/></f></createMenuButton>
		<menuCalling public="1"><x path="Bool"/></menuCalling>
		<onMapLoaded public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when the map scene is loaded.
  *
  * @memberof Scene_Map</haxe_doc>
		</onMapLoaded>
		<updateMainMultiply public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Speeds up the updateMain if
  * the map scene is in fast forward mode.
  * @memberof Scene_Map</haxe_doc>
		</updateMainMultiply>
		<updateMain public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the main $game globals
  * if the map scene is active.
  * @memberof Scene_Map</haxe_doc>
		</updateMain>
		<isFastForward public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the player
  * is holding down the confirm button to
  * fast forward through text.
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</isFastForward>
		<stop public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops the map scene and prepares
  * for a new scene.
  * @memberof Scene_Map</haxe_doc>
		</stop>
		<needsFadeIn public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the map scene needs a slow fade in.
  *
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</needsFadeIn>
		<needsSlowFadeOut public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the map scene needs a slow fade out.
  *
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</needsSlowFadeOut>
		<updateWaitCount public="1" set="method"><f a=""><x path="Bool"/></f></updateWaitCount>
		<updateDestination public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constantly checks if the player
  * is touching the map, then processes
  * a map touch for mouse based player character movement.
  * @memberof Scene_Map</haxe_doc>
		</updateDestination>
		<isMapTouchOk public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the map scene is
  * active and the player can move. Used for
  * mouse movement on the map scene.
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</isMapTouchOk>
		<processMapTouch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes the map touch and turns it
  * into coordinates for the player character to move to.
  * @memberof Scene_Map</haxe_doc>
		</processMapTouch>
		<isSceneChangeOk public="1" set="method"><f a=""><x path="Bool"/></f></isSceneChangeOk>
		<updateScene public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</updateScene>
		<createDisplayObjects public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates all the display objects on the map scene;
  * this includes the sprites, window layer, windows, and more.
  * @memberof Scene_Map</haxe_doc>
		</createDisplayObjects>
		<createSpriteset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the spriteset on the map scene;
  * this shows all the characters and events on the map.
  * @memberof Scene_Map</haxe_doc>
		</createSpriteset>
		<createAllWindows public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates all the windows on the map scene
  * contains other window creation methods.
  * @memberof Scene_Map</haxe_doc>
		</createAllWindows>
		<createMapNameWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map name window within
  * the map scene; display map name.
  * @memberof Scene_Map</haxe_doc>
		</createMapNameWindow>
		<createMessageWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the message window for displaying
  * text on the map scene. Commonly used with the
  * showText command.
  * @memberof Scene_Map</haxe_doc>
		</createMessageWindow>
		<createScrollTextWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a scrolling text window on the map scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</createScrollTextWindow>
		<updateTransferPlayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks if the player is transferring;
  * if the player is transferring, move to a new map scene.
  * @memberof Scene_Map</haxe_doc>
		</updateTransferPlayer>
		<updateEncounter public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes starting an encounter on the map scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</updateEncounter>
		<updateCallMenu public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes calling the menu on the map scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</updateCallMenu>
		<isMenuEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the menu is enabled
  * in the database.
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</isMenuEnabled>
		<isMenuCalled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the menu is called
  * via an input trigger.
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</isMenuCalled>
		<callMenu public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Calls the standard RPGMakerMV menu scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</callMenu>
		<updateCallDebug public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Checks if debug is called via input trigger
  * and starts the debug scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</updateCallDebug>
		<isDebugCalled public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Returns true if the debug
  * scene is called via button press and in play test mode.
  * @returns {boolean}
  * @memberof Scene_Map</haxe_doc>
		</isDebugCalled>
		<fadeInForTransfer public="1" set="method"><f a=""><x path="Void"/></f></fadeInForTransfer>
		<fadeOutForTransfer public="1" set="method"><f a=""><x path="Void"/></f></fadeOutForTransfer>
		<launchBattle public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Launches into the battle scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</launchBattle>
		<stopAudioOnBattleStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Stops all audio on battle start.
  *
  * @memberof Scene_Map</haxe_doc>
		</stopAudioOnBattleStart>
		<startEncounterEffect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the encounter effect on the map scene.
  *
  * @memberof Scene_Map</haxe_doc>
		</startEncounterEffect>
		<updateEncounterEffect public="1" set="method"><f a=""><x path="Void"/></f></updateEncounterEffect>
		<snapForBattleBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Takes a snapshot of the map scene for displaying
  * on the battle scene if no battleback is present.
  * @memberof Scene_Map</haxe_doc>
		</snapForBattleBackground>
		<startFlashForEncounter public="1" set="method">
			<f a="duration">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts a flash encounter effect on the map scene
  * given a duration of the flash.
  * @param {number} duration
  * @memberof Scene_Map</haxe_doc>
		</startFlashForEncounter>
		<encounterEffectSpeed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the speed of the encounter effect.
  *
  * @returns {number}
  * @memberof Scene_Map</haxe_doc>
		</encounterEffectSpeed>
		<haxe_doc>* The scene class for the map screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Map"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Menu" params="" file="src/rm/scenes/Scene_Menu.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_commandWindow><c path="rm.windows.Window_MenuCommand"/></_commandWindow>
		<_goldWindow><c path="rm.windows.Window_Gold"/></_goldWindow>
		<_statusWindow><c path="rm.windows.Window_MenuStatus"/></_statusWindow>
		<commandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></commandWindowRect>
		<goldWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></goldWindowRect>
		<createCommandWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the main menu window on the
  * menu scene; contains the commands for
  * menu usage.
  * @memberof Scene_Menu</haxe_doc>
		</createCommandWindow>
		<createGoldWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the gold window on the menu scene.
  *
  * @memberof Scene_Menu</haxe_doc>
		</createGoldWindow>
		<createStatusWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the status window on the menu scene.
  *
  * @memberof Scene_Menu</haxe_doc>
		</createStatusWindow>
		<commandItem public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for what to do when the 'item'
  * command is clicked.
  * @memberof Scene_Menu</haxe_doc>
		</commandItem>
		<commandPersonal public="1" set="method"><f a=""><x path="Void"/></f></commandPersonal>
		<commandFormation public="1" set="method"><f a=""><x path="Void"/></f></commandFormation>
		<commandOptions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for what to do when the 'option'
  * command is clicked.
  * @memberof Scene_Menu</haxe_doc>
		</commandOptions>
		<commandSave public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for what to do when the 'save'
  * command is clicked.
  * @memberof Scene_Menu</haxe_doc>
		</commandSave>
		<commandGameEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for what to do when the 'game end'
  * command is clicked.
  * @memberof Scene_Menu</haxe_doc>
		</commandGameEnd>
		<onPersonalOk public="1" set="method"><f a=""><x path="Void"/></f></onPersonalOk>
		<onPersonalCancel public="1" set="method"><f a=""><x path="Void"/></f></onPersonalCancel>
		<onFormationOk public="1" set="method"><f a=""><x path="Void"/></f></onFormationOk>
		<onFormationCancel public="1" set="method"><f a=""><x path="Void"/></f></onFormationCancel>
		<haxe_doc>* The menu scene in your RPGMakerMV game.</haxe_doc>
		<meta><m n=":native"><e>"Scene_Menu"</e></m></meta>
	</class>
	<class path="rm.scenes.Scene_Name" params="" file="src/rm/scenes/Scene_Name.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<editWindowRect public="1" set="method"><f a=""><x path="Void"/></f></editWindowRect>
		<inputWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></inputWindowRect>
		<prepare public="1" set="method">
			<f a="actorId:maxLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Prepares the name input scene for giving the specified
  * actor at actorId a name with a maximum number of characters
  * given by maxLength.
  * @param {number} actorId
  * @param {number} maxLength
  * @memberof Scene_Name</haxe_doc>
		</prepare>
		<createEditWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the edit window.
  *
  * @memberof Scene_Name</haxe_doc>
		</createEditWindow>
		<createInputWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the input window.
  *
  * @memberof Scene_Name</haxe_doc>
		</createInputWindow>
		<onInputOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when ok is processed on the name input scene.
  *
  * @memberof Scene_Name</haxe_doc>
		</onInputOk>
		<haxe_doc>* Scene class of the name input screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Name"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Options" params="" file="src/rm/scenes/Scene_Options.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_optionsWindow><c path="rm.windows.Window_Options"/></_optionsWindow>
		<createOptionsWindow public="1" set="method"><f a=""><x path="Void"/></f></createOptionsWindow>
		<optionsWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></optionsWindowRect>
		<maxCommands public="1" set="method"><f a=""><x path="Int"/></f></maxCommands>
		<maxVisibleCommands public="1" set="method"><f a=""><x path="Int"/></f></maxVisibleCommands>
		<haxe_doc>* Scene class of the options screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Options"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Save" params="" file="src/rm/scenes/Scene_Save.hx" extern="1">
		<extends path="rm.scenes.Scene_File"/>
		<mode public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the mode of the
  * save scene.
  * @returns {string}
  * @memberof Scene_Save</haxe_doc>
		</mode>
		<helpWindowText public="1" set="method" override="1"><f a=""><c path="String"/></f></helpWindowText>
		<executeSave public="1" set="method"><f a="saveFileId">
	<x path="Int"/>
	<x path="Void"/>
</f></executeSave>
		<firstSavefileIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the index of the first
  * save file within the save scene.
  * @returns {number}
  * @memberof Scene_Save</haxe_doc>
		</firstSavefileIndex>
		<onSavefileOk public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when a save file
  * is confirmed within the save scene.
  * @memberof Scene_Save</haxe_doc>
		</onSavefileOk>
		<onSaveSuccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when save is a success.
  *
  * @memberof Scene_Save</haxe_doc>
		</onSaveSuccess>
		<onSaveFailure public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when save fails.
  *
  * @memberof Scene_Save</haxe_doc>
		</onSaveFailure>
		<haxe_doc>* Save game screen scene for RPGMakerMV.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Save"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Shop" params="" file="src/rm/scenes/Scene_Shop.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_goods><c path="Array"><c path="Array"><x path="Any"/></c></c></_goods>
		<_purchaseOnly><x path="Bool"/></_purchaseOnly>
		<_item><t path="rm.types.BaseItem"/></_item>
		<_goldWindow><c path="rm.windows.Window_Gold"/></_goldWindow>
		<_commandWindow><c path="rm.windows.Window_ShopCommand"/></_commandWindow>
		<_dummyWindow><c path="rm.windows.Window_Base"/></_dummyWindow>
		<_numberWindow><c path="rm.windows.Window_ShopNumber"/></_numberWindow>
		<_statusWindow><c path="rm.windows.Window_ShopStatus"/></_statusWindow>
		<_buyWindow><c path="rm.windows.Window_ShopBuy"/></_buyWindow>
		<_categoryWindow><c path="rm.windows.Window_ItemCategory"/></_categoryWindow>
		<_sellWindow><c path="rm.windows.Window_ShopSell"/></_sellWindow>
		<commandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></commandWindowRect>
		<dummyWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></dummyWindowRect>
		<numberWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></numberWindowRect>
		<statusWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></statusWindowRect>
		<buyWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></buyWindowRect>
		<categoryWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></categoryWindowRect>
		<sellWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></sellWindowRect>
		<prepare public="1" set="method"><f a="goods:purchaseOnly">
	<c path="Array"><c path="Array"><x path="Any"/></c></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></prepare>
		<createGoldWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the gold window on the shop scene.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createGoldWindow>
		<createCommandWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the command window for buying or selling.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createCommandWindow>
		<createDummyWindow public="1" set="method"><f a=""><x path="Void"/></f></createDummyWindow>
		<createNumberWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the number input window on the shop scene.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createNumberWindow>
		<createStatusWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the status window.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createStatusWindow>
		<createBuyWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the buy window.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createBuyWindow>
		<createCategoryWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the category window.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createCategoryWindow>
		<createSellWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the sell window.
  *
  * @memberof Scene_Shop</haxe_doc>
		</createSellWindow>
		<activateBuyWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Activates the buy window within the shop scene.
  *
  * @memberof Scene_Shop</haxe_doc>
		</activateBuyWindow>
		<activateSellWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Activates the sell window within the shop scene.
  *
  * @memberof Scene_Shop</haxe_doc>
		</activateSellWindow>
		<commandBuy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for pressing buy within the shop scene.
  *
  * @memberof Scene_Shop</haxe_doc>
		</commandBuy>
		<commandSell public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for pressing sell within the shop scene.
  *
  * @memberof Scene_Shop</haxe_doc>
		</commandSell>
		<onBuyOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when buying is confirmed.
  *
  * @memberof Scene_Shop</haxe_doc>
		</onBuyOk>
		<onBuyCancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when buying is cancelled.
  *
  * @memberof Scene_Shop</haxe_doc>
		</onBuyCancel>
		<onCategoryOk public="1" set="method"><f a=""><x path="Void"/></f></onCategoryOk>
		<onCategoryCancel public="1" set="method"><f a=""><x path="Void"/></f></onCategoryCancel>
		<onSellOk public="1" set="method"><f a=""><x path="Void"/></f></onSellOk>
		<onSellCancel public="1" set="method"><f a=""><x path="Void"/></f></onSellCancel>
		<onNumberOk public="1" set="method"><f a=""><x path="Void"/></f></onNumberOk>
		<onNumberCancel public="1" set="method"><f a=""><x path="Void"/></f></onNumberCancel>
		<doBuy public="1" set="method">
			<f a="number">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Amount of item to buy.
  * @param number</haxe_doc>
		</doBuy>
		<doSell public="1" set="method">
			<f a="number">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Amount of item to sell.
  * @param number</haxe_doc>
		</doSell>
		<endNumberInput public="1" set="method"><f a=""><x path="Void"/></f></endNumberInput>
		<maxBuy public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number bought.
  *
  * @returns {number}
  * @memberof Scene_Shop</haxe_doc>
		</maxBuy>
		<maxSell public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number sold.
  *
  * @returns {number}
  * @memberof Scene_Shop</haxe_doc>
		</maxSell>
		<money public="1" set="method">
			<f a=""><x path="rm.types.Money"/></f>
			<haxe_doc>* Returns the player gold within
  * the shop scene.
  * @returns {number}
  * @memberof Scene_Shop</haxe_doc>
		</money>
		<currencyUnit public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the currency unit of the
  * game within the shop scene.
  * @returns {string}
  * @memberof Scene_Shop</haxe_doc>
		</currencyUnit>
		<buyingPrice public="1" set="method">
			<f a=""><x path="rm.types.Money"/></f>
			<haxe_doc>* Returns the buying price for the current item.
  *
  * @returns {number}
  * @memberof Scene_Shop</haxe_doc>
		</buyingPrice>
		<sellingPrice public="1" set="method">
			<f a=""><x path="rm.types.Money"/></f>
			<haxe_doc>* Returns the selling price for the current item.
  *
  * @returns {number}
  * @memberof Scene_Shop</haxe_doc>
		</sellingPrice>
		<haxe_doc>* Scene class of the shop screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Shop"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Skill" params="" file="src/rm/scenes/Scene_Skill.hx" extern="1">
		<extends path="rm.scenes.Scene_ItemBase"/>
		<_skillTypeWindow><c path="rm.windows.Window_SkillType"/></_skillTypeWindow>
		<skillTypeWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></skillTypeWindowRect>
		<statusWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></statusWindowRect>
		<itemWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></itemWindowRect>
		<createSkillTypeWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the window for skill types
  * within the skill scene.
  * @memberof Scene_Skill</haxe_doc>
		</createSkillTypeWindow>
		<createStatusWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the status window within
  * the skill scene.
  * @memberof Scene_Skill</haxe_doc>
		</createStatusWindow>
		<createItemWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the item window
  * within the skill scene.
  * @memberof Scene_Skill</haxe_doc>
		</createItemWindow>
		<refreshActor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the current actor displayed in the Skill
  * window with updated information on changes.</haxe_doc>
		</refreshActor>
		<commandSkill public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when a skill is
  * selected/confirmed within the skill scene.
  * @memberof Scene_Skill</haxe_doc>
		</commandSkill>
		<onItemCancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Function to run when selection is cancelled
  * on the skill scene.</haxe_doc>
		</onItemCancel>
		<playSeForItem public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays a sound effect on item
  * confirmation withiin the skill scene.
  * @memberof Scene_Skill</haxe_doc>
		</playSeForItem>
		<onActorChange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when an an actor is
  * changed within the skill scene.
  * @memberof Scene_Skill</haxe_doc>
		</onActorChange>
		<haxe_doc>* The scene class of the skill screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Skill"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Status" params="" file="src/rm/scenes/Scene_Status.hx" extern="1">
		<extends path="rm.scenes.Scene_MenuBase"/>
		<_statusWindow><c path="rm.windows.Window_Status"/></_statusWindow>
		<createProfileWindow public="1" set="method"><f a=""><x path="Void"/></f></createProfileWindow>
		<createStatusWindow public="1" set="method"><f a=""><x path="Void"/></f></createStatusWindow>
		<createStatusParamsWindow public="1" set="method"><f a=""><x path="Void"/></f></createStatusParamsWindow>
		<createStatusEquipWindow public="1" set="method"><f a=""><x path="Void"/></f></createStatusEquipWindow>
		<statusParamsWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></statusParamsWindowRect>
		<statusEquipWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></statusEquipWindowRect>
		<statusParamsWidth public="1" set="method"><f a=""><x path="Int"/></f></statusParamsWidth>
		<statusParamsHeight public="1" set="method"><f a=""><x path="Int"/></f></statusParamsHeight>
		<profileHeight public="1" set="method"><f a=""><x path="Int"/></f></profileHeight>
		<refreshActor public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the actor within the status scene.
  *
  * @memberof Scene_Status</haxe_doc>
		</refreshActor>
		<onActorChange public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when the actor is changed within the status scene.
  *
  * @memberof Scene_Status</haxe_doc>
		</onActorChange>
		<haxe_doc>* Scene class of the status screen in RPGMakerMV.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Status"</e></m>
		</meta>
	</class>
	<class path="rm.scenes.Scene_Title" params="" file="src/rm/scenes/Scene_Title.hx" extern="1">
		<extends path="rm.scenes.Scene_Base"/>
		<__commandWindow public="1">
			<c path="rm.windows.Window_TitleCommand"/>
			<meta><m n=":native"><e>"_commandWindow"</e></m></meta>
			<haxe_doc>* The command window for title scene commands like new game, continue, or options.</haxe_doc>
		</__commandWindow>
		<__backSprite1 public="1">
			<c path="rm.core.Sprite"/>
			<meta><m n=":native"><e>"_backSprite1"</e></m></meta>
			<haxe_doc>* The background sprite which loads the $dataSystem.title1Name image.</haxe_doc>
		</__backSprite1>
		<__backSprite2 public="1">
			<c path="rm.core.Sprite"/>
			<meta><m n=":native"><e>"_backSprite2"</e></m></meta>
			<haxe_doc>* The background sprite which loads the $dataSystem.title2Name image.</haxe_doc>
		</__backSprite2>
		<__gameTitleSprite public="1">
			<c path="rm.core.Sprite"/>
			<meta><m n=":native"><e>"_gameTitleSprite"</e></m></meta>
			<haxe_doc>* The sprite which holds the game title text.</haxe_doc>
		</__gameTitleSprite>
		<_commandWindow>
			<c path="rm.windows.Window_TitleCommand"/>
			<haxe_doc>* The command window for title scene commands like new game, continue, or options.</haxe_doc>
		</_commandWindow>
		<_backSprite1>
			<c path="rm.core.Sprite"/>
			<haxe_doc>* The background sprite which loads the $dataSystem.title1Name image.</haxe_doc>
		</_backSprite1>
		<_backSprite2>
			<c path="rm.core.Sprite"/>
			<haxe_doc>* The background sprite which loads the $dataSystem.title2Name image.</haxe_doc>
		</_backSprite2>
		<_gameTitleSprite>
			<c path="rm.core.Sprite"/>
			<haxe_doc>* The sprite which holds the game title text.</haxe_doc>
		</_gameTitleSprite>
		<createBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the title scene background.</haxe_doc>
		</createBackground>
		<createForeground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the title screen foreground.</haxe_doc>
		</createForeground>
		<drawGameTitle public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Draws the game title.</haxe_doc>
		</drawGameTitle>
		<adjustBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Scales the background images and centers it.</haxe_doc>
		</adjustBackground>
		<createCommandWindow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the command window and sets it's handlers.</haxe_doc>
		</createCommandWindow>
		<commandWindowRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></commandWindowRect>
		<centerSprite public="1" set="method" override="1"><f a="sprite">
	<c path="rm.core.Sprite"/>
	<x path="Void"/>
</f></centerSprite>
		<commandNewGame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the new game command.</haxe_doc>
		</commandNewGame>
		<commandContinue public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the continue command.</haxe_doc>
		</commandContinue>
		<commandOptions public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for the options command.</haxe_doc>
		</commandOptions>
		<playTitleMusic public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Plays the title screen music upon entering the scene.</haxe_doc>
		</playTitleMusic>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Scene_Title"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Battler" params="" file="src/rm/sprites/Sprite_Battler.hx" extern="1">
		<extends path="rm.sprites.Sprite_Base"/>
		<_battler><c path="rm.objects.Game_Battler"/></_battler>
		<_homeX><x path="Int"/></_homeX>
		<_homeY><x path="Int"/></_homeY>
		<_offsetX><x path="Int"/></_offsetX>
		<_offsetY><x path="Int"/></_offsetY>
		<_targetOffsetX><x path="Int"/></_targetOffsetX>
		<_targetOffsetY><x path="Int"/></_targetOffsetY>
		<_movementDuration><x path="Int"/></_movementDuration>
		<_selectionEffectCount><x path="Int"/></_selectionEffectCount>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<setHome public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setHome>
		<updateMain public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the main loop of the sprite battler.</haxe_doc>
		</updateMain>
		<updateBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the bitmap of the sprite battler.</haxe_doc>
		</updateBitmap>
		<updateMove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates movement on the sprite battler.</haxe_doc>
		</updateMove>
		<updatePosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the position of the sprite battler.</haxe_doc>
		</updatePosition>
		<updateAnimation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite battler animation.</haxe_doc>
		</updateAnimation>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Battler"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Actor" params="" file="src/rm/sprites/Sprite_Actor.hx" extern="1">
		<extends path="rm.sprites.Sprite_Battler"/>
		<MOTIONS public="1" static="1"><a>
	<walk><t path="rm.types.Motion"/></walk>
	<wait><t path="rm.types.Motion"/></wait>
	<victory><t path="rm.types.Motion"/></victory>
	<thrust><t path="rm.types.Motion"/></thrust>
	<swing><t path="rm.types.Motion"/></swing>
	<spell><t path="rm.types.Motion"/></spell>
	<sleep><t path="rm.types.Motion"/></sleep>
	<skill><t path="rm.types.Motion"/></skill>
	<missile><t path="rm.types.Motion"/></missile>
	<item><t path="rm.types.Motion"/></item>
	<guard><t path="rm.types.Motion"/></guard>
	<evade><t path="rm.types.Motion"/></evade>
	<escape><t path="rm.types.Motion"/></escape>
	<dying><t path="rm.types.Motion"/></dying>
	<dead><t path="rm.types.Motion"/></dead>
	<damage><t path="rm.types.Motion"/></damage>
	<chant><t path="rm.types.Motion"/></chant>
	<abnormal><t path="rm.types.Motion"/></abnormal>
</a></MOTIONS>
		<_battlerName><c path="String"/></_battlerName>
		<_motion><t path="rm.types.Motion"/></_motion>
		<_motionCount><x path="Int"/></_motionCount>
		<_pattern><x path="rm.types.CharacterPattern"/></_pattern>
		<_mainSprite><c path="rm.sprites.Sprite_Base"/></_mainSprite>
		<_shadowSprite><c path="rm.core.Sprite"/></_shadowSprite>
		<_weaponSprite><c path="rm.sprites.Sprite_Weapon"/></_weaponSprite>
		<_stateSprite><c path="rm.sprites.Sprite_StateOverlay"/></_stateSprite>
		<_actor><c path="rm.objects.Game_Actor"/></_actor>
		<initialize public="1" set="method" override="1"><f a="?battler">
	<c path="rm.objects.Game_Actor"/>
	<x path="Void"/>
</f></initialize>
		<createMainSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the main sprite of the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</createMainSprite>
		<createShadowSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the shadow sprite of the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</createShadowSprite>
		<createWeaponSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets the weapon sprite of the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</createWeaponSprite>
		<createStateSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the state sprite of the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</createStateSprite>
		<setBattler public="1" set="method">
			<f a="battler">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the battler of the sprite actor.
  *
  * @param {Game_Actor} battler
  * @memberof Sprite_Actor</haxe_doc>
		</setBattler>
		<moveToStartPosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Moves the sprite actor to the start position.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</moveToStartPosition>
		<setActorHome public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></setActorHome>
		<updateShadow public="1" set="method"><f a=""><x path="Void"/></f></updateShadow>
		<setupMotion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up motion on the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</setupMotion>
		<setupWeaponAnimation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up weapon animation on the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</setupWeaponAnimation>
		<startMotion public="1" set="method">
			<f a="motionType">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts the motion given the specified motion
  * type.
  * @param {string} motionType
  * @memberof Sprite_Actor</haxe_doc>
		</startMotion>
		<updateTargetPosition public="1" set="method"><f a=""><x path="Void"/></f></updateTargetPosition>
		<updateMove public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite actor's movement.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</updateMove>
		<updateMotion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite actor's motion.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</updateMotion>
		<updateMotionCount public="1" set="method"><f a=""><x path="Void"/></f></updateMotionCount>
		<motionSpeed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the speed of the motion for the sprite actor.
  *
  * @returns {Int}
  * @memberof Sprite_Actor</haxe_doc>
		</motionSpeed>
		<refreshMotion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the motion of the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</refreshMotion>
		<startEntryMotion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the entry motion of the sprite actor.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</startEntryMotion>
		<stepForward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Has the sprite actor step forward.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</stepForward>
		<stepBack public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Has the sprite actor step back.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</stepBack>
		<retreat public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Has the sprite actor retreat.
  *
  * @memberof Sprite_Actor</haxe_doc>
		</retreat>
		<damageOffsetX public="1" set="method"><f a=""><x path="Int"/></f></damageOffsetX>
		<damageOffsetY public="1" set="method"><f a=""><x path="Int"/></f></damageOffsetY>
		<new public="1" set="method">
			<f a="?battler">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Sprite_Actor; can be passed
  * a battler on creation.
  * @param {Game_Actor} [battler]
  * @memberof Sprite_Actor</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Actor
 *
 * The sprite for displaying an actor.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Actor"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Animation" params="" file="src/rm/sprites/Sprite_Animation.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_checker1 static="1"><a><key><t path="rm.types.Animation"/></key></a></_checker1>
		<_checker2 static="1"><a><key><t path="rm.types.Animation"/></key></a></_checker2>
		<_target><c path="rm.sprites.Sprite_Base"/></_target>
		<_animation><t path="rm.types.Animation"/></_animation>
		<_mirror><x path="Bool"/></_mirror>
		<_delay><x path="Int"/></_delay>
		<_rate_><x path="Float"/></_rate_>
		<_duration><x path="Int"/></_duration>
		<_flashColor><c path="Array"><x path="Int"/></c></_flashColor>
		<_flashDuration><x path="Int"/></_flashDuration>
		<_screenFlashDuration><x path="Int"/></_screenFlashDuration>
		<_hidingDuration><x path="Int"/></_hidingDuration>
		<_bitmap1><c path="rm.core.Bitmap"/></_bitmap1>
		<_bitmap2><c path="rm.core.Bitmap"/></_bitmap2>
		<_cellSprites><c path="Array"><c path="rm.core.Sprite"/></c></_cellSprites>
		<_screenFlashSprite><c path="rm.core.ScreenSprite"/></_screenFlashSprite>
		<_duplicated><x path="Bool"/></_duplicated>
		<_reduceArtifacts><x path="Bool"/></_reduceArtifacts>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<setup public="1" set="method"><f a="target:animation:mirror:delay">
	<c path="rm.sprites.Sprite_Base"/>
	<t path="rm.types.Animation"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</remove>
		<setupRate public="1" set="method"><f a=""><x path="Void"/></f></setupRate>
		<setupDuration public="1" set="method"><f a=""><x path="Void"/></f></setupDuration>
		<updateFlash public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the flash animation of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</updateFlash>
		<updateScreenFlash public="1" set="method"><f a=""><x path="Void"/></f></updateScreenFlash>
		<absoluteX public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the absolute x position of the sprite animation.
  *
  * @returns {number}
  * @memberof Sprite_Animation</haxe_doc>
		</absoluteX>
		<absoluteY public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the absolute y position of the sprite aniamtion.
  *
  * @returns {number}
  * @memberof Sprite_Animation</haxe_doc>
		</absoluteY>
		<updateHiding public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the hiding of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</updateHiding>
		<isPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the sprite animation is playing.
  *
  * @returns {boolean}
  * @memberof Sprite_Animation</haxe_doc>
		</isPlaying>
		<loadBitmaps public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the bitmaps of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</loadBitmaps>
		<isReady public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the sprite animation is ready.
  *
  * @returns {boolean}
  * @memberof Sprite_Animation</haxe_doc>
		</isReady>
		<createSprites public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Create the sprites of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</createSprites>
		<createCellSprites public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Create the cell sprites of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</createCellSprites>
		<createScreenFlashSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Create the screen flash sprite of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</createScreenFlashSprite>
		<updateMain public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the main loop of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</updateMain>
		<updatePosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the position of the sprite animation.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</updatePosition>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the frame of the sprite aniamtion.
  *
  * @memberof Sprite_Animation</haxe_doc>
		</updateFrame>
		<currentFrameIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current frame index of the sprite aniamtion.
  *
  * @returns {number}
  * @memberof Sprite_Animation</haxe_doc>
		</currentFrameIndex>
		<updateAllCellSprites public="1" set="method"><f a="frame">
	<c path="Array"><c path="Array"><x path="Int"/></c></c>
	<x path="Void"/>
</f></updateAllCellSprites>
		<updateCellSprite public="1" set="method"><f a="sprite:cell">
	<c path="rm.core.Sprite"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></updateCellSprite>
		<processTimingData public="1" set="method"><f a="timing">
	<t path="rm.types.AnimationTiming"/>
	<x path="Void"/>
</f></processTimingData>
		<startFlash public="1" set="method"><f a="color:duration">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></startFlash>
		<startScreenFlash public="1" set="method"><f a="color:duration">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></startScreenFlash>
		<startHiding public="1" set="method">
			<f a="duration">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts hiding the sprite animation.
  *
  * @param {number} duration The duration of the hide.
  * @memberof Sprite_Animation</haxe_doc>
		</startHiding>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Animation
 *
 * The sprite for displaying an animation.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Animation"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Balloon" params="" file="src/rm/sprites/Sprite_Balloon.hx" extern="1">
		<extends path="rm.sprites.Sprite_Base"/>
		<_balloonId><x path="rm.types.BalloonId"/></_balloonId>
		<_duration><x path="Int"/></_duration>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<loadBitmap public="1" set="method"><f a=""><x path="Void"/></f></loadBitmap>
		<setup public="1" set="method"><f a="balloonId">
	<x path="rm.types.BalloonId"/>
	<x path="Void"/>
</f></setup>
		<update public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the balloon sprite.
  *
  * @memberof Sprite_Balloon</haxe_doc>
		</update>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the balloon sprite frame.
  *
  * @memberof Sprite_Balloon</haxe_doc>
		</updateFrame>
		<speed public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the speed of the balloon animation.
  *
  * @returns {number}
  * @memberof Sprite_Balloon</haxe_doc>
		</speed>
		<waitTime public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the wait time.
  *
  * @returns {number}
  * @memberof Sprite_Balloon</haxe_doc>
		</waitTime>
		<frameIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the frame index of the balloon animation.
  *
  * @returns {number}
  * @memberof Sprite_Balloon</haxe_doc>
		</frameIndex>
		<isPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the balloon animation is playing.
  *
  * @returns {boolean}
  * @memberof Sprite_Balloon</haxe_doc>
		</isPlaying>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Balloon
 *
 * The sprite for displaying a balloon icon.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Balloon"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Button" params="" file="src/rm/sprites/Sprite_Button.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_touching><x path="Bool"/></_touching>
		<_coldFrame><c path="rm.core.Rectangle"/></_coldFrame>
		<_hotFrame><c path="rm.core.Rectangle"/></_hotFrame>
		<_clickHandler><f a=""><x path="Void"/></f></_clickHandler>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Update method, which checks if the sprite is being touched and updates
  * the current frame.
  *
  * @memberof Sprite_Button</haxe_doc>
		</updateFrame>
		<setColdFrame public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the button sprites cold frame.
  *
  * @param {Int} x
  * @param {Int} y
  * @param {Int} width
  * @param {Int} height
  *
  * @memberof Sprite_Button
  *</haxe_doc>
		</setColdFrame>
		<setHotFrame public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the button sprites hot frame
  *
  * @param {Int} x
  * @param {Int} y
  * @param {Int} width
  * @param {Int} height
  *
  * @memberof Sprite_Button
  *</haxe_doc>
		</setHotFrame>
		<setClickHandler public="1" set="method">
			<f a="method">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new handler and binds it to the button.
  *
  * @param {function} height
  * @memberof Sprite_Button</haxe_doc>
		</setClickHandler>
		<callClickHandler public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Calls the handler method bound to the button.
  *
  * @param {function} height
  * @memberof Sprite_Button</haxe_doc>
		</callClickHandler>
		<processTouch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes weather or not the button is being touched and calls the handler
  * bound to the button.
  * @memberof Sprite_Button</haxe_doc>
		</processTouch>
		<isActive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the sprite button is currently active.
  * @returns {Bool}
  * @memberof Sprite_Button</haxe_doc>
		</isActive>
		<isButtonTouched public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true is the button is presently being touched.
  * @returns {Bool}
  * @memberof Sprite_Button</haxe_doc>
		</isButtonTouched>
		<canvasToLocalX public="1" set="method">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Changes the x coordinate of the screen to local sprite x coordinate.
  * @param {Int} x
  * @returns {Int}
  * @memberof Sprite_Button</haxe_doc>
		</canvasToLocalX>
		<canvasToLocalY public="1" set="method">
			<f a="y">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Changes the y coordinate of the screen
  * to local sprite y coordinate.
  * @param {Int} y
  * @returns {Int}
  * @memberof Sprite_Button</haxe_doc>
		</canvasToLocalY>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Button
 *
 * The sprite for displaying a button.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Button"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Character" params="" file="src/rm/sprites/Sprite_Character.hx" extern="1">
		<extends path="rm.sprites.Sprite_Base"/>
		<_character>
			<c path="rm.objects.Game_Character"/>
			<haxe_doc>* The Game_Character object assigned
  * to the sprite.
  * @private var
  * @type {Game_Character}
  * @memberof Sprite_Character</haxe_doc>
		</_character>
		<_balloonDuration><x path="Int"/></_balloonDuration>
		<_tilesetId><x path="Int"/></_tilesetId>
		<_upperBody><x path="Int"/></_upperBody>
		<_lowerBody><c path="rm.core.Sprite"/></_lowerBody>
		<_bushDepth><x path="Int"/></_bushDepth>
		<_balloonSprite>
			<c path="rm.sprites.Sprite_Balloon"/>
			<haxe_doc>* The current balloon sprite
  * assigned to the sprite.
  * @private var
  * @type {Sprite_Balloon}
  * @memberof Sprite_Character</haxe_doc>
		</_balloonSprite>
		<initialize public="1" set="method" override="1"><f a="character">
	<c path="rm.objects.Game_Character"/>
	<x path="Void"/>
</f></initialize>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<setCharacter public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current Game_Character object
  * attached to the sprite.
  * @param {Game_Character} character
  * @memberof Sprite_Character</haxe_doc>
		</setCharacter>
		<isTile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the Game_Character object
  * tileId is greater than 0.
  * @returns {Bool}
  * @memberof Sprite_Character</haxe_doc>
		</isTile>
		<tilesetBitmap public="1" set="method"><f a="tileId">
	<x path="Int"/>
	<c path="rm.core.Bitmap"/>
</f></tilesetBitmap>
		<updateBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the bitmap of the sprite character.
  *
  * @memberof Sprite_Character</haxe_doc>
		</updateBitmap>
		<isImageChanged public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the sprite character image has changed.
  *
  * @returns {Bool}
  * @memberof Sprite_Character</haxe_doc>
		</isImageChanged>
		<setTileBitmap public="1" set="method"><f a=""><x path="Void"/></f></setTileBitmap>
		<setCharacterBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets the sprite character bitmap.
  *
  * @memberof Sprite_Character</haxe_doc>
		</setCharacterBitmap>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite character frame.
  *
  * @memberof Sprite_Character</haxe_doc>
		</updateFrame>
		<updateTileFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite character tile frame.
  *
  * @memberof Sprite_Character</haxe_doc>
		</updateTileFrame>
		<updateCharacterFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the sprite character -- character frame.
  *
  * @memberof Sprite_Character</haxe_doc>
		</updateCharacterFrame>
		<characterBlockX public="1" set="method"><f a=""><x path="Int"/></f></characterBlockX>
		<characterBlockY public="1" set="method"><f a=""><x path="Int"/></f></characterBlockY>
		<characterPatternX public="1" set="method">
			<f a=""><x path="rm.types.CharacterPattern"/></f>
			<haxe_doc>* Returns the character x pattern.
  *
  * @returns {number}
  * @memberof Sprite_Character</haxe_doc>
		</characterPatternX>
		<characterPatternY public="1" set="method">
			<f a=""><x path="rm.types.CharacterPattern"/></f>
			<haxe_doc>* Returns the character y pattern.
  *
  * @returns {number}
  * @memberof Sprite_Character</haxe_doc>
		</characterPatternY>
		<patternWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the pattern width.
  *
  * @returns {number}
  * @memberof Sprite_Character</haxe_doc>
		</patternWidth>
		<patternHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the pattern height.
  *
  * @returns {number}
  * @memberof Sprite_Character</haxe_doc>
		</patternHeight>
		<updateHalfBodySprites public="1" set="method"><f a=""><x path="Void"/></f></updateHalfBodySprites>
		<createHalfBodySprites public="1" set="method"><f a=""><x path="Void"/></f></createHalfBodySprites>
		<updatePosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the position of the sprite character.
  *
  * @memberof Sprite_Character</haxe_doc>
		</updatePosition>
		<updateAnimation public="1" set="method"><f a=""><x path="Void"/></f></updateAnimation>
		<updateOther public="1" set="method"><f a=""><x path="Void"/></f></updateOther>
		<setupAnimation public="1" set="method"><f a=""><x path="Void"/></f></setupAnimation>
		<setupBalloon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets up the Game_Character object
  * balloon sprite, and calls the startBalloon method.
  * @memberof Sprite_Character</haxe_doc>
		</setupBalloon>
		<startBalloon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the balloon sprite on the
  * Game_Character object.
  * @memberof Sprite_Character</haxe_doc>
		</startBalloon>
		<updateBalloon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes the balloon sprite, calls
  * the endBaloon method if the balloon sprite is done playing.
  * @memberof Sprite_Character</haxe_doc>
		</updateBalloon>
		<endBalloon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Ends the balloon sprite, removing it from
      * the Game_Character object sprite.
  * @memberof Sprite_Character</haxe_doc>
		</endBalloon>
		<isBalloonPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if a balloon animation
    * is playing on the character.
  * @returns {Bool}
  * @memberof Sprite_Character</haxe_doc>
		</isBalloonPlaying>
		<new public="1" set="method">
			<f a="character">
				<c path="rm.objects.Game_Character"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Sprite_Character.
  * @param {Game_Character} character
  * @memberof Sprite_Character</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Character
 *
 * The sprite for displaying a character.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Character"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Damage" params="" file="src/rm/sprites/Sprite_Damage.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_duration><x path="Int"/></_duration>
		<_flashColor>
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>* Array of 3 numbers of RGB</haxe_doc>
		</_flashColor>
		<_flashDuration><x path="Int"/></_flashDuration>
		<_damageBitmap><c path="rm.core.Bitmap"/></_damageBitmap>
		<setup public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Actor"/>
	<x path="Void"/>
</f></setup>
		<setupCriticalEffect public="1" set="method"><f a=""><x path="Void"/></f></setupCriticalEffect>
		<digitWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the digit width of the sprite damage.
  *
  * @returns {number}
  * @memberof Sprite_Damage</haxe_doc>
		</digitWidth>
		<digitHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the digit height of the sprite damage.
  *
  * @returns {number}
  * @memberof Sprite_Damage</haxe_doc>
		</digitHeight>
		<createMiss public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the miss display of the damage sprite.
  *
  * @memberof Sprite_Damage</haxe_doc>
		</createMiss>
		<createDigits public="1" set="method"><f a="baseRow:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></createDigits>
		<createChildSprite public="1" set="method">
			<f a=""><c path="rm.core.Sprite"/></f>
			<haxe_doc>* Creates the child sprite of the damage sprite for displaying damage.
  *
  * @returns {Sprite}
  * @memberof Sprite_Damage</haxe_doc>
		</createChildSprite>
		<updateChild public="1" set="method"><f a="sprite">
	<c path="rm.core.Sprite"/>
	<x path="Void"/>
</f></updateChild>
		<updateFlash public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the flash of the damage sprite.
  *
  * @memberof Sprite_Damage</haxe_doc>
		</updateFlash>
		<updateOpacity public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the opacity of the damage sprite.
  *
  * @memberof Sprite_Damage</haxe_doc>
		</updateOpacity>
		<isPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the damage sprite is playing.
  *
  * @returns {boolean}
  * @memberof Sprite_Damage</haxe_doc>
		</isPlaying>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Damage
 *
 * The sprite for displaying a popup damage.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Damage"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Destination" params="" file="src/rm/sprites/Sprite_Destination.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_frameCount><x path="Int"/></_frameCount>
		<createBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the destination bitmap of the destination sprite.
  *
  * @memberof Sprite_Destination</haxe_doc>
		</createBitmap>
		<updatePosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the position of the destination sprite.
  *
  * @memberof Sprite_Destination</haxe_doc>
		</updatePosition>
		<updateAnimation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the destination sprite animation.
  *
  * @memberof Sprite_Destination</haxe_doc>
		</updateAnimation>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Destination
 *
 * The sprite for displaying the destination place of the touch input.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="rm.sprites.Sprite_Enemy" params="" file="src/rm/sprites/Sprite_Enemy.hx" extern="1">
		<extends path="rm.sprites.Sprite_Battler"/>
		<_enemy><c path="rm.objects.Game_Enemy"/></_enemy>
		<_appeared><x path="Bool"/></_appeared>
		<_battlerName><c path="String"/></_battlerName>
		<_battlerHue><x path="Int"/></_battlerHue>
		<_effectType><c path="String"/></_effectType>
		<_effectDuration><x path="Int"/></_effectDuration>
		<_shake><x path="Int"/></_shake>
		<_stateIconSprite><c path="rm.sprites.Sprite_StateIcon"/></_stateIconSprite>
		<initialize public="1" set="method" override="1"><f a="battler">
	<c path="rm.objects.Game_Enemy"/>
	<x path="Void"/>
</f></initialize>
		<createStateIconSprite public="1" set="method"><f a=""><x path="Void"/></f></createStateIconSprite>
		<setBattler public="1" set="method">
			<f a="battler">
				<c path="rm.objects.Game_Enemy"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the battler to an instance of game enemy.
  *
  * @param {Game_Enemy} battler Instance of game enemy.
  * @memberof Sprite_Enemy</haxe_doc>
		</setBattler>
		<loadBitmap public="1" set="method"><f a="name:hue">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></loadBitmap>
		<updateStateSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the state sprite on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateStateSprite>
		<initVisibility public="1" set="method"><f a=""><x path="Void"/></f></initVisibility>
		<setupEffect public="1" set="method"><f a=""><x path="Void"/></f></setupEffect>
		<startEffect public="1" set="method"><f a="effectType">
	<c path="String"/>
	<x path="Void"/>
</f></startEffect>
		<startAppear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the appearinig effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</startAppear>
		<startDisappear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the disappearing effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</startDisappear>
		<startWhiten public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the whiten effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</startWhiten>
		<startBlink public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the blink effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</startBlink>
		<startCollapse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the collapse effect of the sprite
  * enemy.
  * @memberof Sprite_Enemy</haxe_doc>
		</startCollapse>
		<startBossCollapse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the boss collapse effect of the sprite
  * enemy.
  * @memberof Sprite_Enemy</haxe_doc>
		</startBossCollapse>
		<startInstantCollapse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the instant collapse effect of the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</startInstantCollapse>
		<updateEffect public="1" set="method"><f a=""><x path="Void"/></f></updateEffect>
		<isEffecting public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the effect type on the sprite enemy
  * is not null.
  * @returns {Bool}
  * @memberof Sprite_Enemy</haxe_doc>
		</isEffecting>
		<revertToNormal public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Revers the sprite enemy to a normal state.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</revertToNormal>
		<updateWhiten public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the whiten effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateWhiten>
		<updateBlink public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the blink effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateBlink>
		<updateAppear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the appear effect on the sprite enemy.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateAppear>
		<updateDisappear public="1" set="method"><f a=""><x path="Void"/></f></updateDisappear>
		<updateCollapse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the collapse effect.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateCollapse>
		<updateBossCollapse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the boss collapse effect.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateBossCollapse>
		<updateInstantCollapse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the instant collapse effect.
  *
  * @memberof Sprite_Enemy</haxe_doc>
		</updateInstantCollapse>
		<damageOffsetX public="1" set="method"><f a=""><x path="Int"/></f></damageOffsetX>
		<damageOffsetY public="1" set="method"><f a=""><x path="Int"/></f></damageOffsetY>
		<new public="1" set="method"><f a="battler">
	<c path="rm.objects.Game_Enemy"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Enemy
 *
 * The sprite for displaying an enemy.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Enemy"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Picture" params="" file="src/rm/sprites/Sprite_Picture.hx" extern="1">
		<_pictureId><x path="Int"/></_pictureId>
		<_pictureName><c path="String"/></_pictureName>
		<_isPicture><x path="Bool"/></_isPicture>
		<picture public="1" set="method"><f a=""><c path="rm.objects.Game_Picture"/></f></picture>
		<updateBitmap public="1" set="method"><f a=""><x path="Void"/></f></updateBitmap>
		<updateOrigin public="1" set="method"><f a=""><x path="Void"/></f></updateOrigin>
		<updatePosition public="1" set="method"><f a=""><x path="Void"/></f></updatePosition>
		<updateScale public="1" set="method"><f a=""><x path="Void"/></f></updateScale>
		<updateTone public="1" set="method"><f a=""><x path="Void"/></f></updateTone>
		<updateOther public="1" set="method"><f a=""><x path="Void"/></f></updateOther>
		<loadBitmap public="1" set="method"><f a=""><x path="Void"/></f></loadBitmap>
		<new public="1" set="method"><f a="pictureId">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Picture
 *
 * The sprite for displaying a picture.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Picture"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_StateIcon" params="" file="src/rm/sprites/Sprite_StateIcon.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_iconWidth static="1"><x path="Int"/></_iconWidth>
		<_iconHeight static="1"><x path="Int"/></_iconHeight>
		<_battler><c path="rm.objects.Game_Battler"/></_battler>
		<_iconIndex><x path="Int"/></_iconIndex>
		<_animationCount><x path="Int"/></_animationCount>
		<_animationIndex><x path="Int"/></_animationIndex>
		<initMembers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the sprite state icon properties.
  *
  * @memberof Sprite_StateIcon</haxe_doc>
		</initMembers>
		<loadBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the bitmap of the sprite state icon.
  *
  * @memberof Sprite_StateIcon</haxe_doc>
		</loadBitmap>
		<setup public="1" set="method"><f a="battler">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></setup>
		<animationWait public="1" set="method"><f a=""><x path="Int"/></f></animationWait>
		<updateIcon public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the icon displayed in the icon sprite.
  *
  * @memberof Sprite_StateIcon</haxe_doc>
		</updateIcon>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the state icon sprite frame.
  *
  * @memberof Sprite_StateIcon</haxe_doc>
		</updateFrame>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_StateIcon
 *
 * The sprite for displaying state icons.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_StateIcon"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_StateOverlay" params="" file="src/rm/sprites/Sprite_StateOverlay.hx" extern="1">
		<extends path="rm.sprites.Sprite_Base"/>
		<_battler><c path="rm.objects.Game_Battler"/></_battler>
		<_overlayIndex><x path="Int"/></_overlayIndex>
		<_animationCount><x path="Int"/></_animationCount>
		<_pattern><x path="Int"/></_pattern>
		<initMembers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initialize the overlay sprite properties.
  *
  * @memberof Sprite_StateOverlay</haxe_doc>
		</initMembers>
		<loadBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the bitmap of the overlay sprite.
  *
  * @memberof Sprite_StateOverlay</haxe_doc>
		</loadBitmap>
		<setup public="1" set="method"><f a="battler">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></setup>
		<animationWait public="1" set="method"><f a=""><x path="Int"/></f></animationWait>
		<updatePattern public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the overlay sprite pattern.
  *
  * @memberof Sprite_StateOverlay</haxe_doc>
		</updatePattern>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the overlay sprite frame.
  *
  * @memberof Sprite_StateOverlay</haxe_doc>
		</updateFrame>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_StateOverlay
 *
 * The sprite for displaying an overlay image for a state.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_StateOverlay"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Timer" params="" file="src/rm/sprites/Sprite_Timer.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_seconds><x path="Int"/></_seconds>
		<createBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the bitmap of the sprite timer.
  *
  * @memberof Sprite_Timer</haxe_doc>
		</createBitmap>
		<updateBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the bitmap of the sprite timer.
  *
  * @memberof Sprite_Timer</haxe_doc>
		</updateBitmap>
		<redraw public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Redraws the sprite timer.
  *
  * @memberof Sprite_Timer</haxe_doc>
		</redraw>
		<timerText public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the text of the timer.
  *
  * @returns {string} The text displayed on the timer.
  * @memberof Sprite_Timer</haxe_doc>
		</timerText>
		<updatePosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the positon of the sprite timer.
  *
  * @memberof Sprite_Timer</haxe_doc>
		</updatePosition>
		<updateVisibility public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the visibility of the sprite timer.
  *
  * @memberof Sprite_Timer</haxe_doc>
		</updateVisibility>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Timer
 *
 * The sprite for displaying the timer.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Timer"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Sprite_Weapon" params="" file="src/rm/sprites/Sprite_Weapon.hx" extern="1">
		<extends path="rm.sprites.Sprite_Base"/>
		<_weaponImageId><x path="rm.types.WeaponImageId"/></_weaponImageId>
		<_animationCount><x path="Int"/></_animationCount>
		<_pattern><x path="Int"/></_pattern>
		<initMembers public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the members of the weapon sprite object.
  *
  * @memberof Sprite_Weapon</haxe_doc>
		</initMembers>
		<setup public="1" set="method"><f a="weaponImageId">
	<x path="rm.types.WeaponImageId"/>
	<x path="Void"/>
</f></setup>
		<animationWait public="1" set="method"><f a=""><x path="Int"/></f></animationWait>
		<updatePattern public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the pattern of the weapon sprite.
  *
  * @memberof Sprite_Weapon</haxe_doc>
		</updatePattern>
		<loadBitmap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the bitmap of the weapon sprite.
  *
  * @memberof Sprite_Weapon</haxe_doc>
		</loadBitmap>
		<updateFrame public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the weapon sprite frames.
  *
  * @memberof Sprite_Weapon</haxe_doc>
		</updateFrame>
		<isPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the weapon sprite is playing.
  *
  * @returns {boolean}
  * @memberof Sprite_Weapon</haxe_doc>
		</isPlaying>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Sprite_Weapon
 *
 * The sprite for displaying a weapon image for attacking.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Sprite_Weapon"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Spriteset_Base" params="" file="src/rm/sprites/Spriteset_Base.hx" extern="1">
		<extends path="rm.core.Sprite"/>
		<_tone><c path="Array"><x path="Int"/></c></_tone>
		<_baseSprite><c path="rm.core.Sprite"/></_baseSprite>
		<_blackScreen><c path="rm.core.ScreenSprite"/></_blackScreen>
		<_toneFilter><c path="rm.core.ToneFilter"/></_toneFilter>
		<_toneSprite><c path="rm.core.ToneSprite"/></_toneSprite>
		<_pictureContainer><c path="rm.core.Sprite"/></_pictureContainer>
		<_timerSprite><c path="rm.sprites.Sprite_Timer"/></_timerSprite>
		<_flashSprite><c path="rm.core.ScreenSprite"/></_flashSprite>
		<_fadeSprite><c path="rm.core.ScreenSprite"/></_fadeSprite>
		<createLowerLayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the lower layer including the base sprites.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createLowerLayer>
		<createUpperLayer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the upper layer including the pictures,
  * timer, and screen sprites.
  * @memberof Spriteset_Base</haxe_doc>
		</createUpperLayer>
		<createBaseSprite public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Create the base sprite.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createBaseSprite>
		<createToneChanger public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the tone changer sprite.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createToneChanger>
		<createWebGLToneChanger public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the WebGL toner.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createWebGLToneChanger>
		<createCanvasToneChanger public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the Canvas tone.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createCanvasToneChanger>
		<createPictures public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a new sprite picture on the spritesetb ase.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createPictures>
		<createTimer public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a new Sprite timer on the spriteset base.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createTimer>
		<createScreenSprites public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the screen sprite.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</createScreenSprites>
		<updateScreenSprites public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the screen sprites on the spriteset base.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</updateScreenSprites>
		<updateToneChanger public="1" set="method"><f a=""><x path="Void"/></f></updateToneChanger>
		<updateWebGLToneChanger public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the WebGL tone changer.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</updateWebGLToneChanger>
		<updateCanvasToneChanger public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the Canvas tone changer.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</updateCanvasToneChanger>
		<updatePosition public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the position of spriteset base.
  *
  * @memberof Spriteset_Base</haxe_doc>
		</updatePosition>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Spriteset_Base
 *
 * The superdeclare class of Spriteset_Map and Spriteset_Battle.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Spriteset_Base"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Spriteset_Battle" params="" file="src/rm/sprites/Spriteset_Battle.hx" extern="1">
		<extends path="rm.sprites.Spriteset_Base"/>
		<_battlebackLocated><x path="Bool"/></_battlebackLocated>
		<_backgroundSprite><c path="rm.core.Sprite"/></_backgroundSprite>
		<_battleField><c path="rm.core.Sprite"/></_battleField>
		<_back1Sprite><c path="rm.core.TilingSprite"/></_back1Sprite>
		<_back2Sprite><c path="rm.core.TilingSprite"/></_back2Sprite>
		<_enemySprites><c path="Array"><c path="rm.sprites.Sprite_Enemy"/></c></_enemySprites>
		<_actorSprites><c path="Array"><c path="rm.sprites.Sprite_Actor"/></c></_actorSprites>
		<createBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the background of the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</createBackground>
		<createBattleField public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the battlefield of the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</createBattleField>
		<createBattleback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the battleback of the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</createBattleback>
		<updateBattleback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the battleback of the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</updateBattleback>
		<locateBattleback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Locates the battleback and adjusts the coordinates of the
  * battleback.
  * @memberof Spriteset_Battle</haxe_doc>
		</locateBattleback>
		<battleback1Bitmap public="1" set="method">
			<f a=""><c path="rm.core.Bitmap"/></f>
			<haxe_doc>* Returns battleb ack 2 of the battle spriteset.
  *
  * @returns {Bitmap} Instance of the Bitmap class.
  * @memberof Spriteset_Battle</haxe_doc>
		</battleback1Bitmap>
		<battleback2Bitmap public="1" set="method">
			<f a=""><c path="rm.core.Bitmap"/></f>
			<haxe_doc>* Returns battleback 2 of the battle spriteset.
  *
  * @returns {Bitmap} Instance of the Bitmap class.
  * @memberof Spriteset_Battle</haxe_doc>
		</battleback2Bitmap>
		<battleback1Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of battleback 1 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</battleback1Name>
		<battleback2Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of battleback 2 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</battleback2Name>
		<overworldBattleback1Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the battleback 1 name as a string.
  *
  * @returns {string} Name of overworld battleback 1 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</overworldBattleback1Name>
		<overworldBattleback2Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the battleback 2 name as a string.
  *
  * @returns {string} Name of overworld battleback 2 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</overworldBattleback2Name>
		<normalBattleback1Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of the normal battleback 1 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</normalBattleback1Name>
		<normalBattleback2Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of the normal battleback 2 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</normalBattleback2Name>
		<terrainBattleback1Name public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Given the specified terrtain type, return
  * the battleback 1 name.
  * @param {number} type Terrain type.
  * @returns {string} Name of the terrtain battleback 1 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</terrainBattleback1Name>
		<terrainBattleback2Name public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Given the specified terrain type, return
  * the battleback 2 name.
  * @param {number} type Terrain type.
  * @returns {string} Name of the terrain battleback 2 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</terrainBattleback2Name>
		<defaultBattleback1Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of the default battleback 1 name.
  * @memberof Spriteset_Battle</haxe_doc>
		</defaultBattleback1Name>
		<defaultBattleback2Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of the default battleback 2 name.
  * @memberof Spriteset_Battle</haxe_doc>
		</defaultBattleback2Name>
		<shipBattleback1Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of the ship battleback 1  bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</shipBattleback1Name>
		<shipBattleback2Name public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>*
  *
  * @returns {string} Name of the ship battleback 2 bitmap.
  * @memberof Spriteset_Battle</haxe_doc>
		</shipBattleback2Name>
		<autotileType public="1" set="method"><f a="z">
	<x path="Int"/>
	<x path="Int"/>
</f></autotileType>
		<createEnemies public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates sprite enemies for the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</createEnemies>
		<compareEnemySprite public="1" set="method"><f a="a:b">
	<c path="rm.sprites.Sprite_Enemy"/>
	<c path="rm.sprites.Sprite_Enemy"/>
	<x path="Int"/>
</f></compareEnemySprite>
		<createActors public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates sprite actors for the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</createActors>
		<updateActors public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the actor sprites on the battle spriteset.
  *
  * @memberof Spriteset_Battle</haxe_doc>
		</updateActors>
		<battlerSprites public="1" set="method">
			<f a=""><c path="Array"><c path="rm.sprites.Sprite_Battler"/></c></f>
			<haxe_doc><![CDATA[* Returns all battler sprites on the battle spriteset.
  *
  * @returns {Array<Sprite_Battler>}
  * @memberof Spriteset_Battle]]></haxe_doc>
		</battlerSprites>
		<isAnimationPlaying public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if animation is playing on the battle spriteset.
  *
  * @returns {boolean}
  * @memberof Spriteset_Battle</haxe_doc>
		</isAnimationPlaying>
		<isEffecting public="1" set="method"><f a=""><x path="Bool"/></f></isEffecting>
		<isAnyoneMoving public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if any sprite actor or enemy is moving.
  *
  * @returns {boolean} Representing whether any battle participants are moving.
  * @memberof Spriteset_Battle</haxe_doc>
		</isAnyoneMoving>
		<isBusy public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the battle spriteset is busy.
  *
  * @returns {boolean}
  * @memberof Spriteset_Battle</haxe_doc>
		</isBusy>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Spriteset_Battle"</e></m>
		</meta>
	</class>
	<class path="rm.sprites.Spriteset_Map" params="" file="src/rm/sprites/Spriteset_Map.hx" extern="1">
		<extends path="rm.sprites.Spriteset_Base"/>
		<_parallax><c path="rm.core.TilingSprite"/></_parallax>
		<_tilemap><x path="haxe.extern.EitherType">
	<c path="rm.core.Tilemap"/>
	<c path="rm.core.ShaderTilemap"/>
</x></_tilemap>
		<_tileset><t path="rm.types.Tileset"/></_tileset>
		<_characterSprites><c path="Array"><c path="rm.sprites.Sprite_Character"/></c></_characterSprites>
		<_shadowSprite><c path="rm.core.Sprite"/></_shadowSprite>
		<_destinationSprite><c path="rm.sprites.Sprite_Destination"/></_destinationSprite>
		<_weather><c path="rm.core.Weather"/></_weather>
		<_parallaxName><c path="String"/></_parallaxName>
		<hideCharacters public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the map spriteset character sprites.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</hideCharacters>
		<createParallax public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map spriteset parallax.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</createParallax>
		<createTilemap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map spriteset tile map.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</createTilemap>
		<loadTileset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the map spriteset tileset.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</loadTileset>
		<createCharacters public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map spriteset character sprite.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</createCharacters>
		<createShadow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map spriteset shadow sprite.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</createShadow>
		<createDestination public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map spriteset destination sprite.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</createDestination>
		<createWeather public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the map spriteset weather.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</createWeather>
		<updateTileset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the map spriteset tileset.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</updateTileset>
		<_canvasReAddParallax set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Simple fix for canvas parallax issue, destroy old parallax and readd to  the tree.</haxe_doc>
		</_canvasReAddParallax>
		<updateParallax public="1" set="method"><f a=""><x path="Void"/></f></updateParallax>
		<updateTilemap public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the map spriteset tile map.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</updateTilemap>
		<updateShadow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the map spriteset shadow.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</updateShadow>
		<updateWeather public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the map spriteset weather.
  *
  * @memberof Spriteset_Map</haxe_doc>
		</updateWeather>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Spriteset_Map
 *
 * The set of sprites on the map screen.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Spriteset_map"</e></m>
		</meta>
	</class>
	<abstract path="rm.types.StateId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.StateId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.StateId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.BuffId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.BuffId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.BuffId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.ParameterId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.ParameterId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.ParameterId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.EquipTypeId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.EquipTypeId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.EquipTypeId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.BalloonId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.BalloonId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
	<EXCLAMATION public="1" get="inline" set="null" expr="cast 0" line="26" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXCLAMATION>
	<QUESTION public="1" get="inline" set="null" expr="cast 1" line="27" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QUESTION>
	<MUSIC_NOTE public="1" get="inline" set="null" expr="cast 2" line="28" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MUSIC_NOTE>
	<HEART public="1" get="inline" set="null" expr="cast 3" line="29" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEART>
	<ANGER public="1" get="inline" set="null" expr="cast 4" line="30" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANGER>
	<SWEAT public="1" get="inline" set="null" expr="cast 5" line="31" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SWEAT>
	<COBWEB public="1" get="inline" set="null" expr="cast 6" line="32" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COBWEB>
	<SILENCE public="1" get="inline" set="null" expr="cast 7" line="33" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SILENCE>
	<LIGHT_BULB public="1" get="inline" set="null" expr="cast 8" line="34" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LIGHT_BULB>
	<ZZZ public="1" get="inline" set="null" expr="cast 9" line="35" static="1">
		<x path="rm.types.BalloonId"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZZZ>
	<toString public="1" get="inline" set="null" line="38" static="1">
		<f a="value">
			<x path="rm.types.BalloonId"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.BalloonId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
		<EXCLAMATION public="1" get="inline" set="null" expr="cast 0" line="26" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXCLAMATION>
		<QUESTION public="1" get="inline" set="null" expr="cast 1" line="27" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QUESTION>
		<MUSIC_NOTE public="1" get="inline" set="null" expr="cast 2" line="28" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MUSIC_NOTE>
		<HEART public="1" get="inline" set="null" expr="cast 3" line="29" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEART>
		<ANGER public="1" get="inline" set="null" expr="cast 4" line="30" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANGER>
		<SWEAT public="1" get="inline" set="null" expr="cast 5" line="31" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SWEAT>
		<COBWEB public="1" get="inline" set="null" expr="cast 6" line="32" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COBWEB>
		<SILENCE public="1" get="inline" set="null" expr="cast 7" line="33" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SILENCE>
		<LIGHT_BULB public="1" get="inline" set="null" expr="cast 8" line="34" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LIGHT_BULB>
		<ZZZ public="1" get="inline" set="null" expr="cast 9" line="35" static="1">
			<x path="rm.types.BalloonId"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZZZ>
		<toString public="1" get="inline" set="null" line="38" static="1">
			<f a="value">
				<x path="rm.types.BalloonId"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.AnimationSpeed" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.AnimationSpeed_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.AnimationSpeed_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.WeaponImageId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.WeaponImageId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.WeaponImageId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.CharacterPattern" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Character pattern represents the in-editor character
 * pattern.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.CharacterPattern_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.CharacterPattern_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.MotionType" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>* Motion Type used for Sprite Actors
 * on different scenes in MV/rm.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="rm.types._LunaTea.MotionType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1">
	<WALK public="1" get="inline" set="null" expr="cast &quot;walk&quot;" line="91" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "walk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WALK>
	<WAIT public="1" get="inline" set="null" expr="cast &quot;wait&quot;" line="92" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "wait"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WAIT>
	<CHANT public="1" get="inline" set="null" expr="cast &quot;chant&quot;" line="93" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "chant"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHANT>
	<GUARD public="1" get="inline" set="null" expr="cast &quot;guard&quot;" line="94" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "guard"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GUARD>
	<DAMAGE public="1" get="inline" set="null" expr="cast &quot;damage&quot;" line="95" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "damage"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DAMAGE>
	<EVADE public="1" get="inline" set="null" expr="cast &quot;evade&quot;" line="96" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "evade"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EVADE>
	<THRUST public="1" get="inline" set="null" expr="cast &quot;thrust&quot;" line="97" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "thrust"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</THRUST>
	<MISSLE public="1" get="inline" set="null" expr="cast &quot;missle&quot;" line="98" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "missle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MISSLE>
	<SKILL public="1" get="inline" set="null" expr="cast &quot;SKILL&quot;" line="99" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "SKILL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SKILL>
	<SPELL public="1" get="inline" set="null" expr="cast &quot;spell&quot;" line="100" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "spell"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SPELL>
	<ITEM public="1" get="inline" set="null" expr="cast &quot;item&quot;" line="101" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "item"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ITEM>
	<ESCAPE public="1" get="inline" set="null" expr="cast &quot;escape&quot;" line="102" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "escape"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ESCAPE>
	<VICTORY public="1" get="inline" set="null" expr="cast &quot;victory&quot;" line="103" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "victory"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VICTORY>
	<DYING public="1" get="inline" set="null" expr="cast &quot;dying&quot;" line="104" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "dying"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DYING>
	<ABNORMAL public="1" get="inline" set="null" expr="cast &quot;abnormal&quot;" line="105" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "abnormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ABNORMAL>
	<SLEEP public="1" get="inline" set="null" expr="cast &quot;sleep&quot;" line="106" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "sleep"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SLEEP>
	<DEAD public="1" get="inline" set="null" expr="cast &quot;dead&quot;" line="107" static="1">
		<x path="rm.types.MotionType"/>
		<meta>
			<m n=":value"><e>cast "dead"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEAD>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.MotionType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1">
		<WALK public="1" get="inline" set="null" expr="cast &quot;walk&quot;" line="91" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "walk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WALK>
		<WAIT public="1" get="inline" set="null" expr="cast &quot;wait&quot;" line="92" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "wait"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WAIT>
		<CHANT public="1" get="inline" set="null" expr="cast &quot;chant&quot;" line="93" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "chant"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHANT>
		<GUARD public="1" get="inline" set="null" expr="cast &quot;guard&quot;" line="94" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "guard"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GUARD>
		<DAMAGE public="1" get="inline" set="null" expr="cast &quot;damage&quot;" line="95" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "damage"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DAMAGE>
		<EVADE public="1" get="inline" set="null" expr="cast &quot;evade&quot;" line="96" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "evade"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EVADE>
		<THRUST public="1" get="inline" set="null" expr="cast &quot;thrust&quot;" line="97" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "thrust"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</THRUST>
		<MISSLE public="1" get="inline" set="null" expr="cast &quot;missle&quot;" line="98" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "missle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MISSLE>
		<SKILL public="1" get="inline" set="null" expr="cast &quot;SKILL&quot;" line="99" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "SKILL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SKILL>
		<SPELL public="1" get="inline" set="null" expr="cast &quot;spell&quot;" line="100" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "spell"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SPELL>
		<ITEM public="1" get="inline" set="null" expr="cast &quot;item&quot;" line="101" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "item"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ITEM>
		<ESCAPE public="1" get="inline" set="null" expr="cast &quot;escape&quot;" line="102" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "escape"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ESCAPE>
		<VICTORY public="1" get="inline" set="null" expr="cast &quot;victory&quot;" line="103" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "victory"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VICTORY>
		<DYING public="1" get="inline" set="null" expr="cast &quot;dying&quot;" line="104" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "dying"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DYING>
		<ABNORMAL public="1" get="inline" set="null" expr="cast &quot;abnormal&quot;" line="105" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "abnormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ABNORMAL>
		<SLEEP public="1" get="inline" set="null" expr="cast &quot;sleep&quot;" line="106" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "sleep"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SLEEP>
		<DEAD public="1" get="inline" set="null" expr="cast &quot;dead&quot;" line="107" static="1">
			<x path="rm.types.MotionType"/>
			<meta>
				<m n=":value"><e>cast "dead"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEAD>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.MoveType" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* The Move Types of Characters/Event in RPGMaker MV/MZ</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.MoveType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
	<FIXED public="1" get="inline" set="null" expr="cast 0" line="116" static="1">
		<x path="rm.types.MoveType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FIXED>
	<RANDOM public="1" get="inline" set="null" expr="cast 1" line="117" static="1">
		<x path="rm.types.MoveType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RANDOM>
	<APPROACH public="1" get="inline" set="null" expr="cast 2" line="118" static="1">
		<x path="rm.types.MoveType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPROACH>
	<CUSTOM public="1" get="inline" set="null" expr="cast 3" line="119" static="1">
		<x path="rm.types.MoveType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUSTOM>
	<toString public="1" get="inline" set="null" line="122" static="1">
		<f a="value">
			<x path="rm.types.MoveType"/>
			<c path="String"/>
		</f>
		<meta><m n="from"/></meta>
	</toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.MoveType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
		<FIXED public="1" get="inline" set="null" expr="cast 0" line="116" static="1">
			<x path="rm.types.MoveType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FIXED>
		<RANDOM public="1" get="inline" set="null" expr="cast 1" line="117" static="1">
			<x path="rm.types.MoveType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RANDOM>
		<APPROACH public="1" get="inline" set="null" expr="cast 2" line="118" static="1">
			<x path="rm.types.MoveType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPROACH>
		<CUSTOM public="1" get="inline" set="null" expr="cast 3" line="119" static="1">
			<x path="rm.types.MoveType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUSTOM>
		<toString public="1" get="inline" set="null" line="122" static="1">
			<f a="value">
				<x path="rm.types.MoveType"/>
				<c path="String"/>
			</f>
			<meta><m n="from"/></meta>
		</toString>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.MoveSpeed" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>* The Move Speed Types of Characters/Events in RPGMaker MV/MZ</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.MoveSpeed_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
	<X8SLOWER public="1" get="inline" set="null" expr="cast 1" line="144" static="1">
		<x path="rm.types.MoveSpeed"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X8SLOWER>
	<X4SLOWER public="1" get="inline" set="null" expr="cast 2" line="145" static="1">
		<x path="rm.types.MoveSpeed"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X4SLOWER>
	<X2SLOWER public="1" get="inline" set="null" expr="cast 3" line="146" static="1">
		<x path="rm.types.MoveSpeed"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X2SLOWER>
	<NORMAL public="1" get="inline" set="null" expr="cast 4" line="147" static="1">
		<x path="rm.types.MoveSpeed"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<X2FASTER public="1" get="inline" set="null" expr="cast 5" line="148" static="1">
		<x path="rm.types.MoveSpeed"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X2FASTER>
	<X4FASTER public="1" get="inline" set="null" expr="cast 6" line="149" static="1">
		<x path="rm.types.MoveSpeed"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X4FASTER>
	<toString public="1" get="inline" set="null" line="152" static="1">
		<f a="value">
			<x path="rm.types.MoveSpeed"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.MoveSpeed_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
		<X8SLOWER public="1" get="inline" set="null" expr="cast 1" line="144" static="1">
			<x path="rm.types.MoveSpeed"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X8SLOWER>
		<X4SLOWER public="1" get="inline" set="null" expr="cast 2" line="145" static="1">
			<x path="rm.types.MoveSpeed"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X4SLOWER>
		<X2SLOWER public="1" get="inline" set="null" expr="cast 3" line="146" static="1">
			<x path="rm.types.MoveSpeed"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X2SLOWER>
		<NORMAL public="1" get="inline" set="null" expr="cast 4" line="147" static="1">
			<x path="rm.types.MoveSpeed"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<X2FASTER public="1" get="inline" set="null" expr="cast 5" line="148" static="1">
			<x path="rm.types.MoveSpeed"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X2FASTER>
		<X4FASTER public="1" get="inline" set="null" expr="cast 6" line="149" static="1">
			<x path="rm.types.MoveSpeed"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X4FASTER>
		<toString public="1" get="inline" set="null" line="152" static="1">
			<f a="value">
				<x path="rm.types.MoveSpeed"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.MoveFrequency" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>*  Move frequency for Characters/Events
 * in RPGMaker MV/rm.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.MoveFrequency_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
	<LOWEST public="1" get="inline" set="null" expr="cast 1" line="179" static="1">
		<x path="rm.types.MoveFrequency"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOWEST>
	<LOWER public="1" get="inline" set="null" expr="cast 2" line="180" static="1">
		<x path="rm.types.MoveFrequency"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOWER>
	<NORMAL public="1" get="inline" set="null" expr="cast 3" line="181" static="1">
		<x path="rm.types.MoveFrequency"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<HIGHER public="1" get="inline" set="null" expr="cast 4" line="182" static="1">
		<x path="rm.types.MoveFrequency"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGHER>
	<HIGHEST public="1" get="inline" set="null" expr="cast 5" line="183" static="1">
		<x path="rm.types.MoveFrequency"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGHEST>
	<toString public="1" get="inline" set="null" line="186" static="1">
		<f a="value">
			<x path="rm.types.MoveFrequency"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.MoveFrequency_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
		<LOWEST public="1" get="inline" set="null" expr="cast 1" line="179" static="1">
			<x path="rm.types.MoveFrequency"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOWEST>
		<LOWER public="1" get="inline" set="null" expr="cast 2" line="180" static="1">
			<x path="rm.types.MoveFrequency"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOWER>
		<NORMAL public="1" get="inline" set="null" expr="cast 3" line="181" static="1">
			<x path="rm.types.MoveFrequency"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<HIGHER public="1" get="inline" set="null" expr="cast 4" line="182" static="1">
			<x path="rm.types.MoveFrequency"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGHER>
		<HIGHEST public="1" get="inline" set="null" expr="cast 5" line="183" static="1">
			<x path="rm.types.MoveFrequency"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGHEST>
		<toString public="1" get="inline" set="null" line="186" static="1">
			<f a="value">
				<x path="rm.types.MoveFrequency"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.CharacterPriority" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>* Character/Events priority in RPGMaker MV/rm.
 * This will determine if they're shown above or below or
 * on the same level as characters on the map.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.CharacterPriority_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
	<BELOW_CHARACTERS public="1" get="inline" set="null" expr="cast 0" line="212" static="1">
		<x path="rm.types.CharacterPriority"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BELOW_CHARACTERS>
	<SAME_AS_CHARACTERS public="1" get="inline" set="null" expr="cast 1" line="213" static="1">
		<x path="rm.types.CharacterPriority"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAME_AS_CHARACTERS>
	<ABOVE_CHARACTERS public="1" get="inline" set="null" expr="cast 2" line="214" static="1">
		<x path="rm.types.CharacterPriority"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ABOVE_CHARACTERS>
	<toString public="1" get="inline" set="null" line="217" static="1">
		<f a="value">
			<x path="rm.types.CharacterPriority"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.CharacterPriority_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" final="1">
		<BELOW_CHARACTERS public="1" get="inline" set="null" expr="cast 0" line="212" static="1">
			<x path="rm.types.CharacterPriority"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BELOW_CHARACTERS>
		<SAME_AS_CHARACTERS public="1" get="inline" set="null" expr="cast 1" line="213" static="1">
			<x path="rm.types.CharacterPriority"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAME_AS_CHARACTERS>
		<ABOVE_CHARACTERS public="1" get="inline" set="null" expr="cast 2" line="214" static="1">
			<x path="rm.types.CharacterPriority"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ABOVE_CHARACTERS>
		<toString public="1" get="inline" set="null" line="217" static="1">
			<f a="value">
				<x path="rm.types.CharacterPriority"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.Color" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.Color_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.Color_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.DamageColorType" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.DamageColorType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1">
	<HP_DAMAGE public="1" get="inline" set="null" expr="cast 0" line="239" static="1">
		<x path="rm.types.DamageColorType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HP_DAMAGE>
	<HP_RECOVER public="1" get="inline" set="null" expr="cast 1" line="240" static="1">
		<x path="rm.types.DamageColorType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HP_RECOVER>
	<MP_DAMAGE public="1" get="inline" set="null" expr="cast 2" line="241" static="1">
		<x path="rm.types.DamageColorType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MP_DAMAGE>
	<MP_RECOVER public="1" get="inline" set="null" expr="cast 3" line="242" static="1">
		<x path="rm.types.DamageColorType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MP_RECOVER>
	<DEFAULT public="1" get="inline" set="null" expr="cast 4" line="247" static="1">
		<x path="rm.types.DamageColorType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Default can be any number</haxe_doc>
	</DEFAULT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.DamageColorType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1">
		<HP_DAMAGE public="1" get="inline" set="null" expr="cast 0" line="239" static="1">
			<x path="rm.types.DamageColorType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HP_DAMAGE>
		<HP_RECOVER public="1" get="inline" set="null" expr="cast 1" line="240" static="1">
			<x path="rm.types.DamageColorType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HP_RECOVER>
		<MP_DAMAGE public="1" get="inline" set="null" expr="cast 2" line="241" static="1">
			<x path="rm.types.DamageColorType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MP_DAMAGE>
		<MP_RECOVER public="1" get="inline" set="null" expr="cast 3" line="242" static="1">
			<x path="rm.types.DamageColorType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MP_RECOVER>
		<DEFAULT public="1" get="inline" set="null" expr="cast 4" line="247" static="1">
			<x path="rm.types.DamageColorType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Default can be any number</haxe_doc>
		</DEFAULT>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.WaitMode" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.WaitMode_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.WaitMode_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.Frames" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.Frames_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.Frames_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.Money" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.Money_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.Money_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<abstract path="rm.types.GaugeType" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.GaugeType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1">
	<HP public="1" get="inline" set="null" expr="cast &quot;hp&quot;" line="268" static="1">
		<x path="rm.types.GaugeType"/>
		<meta>
			<m n=":value"><e>cast "hp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HP>
	<MP public="1" get="inline" set="null" expr="cast &quot;mp&quot;" line="269" static="1">
		<x path="rm.types.GaugeType"/>
		<meta>
			<m n=":value"><e>cast "mp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MP>
	<TP public="1" get="inline" set="null" expr="cast &quot;tp&quot;" line="270" static="1">
		<x path="rm.types.GaugeType"/>
		<meta>
			<m n=":value"><e>cast "tp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TP>
	<TIME public="1" get="inline" set="null" expr="cast &quot;time&quot;" line="271" static="1">
		<x path="rm.types.GaugeType"/>
		<meta>
			<m n=":value"><e>cast "time"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TIME>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="rm.types._LunaTea.GaugeType_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1">
		<HP public="1" get="inline" set="null" expr="cast &quot;hp&quot;" line="268" static="1">
			<x path="rm.types.GaugeType"/>
			<meta>
				<m n=":value"><e>cast "hp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HP>
		<MP public="1" get="inline" set="null" expr="cast &quot;mp&quot;" line="269" static="1">
			<x path="rm.types.GaugeType"/>
			<meta>
				<m n=":value"><e>cast "mp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MP>
		<TP public="1" get="inline" set="null" expr="cast &quot;tp&quot;" line="270" static="1">
			<x path="rm.types.GaugeType"/>
			<meta>
				<m n=":value"><e>cast "tp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TP>
		<TIME public="1" get="inline" set="null" expr="cast &quot;time&quot;" line="271" static="1">
			<x path="rm.types.GaugeType"/>
			<meta>
				<m n=":value"><e>cast "time"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TIME>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="rm.types.SkillTypeId" params="" file="src/rm/types/LunaTea.hx" module="rm.types.LunaTea">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="rm.types._LunaTea.SkillTypeId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class></impl>
	</abstract>
	<class path="rm.types._LunaTea.SkillTypeId_Impl_" params="" file="src/rm/types/LunaTea.hx" private="1" module="rm.types.LunaTea" extern="1" final="1"><meta><m n=":enum"/></meta></class>
	<typedef path="rm.types.Matrix" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<value><c path="Array"><x path="Int"/></c></value>
	<type><c path="String"/></type>
</a></typedef>
	<typedef path="rm.types.TouchInputEvents" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<wheelY><x path="Int"/></wheelY>
	<wheelX><x path="Int"/></wheelX>
	<trigger><x path="Bool"/></trigger>
	<released><x path="Bool"/></released>
	<moved><x path="Bool"/></moved>
	<cancelled><x path="Bool"/></cancelled>
</a></typedef>
	<typedef path="rm.types.AudioParameters" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<volume><x path="Int"/></volume>
	<pos><x path="Int"/></pos>
	<pitch><x path="Int"/></pitch>
	<pan><x path="Int"/></pan>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="rm.types.BattleRewards" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<items><c path="Array"><t path="rm.types.BaseItem"/></c></items>
	<gold><x path="Int"/></gold>
	<exp><x path="Int"/></exp>
</a></typedef>
	<typedef path="rm.types.BattlerAnimation" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<mirror><x path="Bool"/></mirror>
	<delay><x path="Int"/></delay>
	<animationId><x path="Int"/></animationId>
</a></typedef>
	<typedef path="rm.types.CommandItem" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<symbol><c path="String"/></symbol>
	<name><c path="String"/></name>
	<ext><x path="Any"/></ext>
	<enabled><x path="Bool"/></enabled>
</a></typedef>
	<typedef path="rm.types.TextStateLT" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<width><x path="Int"/></width>
	<text><c path="String"/></text>
	<startY><x path="Int"/></startY>
	<startX><x path="Int"/></startX>
	<rtl><x path="Bool"/></rtl>
	<outputWidth><x path="Int"/></outputWidth>
	<outputHeight><x path="Int"/></outputHeight>
	<left><x path="Int"/></left>
	<index><x path="Int"/></index>
	<height><x path="Int"/></height>
	<drawing><x path="Bool"/></drawing>
	<buffer><c path="String"/></buffer>
</a></typedef>
	<typedef path="rm.types.TextState" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<width><x path="Int"/></width>
	<text><c path="String"/></text>
	<startY><x path="Int"/></startY>
	<startX><x path="Int"/></startX>
	<rtl><x path="Bool"/></rtl>
	<outputWidth><x path="Int"/></outputWidth>
	<outputHeight><x path="Int"/></outputHeight>
	<index><x path="Int"/></index>
	<height><x path="Int"/></height>
	<drawing><x path="Bool"/></drawing>
	<buffer><c path="String"/></buffer>
</a></typedef>
	<typedef path="rm.types.BattleLogMethod" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<params><x path="Any"/></params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="rm.types.ConfigData" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<seVolume><x path="Int"/></seVolume>
	<meVolume><x path="Int"/></meVolume>
	<commandRemember><x path="Bool"/></commandRemember>
	<bgsVolume><x path="Int"/></bgsVolume>
	<bgmVolume><x path="Int"/></bgmVolume>
	<alwaysDash><x path="Bool"/></alwaysDash>
</a></typedef>
	<typedef path="rm.types.DatabaseFile" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<src><c path="String"/></src>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="rm.types.SaveFileInfo" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<title><c path="String"/></title>
	<timestamp><x path="Float"/></timestamp>
	<playtime><c path="String"/></playtime>
	<globalId><c path="String"/></globalId>
	<faces><c path="Array"><c path="Array"><x path="Any"/></c></c></faces>
	<characters><c path="Array"><c path="Array"><x path="Any"/></c></c></characters>
</a></typedef>
	<typedef path="rm.types.SaveContents" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<selfSwitches><c path="rm.objects.Game_SelfSwitches"/></selfSwitches>
	<screen><c path="rm.objects.Game_Screen"/></screen>
	<player><c path="rm.objects.Game_Player"/></player>
	<party><c path="rm.objects.Game_Party"/></party>
	<map><c path="rm.objects.Game_Map"/></map>
	<actors><c path="rm.objects.Game_Actors"/></actors>
</a></typedef>
	<typedef path="rm.types.PluginSettings" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<status><c path="String"/></status>
	<parameters><a><key><c path="String"/></key></a></parameters>
	<name><c path="String"/></name>
	<description><c path="String"/></description>
</a></typedef>
	<typedef path="rm.types.Motion" params="" file="src/rm/types/RM.hx" module="rm.types.RM"><a>
	<loop><x path="Bool"/></loop>
	<index><x path="Int"/></index>
</a></typedef>
	<typedef path="rm.types.MetaData" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<note><c path="String"/></note>
	<meta><c path="js.lib.Object"/></meta>
</a></typedef>
	<typedef path="rm.types.RPGMap" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<width>
		<x path="Int"/>
		<haxe_doc>* The map's width</haxe_doc>
	</width>
	<tilesetId>
		<x path="Int"/>
		<haxe_doc>* The map's tile set</haxe_doc>
	</tilesetId>
	<specifyBattleback>
		<x path="Bool"/>
		<haxe_doc>* The truth value indicating whether the battle background
  * specification is enabled.</haxe_doc>
	</specifyBattleback>
	<scrollType>
		<x path="Int"/>
		<haxe_doc>* The scroll type (0: No Loop, 1:Vertical Loop, 2:Horizontal Loop, 3:Both Loop)</haxe_doc>
	</scrollType>
	<parallaxSy>
		<x path="Int"/>
		<haxe_doc>* The automatic y-axis scrolling speed for the parallax background.</haxe_doc>
	</parallaxSy>
	<parallaxSx>
		<x path="Int"/>
		<haxe_doc>* The automatic x-axis scrolling speed for the parallax background.</haxe_doc>
	</parallaxSx>
	<parallaxShow>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Show in the Editor] option for the parallax background.</haxe_doc>
	</parallaxShow>
	<parallaxName>
		<c path="String"/>
		<haxe_doc>* The file name of the parallax background's graphic.</haxe_doc>
	</parallaxName>
	<parallaxLoopY>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Loop Vertical] option for the parallax background.</haxe_doc>
	</parallaxLoopY>
	<parallaxLoopX>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Loop Horizontal] option for the parallax background.</haxe_doc>
	</parallaxLoopX>
	<note><c path="String"/></note>
	<meta><c path="js.lib.Object"/></meta>
	<height>
		<x path="Int"/>
		<haxe_doc>* The maps height</haxe_doc>
	</height>
	<events>
		<c path="Array"><t path="rm.types.Event"/></c>
		<haxe_doc>* The array of RPG.Event data.</haxe_doc>
	</events>
	<encounterStep>
		<x path="Int"/>
		<haxe_doc>* The average Int of steps between encounters.</haxe_doc>
	</encounterStep>
	<encounterList>
		<c path="Array"><t path="rm.types.MapEncounter"/></c>
		<haxe_doc>* An encounter list. A RPG.Map.Encounter ID array.</haxe_doc>
	</encounterList>
	<displayName>
		<c path="String"/>
		<haxe_doc>* The map's display name</haxe_doc>
	</displayName>
	<disableDashing>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Disable Dashing] option.</haxe_doc>
	</disableDashing>
	<data>
		<c path="Array"><x path="Int"/></c>
		<haxe_doc>* The map data. A 3-dimensional tile ID array (Table).</haxe_doc>
	</data>
	<bgm>
		<t path="rm.types.AudioFile"/>
		<haxe_doc>* The name of the BGM {RPG.AudioFile} if BGM autoswitching
  * is enabled.</haxe_doc>
	</bgm>
	<battleback2_name>
		<c path="String"/>
		<haxe_doc>* The file name of the wall graphic if the battle background
  * specification is enabled.</haxe_doc>
	</battleback2_name>
	<battleback1Name>
		<c path="String"/>
		<haxe_doc>* The file name of the wall graphic if the battle background
  * specification is enabled.</haxe_doc>
	</battleback1Name>
	<autoplayBgs>
		<x path="Bool"/>
		<haxe_doc>* The truth value indicating whether BGS autoswitching
  * is enabled.</haxe_doc>
	</autoplayBgs>
	<autoplayBgm>
		<x path="Bool"/>
		<haxe_doc>* The truth value indicating whether BGM autoswitching
  * is enabled.</haxe_doc>
	</autoplayBgm>
</a></typedef>
	<typedef path="rm.types.AudioFile" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<volume>
				<x path="Int"/>
				<haxe_doc>* The sound's volume (0..100). The default values are 100 for BGM and ME and 80 for BGS and SE.</haxe_doc>
			</volume>
			<pitch>
				<x path="Int"/>
				<haxe_doc>* The sound's pitch (50..150). The default value is 100.</haxe_doc>
			</pitch>
			<pan>
				<x path="Int"/>
				<haxe_doc>* The pan.</haxe_doc>
			</pan>
			<name>
				<c path="String"/>
				<haxe_doc>* The sound file name.</haxe_doc>
			</name>
		</a>
		<haxe_doc>* The data class for audio file.</haxe_doc>
	</typedef>
	<typedef path="rm.types.MapEncounter" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<weight>
		<x path="Int"/>
		<haxe_doc>* Weight/chance  among enemies on the map that you'll
  * meet this enemy.</haxe_doc>
	</weight>
	<troopId>
		<x path="Int"/>
		<haxe_doc>* The enemy Troop ID.</haxe_doc>
	</troopId>
	<regionSet>
		<c path="Array"><x path="Int"/></c>
		<haxe_doc>* An array containing Region IDs.</haxe_doc>
	</regionSet>
</a></typedef>
	<typedef path="rm.types.MapInfo" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<parentId>
				<x path="Int"/>
				<haxe_doc>* The parent map ID.</haxe_doc>
			</parentId>
			<order>
				<x path="Int"/>
				<haxe_doc>* The map tree display order, which is used internally.</haxe_doc>
			</order>
			<name>
				<c path="String"/>
				<haxe_doc>* The map name.</haxe_doc>
			</name>
		</a>
		<haxe_doc>* The data class for map information.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Event" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<y>
				<x path="Int"/>
				<haxe_doc>* The event's y-coordinate on the map.</haxe_doc>
			</y>
			<x>
				<x path="Int"/>
				<haxe_doc>* The event's x-coordinate on the map.</haxe_doc>
			</x>
			<pages>
				<c path="Array"><t path="rm.types.EventPage"/></c>
				<haxe_doc>* The event pages. RPG.EventPage array.</haxe_doc>
			</pages>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The event name.</haxe_doc>
			</name>
			<meta><c path="js.lib.Object"/></meta>
			<id>
				<x path="Int"/>
				<haxe_doc>* The event ID.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* The data class for map events.</haxe_doc>
	</typedef>
	<typedef path="rm.types.EventPage" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<walkAnime>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Walking Animation] option.</haxe_doc>
			</walkAnime>
			<trigger>
				<x path="Int"/>
				<haxe_doc>* The event trigger (0: action button, 1: player touch, 2: event touch, 3: autorun, 4: parallel).</haxe_doc>
			</trigger>
			<through>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Through] option.</haxe_doc>
			</through>
			<stepAnime>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Stepping Animation] option.</haxe_doc>
			</stepAnime>
			<priorityType>
				<x path="Int"/>
				<haxe_doc>* The priority type (0: below characters, 1: same as characters, 2: above characters).</haxe_doc>
			</priorityType>
			<moveType>
				<x path="Int"/>
				<haxe_doc>* The type of movement (0: fixed, 1: random, 2: approach, 3: custom).</haxe_doc>
			</moveType>
			<moveSpeed>
				<x path="Int"/>
				<haxe_doc>* The movement speed (1: x8 slower, 2: x4 slower, 3: x2 slower, 4: normal, 5: x2 faster, 6: x4 faster).</haxe_doc>
			</moveSpeed>
			<moveRoute>
				<c path="Array"><t path="rm.types.MoveRoute"/></c>
				<haxe_doc>* The movement route (RPG.MoveRoute). Referenced only when the movement type is set to custom.</haxe_doc>
			</moveRoute>
			<moveFrequency>
				<x path="Int"/>
				<haxe_doc>* The movement frequency (1: lowest, 2: lower, 3: normal, 4: higher, 5: highest).</haxe_doc>
			</moveFrequency>
			<list>
				<c path="Array"><t path="rm.types.EventCommand"/></c>
				<haxe_doc>* A list of event commands. An RPG.EventCommand array.</haxe_doc>
			</list>
			<image>
				<t path="rm.types.EventPageImage"/>
				<haxe_doc>* The event graphic (RPG.EventPage.Image) .</haxe_doc>
			</image>
			<directionFix>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Direction Fix] option.</haxe_doc>
			</directionFix>
			<conditions>
				<t path="rm.types.EventPageConditions"/>
				<haxe_doc>* The event condition (RPG.EventPage.Condition).</haxe_doc>
			</conditions>
		</a>
		<haxe_doc>* The data class for the event page.</haxe_doc>
	</typedef>
	<typedef path="rm.types.EventPageConditions" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<variableValue>
				<x path="Int"/>
				<haxe_doc>* The standard value of that variable (x and greater) if the [Variable] condition is valid.</haxe_doc>
			</variableValue>
			<variableValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Variable] condition is valid.</haxe_doc>
			</variableValid>
			<variableId>
				<x path="Int"/>
				<haxe_doc>* The ID of that variable if the [Variable] condition is valid.</haxe_doc>
			</variableId>
			<switch2Valid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the second [Switch] condition is valid.</haxe_doc>
			</switch2Valid>
			<switch2Id>
				<x path="Int"/>
				<haxe_doc>* The ID of that switch if the second [Switch] condition is valid.</haxe_doc>
			</switch2Id>
			<switch1Valid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the first [Switch] condition is valid.</haxe_doc>
			</switch1Valid>
			<switch1Id>
				<x path="Int"/>
				<haxe_doc>* The ID of that switch if the first [Switch] condition is valid.</haxe_doc>
			</switch1Id>
			<selfSwitchValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Self Switch] condition is valid.</haxe_doc>
			</selfSwitchValid>
			<selfSwitchCh>
				<c path="String"/>
				<haxe_doc>* The letter of that self switch ("A".."D") if the [Self Switch] condition is valid.</haxe_doc>
			</selfSwitchCh>
			<itemValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Item] condition is valid.</haxe_doc>
			</itemValid>
			<itemId>
				<c path="String"/>
				<haxe_doc>* The ID of that item if the [Item] condition is valid.</haxe_doc>
			</itemId>
			<actorValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Actor] condition is valid.</haxe_doc>
			</actorValid>
			<actorId>
				<c path="String"/>
				<haxe_doc>* The ID of that actor if the [Actor] condition is valid.</haxe_doc>
			</actorId>
		</a>
		<haxe_doc>* The data class for the event page conditions.</haxe_doc>
	</typedef>
	<typedef path="rm.types.EventPageImage" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<tileId>
				<x path="Int"/>
				<haxe_doc>* The tile ID. If the specified graphic is not a tile, this value is 0.</haxe_doc>
			</tileId>
			<pattern>
				<x path="Int"/>
				<haxe_doc>* The character's pattern (0..2).</haxe_doc>
			</pattern>
			<direction>
				<x path="Int"/>
				<haxe_doc>* The direction in which the character is facing (2: down, 4: left, 6: right, 8: up).</haxe_doc>
			</direction>
			<characterName>
				<c path="String"/>
				<haxe_doc>* The file name of the character's graphic.</haxe_doc>
			</characterName>
			<characterIndex>
				<x path="Int"/>
				<haxe_doc>* The index of the character's graphic file (0..7).</haxe_doc>
			</characterIndex>
		</a>
		<haxe_doc>* The data class for the Event page [Graphics].</haxe_doc>
	</typedef>
	<typedef path="rm.types.EventCommand" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<parameters>
				<c path="Array"><x path="Any"/></c>
				<haxe_doc>* An array containing the Event command's arguments. The contents vary for each command.</haxe_doc>
			</parameters>
			<indent>
				<x path="Int"/>
				<haxe_doc>* The indent depth. Usually 0. The [Conditional Branch] command, among others, adds 1 with every step deeper.</haxe_doc>
			</indent>
			<code>
				<x path="Int"/>
				<haxe_doc>* The event code.</haxe_doc>
			</code>
		</a>
		<haxe_doc>* The data class for the Event command.</haxe_doc>
	</typedef>
	<typedef path="rm.types.MoveRoute" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<wait>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Wait for Completion] option.</haxe_doc>
			</wait>
			<skippable>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Skip If Cannot Move] option.</haxe_doc>
			</skippable>
			<repeat>
				<x path="Bool"/>
				<haxe_doc>* The truth value of the [Repeat Action] option.</haxe_doc>
			</repeat>
			<list>
				<c path="Array"><t path="rm.types.MoveCommand"/></c>
				<haxe_doc>* Program contents. An RPG.MoveCommand array.</haxe_doc>
			</list>
		</a>
		<haxe_doc>* The data class for the Move route.</haxe_doc>
	</typedef>
	<typedef path="rm.types.MoveCommand" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<parameters>
				<c path="Array"><x path="Any"/></c>
				<haxe_doc>* An array containing the Move command's arguments. The contents vary for each command.</haxe_doc>
			</parameters>
			<code>
				<x path="Int"/>
				<haxe_doc>* Move command code.</haxe_doc>
			</code>
		</a>
		<haxe_doc>* The data class for the Move command.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Damage" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<variance>
				<x path="Int"/>
				<haxe_doc>* The degree of variability.</haxe_doc>
			</variance>
			<type>
				<x path="Int"/>
				<haxe_doc>* The type of damage.
  *
  * 0: None
  * 1: HP damage
  * 2: MP damage
  * 3: HP recovery
  * 4: MP recovery
  * 5: HP drain
  * 6: MP drain</haxe_doc>
			</type>
			<formula>
				<c path="String"/>
				<haxe_doc>* The formula.</haxe_doc>
			</formula>
			<elementId>
				<x path="Int"/>
				<haxe_doc>* The element ID.</haxe_doc>
			</elementId>
			<critical>
				<x path="Bool"/>
				<haxe_doc>* Critical hit (true/false).</haxe_doc>
			</critical>
		</a>
		<haxe_doc>* The data class for damage.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Trait" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<value>
		<x path="Int"/>
		<haxe_doc>* The value set according to the type of the trait.</haxe_doc>
	</value>
	<scrollY>
		<x path="Int"/>
		<haxe_doc>* The y-axis scroll position, which is used internally.</haxe_doc>
	</scrollY>
	<scrollX>
		<x path="Int"/>
		<haxe_doc>* The x-axis scroll position, which is used internally.</haxe_doc>
	</scrollX>
	<expanded>
		<x path="Bool"/>
		<haxe_doc>* The map tree expansion flag, which is used internally.</haxe_doc>
	</expanded>
	<dataId>
		<x path="Int"/>
		<haxe_doc>* The ID of the data (such as elements or states) according to the type of the trait.</haxe_doc>
	</dataId>
	<code>
		<x path="Int"/>
		<haxe_doc>* The trait code.</haxe_doc>
	</code>
</a></typedef>
	<typedef path="rm.types.Effect" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<value2>
				<x path="Int"/>
				<haxe_doc>* Value 2 set according to the type of use effect.</haxe_doc>
			</value2>
			<value1>
				<x path="Int"/>
				<haxe_doc>* Value 1 set according to the type of use effect.</haxe_doc>
			</value1>
			<dataId>
				<x path="Int"/>
				<haxe_doc>* The ID of data (state, parameter, and so on) according to the type of use effect.</haxe_doc>
			</dataId>
			<code>
				<x path="Int"/>
				<haxe_doc>* The use effect code.</haxe_doc>
			</code>
		</a>
		<haxe_doc>* The data class for use effects.</haxe_doc>
	</typedef>
	<typedef path="rm.types.BaseItem" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The item name.</haxe_doc>
			</name>
			<meta><c path="js.lib.Object"/></meta>
			<id>
				<x path="Int"/>
				<haxe_doc>* The item ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<description>
				<c path="String"/>
				<haxe_doc>* The description text.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* A superclass of actor, class, skill, item, weapon, armor, enemy, and state.
 *
 * Some items are unnecessary depending on the type of data, but they are included for convenience sake.</haxe_doc>
	</typedef>
	<typedef path="rm.types.UsableItem" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<tpGain>
		<x path="Int"/>
		<haxe_doc>* The number of TP gained.</haxe_doc>
	</tpGain>
	<successRate>
		<x path="Float"/>
		<haxe_doc>* The success rate.</haxe_doc>
	</successRate>
	<speed>
		<x path="Int"/>
		<haxe_doc>* The speed correction.</haxe_doc>
	</speed>
	<scope>
		<x path="Int"/>
		<haxe_doc>* The scope of effects.
  *
  * 0: None
  * 1: One Enemy
  * 2: All Enemies
  * 3: One Random Enemy
  * 4: Two Random Enemies
  * 5: Three Random Enemies
  * 6: Four Random Enemies
  * 7: One Ally
  * 8: All Allies
  * 9: One Ally (Dead)
  * 10: All Allies (Dead)
  * 11: The User</haxe_doc>
	</scope>
	<repeats>
		<x path="Int"/>
		<haxe_doc>* The number of repeats.</haxe_doc>
	</repeats>
	<occasion>
		<x path="Int"/>
		<haxe_doc>* When the item/skill may be used.
  *
  * 0: Always
  * 1: Only in battle
  * 2: Only from the menu
  * 3: Never</haxe_doc>
	</occasion>
	<note><c path="String"/></note>
	<name>
		<c path="String"/>
		<haxe_doc>* The item name.</haxe_doc>
	</name>
	<meta><c path="js.lib.Object"/></meta>
	<id>
		<x path="Int"/>
		<haxe_doc>* The item ID.</haxe_doc>
	</id>
	<iconIndex>
		<x path="Int"/>
		<haxe_doc>* The icon number.</haxe_doc>
	</iconIndex>
	<hitType>
		<x path="Int"/>
		<haxe_doc>* The type of hit.
  *
  * 0: Certain hit
  * 1: Physical attack
  * 2: Magical attack</haxe_doc>
	</hitType>
	<effects>
		<c path="Array"><t path="rm.types.Effect"/></c>
		<haxe_doc>* A list of use effects. An RPG.Effect array.</haxe_doc>
	</effects>
	<description>
		<c path="String"/>
		<haxe_doc>* The description text.</haxe_doc>
	</description>
	<damage>
		<t path="rm.types.Damage"/>
		<haxe_doc>* Damage (RPG.Damage).</haxe_doc>
	</damage>
	<animationId>
		<x path="Int"/>
		<haxe_doc>* The animation ID.</haxe_doc>
	</animationId>
</a></typedef>
	<typedef path="rm.types.Skill" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<tpGain>
				<x path="Int"/>
				<haxe_doc>* The number of TP gained.</haxe_doc>
			</tpGain>
			<tpCost>
				<x path="Int"/>
				<haxe_doc>* Number of TP consumed</haxe_doc>
			</tpCost>
			<successRate>
				<x path="Float"/>
				<haxe_doc>* The success rate.</haxe_doc>
			</successRate>
			<stypeId>
				<x path="Int"/>
				<haxe_doc>* Skill type ID.</haxe_doc>
			</stypeId>
			<speed>
				<x path="Int"/>
				<haxe_doc>* The speed correction.</haxe_doc>
			</speed>
			<scope>
				<x path="Int"/>
				<haxe_doc>* The scope of effects.
  *
  * 0: None
  * 1: One Enemy
  * 2: All Enemies
  * 3: One Random Enemy
  * 4: Two Random Enemies
  * 5: Three Random Enemies
  * 6: Four Random Enemies
  * 7: One Ally
  * 8: All Allies
  * 9: One Ally (Dead)
  * 10: All Allies (Dead)
  * 11: The User</haxe_doc>
			</scope>
			<requiredWtypeId2>
				<x path="Int"/>
				<haxe_doc>* Weapon type required.</haxe_doc>
			</requiredWtypeId2>
			<requiredWtypeId1>
				<x path="Int"/>
				<haxe_doc>* Weapon type required.</haxe_doc>
			</requiredWtypeId1>
			<repeats>
				<x path="Int"/>
				<haxe_doc>* The number of repeats.</haxe_doc>
			</repeats>
			<occasion>
				<x path="Int"/>
				<haxe_doc>* When the item/skill may be used.
  *
  * 0: Always
  * 1: Only in battle
  * 2: Only from the menu
  * 3: Never</haxe_doc>
			</occasion>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The item name.</haxe_doc>
			</name>
			<mpCost>
				<x path="Int"/>
				<haxe_doc>* Number of MP consumed.</haxe_doc>
			</mpCost>
			<meta><c path="js.lib.Object"/></meta>
			<message2>
				<c path="String"/>
				<haxe_doc>* The use message.</haxe_doc>
			</message2>
			<message1>
				<c path="String"/>
				<haxe_doc>* The use message.</haxe_doc>
			</message1>
			<id>
				<x path="Int"/>
				<haxe_doc>* The item ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<hitType>
				<x path="Int"/>
				<haxe_doc>* The type of hit.
  *
  * 0: Certain hit
  * 1: Physical attack
  * 2: Magical attack</haxe_doc>
			</hitType>
			<effects>
				<c path="Array"><t path="rm.types.Effect"/></c>
				<haxe_doc>* A list of use effects. An RPG.Effect array.</haxe_doc>
			</effects>
			<description>
				<c path="String"/>
				<haxe_doc>* The description text.</haxe_doc>
			</description>
			<damage>
				<t path="rm.types.Damage"/>
				<haxe_doc>* Damage (RPG.Damage).</haxe_doc>
			</damage>
			<animationId>
				<x path="Int"/>
				<haxe_doc>* The animation ID.</haxe_doc>
			</animationId>
		</a>
		<haxe_doc>* The data class for skills.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Item" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<tpGain>
				<x path="Int"/>
				<haxe_doc>* The number of TP gained.</haxe_doc>
			</tpGain>
			<successRate>
				<x path="Float"/>
				<haxe_doc>* The success rate.</haxe_doc>
			</successRate>
			<speed>
				<x path="Int"/>
				<haxe_doc>* The speed correction.</haxe_doc>
			</speed>
			<scope>
				<x path="Int"/>
				<haxe_doc>* The scope of effects.
  *
  * 0: None
  * 1: One Enemy
  * 2: All Enemies
  * 3: One Random Enemy
  * 4: Two Random Enemies
  * 5: Three Random Enemies
  * 6: Four Random Enemies
  * 7: One Ally
  * 8: All Allies
  * 9: One Ally (Dead)
  * 10: All Allies (Dead)
  * 11: The User</haxe_doc>
			</scope>
			<repeats>
				<x path="Int"/>
				<haxe_doc>* The number of repeats.</haxe_doc>
			</repeats>
			<price>
				<x path="Int"/>
				<haxe_doc>* The item's price.</haxe_doc>
			</price>
			<occasion>
				<x path="Int"/>
				<haxe_doc>* When the item/skill may be used.
  *
  * 0: Always
  * 1: Only in battle
  * 2: Only from the menu
  * 3: Never</haxe_doc>
			</occasion>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The item name.</haxe_doc>
			</name>
			<meta><c path="js.lib.Object"/></meta>
			<itypeId>
				<x path="Int"/>
				<haxe_doc>* The item type ID.
  *
  * 1: Regular item
  * 2: Key item</haxe_doc>
			</itypeId>
			<id>
				<x path="Int"/>
				<haxe_doc>* The item ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<hitType>
				<x path="Int"/>
				<haxe_doc>* The type of hit.
  *
  * 0: Certain hit
  * 1: Physical attack
  * 2: Magical attack</haxe_doc>
			</hitType>
			<effects>
				<c path="Array"><t path="rm.types.Effect"/></c>
				<haxe_doc>* A list of use effects. An RPG.Effect array.</haxe_doc>
			</effects>
			<description>
				<c path="String"/>
				<haxe_doc>* The description text.</haxe_doc>
			</description>
			<damage>
				<t path="rm.types.Damage"/>
				<haxe_doc>* Damage (RPG.Damage).</haxe_doc>
			</damage>
			<consumable>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the item disappears when used.</haxe_doc>
			</consumable>
			<animationId>
				<x path="Int"/>
				<haxe_doc>* The animation ID.</haxe_doc>
			</animationId>
		</a>
		<haxe_doc>* The data class for items.</haxe_doc>
	</typedef>
	<typedef path="rm.types.EquipItem" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<traits>
				<c path="Array"><t path="rm.types.Trait"/></c>
				<haxe_doc>* The array of Trait data.</haxe_doc>
			</traits>
			<price>
				<x path="Int"/>
				<haxe_doc>* The price of the weapon or armor.</haxe_doc>
			</price>
			<params>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The amount of parameter change. An array of integers using the following IDs as subscripts:
  *
  * 0: Maximum hit points
  * 1: Maximum magic points
  * 2: Attack power
  * 3: Defense power
  * 4: Magic attack power
  * 5: Magic defense power
  * 6: Agility
  * 7: Luck</haxe_doc>
			</params>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The item name.</haxe_doc>
			</name>
			<meta><c path="js.lib.Object"/></meta>
			<id>
				<x path="Int"/>
				<haxe_doc>* The item ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<etypeId>
				<x path="Int"/>
				<haxe_doc>* The type of weapon or armor.
  *
  * 0: Weapon
  * 1: Shield
  * 2: Head
  * 3: Body
  * 4: Accessory</haxe_doc>
			</etypeId>
			<description>
				<c path="String"/>
				<haxe_doc>* The description text.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* A superclass of weapons and armor.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Weapon" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<wtypeId>
				<x path="Int"/>
				<haxe_doc>* The weapon type ID.</haxe_doc>
			</wtypeId>
			<traits>
				<c path="Array"><t path="rm.types.Trait"/></c>
				<haxe_doc>* The array of Trait data.</haxe_doc>
			</traits>
			<price>
				<x path="Int"/>
				<haxe_doc>* The price of the weapon or armor.</haxe_doc>
			</price>
			<params>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The amount of parameter change. An array of integers using the following IDs as subscripts:
  *
  * 0: Maximum hit points
  * 1: Maximum magic points
  * 2: Attack power
  * 3: Defense power
  * 4: Magic attack power
  * 5: Magic defense power
  * 6: Agility
  * 7: Luck</haxe_doc>
			</params>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The item name.</haxe_doc>
			</name>
			<meta><c path="js.lib.Object"/></meta>
			<id>
				<x path="Int"/>
				<haxe_doc>* The item ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<etypeId>
				<x path="Int"/>
				<haxe_doc>* The type of weapon or armor.
  *
  * 0: Weapon
  * 1: Shield
  * 2: Head
  * 3: Body
  * 4: Accessory</haxe_doc>
			</etypeId>
			<description>
				<c path="String"/>
				<haxe_doc>* The description text.</haxe_doc>
			</description>
			<animationId>
				<x path="Int"/>
				<haxe_doc>* The animation ID when using the weapon.</haxe_doc>
			</animationId>
		</a>
		<haxe_doc>* The data class for weapons.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Armor" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<traits>
				<c path="Array"><t path="rm.types.Trait"/></c>
				<haxe_doc>* The array of Trait data.</haxe_doc>
			</traits>
			<price>
				<x path="Int"/>
				<haxe_doc>* The price of the weapon or armor.</haxe_doc>
			</price>
			<params>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The amount of parameter change. An array of integers using the following IDs as subscripts:
  *
  * 0: Maximum hit points
  * 1: Maximum magic points
  * 2: Attack power
  * 3: Defense power
  * 4: Magic attack power
  * 5: Magic defense power
  * 6: Agility
  * 7: Luck</haxe_doc>
			</params>
			<note><c path="String"/></note>
			<name>
				<c path="String"/>
				<haxe_doc>* The item name.</haxe_doc>
			</name>
			<meta><c path="js.lib.Object"/></meta>
			<id>
				<x path="Int"/>
				<haxe_doc>* The item ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<etypeId>
				<x path="Int"/>
				<haxe_doc>* The type of weapon or armor.
  *
  * 0: Weapon
  * 1: Shield
  * 2: Head
  * 3: Body
  * 4: Accessory</haxe_doc>
			</etypeId>
			<description>
				<c path="String"/>
				<haxe_doc>* The description text.</haxe_doc>
			</description>
			<atypeId>
				<x path="Int"/>
				<haxe_doc>* The armor type ID.</haxe_doc>
			</atypeId>
		</a>
		<haxe_doc>* The data class for armor.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Troop" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<pages>
		<c path="Array"><t path="rm.types.Page"/></c>
		<haxe_doc>* The battle events. An RPG.Troop.Page array.</haxe_doc>
	</pages>
	<name>
		<c path="String"/>
		<haxe_doc>* The troop name.</haxe_doc>
	</name>
	<members>
		<c path="Array"><t path="rm.types.TroopMember"/></c>
		<haxe_doc>* The troop members. An RPG.Troop.Member array.</haxe_doc>
	</members>
	<id>
		<x path="Int"/>
		<haxe_doc>* The troop ID.</haxe_doc>
	</id>
</a></typedef>
	<typedef path="rm.types.TroopMember" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<y>
		<x path="Int"/>
		<haxe_doc>* The troop member's y-coordinate.</haxe_doc>
	</y>
	<x>
		<x path="Int"/>
		<haxe_doc>* The troop member's x-coordinate.</haxe_doc>
	</x>
	<hidden>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Appear Halfway] option.</haxe_doc>
	</hidden>
	<enemyId>
		<x path="Int"/>
		<haxe_doc>* The enemy ID.</haxe_doc>
	</enemyId>
</a></typedef>
	<typedef path="rm.types.Page" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<span>
				<x path="Int"/>
				<haxe_doc>* Span (0: battle, 1: turn, 2: moment).</haxe_doc>
			</span>
			<list>
				<c path="Array"><t path="rm.types.EventCommand"/></c>
				<haxe_doc>* Program contents. An RPG.EventCommand array.</haxe_doc>
			</list>
			<condition>
				<t path="rm.types.PageCondition"/>
				<haxe_doc>* Condition (RPG.Troop.Page.Condition).</haxe_doc>
			</condition>
		</a>
		<haxe_doc>* The data class for battle events (pages).</haxe_doc>
	</typedef>
	<typedef path="rm.types.PageCondition" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<turnValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Turn No.] condition is valid.</haxe_doc>
			</turnValid>
			<turnEnding>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [At End of Turn] condition is valid.</haxe_doc>
			</turnEnding>
			<turnB>
				<x path="Int"/>
				<haxe_doc>* The a and b values specified in the [Turn No.] condition. To be input in the form A + B * X.</haxe_doc>
			</turnB>
			<turnA>
				<x path="Int"/>
				<haxe_doc>* The a and b values specified in the [Turn No.] condition. To be input in the form A + B * X.</haxe_doc>
			</turnA>
			<switchValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Switch] condition is valid.</haxe_doc>
			</switchValid>
			<switchId>
				<x path="Int"/>
				<haxe_doc>* The switch ID specified in the [Switch] condition.</haxe_doc>
			</switchId>
			<enemyValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Enemy] condition is valid.</haxe_doc>
			</enemyValid>
			<enemyIndex>
				<x path="Int"/>
				<haxe_doc>* The troop member index specified in the [Enemy] condition (0..7).</haxe_doc>
			</enemyIndex>
			<enemyHp>
				<x path="Int"/>
				<haxe_doc>* The HP percentage specified in the [Enemy] condition.</haxe_doc>
			</enemyHp>
			<actorValid>
				<x path="Bool"/>
				<haxe_doc>* The truth value indicating whether the [Actor] condition is valid.</haxe_doc>
			</actorValid>
			<actorId>
				<x path="Int"/>
				<haxe_doc>* The actor ID specified in the [Actor] condition.</haxe_doc>
			</actorId>
			<actorHp>
				<x path="Int"/>
				<haxe_doc>* The HP percentage specified in the [Actor] condition.</haxe_doc>
			</actorHp>
		</a>
		<haxe_doc>* The data class of battle event [Conditions].</haxe_doc>
	</typedef>
	<typedef path="rm.types.Animation" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<timings>
				<c path="Array"><t path="rm.types.AnimationTiming"/></c>
				<haxe_doc>* Timing for SE and flash effects. An RPG.Animation.Timing array.</haxe_doc>
			</timings>
			<position>
				<x path="Int"/>
				<haxe_doc>* The base position (0: head, 1: center, 2: feet, 3: screen).</haxe_doc>
			</position>
			<name>
				<c path="String"/>
				<haxe_doc>* The animation name.</haxe_doc>
			</name>
			<id>
				<x path="Int"/>
				<haxe_doc>* The animation ID.</haxe_doc>
			</id>
			<frames>
				<c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c>
				<haxe_doc>* The three-dimensional array containing the frame contents.</haxe_doc>
			</frames>
			<frameMax>
				<x path="Int"/>
				<haxe_doc>* Number of frames.</haxe_doc>
			</frameMax>
			<animation2Name>
				<c path="String"/>
				<haxe_doc>* The file name of the second animation's graphic.</haxe_doc>
			</animation2Name>
			<animation2Hue>
				<x path="Int"/>
				<haxe_doc>* The adjustment value for the hue of the second animation's graphic (0..360).</haxe_doc>
			</animation2Hue>
			<animation1Name>
				<c path="String"/>
				<haxe_doc>* The file name of the first animation's graphic.</haxe_doc>
			</animation1Name>
			<animation1Hue>
				<c path="String"/>
				<haxe_doc>* The adjustment value for the hue of the first animation's graphic (0..360).</haxe_doc>
			</animation1Hue>
		</a>
		<haxe_doc>* The data class for animation.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Tileset" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<tilesetNames>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>* The file name of the graphic used as the number index (0-8) tile set.
  *
  * The correspondence between numbers and sets is illustrated in the table below.
  *
  * 0 TileA1
  * 1 TileA2
  * 2 TileA3
  * 3 TileA4
  * 4 TileA5
  * 5 TileB
  * 6 TileC
  * 7 TileD
  * 8 TileE</haxe_doc>
			</tilesetNames>
			<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<name>
				<c path="String"/>
				<haxe_doc>* The name of the tile set.</haxe_doc>
			</name>
			<mode>
				<x path="Int"/>
				<haxe_doc>* The mode of the tile set (0: Field type, 1: Area type, 2: VX compatible type).</haxe_doc>
			</mode>
			<links>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</links>
			<internal><x path="Bool"/></internal>
			<id>
				<x path="Int"/>
				<haxe_doc>* The ID of the tile set.</haxe_doc>
			</id>
			<flags>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The flags table. A 1-dimensional array containing a variety of flags (Table).
  *
  * Uses tile IDs as subscripts. The correspondence of each bit is as shown below:
  *
  * 0x0001: Impassable downward
  * 0x0002: Impassable leftward
  * 0x0004: Impassable rightward
  * 0x0008: Impassable upward
  * 0x0010: Display on normal character
  * 0x0020: Ladder
  * 0x0040: Bush
  * 0x0080: Counter
  * 0x0100: Damage floor
  * 0x0200: Impassable by boat
  * 0x0400: Impassable by ship
  * 0x0800: Airship cannot land
  * 0xF000: Terrain tag
  * This manual does not discuss bit operations, but they are similar to those in C.
  * We recommend an Internet search using keywords such as "hexadecimal bit operations" when necessary.</haxe_doc>
			</flags>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<haxe_doc>* The data class for tile sets.</haxe_doc>
	</typedef>
	<typedef path="rm.types.AnimationTiming" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<se>
				<t path="rm.types.AudioFile"/>
				<haxe_doc>* The sound effect or SE (RPG.AudioFile).</haxe_doc>
			</se>
			<frame>
				<x path="Int"/>
				<haxe_doc>* The frame number. 1 less than the number displayed in RPG Maker.</haxe_doc>
			</frame>
			<flashScope>
				<x path="Int"/>
				<haxe_doc>* The flash area (0: none, 1: target, 2: screen; 3: hide target).</haxe_doc>
			</flashScope>
			<flashDuration>
				<x path="Int"/>
				<haxe_doc>* The duration of the flash.</haxe_doc>
			</flashDuration>
			<flashColor>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The color of the flash (Color).</haxe_doc>
			</flashColor>
		</a>
		<haxe_doc>* The data class for the timing of an animation's SE and flash effects.</haxe_doc>
	</typedef>
	<typedef path="rm.types.CommonEvent" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<trigger>
				<x path="Int"/>
				<haxe_doc>* The event trigger (0: none, 1: autorun; 2: parallel).</haxe_doc>
			</trigger>
			<switchId>
				<x path="Int"/>
				<haxe_doc>* The condition switch ID.</haxe_doc>
			</switchId>
			<name>
				<c path="String"/>
				<haxe_doc>* The event name.</haxe_doc>
			</name>
			<list>
				<c path="Array"><t path="rm.types.EventCommand"/></c>
				<haxe_doc>* A list of event commands. An RPG.EventCommand array.</haxe_doc>
			</list>
			<id>
				<x path="Int"/>
				<haxe_doc>* The event ID.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* The data class for common events.</haxe_doc>
	</typedef>
	<typedef path="rm.types.System" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<windowTone>
		<c path="Array"><x path="Int"/></c>
		<haxe_doc>* The window color.</haxe_doc>
	</windowTone>
	<weaponTypes>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A list of weapon types. A string array using weapon type IDs as subscripts, with the element in the 0 position being nil.</haxe_doc>
	</weaponTypes>
	<versionId>
		<x path="Int"/>
		<haxe_doc>* A random number used for update checks. The number changes every time data is saved in RPG Maker.</haxe_doc>
	</versionId>
	<variables>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A variable name list. A string array using variable IDs as subscripts, with the element in the 0 position being nil.</haxe_doc>
	</variables>
	<titleBgm>
		<t path="rm.types.AudioFile"/>
		<haxe_doc>* The title BGM (RPG.AudioFile).</haxe_doc>
	</titleBgm>
	<title2Name>
		<c path="String"/>
		<haxe_doc>* The file name of the title (frame) graphic.</haxe_doc>
	</title2Name>
	<title1Name>
		<c path="String"/>
		<haxe_doc>* The file name of the title (background) graphic.</haxe_doc>
	</title1Name>
	<testTroopId>
		<x path="Int"/>
		<haxe_doc>* The enemy troop ID for battle tests.</haxe_doc>
	</testTroopId>
	<testBattlers>
		<c path="Array"><t path="rm.types.SystemTestBattler"/></c>
		<haxe_doc>* Party settings for battle tests. An RPG.System.TestBattler array.</haxe_doc>
	</testBattlers>
	<terms>
		<t path="rm.types.SystemTerms"/>
		<haxe_doc>* Terms (RPG.System.Terms).</haxe_doc>
	</terms>
	<switches>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A switch name list. A string array using switch IDs as subscripts, with the element in the 0 position being nil.</haxe_doc>
	</switches>
	<startY>
		<x path="Int"/>
		<haxe_doc>* The map's y-coordinate of the player's initial position.</haxe_doc>
	</startY>
	<startX>
		<x path="Int"/>
		<haxe_doc>* The map's x-coordinate of the player's initial position.</haxe_doc>
	</startX>
	<startMapId>
		<x path="Int"/>
		<haxe_doc>* The map ID of the player's initial position.</haxe_doc>
	</startMapId>
	<sounds>
		<c path="Array"><t path="rm.types.AudioFile"/></c>
		<haxe_doc>* Sound effects. An RPG.SE array.</haxe_doc>
	</sounds>
	<skillTypes>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A list of skill types. A string array using skill type IDs as subscripts, with the element in the 0 position being nil.</haxe_doc>
	</skillTypes>
	<ship>
		<t path="rm.types.SystemVehicle"/>
		<haxe_doc>* Ship settings (RPG.System.Vehicle).</haxe_doc>
	</ship>
	<partyMembers>
		<c path="Array"><x path="Int"/></c>
		<haxe_doc>* The initial party. An array of actor IDs.</haxe_doc>
	</partyMembers>
	<optTransparent>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Start Transparent] option.</haxe_doc>
	</optTransparent>
	<optSlipDeath>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [K.O. by Slip Damage] option.</haxe_doc>
	</optSlipDeath>
	<optSideView>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [use side-view battle] option.</haxe_doc>
	</optSideView>
	<optFollowers>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Show Player Followers] option.</haxe_doc>
	</optFollowers>
	<optFloorDeath>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [K.O. by Floor Damage] option.</haxe_doc>
	</optFloorDeath>
	<optExtraExp>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Reserve Members' EXP] option.</haxe_doc>
	</optExtraExp>
	<optDrawTitle>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Draw Game Title] option.</haxe_doc>
	</optDrawTitle>
	<optDisplayTp>
		<x path="Bool"/>
		<haxe_doc>* The truth value of the [Display TP in Battle] option.</haxe_doc>
	</optDisplayTp>
	<locale>
		<c path="String"/>
		<haxe_doc>* The locale string such as "ja_JP" and "en_US".</haxe_doc>
	</locale>
	<gameoverMe>
		<t path="rm.types.AudioFile"/>
		<haxe_doc>* The gameover ME (RPG.AudioFile).</haxe_doc>
	</gameoverMe>
	<gameTitle>
		<c path="String"/>
		<haxe_doc>* The game title.</haxe_doc>
	</gameTitle>
	<equipTypes>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* he equipment type. A string array with the following subscripts:
  * 1: Weapon
  * 2: Shield
  * 3: Head
  * 4: Body
  * 5: Accessory</haxe_doc>
	</equipTypes>
	<elements>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A list of elements. A string array using element IDs as subscripts, with the element in the 0 position being nil.</haxe_doc>
	</elements>
	<editMapId>
		<x path="Int"/>
		<haxe_doc>* The ID of the map currently being edited. For internal use.</haxe_doc>
	</editMapId>
	<currencyUnit>
		<c path="String"/>
		<haxe_doc>* The unit of currency.</haxe_doc>
	</currencyUnit>
	<boat>
		<t path="rm.types.SystemVehicle"/>
		<haxe_doc>* Boat settings (RPG.System.Vehicle).</haxe_doc>
	</boat>
	<battlerName>
		<c path="String"/>
		<haxe_doc>* The battler graphic file name for use in editing animations.</haxe_doc>
	</battlerName>
	<battlerHue>
		<x path="Int"/>
		<haxe_doc>* The adjustment value for the battler graphic's hue (0..360) for use in editing animations.</haxe_doc>
	</battlerHue>
	<battleback2Name>
		<c path="String"/>
		<haxe_doc>* The file name of the battle background (wall) graphic for use in editing enemy troops and battle tests.</haxe_doc>
	</battleback2Name>
	<battleback1Name>
		<c path="String"/>
		<haxe_doc>* The file name of the battle background (floor) graphic for use in editing enemy troops and battle tests.</haxe_doc>
	</battleback1Name>
	<battleEndMe>
		<t path="rm.types.AudioFile"/>
		<haxe_doc>* The battle end ME (RPG.AudioFile).</haxe_doc>
	</battleEndMe>
	<battleBgm>
		<t path="rm.types.AudioFile"/>
		<haxe_doc>* The battle BGM (RPG.AudioFile).</haxe_doc>
	</battleBgm>
	<attackMotions>
		<c path="Array"><t path="rm.types.SystemAttackMotion"/></c>
		<haxe_doc>* The array of System.AttackMotion data.</haxe_doc>
	</attackMotions>
	<armorTypes>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A list of armor types. A string array using armor type IDs as subscripts, with the element in the 0 position being nil.</haxe_doc>
	</armorTypes>
	<airship>
		<t path="rm.types.SystemVehicle"/>
		<haxe_doc>* Airship settings (RPG.System.Vehicle).</haxe_doc>
	</airship>
</a></typedef>
	<typedef path="rm.types.SystemVehicle" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<startY>
				<x path="Int"/>
				<haxe_doc>* The map's y-coordinate of the vehicle's initial position.</haxe_doc>
			</startY>
			<startX>
				<x path="Int"/>
				<haxe_doc>* The map's x-coordinate of the vehicle's initial position.</haxe_doc>
			</startX>
			<startMapId>
				<x path="Int"/>
				<haxe_doc>* The map ID of the vehicle's initial position.</haxe_doc>
			</startMapId>
			<characterName>
				<c path="String"/>
				<haxe_doc>* The file name of the vehicle's walking graphic.</haxe_doc>
			</characterName>
			<characterIndex>
				<x path="Int"/>
				<haxe_doc>* The index of the vehicle's walking graphic (0..7).</haxe_doc>
			</characterIndex>
			<bgm>
				<t path="rm.types.AudioFile"/>
				<haxe_doc>* The vehicle's BGM (RPG.AudioFile).</haxe_doc>
			</bgm>
		</a>
		<haxe_doc>* The data class for vehicles.</haxe_doc>
	</typedef>
	<typedef path="rm.types.SystemTerms" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<params>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* Parameters. A string array with the following subscripts:
  *
  * 0: Maximum hit points
  * 1: Maximum magic points
  * 2: Attack power
  * 3: Defense power
  * 4: Magic attack power
  * 5: Magic defense power
  * 6: Agility
  * 7: Luck
  * 8: Hit
  * 9: Evasion</haxe_doc>
	</params>
	<messages>
		<c path="js.lib.Object"/>
		<haxe_doc>* The messages.</haxe_doc>
	</messages>
	<commands>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* 0: Fight
  * 1: Escape
  * 2: Attack
  * 3: Defend
  * 4: Item
  * 5: Skill
  * 6: Equip
  * 7: Status
  * 8: Sort
  * 9: Save
  * 10: Exit Game
  * 11: Option
  * 12: Weapon
  * 13: Armor
  * 14: Key Item
  * 15: Change Equipment
  * 16: Ultimate Equipment
  * 17: Remove All
  * 18: New Game
  * 19: Continue
  * 20: (not used)
  * 21: Go to Title
  * 22: Cancel
  * 23: (not used)
  * 24: Buy
  * 25: Sell</haxe_doc>
	</commands>
	<basic>
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* The basic status. A string array with the following subscripts:
  *
  * 0: Level
  * 1: Level (short)
  * 2: HP
  * 3: HP (short)
  * 4: MP
  * 5: MP (short)
  * 6: TP
  * 7: TP (short)
  * 8: EXP
  * 9: EXP (short)</haxe_doc>
	</basic>
</a></typedef>
	<typedef path="rm.types.SystemTestBattler" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<level>
				<x path="Int"/>
				<haxe_doc>* The actor's level.</haxe_doc>
			</level>
			<equips>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The actor's equipment. An array of weapon IDs or armor IDs with the following subscripts:
  *
  * 0: Weapon
  * 1: Shield
  * 2: Head
  * 3: Body
  * 4: Accessory</haxe_doc>
			</equips>
			<actorId>
				<x path="Int"/>
				<haxe_doc>* The actor ID.</haxe_doc>
			</actorId>
		</a>
		<haxe_doc>* The data class for the actors used in battle tests.</haxe_doc>
	</typedef>
	<typedef path="rm.types.SystemAttackMotion" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<weaponImageId>
		<x path="Int"/>
		<haxe_doc>* The ID of the weapon image.</haxe_doc>
	</weaponImageId>
	<type>
		<x path="Int"/>
		<haxe_doc>* The type of the motion.</haxe_doc>
	</type>
</a></typedef>
	<typedef path="rm.types.Enemy" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<params>
		<c path="Array"><x path="Int"/></c>
		<haxe_doc>* Parameters. An array of integers using the following IDs as subscripts:
  *
  * 0: Maximum hit points
  * 1: Maximum magic points
  * 2: Attack power
  * 3: Defense power
  * 4: Magic attack power
  * 5: Magic defense power
  * 6: Agility
  * 7: Luck</haxe_doc>
	</params>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<name>
		<c path="String"/>
		<haxe_doc>* The name of the enemy in the database.
  *
  * @type {string}
  * @memberof Enemy</haxe_doc>
	</name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<id>
		<x path="Int"/>
		<haxe_doc>* The ID of the enemy in the database.
  *
  * @type {number}
  * @memberof Enemy</haxe_doc>
	</id>
	<gold>
		<x path="Int"/>
		<haxe_doc>* The enemy's gold.</haxe_doc>
	</gold>
	<exp>
		<x path="Int"/>
		<haxe_doc>* The enemy's experience.</haxe_doc>
	</exp>
	<dropItems>
		<c path="Array"><t path="rm.types.EnemyDropItem"/></c>
		<haxe_doc>* The items the enemy drops. An RPG.Enemy.DropItem array.</haxe_doc>
	</dropItems>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<battlerName>
		<c path="String"/>
		<haxe_doc>* The file name of the enemy's battler graphic.</haxe_doc>
	</battlerName>
	<battlerHue>
		<x path="Int"/>
		<haxe_doc>* The adjustment value for the battler graphic's hue (0..360).</haxe_doc>
	</battlerHue>
	<actions>
		<c path="Array"><t path="rm.types.EnemyAction"/></c>
		<haxe_doc>* The enemy's action pattern. An array of RPG.Enemy.Action.</haxe_doc>
	</actions>
</a></typedef>
	<typedef path="rm.types.EnemyDropItem" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG"><a>
	<kind>
		<x path="Int"/>
		<haxe_doc>* The type of dropped item.
  *
  * 0: None
  * 1: Item
  * 2: Weapon
  * 3: Armor</haxe_doc>
	</kind>
	<denominator>
		<x path="Int"/>
		<haxe_doc>* N of the probability that the item will be dropped, 1/N.</haxe_doc>
	</denominator>
	<dataId>
		<x path="Int"/>
		<haxe_doc>* The ID of the data depending on the type of dropped item (item, weapon, or armor).</haxe_doc>
	</dataId>
</a></typedef>
	<typedef path="rm.types.EnemyAction" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<skillId>
				<x path="Int"/>
				<haxe_doc>* The ID of skills to be employed as actions.</haxe_doc>
			</skillId>
			<rating>
				<x path="Int"/>
				<haxe_doc>* The action's priority rating (1..10).</haxe_doc>
			</rating>
			<conditionType>
				<x path="Int"/>
				<haxe_doc>* The type of condition.
  *
  * 0: Always
  * 1: Turn No.
  * 2: HP
  * 3: MP
  * 4: State
  * 5: Party Level
  * 6: Switch</haxe_doc>
			</conditionType>
			<conditionParam2>
				<x path="Int"/>
				<haxe_doc>* The second parameter of the condition.</haxe_doc>
			</conditionParam2>
			<conditionParam1>
				<x path="Int"/>
				<haxe_doc>* The first parameter of the condition.</haxe_doc>
			</conditionParam1>
		</a>
		<haxe_doc>* The data class for enemy [Actions].</haxe_doc>
	</typedef>
	<typedef path="rm.types.State" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<traits>
				<c path="Array"><t path="rm.types.Trait"/></c>
				<haxe_doc>* The array of Trait data.</haxe_doc>
			</traits>
			<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
			<stepToRemove>
				<x path="Int"/>
				<haxe_doc>* Number of steps until state is removed.</haxe_doc>
			</stepToRemove>
			<restriction>
				<x path="Int"/>
				<haxe_doc>* Action restrictions.
  *
  * 0: None
  * 1: Attack enemy
  * 2: Attack enemy or ally
  * 3: Attack ally
  * 4: Cannot act</haxe_doc>
			</restriction>
			<removeByWalking>
				<x path="Bool"/>
				<haxe_doc>* Removes state by walking (true/false).</haxe_doc>
			</removeByWalking>
			<removeByRestriction>
				<x path="Bool"/>
				<haxe_doc>* Removes state by action restriction (true/false).</haxe_doc>
			</removeByRestriction>
			<removeByDamage>
				<x path="Bool"/>
				<haxe_doc>* Removes state by damage (true/false).</haxe_doc>
			</removeByDamage>
			<removeAtBattleEnd>
				<x path="Bool"/>
				<haxe_doc>* Removes state at end of battle (true/false).</haxe_doc>
			</removeAtBattleEnd>
			<releaseByDamage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</releaseByDamage>
			<priority>
				<x path="Int"/>
				<haxe_doc>* The state priority (0..100).</haxe_doc>
			</priority>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<overlay>
				<x path="Int"/>
				<haxe_doc>* The side-view overlay.</haxe_doc>
			</overlay>
			<name>
				<c path="String"/>
				<haxe_doc>* The name.</haxe_doc>
			</name>
			<motion>
				<x path="Int"/>
				<haxe_doc>* The side-view motion.</haxe_doc>
			</motion>
			<minTurns>
				<x path="Int"/>
				<haxe_doc>* The minimum turns of the duration.</haxe_doc>
			</minTurns>
			<message4>
				<x path="Int"/>
				<haxe_doc>* The message when the state is removed.</haxe_doc>
			</message4>
			<message3>
				<c path="String"/>
				<haxe_doc>* The message when the state remains.</haxe_doc>
			</message3>
			<message2>
				<c path="String"/>
				<haxe_doc>* The message when an enemy fell in the state.</haxe_doc>
			</message2>
			<message1>
				<c path="String"/>
				<haxe_doc>* The message when an actor fell in the state.</haxe_doc>
			</message1>
			<maxTurns>
				<x path="Int"/>
				<haxe_doc>* The maximum turns of the duration.</haxe_doc>
			</maxTurns>
			<links>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</links>
			<internal><x path="Bool"/></internal>
			<id>
				<x path="Int"/>
				<haxe_doc>* The ID.</haxe_doc>
			</id>
			<iconIndex>
				<x path="Int"/>
				<haxe_doc>* The icon number.</haxe_doc>
			</iconIndex>
			<doc><t path="haxe.display.JsonDoc"/></doc>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</description>
			<chanceByDamage>
				<x path="Float"/>
				<haxe_doc>* Chance of state being removed by damage (%).</haxe_doc>
			</chanceByDamage>
			<autoRemovalTiming>
				<x path="Int"/>
				<haxe_doc>* The timing of automatic state removal.
  *
  * 0: None
  * 1: At end of action
  * 2: At end of turn</haxe_doc>
			</autoRemovalTiming>
		</a>
		<haxe_doc>* The data class for state.</haxe_doc>
	</typedef>
	<typedef path="rm.types.Actor" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<traits>
				<c path="Array"><t path="rm.types.Trait"/></c>
				<haxe_doc>* The array of Trait data.</haxe_doc>
			</traits>
			<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
			<profile>
				<c path="String"/>
				<haxe_doc>* The profile.</haxe_doc>
			</profile>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<nickname>
				<c path="String"/>
				<haxe_doc>* The actor's nickname.</haxe_doc>
			</nickname>
			<name>
				<c path="String"/>
				<haxe_doc>* The name.</haxe_doc>
			</name>
			<maxLevel>
				<x path="Int"/>
				<haxe_doc>* The actor's max level</haxe_doc>
			</maxLevel>
			<links>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</links>
			<internal><x path="Bool"/></internal>
			<initialLevel>
				<x path="Int"/>
				<haxe_doc>* The actor's initial level.</haxe_doc>
			</initialLevel>
			<id>
				<c path="String"/>
				<haxe_doc>* The ID.</haxe_doc>
			</id>
			<faceName>
				<c path="String"/>
				<haxe_doc>* The file name of the actor's face graphic.</haxe_doc>
			</faceName>
			<faceIndex>
				<x path="Int"/>
				<haxe_doc>* The index (0..7) of the actor's face graphic.</haxe_doc>
			</faceIndex>
			<equips>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* The actor's initial equipment. An array of weapon IDs or armor IDs with the following subscripts:</haxe_doc>
			</equips>
			<doc><t path="haxe.display.JsonDoc"/></doc>
			<classId>
				<x path="Int"/>
				<haxe_doc>* The actor's class ID.</haxe_doc>
			</classId>
			<characterName>
				<c path="String"/>
				<haxe_doc>* The file name of the actor's walking graphic.</haxe_doc>
			</characterName>
			<characterIndex>
				<x path="Int"/>
				<haxe_doc>* The index (0..7) of the actor's walking graphic.</haxe_doc>
			</characterIndex>
			<battlerName>
				<c path="String"/>
				<haxe_doc>* The file name of the actor's battler graphic.</haxe_doc>
			</battlerName>
		</a>
		<haxe_doc>* The data class for actors.</haxe_doc>
	</typedef>
	<typedef path="rm.types.RPGClass" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<traits>
				<c path="Array"><t path="rm.types.Trait"/></c>
				<haxe_doc>* The array of Trait data.</haxe_doc>
			</traits>
			<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<params>
				<c path="Array"><c path="Array"><x path="Int"/></c></c>
				<haxe_doc>* The parameter development curve. A 2-dimensional array containing ordinary parameters according to level (Table).
  *
  * The format is params[param_id, level], and param_id is assigned as follows:
  *
  * 0: Maximum hit points
  * 1: Maximum magic points
  * 2: Attack power
  * 3: Defense power
  * 4: Magic attack power
  * 5: Magic defense power
  * 6: Agility
  * 7: Luck</haxe_doc>
			</params>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<name>
				<c path="String"/>
				<haxe_doc>* The name.</haxe_doc>
			</name>
			<links>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</links>
			<learnings>
				<c path="Array"><t path="rm.types.ClassLearning"/></c>
				<haxe_doc>* The skills to learn. An array of RPG.Class.Learning.</haxe_doc>
			</learnings>
			<internal><x path="Bool"/></internal>
			<id>
				<x path="Int"/>
				<haxe_doc>* The ID.</haxe_doc>
			</id>
			<expParams>
				<c path="Array"><x path="Int"/></c>
				<haxe_doc>* An array of values that decides the experience curve. The subscripts are as follows:
  *
  * 0: Base value
  * 1: Extra value
  * 2: Acceleration A
  * 3: Acceleration B</haxe_doc>
			</expParams>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<haxe_doc>* The data class for class.</haxe_doc>
	</typedef>
	<typedef path="rm.types.ClassLearning" params="" file="src/rm/types/RPG.hx" module="rm.types.RPG">
		<a>
			<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
			<skillId>
				<x path="Int"/>
				<haxe_doc>* The ID of the skill to learn.</haxe_doc>
			</skillId>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<name><c path="String"/></name>
			<links>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</links>
			<level>
				<x path="Int"/>
				<haxe_doc>* The data class for a class's [Skills to Learn].</haxe_doc>
			</level>
			<internal><x path="Bool"/></internal>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<haxe_doc>* The data class for a class's [Skills to Learn].</haxe_doc>
	</typedef>
	<class path="rm.windows.Window_ActorCommand" params="" file="src/rm/windows/Window_ActorCommand.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<_actor><c path="rm.objects.Game_Actor"/></_actor>
		<addAttackCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the attack command to the actor command window.
   * 
   * @memberof Window_ActorCommand</haxe_doc>
		</addAttackCommand>
		<addSkillCommands public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the skill command to the actor command window.
   * 
   * @memberof Window_ActorCommand</haxe_doc>
		</addSkillCommands>
		<addGuardCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the guard command to the actor command window.
   * 
   * @memberof Window_ActorCommand</haxe_doc>
		</addGuardCommand>
		<addItemCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the item command to the actor command window.
   * 
   * @memberof Window_ActorCommand</haxe_doc>
		</addItemCommand>
		<setup public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets up the actor command window with a specified actor.
   * 
   * @param {Game_Actor} actor 
   * @memberof Window_ActorCommand</haxe_doc>
		</setup>
		<selectLast public="1" set="method"><f a=""><x path="Void"/></f></selectLast>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ActorCommand
 *
 * The window for selecting an actor's action on the battle screen.
 * @class Window_ActorCommand</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_ActorCommand"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_StatusBase" params="" file="src/rm/windows/Window_StatusBase.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<loadFaceImages public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads all face images in MZ for party members.</haxe_doc>
		</loadFaceImages>
		<refesh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the window.</haxe_doc>
		</refesh>
		<hideAdditionalSprites public="1" set="method"><f a=""><x path="Void"/></f></hideAdditionalSprites>
		<placeActorName public="1" set="method">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Places the game actor within the window.
  * @param actor
  * @param x
  * @param y</haxe_doc>
		</placeActorName>
		<placeStateIcon public="1" set="method">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Places the actor name within the status window.
  * @param actor
  * @param x
  * @param y</haxe_doc>
		</placeStateIcon>
		<placeGauage public="1" set="method"><f a="actor:gaugeType:x:y">
	<c path="rm.objects.Game_Actor"/>
	<x path="rm.types.GaugeType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></placeGauage>
		<createInnerSprite public="1" params="T" set="method">
			<f a="key:spriteClass">
				<c path="String"/>
				<x path="Class"><c path="createInnerSprite.T"/></x>
				<c path="createInnerSprite.T"/>
			</f>
			<haxe_doc>* Creates an inner sprite using a sprite class of your choosing..
  * @param key
  * @param spriteClass</haxe_doc>
		</createInnerSprite>
		<placeTimeGauge public="1" set="method">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Places the time gauages within the status window.
  * @param actor
  * @param x
  * @param y</haxe_doc>
		</placeTimeGauge>
		<placeBasicGauges public="1" set="method">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Places the basic gauges on the window.
  * @param actor
  * @param x
  * @param y</haxe_doc>
		</placeBasicGauges>
		<guageLineHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Line height of the guage.
  * By default set to 24.
  * @return Int</haxe_doc>
		</guageLineHeight>
		<drawActorCharacter public="1" set="method" override="1"><f a="actor:x:y">
	<c path="rm.objects.Game_Actor"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawActorCharacter>
		<drawActorFace public="1" set="method" override="1"><f a="actor:x:y:width:height">
	<c path="rm.objects.Game_Actor"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawActorFace>
		<drawActorName public="1" set="method" override="1">
			<f a="actor:x:y:?width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor name if the width isn't passed in
  * defaults to 168.
  * @param actor
  * @param x
  * @param y
  * @param width</haxe_doc>
		</drawActorName>
		<drawActorClass public="1" set="method" override="1">
			<f a="actor:x:y:?width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor class name.
  * If width isn't passed in, defaults to 168px.
  * @param actor
  * @param x
  * @param y
  * @param width</haxe_doc>
		</drawActorClass>
		<drawActorNickname public="1" set="method" override="1">
			<f a="actor:x:y:width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor nickname.
  * If width isn't passed, defaults to 270px.
  * @param actor
  * @param x
  * @param y
  * @param width</haxe_doc>
		</drawActorNickname>
		<drawActorLevel public="1" set="method" override="1">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor level.
  * @param actor
  * @param x
  * @param y</haxe_doc>
		</drawActorLevel>
		<drawActorIcons public="1" set="method" override="1">
			<f a="actor:x:y:?width">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor icons.
  * If width isn't passed in defaults to 144px.
  * @param actor
  * @param x
  * @param y
  * @param width</haxe_doc>
		</drawActorIcons>
		<drawActorSimpleStatus public="1" set="method" override="1">
			<f a="actor:x:y">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the actor simple status.
  * Using all of the drawing methods above.
  * @param actor
  * @param x
  * @param y</haxe_doc>
		</drawActorSimpleStatus>
		<actorSlotName public="1" set="method">
			<f a="actor:index">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the name of the actor equip slot.
  * @param actor
  * @param index</haxe_doc>
		</actorSlotName>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_StatusBase"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_BattleStatus" params="" file="src/rm/windows/Window_BattleStatus.hx" extern="1">
		<extends path="rm.windows.Window_StatusBase"/>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_BattleStatus"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_BattleActor" params="" file="src/rm/windows/Window_BattleActor.hx" extern="1">
		<extends path="rm.windows.Window_BattleStatus"/>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<select public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Selects an actor within the battle actor window.
  *
  * @param {number} index
  * @memberof Window_BattleActor</haxe_doc>
		</select>
		<actor public="1" set="method">
			<f a=""><c path="rm.objects.Game_Actor"/></f>
			<haxe_doc>* Returns the current selected actor.
  *
  * @returns {Game_Actor}
  * @memberof Window_BattleActor</haxe_doc>
		</actor>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_BattleActor
 *
 * The window for selecting a target actor on the battle screen.
 * @class Window_BattleActor</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_BattleActor"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_BattleEnemy" params="" file="src/rm/windows/Window_BattleEnemy.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_enemies><c path="Array"><c path="rm.objects.Game_Enemy"/></c></_enemies>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window width.
  *
  * @returns {number}
  * @memberof Window_BattleEnemy</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window height.
  *
  * @returns {number}
  * @memberof Window_BattleEnemy</haxe_doc>
		</windowHeight>
		<numVisibleRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of visible rows.
  *
  * @returns {number}
  * @memberof Window_BattleEnemy</haxe_doc>
		</numVisibleRows>
		<enemy public="1" set="method">
			<f a=""><c path="rm.objects.Game_Enemy"/></f>
			<haxe_doc>* Returns the current enemy.
  *
  * @returns {Game_Enemy}
  * @memberof Window_BattleEnemy</haxe_doc>
		</enemy>
		<enemyIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the current index selected.
  *
  * @returns {number}
  * @memberof Window_BattleEnemy</haxe_doc>
		</enemyIndex>
		<select public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Selects a specified enemy using the index.
  *
  * @param {number} index
  * @memberof Window_BattleEnemy</haxe_doc>
		</select>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_BattleEnemy
 *
 * The window for selecting a target enemy on the battle screen.
 * @class Window_BattleEnemy</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="rm.windows.Window_ItemList" params="" file="src/rm/windows/Window_ItemList.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_category><c path="String"/></_category>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<item public="1" set="method">
			<f a=""><t path="rm.types.Item"/></f>
			<haxe_doc>* Returns the item at the current index of the window.
  * @return Item</haxe_doc>
		</item>
		<itemAt public="1" set="method">
			<f a=""><x path="Null"><t path="rm.types.Item"/></x></f>
			<haxe_doc><![CDATA[* Returns item at the specific index.
  * @return Null<Item>]]></haxe_doc>
		</itemAt>
		<needsNumber public="1" set="method"><f a=""><x path="Bool"/></f></needsNumber>
		<selectLast public="1" set="method"><f a=""><x path="Void"/></f></selectLast>
		<makeItemList public="1" set="method"><f a=""><x path="Void"/></f></makeItemList>
		<numberWidth public="1" set="method"><f a=""><x path="Int"/></f></numberWidth>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Window_ItemList"</e></m></meta>
	</class>
	<class path="rm.windows.Window_BattleItem" params="" file="src/rm/windows/Window_BattleItem.hx" extern="1">
		<extends path="rm.windows.Window_ItemList"/>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<includes public="1" set="method"><f a="item">
	<t path="rm.types.UsableItem"/>
	<x path="Bool"/>
</f></includes>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_BattleItem
 *
 * The window for selecting an item to use on the battle screen.
 * @class Window_BattleItem</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_BattleItem"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_BattleLog" params="" file="src/rm/windows/Window_BattleLog.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_lines><c path="Array"><c path="String"/></c></_lines>
		<_methods><c path="Array"><t path="rm.types.BattleLogMethod"/></c></_methods>
		<_waitCount><x path="Int"/></_waitCount>
		<_waitMode><c path="String"/></_waitMode>
		<_baseLineStack><c path="Array"><x path="Int"/></c></_baseLineStack>
		<_spriteset><c path="rm.sprites.Spriteset_Battle"/></_spriteset>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<setSpriteset public="1" set="method"><f a="spriteset">
	<c path="rm.sprites.Spriteset_Battle"/>
	<x path="Void"/>
</f></setSpriteset>
		<windowWidth public="1" set="method"><f a=""><x path="Int"/></f></windowWidth>
		<windowHeight public="1" set="method"><f a=""><x path="Int"/></f></windowHeight>
		<maxLines public="1" set="method"><f a=""><x path="Int"/></f></maxLines>
		<createBackBitmap public="1" set="method"><f a=""><x path="Void"/></f></createBackBitmap>
		<createBackSprite public="1" set="method"><f a=""><x path="Void"/></f></createBackSprite>
		<numLines public="1" set="method"><f a=""><x path="Int"/></f></numLines>
		<messageSpeed public="1" set="method"><f a=""><x path="Int"/></f></messageSpeed>
		<isBusy public="1" set="method"><f a=""><x path="Bool"/></f></isBusy>
		<updateWait public="1" set="method"><f a=""><x path="Bool"/></f></updateWait>
		<updateWaitCount public="1" set="method"><f a=""><x path="Bool"/></f></updateWaitCount>
		<updateWaitMode public="1" set="method"><f a=""><x path="Bool"/></f></updateWaitMode>
		<setWaitMode public="1" set="method"><f a="waitMode">
	<c path="String"/>
	<x path="Void"/>
</f></setWaitMode>
		<callNextMethod public="1" set="method"><f a=""><x path="Void"/></f></callNextMethod>
		<isFastForward public="1" set="method"><f a=""><x path="Bool"/></f></isFastForward>
		<push public="1" set="method"><f a="methodName:args">
	<c path="String"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></push>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<wait public="1" set="method"><f a=""><x path="Void"/></f></wait>
		<waitForEffect public="1" set="method"><f a=""><x path="Void"/></f></waitForEffect>
		<waitForMovement public="1" set="method"><f a=""><x path="Void"/></f></waitForMovement>
		<addText public="1" set="method"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></addText>
		<pushBaseLine public="1" set="method"><f a=""><x path="Void"/></f></pushBaseLine>
		<popBaseLine public="1" set="method"><f a=""><x path="Void"/></f></popBaseLine>
		<waitForNewLine public="1" set="method"><f a=""><x path="Void"/></f></waitForNewLine>
		<popupDamage public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></popupDamage>
		<performActionStart public="1" set="method"><f a="subject:action">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Action"/>
	<x path="Void"/>
</f></performActionStart>
		<performAction public="1" set="method"><f a="subject:action">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Action"/>
	<x path="Void"/>
</f></performAction>
		<performActionEnd public="1" set="method"><f a="subject">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performActionEnd>
		<performDamage public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performDamage>
		<performMiss public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performMiss>
		<performRecovery public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performRecovery>
		<performEvasion public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performEvasion>
		<performMagicEvasion public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performMagicEvasion>
		<performCounter public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performCounter>
		<performReflection public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performReflection>
		<performSubstitute public="1" set="method"><f a="substitute:target">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performSubstitute>
		<performCollapse public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></performCollapse>
		<showAnimation public="1" set="method"><f a="subject:targets:animationId">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Int"/>
	<x path="Void"/>
</f></showAnimation>
		<showAttackAnimation public="1" set="method"><f a="subject:targets">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></showAttackAnimation>
		<showActorAttackAnimation public="1" set="method"><f a="subject:targets">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></showActorAttackAnimation>
		<showEnemyAttackAnimation public="1" set="method"><f a="subject:targets">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></showEnemyAttackAnimation>
		<showNormalAnimation public="1" set="method"><f a="targets:animationId:mirror">
	<c path="rm.objects.Game_Battler"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></showNormalAnimation>
		<animationBaseDelay public="1" set="method"><f a=""><x path="Int"/></f></animationBaseDelay>
		<animationNextDelay public="1" set="method"><f a=""><x path="Int"/></f></animationNextDelay>
		<drawBackground public="1" set="method"><f a=""><x path="Void"/></f></drawBackground>
		<backRect public="1" set="method"><f a=""><c path="rm.core.Rectangle"/></f></backRect>
		<backColor public="1" set="method"><f a=""><c path="String"/></f></backColor>
		<backPaintOpacity public="1" set="method"><f a=""><x path="Int"/></f></backPaintOpacity>
		<drawLineText public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></drawLineText>
		<startTurn public="1" set="method"><f a=""><x path="Void"/></f></startTurn>
		<startAction public="1" set="method"><f a="subject:action:targets">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Action"/>
	<c path="Array"><c path="rm.objects.Game_Battler"/></c>
	<x path="Void"/>
</f></startAction>
		<endAction public="1" set="method"><f a="subject">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></endAction>
		<displayCurrentState public="1" set="method"><f a="subject">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayCurrentState>
		<displayRegeneration public="1" set="method"><f a="subject">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayRegeneration>
		<displayAction public="1" set="method"><f a="subject:item">
	<c path="rm.objects.Game_Battler"/>
	<t path="rm.types.UsableItem"/>
	<x path="Void"/>
</f></displayAction>
		<displayCounter public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayCounter>
		<displayReflection public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayReflection>
		<displaySubstitute public="1" set="method"><f a="substitute:target">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displaySubstitute>
		<displayActionResults public="1" set="method"><f a="subject:targt">
	<c path="rm.objects.Game_Battler"/>
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayActionResults>
		<displayFailure public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayFailure>
		<displayCritical public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayCritical>
		<displayDamage public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayDamage>
		<displayMiss public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayMiss>
		<displayEvasion public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayEvasion>
		<displayHpDamage public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayHpDamage>
		<displayMpDamage public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayMpDamage>
		<displayTpDamage public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayTpDamage>
		<displayAffectedStatus public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayAffectedStatus>
		<displayAutoAffectedStatus public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayAutoAffectedStatus>
		<displayChangedStates public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayChangedStates>
		<displayAddedStates public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayAddedStates>
		<displayRemovedStates public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayRemovedStates>
		<displayChangedBuffs public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></displayChangedBuffs>
		<displayBuffs public="1" set="method"><f a="target:buffs:fmt">
	<c path="rm.objects.Game_Battler"/>
	<c path="Array"><x path="rm.types.BuffId"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></displayBuffs>
		<makeHpDamageText public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<x path="Void"/>
</f></makeHpDamageText>
		<makeMpDamageText public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<c path="String"/>
</f></makeMpDamageText>
		<makeTpDamageText public="1" set="method"><f a="target">
	<c path="rm.objects.Game_Battler"/>
	<c path="String"/>
</f></makeTpDamageText>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_BattleLog
 *
 * The window for displaying battle progress. No frame is displayed, but it is
 * handled as a window for convenience.
 * @class Window_BattleLog</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_BattleLog"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_SkillList" params="" file="src/rm/windows/Window_SkillList.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<__actor public="1">
			<c path="rm.objects.Game_Actor"/>
			<meta><m n="native"><e>"_actor"</e></m></meta>
		</__actor>
		<_actor><c path="rm.objects.Game_Actor"/></_actor>
		<__stypeId public="1">
			<x path="rm.types.SkillTypeId"/>
			<meta><m n=":native"><e>"_stypeId"</e></m></meta>
		</__stypeId>
		<_stypeId><x path="rm.types.SkillTypeId"/></_stypeId>
		<__data public="1">
			<c path="Array"><t path="rm.types.Skill"/></c>
			<meta><m n=":native"><e>"_data"</e></m></meta>
		</__data>
		<_data><c path="Array"><t path="rm.types.Skill"/></c></_data>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<itemAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><t path="rm.types.Skill"/></x>
			</f>
			<haxe_doc><![CDATA[* Returns skill at the specified index.
  * @param index
  * @return Null<Skill>]]></haxe_doc>
		</itemAt>
		<setActor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current actor of the skill list window.
  *
  * @param {Game_Actor} actor
  * @memberof Window_SkillList</haxe_doc>
		</setActor>
		<setStypeId public="1" set="method">
			<f a="stypeId">
				<x path="rm.types.SkillTypeId"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the skill type id of the skill list window.
  *
  * @param {number} stypeId
  * @memberof Window_SkillList</haxe_doc>
		</setStypeId>
		<item public="1" set="method">
			<f a=""><t path="rm.types.Skill"/></f>
			<haxe_doc>* Returns the current skill at the window index
  * loaded from the databse.
  *
  * @returns {RPG.Skill}
  * @memberof Window_SkillList</haxe_doc>
		</item>
		<includes public="1" set="method">
			<f a="item">
				<t path="rm.types.Skill"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the given skill is included.
  *
  * @param {RPG.Skill} item
  * @returns {boolean}
  * @memberof Window_SkillList</haxe_doc>
		</includes>
		<isEnabled public="1" set="method">
			<f a="item">
				<t path="rm.types.Skill"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the given skill is enabled.
  *
  * @param {RPG.Skill} item
  * @returns {boolean}
  * @memberof Window_SkillList</haxe_doc>
		</isEnabled>
		<makeItemList public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the item list.
  *
  * @memberof Window_SkillList</haxe_doc>
		</makeItemList>
		<selectLast public="1" set="method"><f a=""><x path="Void"/></f></selectLast>
		<costWidth public="1" set="method"><f a=""><x path="Int"/></f></costWidth>
		<drawSkillCost public="1" set="method"><f a="skill:x:y:width">
	<t path="rm.types.Skill"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawSkillCost>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_SkillList
 *
 * The window for selecting a skill on the skill screen.
 * @class Window_SkillList</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_SkillList"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_BattleSkill" params="" file="src/rm/windows/Window_BattleSkill.hx" extern="1">
		<extends path="rm.windows.Window_SkillList"/>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_BattleSkill
 *
 * The window for selecting a skill to use on the battle screen.
 * @class Window_BattleSkill</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_BattleSkill"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_ChoiceList" params="" file="src/rm/windows/Window_ChoiceList.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<_messageWindow><c path="rm.windows.Window_Message"/></_messageWindow>
		<_background><x path="Int"/></_background>
		<initialize public="1" set="method" override="1"><f a=""><x path="Void"/></f></initialize>
		<setMessageWindow public="1" set="method"><f a="messageWindow">
	<c path="rm.windows.Window_Message"/>
	<x path="Void"/>
</f></setMessageWindow>
		<windowY public="1" set="method"><f a=""><x path="Int"/></f></windowY>
		<windowX public="1" set="method"><f a=""><x path="Int"/></f></windowX>
		<needsCancelButton public="1" set="method"><f a=""><x path="Bool"/></f></needsCancelButton>
		<maxLines public="1" set="method"><f a=""><x path="Int"/></f></maxLines>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<selectDefault public="1" set="method"><f a=""><x path="Void"/></f></selectDefault>
		<updatePlacement public="1" set="method"><f a=""><x path="Void"/></f></updatePlacement>
		<updateBackground public="1" set="method"><f a=""><x path="Void"/></f></updateBackground>
		<maxChoiceWidth public="1" set="method"><f a=""><x path="Int"/></f></maxChoiceWidth>
		<textWidthEx public="1" set="method"><f a="text">
	<c path="String"/>
	<x path="Int"/>
</f></textWidthEx>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ChoiceList
 *
 * The window used for the event command [Show Choices].
 * @class Window_ChoiceList</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_ChoiceList"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_DebugEdit" params="" file="src/rm/windows/Window_DebugEdit.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_mode><c path="String"/></_mode>
		<_topId><x path="Int"/></_topId>
		<itemName public="1" set="method"><f a="dataId">
	<x path="Int"/>
	<c path="String"/>
</f></itemName>
		<itemStatus public="1" set="method"><f a="dataId">
	<c path="String"/>
	<c path="String"/>
</f></itemStatus>
		<setMode public="1" set="method"><f a="mode">
	<c path="String"/>
	<x path="Void"/>
</f></setMode>
		<setTopId public="1" set="method"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></setTopId>
		<currentId public="1" set="method"><f a=""><x path="Int"/></f></currentId>
		<updateSwitch public="1" set="method"><f a=""><x path="Void"/></f></updateSwitch>
		<updateVariable public="1" set="method"><f a=""><x path="Void"/></f></updateVariable>
		<new public="1" set="method"><f a="x:y:width">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_DebugEdit
 *
 * The window for displaying switches and variables on the debug screen.
 * @class Window_DebugEdit</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_DebugEdit"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_DebugRange" params="" file="src/rm/windows/Window_DebugRange.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<lastTopRow static="1"><x path="Int"/></lastTopRow>
		<lastIndex static="1"><x path="Int"/></lastIndex>
		<_editWindow><c path="rm.windows.Window_DebugEdit"/></_editWindow>
		<windowWidth public="1" set="method"><f a=""><x path="Int"/></f></windowWidth>
		<windowHeight public="1" set="method"><f a=""><x path="Int"/></f></windowHeight>
		<mode public="1" set="method"><f a=""><c path="String"/></f></mode>
		<topId public="1" set="method"><f a=""><x path="Int"/></f></topId>
		<setEditWindow public="1" set="method"><f a="editWindow">
	<c path="rm.windows.Window_DebugEdit"/>
	<x path="Void"/>
</f></setEditWindow>
		<new public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_DebugRange
 *
 * The window for selecting a block of switches/variables on the debug screen.
 * @class Window_DebugRange</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_DebugRange"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_HorzCommand" params="" file="src/rm/windows/Window_HorzCommand.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<new public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_HorzCommand"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_EquipCommand" params="" file="src/rm/windows/Window_EquipCommand.hx" extern="1">
		<extends path="rm.windows.Window_HorzCommand"/>
		<meta><m n=":native"><e>"Window_EquipCommand"</e></m></meta>
	</class>
	<class path="rm.windows.Window_EquipItem" params="" file="src/rm/windows/Window_EquipItem.hx" extern="1">
		<_actor><c path="rm.objects.Game_Actor"/></_actor>
		<_slotId><x path="Int"/></_slotId>
		<_statusWindow><c path="rm.windows.Window_EquipStatus"/></_statusWindow>
		<setActor public="1" set="method"><f a="actor">
	<c path="rm.objects.Game_Actor"/>
	<x path="Void"/>
</f></setActor>
		<setSlotId public="1" set="method"><f a="slotId">
	<x path="Int"/>
	<x path="Void"/>
</f></setSlotId>
		<includes public="1" set="method"><f a="item">
	<t path="rm.types.EquipItem"/>
	<x path="Bool"/>
</f></includes>
		<isEnabled public="1" set="method"><f a="item">
	<t path="rm.types.EquipItem"/>
	<x path="Bool"/>
</f></isEnabled>
		<setStatusWindow public="1" set="method"><f a="statusWindow">
	<c path="rm.windows.Window_EquipStatus"/>
	<x path="Void"/>
</f></setStatusWindow>
		<new public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_EquipItem
 *
 * The window for selecting an equipment item on the equipment screen.
 * @class Window_EquipItem</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_EquipItem"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_EquipSlot" params="" file="src/rm/windows/Window_EquipSlot.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_actor><c path="rm.objects.Game_Actor"/></_actor>
		<_itemWindow><c path="rm.windows.Window_EquipItem"/></_itemWindow>
		<_statusWindow><c path="rm.windows.Window_EquipStatus"/></_statusWindow>
		<initialize public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initialize>
		<setActor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current game actor.
  *
  * @param {Game_Actor} actor
  * @memberof Window_EquipSlot</haxe_doc>
		</setActor>
		<item public="1" set="method">
			<f a=""><t path="rm.types.EquipItem"/></f>
			<haxe_doc>* Returns the current equip item.
  *
  * @returns {RPG.EquipItem}
  * @memberof Window_EquipSlot</haxe_doc>
		</item>
		<slotName public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns the name of the slot at the specified index.
  *
  * @param {number} index
  * @returns {string}
  * @memberof Window_EquipSlot</haxe_doc>
		</slotName>
		<isEnabled public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if the current slot is enabled.
  *
  * @param {number} index
  * @returns {boolean}
  * @memberof Window_EquipSlot</haxe_doc>
		</isEnabled>
		<setStatusWindow public="1" set="method">
			<f a="statusWindow">
				<c path="rm.windows.Window_EquipStatus"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the status window within the equip slot window.
  *
  * @param {Window_EquipStatus} statusWindow
  * @memberof Window_EquipSlot</haxe_doc>
		</setStatusWindow>
		<setItemWindow public="1" set="method">
			<f a="itemWindow">
				<c path="rm.windows.Window_EquipItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the item window within the equip slot window.
  *
  * @param {Window_EquipItem} itemWindow
  * @memberof Window_EquipSlot</haxe_doc>
		</setItemWindow>
		<new public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_EquipSlot
 *
 * The window for selecting an equipment slot on the equipment screen.
 * @class Window_EquipSlot</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_EquipSlot"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_EquipStatus" params="" file="src/rm/windows/Window_EquipStatus.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<meta><m n=":native"><e>"Window_EquipStatus"</e></m></meta>
	</class>
	<class path="rm.windows.Window_EventItem" params="" file="src/rm/windows/Window_EventItem.hx" extern="1">
		<extends path="rm.windows.Window_ItemList"/>
		<_messageWindow><c path="rm.windows.Window_Message"/></_messageWindow>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the height off the window.
  *
  * @returns {number}
  * @memberof Window_EventItem</haxe_doc>
		</windowHeight>
		<numVisibleRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of visible rows.
  *
  * @returns {number}
  * @memberof Window_EventItem</haxe_doc>
		</numVisibleRows>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the event item window.
  *
  * @memberof Window_EventItem</haxe_doc>
		</start>
		<updatePlacement public="1" set="method"><f a=""><x path="Void"/></f></updatePlacement>
		<includes public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<x path="Bool"/>
</f></includes>
		<isEnabled public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<x path="Bool"/>
</f></isEnabled>
		<onOk public="1" set="method"><f a=""><x path="Void"/></f></onOk>
		<onCancel public="1" set="method"><f a=""><x path="Void"/></f></onCancel>
		<new public="1" set="method"><f a="messageWindow">
	<c path="rm.windows.Window_Message"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_EventItem
 *
 * The window used for the event command [Select Item].
 * @class Window_EventItem</haxe_doc>
		<meta><m n=":native"><e>"Window_EventItem"</e></m></meta>
	</class>
	<class path="rm.windows.Window_GameEnd" params="" file="src/rm/windows/Window_GameEnd.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<updatePlacement public="1" set="method"><f a=""><x path="Void"/></f></updatePlacement>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_GameEnd
 *
 * The window for selecting "Go to Title" on the game end screen.
 * @class Window_GameEnd</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_GameEnd"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_Gold" params="" file="src/rm/windows/Window_Gold.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<value public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the $gameParty gold as a number.
  *
  * @returns {number}
  * @memberof Window_Gold</haxe_doc>
		</value>
		<currencyUnit public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the RPGMakerMV database currency
  * as a string.
  * @returns {string}
  * @memberof Window_Gold</haxe_doc>
		</currencyUnit>
		<new public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Window_Gold"</e></m></meta>
	</class>
	<class path="rm.windows.Window_Help" params="" file="src/rm/windows/Window_Help.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_text>
			<c path="String"/>
			<haxe_doc>* The text that is displayed within the window.
  *
  * @protected
  * @type {string}
  * @memberof Window_Help</haxe_doc>
		</_text>
		<setText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the _text property of the window;
  * this text will be displayed within the window.
  * @param {string} text
  * @memberof Window_Help</haxe_doc>
		</setText>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<setItem public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current item of the help window.
  *
  * @param {RPG.BaseItem} item
  * @memberof Window_Help</haxe_doc>
		</setItem>
		<new public="1" set="method">
			<f a="numLines">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_Help.
  * @param {number} numLines
  * @memberof Window_Help</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Help"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_ItemCategory" params="" file="src/rm/windows/Window_ItemCategory.hx" extern="1">
		<extends path="rm.windows.Window_HorzCommand"/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_ItemCategory"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_MapName" params="" file="src/rm/windows/Window_MapName.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_showCount><x path="Int"/></_showCount>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window width.
  *
  * @returns {number}
  * @memberof Window_MapName</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window height.
  *
  * @returns {number}
  * @memberof Window_MapName</haxe_doc>
		</windowHeight>
		<updateFadeIn public="1" set="method"><f a=""><x path="Void"/></f></updateFadeIn>
		<updateFadeOut public="1" set="method"><f a=""><x path="Void"/></f></updateFadeOut>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Windows the map name window.
  *
  * @memberof Window_MapName</haxe_doc>
		</refresh>
		<drawBackground public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the background of the map name window.
  *
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @param {number} height
  * @memberof Window_MapName</haxe_doc>
		</drawBackground>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_MapName
 *
 * The window for displaying the map name on the map screen.
 * @class Window_MapName</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_MapName"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_MenuStatus" params="" file="src/rm/windows/Window_MenuStatus.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_formationMode><x path="Bool"/></_formationMode>
		<_pendingIndex><x path="Int"/></_pendingIndex>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Window width.
  * @return Int</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Window height.
  * @return Int</haxe_doc>
		</windowHeight>
		<itemHeight public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the height of each item (actor status) in the main menu
  * window.
  * @returns {number}
  * @memberof Window_MenuStatus</haxe_doc>
		</itemHeight>
		<numVisibleRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of visible rows in
  * menu status.
  * @returns {number}
  * @memberof Window_MenuStatus</haxe_doc>
		</numVisibleRows>
		<loadImages public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Loads the images for the main menu status window.
  *
  * @memberof Window_MenuStatus</haxe_doc>
		</loadImages>
		<drawItemBackground public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the item background at the given index.
  *
  * @param {number} index
  * @memberof Window_MenuStatus</haxe_doc>
		</drawItemBackground>
		<drawItemImage public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></drawItemImage>
		<drawItemStatus public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></drawItemStatus>
		<selectLast public="1" set="method"><f a=""><x path="Void"/></f></selectLast>
		<formationMode public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the window is in formation mode;
  * if true, the player can select characters to swap
  * positions with.
  * @returns {boolean}
  * @memberof Window_MenuStatus</haxe_doc>
		</formationMode>
		<setFormationMode public="1" set="method">
			<f a="formationMode">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the formation mode to true or false.
  *
  * @param {boolean} formationMode
  * @memberof Window_MenuStatus</haxe_doc>
		</setFormationMode>
		<pendingIndex public="1" set="method"><f a=""><x path="Int"/></f></pendingIndex>
		<setPendingIndex public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></setPendingIndex>
		<new public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_MenuStatus.
  * @param {number} x
  * @param {number} y
  * @memberof Window_MenuStatus</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_MenuStatus
 *
 * The window for displaying party member status on the menu screen.
 * @class Window_MenuStatus
 * @extends {Window_Selectable}</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_MenuStatus"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_MenuActor" params="" file="src/rm/windows/Window_MenuActor.hx" extern="1">
		<extends path="rm.windows.Window_MenuStatus"/>
		<initialize public="1" set="method" override="1"><f a=""><x path="Void"/></f></initialize>
		<selectForItem public="1" set="method"><f a="item">
	<t path="rm.types.BaseItem"/>
	<x path="Void"/>
</f></selectForItem>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"Window_MenuActor"</e></m></meta>
	</class>
	<class path="rm.windows.Window_MenuCommand" params="" file="src/rm/windows/Window_MenuCommand.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<initCommandPosition public="1" set="method" static="1"><f a=""><x path="Void"/></f></initCommandPosition>
		<_lastCommandSymbol public="1" static="1"><x path="Any"/></_lastCommandSymbol>
		<addMainCommands public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the standard game commands to the
  * RPGMakerMV main menu.
  * @memberof Window_MenuCommand</haxe_doc>
		</addMainCommands>
		<addFormationCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the standard formation command to the
  * RPGMakerMV main menu.
  * @memberof Window_MenuCommand</haxe_doc>
		</addFormationCommand>
		<addOriginalCommands public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds any user created commands to the
  * RPGMakerMV main menu.
  * @memberof Window_MenuCommand</haxe_doc>
		</addOriginalCommands>
		<addSaveCommand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds the save command to the
  * RPGMakerMV main menu.
  * @memberof Window_MenuCommand</haxe_doc>
		</addSaveCommand>
		<addGameEndCommand public="1" set="method"><f a=""><x path="Void"/></f></addGameEndCommand>
		<needsCommand public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the standard game commands for the menu
  * are needed based on database system options.
  * @param {string} name
  * @returns {boolean}
  * @memberof Window_MenuCommand</haxe_doc>
		</needsCommand>
		<areMainCommandsEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the main commands are enabled;
  * this is based on the settings in the database.
  * @returns {boolean}
  * @memberof Window_MenuCommand</haxe_doc>
		</areMainCommandsEnabled>
		<isOptionsEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the option command is enabled;
  * based on the setting in the database.
  * @returns {boolean}
  * @memberof Window_MenuCommand</haxe_doc>
		</isOptionsEnabled>
		<isSaveEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the save command is enabled;
  * based on the setting in the database.
  * @returns {boolean}
  * @memberof Window_MenuCommand</haxe_doc>
		</isSaveEnabled>
		<selectLast public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Selects the last command in menu.
  *
  * @memberof Window_MenuCommand</haxe_doc>
		</selectLast>
		<new public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Window_MenuCommand"</e></m></meta>
	</class>
	<class path="rm.windows.Window_Message" params="" file="src/rm/windows/Window_Message.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_positionType><x path="Int"/></_positionType>
		<_background><x path="Int"/></_background>
		<_waitCount><x path="Int"/></_waitCount>
		<_faceBitmap><c path="rm.core.Bitmap"/></_faceBitmap>
		<_textState><t path="rm.types.TextState"/></_textState>
		<_pauseSkip><x path="Bool"/></_pauseSkip>
		<_showFast><x path="Bool"/></_showFast>
		<_lineShowFast><x path="Bool"/></_lineShowFast>
		<_goldWindow><c path="rm.windows.Window_Gold"/></_goldWindow>
		<_choiceWindow><c path="rm.windows.Window_ChoiceList"/></_choiceWindow>
		<_numberWindow><c path="rm.windows.Window_NumberInput"/></_numberWindow>
		<_itemWindow><c path="rm.windows.Window_EventItem"/></_itemWindow>
		<initialize public="1" set="method" override="1"><f a=""><x path="Void"/></f></initialize>
		<initMembers public="1" set="method"><f a=""><x path="Void"/></f></initMembers>
		<subWindows public="1" set="method">
			<f a=""><c path="Array"><c path="rm.windows.Window_Base"/></c></f>
			<haxe_doc><![CDATA[* Returns the sub windows attached to the message window.
  *
  * @returns {Array<Window_Base>}
  * @memberof Window_Message]]></haxe_doc>
		</subWindows>
		<createSubWindows public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the sub windows for the message window.
  *
  * @memberof Window_Message</haxe_doc>
		</createSubWindows>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of the window.
  *
  * @returns {number}
  * @memberof Window_Message</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the height of the window.
  *
  * @returns {number}
  * @memberof Window_Message</haxe_doc>
		</windowHeight>
		<numVisibleRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the number of visible rows within the message window.
  *
  * @returns {number}
  * @memberof Window_Message</haxe_doc>
		</numVisibleRows>
		<checkToNotClose public="1" set="method"><f a=""><x path="Void"/></f></checkToNotClose>
		<canStart public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the message window can start.
  *
  * @returns {boolean}
  * @memberof Window_Message</haxe_doc>
		</canStart>
		<startMessage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the displaying of the message within the message window.
  *
  * @memberof Window_Message</haxe_doc>
		</startMessage>
		<updatePlacement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the placement of the message window.
  *
  * @memberof Window_Message</haxe_doc>
		</updatePlacement>
		<clearFlags public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the message window flags for
  * fast text, pause skip, and line show fast</haxe_doc>
		</clearFlags>
		<setBackgroundType public="1" set="method" override="1">
			<f a="backgroundType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the background type of the window in terms
  * of transparency.
  * 0,
  * 1,
  * 2</haxe_doc>
		</setBackgroundType>
		<processEscapeCharacter public="1" set="method" override="1">
			<f a="code:textState">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes the escape characters in the message window.
  * @param code
  * @param textState</haxe_doc>
		</processEscapeCharacter>
		<processNormalCharacter public="1" set="method" override="1">
			<f a="textState">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Processes normal characters displayed within the message window.
  * @param textState</haxe_doc>
		</processNormalCharacter>
		<startWait public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts the wait count for the message window.
  * @param count</haxe_doc>
		</startWait>
		<startPause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the pause for the window.
  * Sets the wait count to 10 and pauses
  * the window.</haxe_doc>
		</startPause>
		<updateBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the background of the message window.
  *
  * @memberof Window_Message</haxe_doc>
		</updateBackground>
		<terminateMessage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Terminates the message and closes the gold and message window.
  *
  * @memberof Window_Message</haxe_doc>
		</terminateMessage>
		<updateWait public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Updates the wait of the message window.
  *
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</updateWait>
		<updateLoading public="1" set="method"><f a=""><x path="Bool"/></f></updateLoading>
		<updateInput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Updates input when the message window is processing.
  *
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</updateInput>
		<isAnySubWindowActive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if any sub window is active.
  *
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</isAnySubWindowActive>
		<updateMessage public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Updates the message.
  *
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</updateMessage>
		<onEndOfText public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for when there is no text left to display within
  * the message window.
  * @memberof Window_Message</haxe_doc>
		</onEndOfText>
		<startInput public="1" set="method"><f a=""><x path="Bool"/></f></startInput>
		<isTriggered public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the ok or cancel inputs have been triggered
  * multiple times.
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</isTriggered>
		<doesContinue public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the message window still has text
  * and settings have not changed.
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</doesContinue>
		<areSettingsChanged public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the message window settings have been changed.
  *
  * @returns {Bool}
  * @memberof Window_Message</haxe_doc>
		</areSettingsChanged>
		<updateShowFast public="1" set="method"><f a=""><x path="Void"/></f></updateShowFast>
		<newPage public="1" set="method"><f a="textState">
	<t path="rm.types.TextState"/>
	<x path="Void"/>
</f></newPage>
		<loadMessageFace public="1" set="method"><f a=""><x path="Void"/></f></loadMessageFace>
		<drawMessageFace public="1" set="method"><f a=""><x path="Void"/></f></drawMessageFace>
		<newLineX public="1" set="method"><f a=""><x path="Int"/></f></newLineX>
		<processNewLine public="1" set="method" override="1"><f a="textState">
	<t path="rm.types.TextState"/>
	<x path="Void"/>
</f></processNewLine>
		<processNewPage public="1" set="method" override="1"><f a="textState">
	<t path="rm.types.TextState"/>
	<x path="Void"/>
</f></processNewPage>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Message"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_NameBox" params="" file="src/rm/windows/Window_NameBox.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<setMessageWindow public="1" set="method">
			<f a="messageWindow">
				<c path="rm.windows.Window_Message"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current message window.
  * @param messageWindow</haxe_doc>
		</setMessageWindow>
		<setName public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the name in the message window box.
  * @param name</haxe_doc>
		</setName>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the name in the message box.</haxe_doc>
		</clear>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the name box window.</haxe_doc>
		</start>
		<updatePlacement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the placement of the name box window.</haxe_doc>
		</updatePlacement>
		<updateBackground public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the name box background
  * to match game message background.
  * ```js
  *  this.setBackgroundType($gameMessage.background());
  * ```</haxe_doc>
		</updateBackground>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window width based on the text size.
  * @returns Int</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window height based on
  * the fitting height.
  * @return Int</haxe_doc>
		</windowHeight>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the window and
  * redraws the text.
  * ```js
  * const rect = this.baseTextRect();
    this.contents.clear();
    this.drawTextEx(this._name, rect.x, rect.y, rect.width);
  * ```
  * @return Int</haxe_doc>
		</refresh>
		<haxe_doc>* The window for displaying a speaker name above
 * the message window.</haxe_doc>
		<meta><m n=":native"><e>"Window_NameBox"</e></m></meta>
	</class>
	<class path="rm.windows.Window_NameEdit" params="" file="src/rm/windows/Window_NameEdit.hx" extern="1">
		<_name><c path="String"/></_name>
		<_index><x path="Int"/></_index>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window width.
  *
  * @returns {number}
  * @memberof Window_NameEdit</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window height.
  *
  * @returns {number}
  * @memberof Window_NameEdit</haxe_doc>
		</windowHeight>
		<restoreDefault public="1" set="method"><f a=""><x path="Bool"/></f></restoreDefault>
		<add public="1" set="method"><f a="ch">
	<c path="String"/>
	<x path="Bool"/>
</f></add>
		<back public="1" set="method"><f a=""><x path="Bool"/></f></back>
		<faceWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of the character face.
  *
  * @returns {number}
  * @memberof Window_NameEdit</haxe_doc>
		</faceWidth>
		<charWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of a character.
  *
  * @returns {number}
  * @memberof Window_NameEdit</haxe_doc>
		</charWidth>
		<left public="1" set="method"><f a=""><x path="Int"/></f></left>
		<underlineRect public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="rm.core.Rectangle"/>
</f></underlineRect>
		<underlineColor public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the color of the underline as a css color String.
  *
  * @returns {String}
  * @memberof Window_NameEdit</haxe_doc>
		</underlineColor>
		<drawUnderline public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the underline at the given index of the window.
  *
  * @param {number} index
  * @memberof Window_NameEdit</haxe_doc>
		</drawUnderline>
		<drawChar public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a character within the window at the specified index.
  *
  * @param {number} index
  * @memberof Window_NameEdit</haxe_doc>
		</drawChar>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the window contents.
  *
  * @memberof Window_NameEdit</haxe_doc>
		</refresh>
		<new public="1" set="method">
			<f a="actor:maxLength">
				<c path="rm.objects.Game_Actor"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_NameEdit.
  * @param {Game_Actor} actor
  * @param {number} maxLength
  * @memberof Window_NameEdit</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_NameEdit
 *
 * The window for editing an actor's name on the name input screen.
 * @class Window_NameEdit</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_NameEdit"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_NameInput" params="" file="src/rm/windows/Window_NameInput.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<LATIN1 public="1" static="1"><c path="Array"><c path="String"/></c></LATIN1>
		<LATIN2 public="1" static="1"><c path="Array"><c path="String"/></c></LATIN2>
		<RUSSIA public="1" static="1"><c path="Array"><c path="String"/></c></RUSSIA>
		<JAPAN1 public="1" static="1"><c path="Array"><c path="String"/></c></JAPAN1>
		<JAPAN2 public="1" static="1"><c path="Array"><c path="String"/></c></JAPAN2>
		<JAPAN3 public="1" static="1"><c path="Array"><c path="String"/></c></JAPAN3>
		<_editWindow><c path="rm.windows.Window_NameEdit"/></_editWindow>
		<_page><x path="Int"/></_page>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window height.
  *
  * @returns {number}
  * @memberof Window_NameInput</haxe_doc>
		</windowHeight>
		<table public="1" set="method">
			<f a=""><c path="Array"><c path="Array"><c path="String"/></c></c></f>
			<haxe_doc><![CDATA[* Returns the table of characters to input.
  *
  * @returns {Array<Array<String>>}
  * @memberof Window_NameInput]]></haxe_doc>
		</table>
		<character public="1" set="method"><f a=""><c path="String"/></f></character>
		<isPageChange public="1" set="method"><f a=""><x path="Bool"/></f></isPageChange>
		<isOk public="1" set="method"><f a=""><x path="Bool"/></f></isOk>
		<processJump public="1" set="method"><f a=""><x path="Void"/></f></processJump>
		<processBack public="1" set="method"><f a=""><x path="Void"/></f></processBack>
		<onNameAdd public="1" set="method"><f a=""><x path="Void"/></f></onNameAdd>
		<onNameOk public="1" set="method"><f a=""><x path="Void"/></f></onNameOk>
		<new public="1" set="method"><f a="editWindow">
	<c path="rm.windows.Window_NameEdit"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_NameInput
 *
 * The window for selecting text characters on the name input screen.
 * @class Window_NameInputt</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_NameInput"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_NumberInput" params="" file="src/rm/windows/Window_NumberInput.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_messageWindow><c path="rm.windows.Window_Message"/></_messageWindow>
		<_number><x path="Int"/></_number>
		<_maxDigits><x path="Int"/></_maxDigits>
		<_buttons><c path="Array"><c path="rm.sprites.Sprite_Button"/></c></_buttons>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<updatePlacement public="1" set="method"><f a=""><x path="Void"/></f></updatePlacement>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window width.
  *
  * @returns {number}
  * @memberof Window_NumberInput</haxe_doc>
		</windowWidth>
		<windowHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the window height.
  *
  * @returns {number}
  * @memberof Window_NumberInput</haxe_doc>
		</windowHeight>
		<itemWidth public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the item width.
  *
  * @returns {number}
  * @memberof Window_NumberInput</haxe_doc>
		</itemWidth>
		<createButtons public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates the number input window buttons.
  *
  * @memberof Window_NumberInput</haxe_doc>
		</createButtons>
		<placeButtons public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Places the number input window buttons.
  *
  * @memberof Window_NumberInput</haxe_doc>
		</placeButtons>
		<updateButtonsVisiblity public="1" set="method"><f a=""><x path="Void"/></f></updateButtonsVisiblity>
		<showButtons public="1" set="method"><f a=""><x path="Void"/></f></showButtons>
		<hideButtons public="1" set="method"><f a=""><x path="Void"/></f></hideButtons>
		<buttonY public="1" set="method"><f a=""><x path="Int"/></f></buttonY>
		<processDigitChange public="1" set="method"><f a=""><x path="Void"/></f></processDigitChange>
		<changeDigit public="1" set="method"><f a="up">
	<x path="Bool"/>
	<x path="Void"/>
</f></changeDigit>
		<onButtonUp public="1" set="method"><f a=""><x path="Void"/></f></onButtonUp>
		<onButtonDown public="1" set="method"><f a=""><x path="Void"/></f></onButtonDown>
		<onButtonOk public="1" set="method"><f a=""><x path="Void"/></f></onButtonOk>
		<new public="1" set="method"><f a="messageWindow">
	<c path="rm.windows.Window_Message"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_NumberInput"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_Options" params="" file="src/rm/windows/Window_Options.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<updatePlacement public="1" set="method"><f a=""><x path="Void"/></f></updatePlacement>
		<addGeneralOptions public="1" set="method"><f a=""><x path="Void"/></f></addGeneralOptions>
		<addVolumeOptions public="1" set="method"><f a=""><x path="Void"/></f></addVolumeOptions>
		<statusWidth public="1" set="method"><f a=""><x path="Float"/></f></statusWidth>
		<statusText public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></statusText>
		<isVolumeSymbol public="1" set="method"><f a="symbol">
	<c path="String"/>
	<x path="Bool"/>
</f></isVolumeSymbol>
		<booleanStatusText public="1" set="method"><f a="value">
	<x path="Bool"/>
	<c path="String"/>
</f></booleanStatusText>
		<volumeStatusText public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="String"/>
</f></volumeStatusText>
		<volumeOffset public="1" set="method"><f a=""><x path="Float"/></f></volumeOffset>
		<changeValue public="1" set="method"><f a="symbol:value">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Bool"/>
		<x path="Float"/>
	</x>
	<x path="Void"/>
</f></changeValue>
		<getConfigValue public="1" set="method"><f a="symbol">
	<c path="String"/>
	<x path="Bool"/>
</f></getConfigValue>
		<setConfigValue public="1" set="method"><f a="symbol:volume">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Bool"/>
		<x path="Float"/>
	</x>
	<x path="Void"/>
</f></setConfigValue>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Options"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_PartyCommand" params="" file="src/rm/windows/Window_PartyCommand.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<setup public="1" set="method"><f a=""><x path="Void"/></f></setup>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_PartyCommand
 *
 * The window for selecting whether to fight or escape on the battle screen.
 * @class Window_PartyCommand</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_PartyCommand"</e></m>
		</meta>
	</class>
	<typedef path="rm.windows.Info" params="" file="src/rm/windows/Window_SavefileList.hx" module="rm.windows.Window_SavefileList"><a><key><c path="String"/></key></a></typedef>
	<class path="rm.windows.Window_SavefileList" params="" file="src/rm/windows/Window_SavefileList.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_mode><c path="String"/></_mode>
		<__autosave public="1">
			<x path="Bool"/>
			<meta><m n="native"><e>"_autosave"</e></m></meta>
			<haxe_doc>* Whether ornot the auto save feature is enabled
  *
  * @default {Bool} false
  * @memberof Window_SavefileList</haxe_doc>
		</__autosave>
		<_autosave>
			<x path="Bool"/>
			<haxe_doc>* Whether ornot the auto save feature is enabled
  *
  * @default {Bool} false
  * @memberof Window_SavefileList</haxe_doc>
		</_autosave>
		<setMode public="1" set="method">
			<f a="mode">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the mode of the save file window.
  *
  * @param {string} mode
  * @memberof Window_SavefileList</haxe_doc>
		</setMode>
		<maxVisibleItems public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the maximum number of visible items.
  *
  * @returns {number}
  * @memberof Window_SavefileList</haxe_doc>
		</maxVisibleItems>
		<itemHeight public="1" set="method" override="1"><f a=""><x path="Float"/></f></itemHeight>
		<drawFileId public="1" set="method">
			<f a="id:x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the file id at the specified x and y coordinates.
  *
  * @param {number} id
  * @param {number} x
  * @param {number} y
  * @memberof Window_SavefileList</haxe_doc>
		</drawFileId>
		<drawContents public="1" set="method"><f a="info:rect:valid">
	<t path="rm.windows.Info"/>
	<c path="rm.core.Rectangle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></drawContents>
		<drawGameTitle public="1" set="method"><f a="info:x:y:width">
	<t path="rm.windows.Info"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawGameTitle>
		<drawPartyCharacters public="1" set="method"><f a="info:x:y">
	<t path="rm.windows.Info"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawPartyCharacters>
		<drawPlaytime public="1" set="method">
			<f a="info:x:y:width">
				<t path="rm.windows.Info"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the current playtime at the specified x and y coordinates within the given
  * width.
  * @param {{key: string}} info
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @memberof Window_SavefileList</haxe_doc>
		</drawPlaytime>
		<new public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_SavefileList"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_ScrollText" params="" file="src/rm/windows/Window_ScrollText.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_text><c path="String"/></_text>
		<_allTextHeight><x path="Int"/></_allTextHeight>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<startMessage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Starts the displaying of a message in the scroll text window.
  *
  * @memberof Window_ScrollText</haxe_doc>
		</startMessage>
		<refresh public="1" set="method"><f a=""><x path="Void"/></f></refresh>
		<updateMessage public="1" set="method"><f a=""><x path="Void"/></f></updateMessage>
		<scrollSpeed public="1" set="method"><f a=""><x path="Int"/></f></scrollSpeed>
		<isFastForward public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the scene is in fast forward mode.
  *
  * @returns {boolean}
  * @memberof Window_ScrollText</haxe_doc>
		</isFastForward>
		<fastForwardRate public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Returns the fast forward rate of the scroll text window.
  *
  * @returns {number}
  * @memberof Window_ScrollText</haxe_doc>
		</fastForwardRate>
		<terminateMessage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Terminates the message and the scroll text window is hidden.
  *
  * @memberof Window_ScrollText</haxe_doc>
		</terminateMessage>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ScrollText
 *
 * The window for displaying scrolling text. No frame is displayed, but it
 * is handled as a window for convenience.
 * @class Window_ScrollText</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="rm.windows.Window_ShopBuy" params="" file="src/rm/windows/Window_ShopBuy.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_shopGoods><c path="Array"><c path="Array"><x path="Any"/></c></c></_shopGoods>
		<_money><x path="Int"/></_money>
		<_data><c path="Array"><t path="rm.types.BaseItem"/></c></_data>
		<_price><c path="Array"><x path="Int"/></c></_price>
		<_statusWindow><c path="rm.windows.Window_ShopStatus"/></_statusWindow>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of the window.
  *
  * @returns {number}
  * @memberof Window_ShopBuy</haxe_doc>
		</windowWidth>
		<item public="1" set="method">
			<f a=""><t path="rm.types.BaseItem"/></f>
			<haxe_doc>* Returns the current item of the window.
  *
  * @returns {RPG.BaseItem}
  * @memberof Window_ShopBuy</haxe_doc>
		</item>
		<setMoney public="1" set="method"><f a="money">
	<x path="Int"/>
	<x path="Void"/>
</f></setMoney>
		<price public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the p rice of an item
  * @param item
  * @return Int</haxe_doc>
		</price>
		<isEnabled public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the current item is enabled (can be bought/sold).
  *
  * @param {RPG.BaseItem} item
  * @returns {boolean}
  * @memberof Window_ShopBuy</haxe_doc>
		</isEnabled>
		<makeItemList public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a list of items for the shop window.
  *
  * @memberof Window_ShopBuy</haxe_doc>
		</makeItemList>
		<setStatusWindow public="1" set="method">
			<f a="statusWindow">
				<c path="rm.windows.Window_ShopStatus"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the status window for the shop buy window.
  * @param statusWindow</haxe_doc>
		</setStatusWindow>
		<new public="1" set="method">
			<f a="x:y:height:shopGoods">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array"><x path="Any"/></c></c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an instance of Window_ShopBuy.
  * @param {number} x
  * @param {number} y
  * @param {number} height
  * @param {Array<Array<any>>} shopGoods
  * @memberof Window_ShopBuy]]></haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ShopBuy
 *
 * The window for selecting an item to buy on the shop screen.
 * @class Window_ShopBuy</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="rm.windows.Window_ShopCommand" params="" file="src/rm/windows/Window_ShopCommand.hx" extern="1">
		<extends path="rm.windows.Window_HorzCommand"/>
		<_windowWidth><x path="Int"/></_windowWidth>
		<_purchaseOnly>
			<x path="Bool"/>
			<haxe_doc>* Determines if the shop is purchase only.
  *
  * @protected
  * @type {boolean}
  * @memberof Window_ShopCommand</haxe_doc>
		</_purchaseOnly>
		<isPurchaseOnly public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"_purchaseOnly"</e></m></meta>
		</isPurchaseOnly>
		<initialize public="1" set="method" override="1">
			<f a="width:purchaseOnly">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Determines the width of the shop buy/sell window;
  * also determines if the shop is purchase only.
  * @param {number} width
  * @param {boolean} purchaseOnly
  * @memberof Window_ShopCommand</haxe_doc>
		</initialize>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ShopCommand
 *
 * The window for selecting buy/sell on the shop screen.
 * @class Window_ShopCommand</haxe_doc>
	</class>
	<class path="rm.windows.Window_ShopNumber" params="" file="src/rm/windows/Window_ShopNumber.hx" extern="1">
		<extends path="rm.windows.Window_Selectable"/>
		<_item>
			<t path="rm.types.BaseItem"/>
			<haxe_doc>* The current item being bought/sold.
  *
  * @private var
  * @type {RPG.BaseItem}
  * @memberof Window_ShopNumber</haxe_doc>
		</_item>
		<_max>
			<x path="Int"/>
			<haxe_doc>* Returns the maximum number of the item
  * that can be bought/sold.
  * @private var
  * @type {number}
  * @memberof Window_ShopNumber</haxe_doc>
		</_max>
		<_price>
			<x path="Int"/>
			<haxe_doc>* The current price of the items.
  *
  * @private var
  * @type {number}
  * @memberof Window_ShopNumber</haxe_doc>
		</_price>
		<_number><x path="Int"/></_number>
		<_currencyUnit>
			<c path="String"/>
			<haxe_doc>* Returns the currency unit of the game.
  *
  * @private var
  * @type {String}
  * @memberof Window_ShopNumber</haxe_doc>
		</_currencyUnit>
		<_buttons>
			<c path="Array"><c path="rm.sprites.Sprite_Button"/></c>
			<haxe_doc><![CDATA[* The buttons to input quantity
  * for the quantity of the item to be bought/sold.
  * @private var
  * @type {Array<Sprite_Button>}
  * @memberof Window_ShopNumber]]></haxe_doc>
		</_buttons>
		<windowWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of the window.
  *
  * @returns {number}
  * @memberof Window_ShopNumber</haxe_doc>
		</windowWidth>
		<number public="1" set="method"><f a=""><x path="Int"/></f></number>
		<setup public="1" set="method"><f a="item:max:price">
	<t path="rm.types.BaseItem"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<setCurrencyUnit public="1" set="method"><f a="currencyUnit">
	<c path="String"/>
	<x path="Void"/>
</f></setCurrencyUnit>
		<createButtons public="1" set="method"><f a=""><x path="Void"/></f></createButtons>
		<placeButtons public="1" set="method"><f a=""><x path="Void"/></f></placeButtons>
		<updateButtonsVisiblity public="1" set="method"><f a=""><x path="Void"/></f></updateButtonsVisiblity>
		<showButtons public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Shows the quantity input buttons.
  *
  * @memberof Window_ShopNumber</haxe_doc>
		</showButtons>
		<hideButtons public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the quantity input buttons.
  *
  * @memberof Window_ShopNumber</haxe_doc>
		</hideButtons>
		<drawMultiplicationSign public="1" set="method"><f a=""><x path="Void"/></f></drawMultiplicationSign>
		<drawNumber public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Draws the number.</haxe_doc>
		</drawNumber>
		<drawTotalPrice public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Draws the total price of the selected
  * quantity of item.
  * @memberof Window_ShopNumber</haxe_doc>
		</drawTotalPrice>
		<itemY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Item y position.
  * @return Int</haxe_doc>
		</itemY>
		<priceY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Y position of the price.
  * @return Int</haxe_doc>
		</priceY>
		<buttonY public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Y position of the button.
  * @return Int</haxe_doc>
		</buttonY>
		<cursorWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the width of the cursor.
  *
  * @returns {number}
  * @memberof Window_ShopNumber</haxe_doc>
		</cursorWidth>
		<cursorX public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Cursor x position.
  * @return Int</haxe_doc>
		</cursorX>
		<maxDigits public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* The max number of digits for the shop number display
  * window.</haxe_doc>
		</maxDigits>
		<processNumberChange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Processes the change in quantity.
  *
  * @memberof Window_ShopNumber</haxe_doc>
		</processNumberChange>
		<changeNumber public="1" set="method">
			<f a="amount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Changes the quantity, given a number.
  *
  * @param {number} amount
  * @memberof Window_ShopNumber</haxe_doc>
		</changeNumber>
		<onButtonUp public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handle for button up event.</haxe_doc>
		</onButtonUp>
		<onButtonUp2 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for button up event 2.</haxe_doc>
		</onButtonUp2>
		<onButtonDown public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for button down event.</haxe_doc>
		</onButtonDown>
		<onButtonDown2 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for button down event.</haxe_doc>
		</onButtonDown2>
		<onButtonOk public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Handler for button ok event.</haxe_doc>
		</onButtonOk>
		<new public="1" set="method">
			<f a="x:y:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_ShopNumber.
  * @param {number} x
  * @param {number} y
  * @param {number} height
  * @memberof Window_ShopNumber</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ShopNumber
 *
 * The window for inputting quantity of items to buy or sell on the shop
 * screen.
 * @class Window_ShopNumber</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_ShopNumber"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_ShopSell" params="" file="src/rm/windows/Window_ShopSell.hx" extern="1">
		<extends path="rm.windows.Window_ItemList"/>
		<isEnabled public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Determines if the item is sellable, otherwise, greyed out.
  *
  * @param {RPG.BaseItem} item
  * @returns {boolean}
  * @memberof Window_ShopSell</haxe_doc>
		</isEnabled>
		<new public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ShopSell
 *
 * The window for selecting an item to sell on the shop screen.
 * @class Window_ShopSell</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_ShopSell"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_ShopStatus" params="" file="src/rm/windows/Window_ShopStatus.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_item><t path="rm.types.BaseItem"/></_item>
		<_pageIndex><x path="Int"/></_pageIndex>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the window contents.
  *
  * @memberof Window_ShopStatus</haxe_doc>
		</refresh>
		<setItem public="1" set="method">
			<f a="item">
				<t path="rm.types.BaseItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the item in the window shop status for display.</haxe_doc>
		</setItem>
		<isEquipItem public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the item in the
  * shop status window is an equippable item.</haxe_doc>
		</isEquipItem>
		<drawPossession public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawPossession>
		<drawEquipInfo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draw Equip Information.</haxe_doc>
		</drawEquipInfo>
		<statusMembers public="1" set="method"><f a=""><c path="Array"><c path="rm.objects.Game_Actor"/></c></f></statusMembers>
		<pageSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the page size.
  *
  * @returns {number}
  * @memberof Window_ShopStatus</haxe_doc>
		</pageSize>
		<maxPages public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the max number of pages.
  *
  * @returns {number}
  * @memberof Window_ShopStatus</haxe_doc>
		</maxPages>
		<drawActorEquipInfo public="1" set="method"><f a="x:y:actor">
	<x path="Int"/>
	<x path="Int"/>
	<c path="rm.objects.Game_Actor"/>
	<x path="Void"/>
</f></drawActorEquipInfo>
		<drawActorParamChange public="1" set="method"><f a="x:y:actor:item1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="rm.objects.Game_Actor"/>
	<t path="rm.types.EquipItem"/>
	<x path="Void"/>
</f></drawActorParamChange>
		<paramId public="1" set="method">
			<f a=""><x path="rm.types.ParameterId"/></f>
			<haxe_doc>* Returns the parameter id.
  *
  * @returns {number}
  * @memberof Window_ShopStatus</haxe_doc>
		</paramId>
		<currentEquippedItem public="1" set="method">
			<f a="actor:etypeId">
				<c path="rm.objects.Game_Actor"/>
				<x path="rm.types.EquipTypeId"/>
				<t path="rm.types.EquipItem"/>
			</f>
			<haxe_doc>* Returns the current item equiped by the given actor when
  * the respective equipment Id is passed.
  * @param {Game_Actor} actor
  * @param {number} etypeId
  * @returns {RPG.EquipItem}
  * @memberof Window_ShopStatus</haxe_doc>
		</currentEquippedItem>
		<updatePage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Updates the current page.
  *
  * @memberof Window_ShopStatus</haxe_doc>
		</updatePage>
		<isPageChangeEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if page can be changed.
  *
  * @returns {boolean}
  * @memberof Window_ShopStatus</haxe_doc>
		</isPageChangeEnabled>
		<isPageChangeRequested public="1" set="method"><f a=""><x path="Bool"/></f></isPageChangeRequested>
		<isTouchedInsideFrame public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Determines if the window is touched within it's frame.
  *
  * @returns {boolean}
  * @memberof Window_ShopStatus</haxe_doc>
		</isTouchedInsideFrame>
		<changePage public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Changes the current page.
  *
  * @memberof Window_ShopStatus</haxe_doc>
		</changePage>
		<new public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_ShopStatus.
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @param {number} height
  * @memberof Window_ShopStatus</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_ShopStatus
 *
 * The window for displaying number of items in possession and the actor's
 * equipment on the shop screen.
 * @class Window_ShopStatus</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="rm.windows.Window_SkillStatus" params="" file="src/rm/windows/Window_SkillStatus.hx" extern="1">
		<extends path="rm.windows.Window_Base"/>
		<_actor>
			<c path="rm.objects.Game_Actor"/>
			<haxe_doc>* The current game actor attached to the window.
  * @protected
  * @type {Game_Actor}
  * @memberof Window_SkillStatus</haxe_doc>
		</_actor>
		<setActor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current actor for the window.
  *
  * @param {Game_Actor} actor
  * @memberof Window_SkillStatus</haxe_doc>
		</setActor>
		<refresh public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Refreshes the window contents.
  *
  * @memberof Window_SkillStatus</haxe_doc>
		</refresh>
		<new public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_SkillStatus.
  * @param x
  * @param y
  * @param width
  * @param height
  * @memberof Window_SkillStatus</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_SkillStatus
 *
 * The window for displaying the skill user's status on the skill screen.
 * @class Window_SkillStatus</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_SkillStatus"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_SkillType" params="" file="src/rm/windows/Window_SkillType.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<_actor>
			<c path="rm.objects.Game_Actor"/>
			<haxe_doc>* The current game actor attached to the window.
  *
  * @protected
  * @type {Game_Actor}
  * @memberof Window_SkillType</haxe_doc>
		</_actor>
		<_skillWindow>
			<c path="rm.windows.Window_SkillList"/>
			<haxe_doc>* The current skill window attached to the window.
  *
  * @protected
  * @type {Window_SkillList}
  * @memberof Window_SkillType</haxe_doc>
		</_skillWindow>
		<setActor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current actor for the skill type window.
  *
  * @param {Game_Actor} actor
  * @memberof Window_SkillType</haxe_doc>
		</setActor>
		<setSkillWindow public="1" set="method">
			<f a="skillWindow">
				<c path="rm.windows.Window_SkillList"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the skill window for the current skill type.
  *
  * @param {Window_SkillList} skillWindow
  * @memberof Window_SkillType</haxe_doc>
		</setSkillWindow>
		<selectLast public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Selects the last command in the window.
  *
  * @memberof Window_SkillType</haxe_doc>
		</selectLast>
		<new public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates an instance of Window_SkillType.
  * @param  x
  * @param  y
  * @memberof Window_SkillType</haxe_doc>
		</new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_SkillType
 *
 * The window for selecting a skill type on the skill screen.
 * @class Window_SkillType</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_SkillType"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_Status" params="" file="src/rm/windows/Window_Status.hx" extern="1">
		<extends path="rm.windows.Window_StatusBase"/>
		<_actor><c path="rm.objects.Game_Actor"/></_actor>
		<_stypeId><x path="Int"/></_stypeId>
		<_data><c path="Array"><t path="rm.types.Skill"/></c></_data>
		<initialize public="1" set="method" override="1"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></initialize>
		<block1Y public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the Y value for block1.
 * Defaults to 0.
 * @return Int</haxe_doc>
		</block1Y>
		<drawBlock2 public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Draws the basic info and exp info as a block.
 * ```js
 * const y = this.block2Y();
 * this.drawActorFace(this._actor, 12, y);
 * this.drawBasicInfo(204, y);
 * this.drawExpInfo(456, y);
 * ```</haxe_doc>
		</drawBlock2>
		<block2Y public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Returns the Y value for block2.
 * This is based on the lineHeight.
 * ```js
 * const lineHeight = this.lineHeight();
 * const min = lineHeight;
 * const max = this.innerHeight - lineHeight * 4;
 * return Math.floor((lineHeight * 1.4).clamp(min, max));
 * ```
 * @return Int</haxe_doc>
		</block2Y>
		<drawBasicInfo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the basic info such as
 * actor level, icons and guages
 * at the specified x and y coordinates.
 * @param x
 * @param y</haxe_doc>
		</drawBasicInfo>
		<drawExpInfo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws the experience info
 * at the specified x and y coordinates.
 * @param x
 * @param y</haxe_doc>
		</drawExpInfo>
		<expTotalValue public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the exp total value as a string otherwise
 * returns "-------".
 * @return String</haxe_doc>
		</expTotalValue>
		<expNextValue public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Returns the exp next value as a string
 * otherise returns "-------".
 * @return String</haxe_doc>
		</expNextValue>
		<setActor public="1" set="method">
			<f a="actor">
				<c path="rm.objects.Game_Actor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the current actor of the skill list window.
 *
 * @param {Game_Actor} actor
 * @memberof Window_SkillList</haxe_doc>
		</setActor>
		<new public="1" set="method"><f a="rect">
	<c path="rm.core.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Window_Status"</e></m>
		</meta>
	</class>
	<class path="rm.windows.Window_TitleCommand" params="" file="src/rm/windows/Window_TitleCommand.hx" extern="1">
		<extends path="rm.windows.Window_Command"/>
		<_lastCommandSymbol static="1"><c path="String"/></_lastCommandSymbol>
		<updatePlacement public="1" set="method"><f a=""><x path="Void"/></f></updatePlacement>
		<isContinueEnabled public="1" set="method"><f a=""><x path="Bool"/></f></isContinueEnabled>
		<initCommandPosition public="1" set="method"><f a=""><x path="Void"/></f></initCommandPosition>
		<selectLast public="1" set="method"><f a=""><x path="Void"/></f></selectLast>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* -----------------------------------------------------------------------------
 * Window_TitleCommand
 *
 * The window for selecting New Game/Continue on the title screen.
 * @class Window_TitleCommand</haxe_doc>
		<meta><m n=":native"><e>"Window_TitleCommand"</e></m></meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/runner/haxe/versions/4.1.3/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.io.FileInput" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<fd><x path="Int"/></fd>
		<pos><x path="Int"/></pos>
		<readByte public="1" set="method" line="20"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="36"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="52"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="56"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="67"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method" line="71"><f a=""><x path="Bool"/></f></eof>
		<new set="method" line="15">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>sys.io.File</e></m></meta>
		</new>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="/home/runner/haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<fd><x path="Int"/></fd>
		<pos><x path="Int"/></pos>
		<writeByte public="1" set="method" line="20"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="27"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="34"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="38"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="49"><f a=""><x path="Int"/></f></tell>
		<new set="method" line="15">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>sys.io.File</e></m></meta>
		</new>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/home/runner/haxe/versions/4.1.3/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="utils.Comment" params="" file="src/utils/Comment.hx">
		<title public="1" get="inline" set="null" line="8" static="1"><f a="title">
	<c path="String"/>
	<unknown/>
</f></title>
		<singleLine public="1" get="inline" set="null" line="16" static="1"><f a="message">
	<c path="String"/>
	<unknown/>
</f></singleLine>
		<multiLine public="1" get="inline" set="null" line="20" static="1"><f a="message">
	<c path="String"/>
	<unknown/>
</f></multiLine>
		<pluginParams public="1" get="inline" set="null" line="26" static="1"><f a="params">
	<c path="String"/>
	<unknown/>
</f></pluginParams>
	</class>
	<typedef path="utils.Self" params="" file="src/utils/Fn.hx" module="utils.Fn"><c path="String"/></typedef>
	<class path="utils.Fn" params="" file="src/utils/Fn.hx">
		<self public="1" get="accessor" set="null" static="1"><x path="Any"/></self>
		<JsLog public="1" expr="Console.log" line="18" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>Console.log</e></m></meta>
			<haxe_doc>* Alias for JS console log.</haxe_doc>
		</JsLog>
		<Js public="1" expr="Syntax" line="24" static="1">
			<t path="Class&lt;js.Syntax&gt;"/>
			<meta><m n=":value"><e>Syntax</e></m></meta>
			<haxe_doc>* Allows you to acces Js syntax  Code functionality
  * for embedding and more.</haxe_doc>
		</Js>
		<jsThis public="1" set="method" line="26" static="1"><f a=""><unknown/></f></jsThis>
		<get_self get="inline" set="null" line="33" static="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Wrapper for JavaScript this</haxe_doc>
		</get_self>
		<eval public="1" get="inline" set="null" line="41" static="1">
			<f a="evaluation">
				<c path="String"/>
				<unknown/>
			</f>
			<haxe_doc>* Runs a JavaScript evaluation expression.
  * @param evaluation</haxe_doc>
		</eval>
		<embedEval public="1" get="inline" set="null" line="49" static="1">
			<f a="evaluation">
				<c path="String"/>
				<unknown/>
			</f>
			<haxe_doc>* Embeds a JavaScript evaluation into the output program.
  * @param evaluation</haxe_doc>
		</embedEval>
		<proto public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="obj">
				<x path="Class"><c path="proto.T"/></x>
				<x path="core.TBox"><c path="proto.T"/></x>
			</f>
			<meta><m n=":keep"/></meta>
		</proto>
		<setPrProp public="1" get="inline" set="null" line="58" static="1"><f a="obj:fieldName:value">
	<x path="Any"/>
	<c path="String"/>
	<x path="Any"/>
	<x path="Void"/>
</f></setPrProp>
		<setPrPropVoidFn public="1" get="inline" set="null" line="63" static="1"><f a="obj:fieldName:value">
	<x path="Any"/>
	<c path="String"/>
	<f a="">
		<x path="Any"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setPrPropVoidFn>
		<getPrProp public="1" get="inline" set="null" line="68" static="1"><f a="obj:fieldName">
	<x path="Any"/>
	<c path="String"/>
	<x path="Any"/>
</f></getPrProp>
		<setField public="1" get="inline" set="null" line="73" static="1">
			<f a="obj:fieldName:value">
				<x path="Any"/>
				<c path="String"/>
				<x path="Any"/>
				<unknown/>
			</f>
			<meta><m n=":analyzer"><e>local_dce</e></m></meta>
		</setField>
		<getByArrSyntax public="1" get="inline" set="null" line="83" static="1">
			<f a="obj:fieldName">
				<x path="Any"/>
				<c path="String"/>
				<unknown/>
			</f>
			<haxe_doc>* Gets an element using an array syntax.
  * @param obj
  * @param fieldName</haxe_doc>
		</getByArrSyntax>
		<renameClass public="1" params="T" get="inline" set="null" line="95" static="1">
			<f a="originalObj:overrideObj">
				<x path="Any"/>
				<c path="renameClass.T"/>
				<c path="renameClass.T"/>
			</f>
			<haxe_doc>* Used to overwrite classes in RPGMakerMV with another class to alias and update
  * functionality.
  * @param obj
  * @param propName
  * @param value
  * @return T</haxe_doc>
		</renameClass>
		<setProp public="1" params="T" set="method" line="107" static="1">
			<f a="obj:propName:value">
				<c path="setProp.T"/>
				<c path="String"/>
				<x path="Any"/>
				<c path="setProp.T"/>
			</f>
			<haxe_doc>* Invokes the standard JavaScript defineProperty functionality to the value
  * @param obj
  * @param propName
  * @param value
  * @return T</haxe_doc>
		</setProp>
		<setProtoProp public="1" get="inline" set="null" line="112" static="1"><f a="obj:propName:value">
	<unknown/>
	<unknown/>
	<unknown/>
	<unknown/>
</f></setProtoProp>
		<instanceof public="1" get="inline" set="null" line="116" static="1"><f a="v:cl">
	<d/>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></instanceof>
		<typeof public="1" get="inline" set="null" line="120" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></typeof>
		<log public="1" get="inline" set="null" line="124" static="1"><f a="data">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></log>
	</class>
	<class path="utils.Log" params="" file="src/utils/Log.hx">
		<log public="1" set="method" line="5" static="1"><f a="message">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></log>
		<warn public="1" set="method" line="9" static="1"><f a="message">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></warn>
		<info public="1" set="method" line="13" static="1"><f a="message">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></info>
		<error public="1" set="method" line="17" static="1"><f a="message">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></error>
	</class>
	<class path="utils.Parse" params="" file="src/utils/Parse.hx">
		<parseParameters public="1" get="inline" set="null" line="12" static="1">
			<f a="parameters">
				<c path="String"/>
				<x path="Any"/>
			</f>
			<haxe_doc>* Function for parsing parameters from JSON in MV/MZ</haxe_doc>
		</parseParameters>
		<isObject public="1" set="method" line="33" static="1"><f a="entity">
	<d/>
	<x path="Bool"/>
</f></isObject>
	</class>
</haxe>