//=============================================================================
// KITA_MessageExt.js
//=============================================================================
//=============================================================================
// Build Date: 2020-07-11 15:49:41
//=============================================================================

//=============================================================================
//  Contact Information
//=============================================================================
/*
*
* Contact me via twitter: EISKino, or on the rpg maker forums.
* Username on forums: Kino.
*
* Forum Link: http://forums.rpgmakerweb.com/index.php?/profile/75879-kino/
* Old Website Link: http://endlessillusoft.com/
* New Website Link: https://kinocreates.io/ 
* Twitter Link: https://twitter.com/EISKino
* Patreon Link: https://www.patreon.com/EISKino
*
* Hope this plugin helps, and enjoy!
* --Kino
*/

// Generated by Haxe 4.2.0-rc.1+1c018c009
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
Math.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
function core_Amaryllis_lerp(start,end,amount) {
	return start + (end - start) * amount;
}
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = true;
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
var nodes_MoveType = $hxEnums["nodes.MoveType"] = { __ename__:true,__constructs__:null
	,Linear: {_hx_name:"Linear",_hx_index:0,__enum__:"nodes.MoveType",toString:$estr}
};
nodes_MoveType.__constructs__ = [nodes_MoveType.Linear];
class nodes_SpriteBust extends Sprite_Base {
	constructor(x,y,bitmap) {
		super();
		this.bitmap = bitmap;
		haxe_Log.trace(bitmap,{ fileName : "src/nodes/SpriteBust.hx", lineNumber : 24, className : "nodes.SpriteBust", methodName : "new"});
		this.x = x;
		this.y = y;
		this._moveWait = 30;
	}
	initialize() {
		super.initialize();
		this._fadeDuration = 0;
		this._shadowOpacity = this.alpha;
		this._shadowX = this.x;
		this._shadowY = this.y;
		this._defaultMoveType = nodes_MoveType.Linear;
	}
	moveTo(x,y) {
		this._shadowX = x;
		if(y != null) {
			this._shadowY = y;
		}
		this._moveWait = 30;
		haxe_Log.trace("Starting Move",{ fileName : "src/nodes/SpriteBust.hx", lineNumber : 44, className : "nodes.SpriteBust", methodName : "moveTo", customParams : [this._moveWait]});
	}
	moveBy(x,y) {
		this._shadowX += x;
		if(y != null) {
			this._shadowY += y;
		}
		this._moveWait = 30;
	}
	fadeTo(opacity,duration) {
		if(duration == null) {
			duration = 30;
		}
		this._shadowOpacity = opacity;
		this._fadeDuration = duration;
	}
	fadeBy(opacity,duration) {
		if(duration == null) {
			duration = 30;
		}
		this._shadowOpacity += opacity;
		this._fadeDuration = duration;
	}
	scaleTo(x,y,duration) {
		if(duration == null) {
			duration = 30;
		}
		this.scale.set(x,y);
		this._scaleDuration = duration;
	}
	update() {
		super.update();
		this.updateFade();
		this.updateScaling();
		if(this._moveWait == 0) {
			this.updateMovement();
		}
		if(this._moveWait > 0) {
			this._moveWait--;
		}
	}
	updateFade() {
	}
	updateScaling() {
	}
	updateMovement() {
		let xResult = this.x;
		let yResult = this.y;
		if(this._shadowX != this.x) {
			xResult = core_Amaryllis_lerp(this.x,this._shadowX,0.025);
		}
		if(this._shadowY != this.y) {
			yResult = core_Amaryllis_lerp(this.y,this._shadowY,0.025);
		}
		if(this._shadowX == this.x && this._shadowY == this.y) {
			this._moveWait = -1;
			haxe_Log.trace("Disable Moving",{ fileName : "src/nodes/SpriteBust.hx", lineNumber : 109, className : "nodes.SpriteBust", methodName : "updateMovement"});
		}
		if(Math.abs(this._shadowX - this.x) < 0.5) {
			xResult = Math.round(xResult);
		}
		if(Math.abs(this._shadowY - this.y) < 0.5) {
			yResult = Math.round(yResult);
		}
		this.move(xResult,yResult);
		haxe_Log.trace("Moving",{ fileName : "src/nodes/SpriteBust.hx", lineNumber : 116, className : "nodes.SpriteBust", methodName : "updateMovement", customParams : [this.x,this.y]});
		this._refresh();
	}
}
nodes_SpriteBust.__name__ = true;
function plugins_KITA_$MessageExt_main() {
	haxe_Log.trace(Sprite_Base,{ fileName : "src/plugins/KITA_MessageExt.hx", lineNumber : 27, className : "plugins._KITA_MessageExt.KITA_MessageExt_Fields_", methodName : "main"});
	/*:
     
   @author Kino
   @plugindesc An extension to the core Message Window functionality
   to support Visual Novels <KITA_MessageExt>.

   @param Text Speed 
   @desc The speed at which characters will be rendered
   @default 2
   
   @help
   Version: 1.00
   Version Log:
   Now you can change the text speed at will using escape characters
   inside the window.
   Example: \TS[30] updates the text speed to super slow 30.
   Note: The [30] will appear in the editor, but not in game.

   Instructions:
   You set your text speed in the plugin menu.
   This is the speed that the characters will be drawn at.

   Contact me via forums; username: Kino.
   Hope this plugin helps and enjoy!
   
   */
	plugins_KITA_$MessageExt_textSpeed = PluginManager.parameters("KITA_MessageExt")["Text Speed"];
	haxe_Log.trace(plugins_KITA_$MessageExt_textSpeed,{ fileName : "src/plugins/KITA_MessageExt.hx", lineNumber : 57, className : "plugins._KITA_MessageExt.KITA_MessageExt_Fields_", methodName : "main"});
	Window_Message.prototype.setBackgroundTexture = function() {
		this;
	};
	let img = new Bitmap(128,128);
	img.fillRect(0,0,128,128,"black");
	let MSGBUST = new nodes_SpriteBust(0,0,img);
	let winMsgInitialize = Window_Message.prototype.initialize;
	Window_Message.prototype.initialize = function() {
		let self = this;
		winMsgInitialize.call(self);
		let txtSpeed = plugins_KITA_$MessageExt_textSpeed;
		self.originalTextSpeed = txtSpeed;
		self.activeTextSpeed = txtSpeed;
		self.msgBust = MSGBUST;
		MSGBUST.move(0,-128);
		self.addChild(self.msgBust);
		MSGBUST.show();
	};
	Window_Message.prototype.processEscapeCharacter = function(code,textState) {
		let self = this;
		switch(code) {
		case "!":
			self.startPause();
			break;
		case "$":
			self._goldWIndow.open();
			break;
		case ".":
			self.startWait(15);
			break;
		case "<":
			self._lineShowFast = false;
			break;
		case ">":
			self._lineShowFast = true;
			break;
		case "TS":
			self.updateTextSpeed(self.obtainEscapeParam(textState));
			break;
		case "^":
			self._pauseSkip = true;
			break;
		default:
			Window_Base.prototype.processEscapeCharacter.call(self,code,textState);
		}
	};
	Window_Message.prototype.updateTextSpeed = function(value) {
		this.activeTextSpeed = value;
	};
	let WinBaseProcessNormChar = Window_Base.prototype.processNormalCharacter;
	Window_Message.prototype.processNormalCharacter = function(textState) {
		let self = this;
		WinBaseProcessNormChar.call(self,textState);
		self.startWait(self.activeTextSpeed);
	};
	let winMessageTerminateMessage = Window_Message.prototype.terminateMessage;
	Window_Message.prototype.terminateMessage = function(_) {
		let self = this;
		self.activeTextSpeed = self.originalTextSpeed;
		winMessageTerminateMessage.call(self);
	};
}
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
}
utils_Fn.__name__ = true;
{
	String.__name__ = true;
	Array.__name__ = true;
}
js_Boot.__toStr = ({ }).toString;
var plugins_KITA_$MessageExt_textSpeed = 2;
plugins_KITA_$MessageExt_main();
})({});

//# sourceMappingURL=KITA_MessageExt.js.map