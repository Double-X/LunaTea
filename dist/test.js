//=============================================================================
// test.js
//=============================================================================
//=============================================================================
// Build Date: 2020-09-06 11:11:24
//=============================================================================
//=============================================================================
// Made with Kiniita -- Haxe
//=============================================================================

//=============================================================================
//  Contact Information
//=============================================================================
/*
*
* Contact me via twitter: EISKino, or on the rpg maker forums.
* Username on forums: Kino.
*
* Forum Link: http://forums.rpgmakerweb.com/index.php?/profile/75879-kino/
* Old Website Link: http://endlessillusoft.com/
* New Website Link: https://kinocreates.io/ 
* Twitter Link: https://twitter.com/EISKino
* Patreon Link: https://www.patreon.com/EISKino
*
* Hope this plugin helps, and enjoy!
* --Kino
*/

// Generated by Haxe 4.1.3
/**Document this comment for testing
 * Kinitta.js
 */
;(function ($hx_exports, $global) { "use strict";
class Main {
	static main() {
		// Build Date: 2020-09-06 11:11:23 
		
//=============================================================================
// Kiniitta
//=============================================================================
      ;
		/*:
     @author Kino
    @plugindesc This plugin allows you to use Haxe in your RPGMakerMV code.
    @param haxeVersion
   */
		// This is a test of the watcher 
		let sceneTitleStart = Scene_Base.prototype["start"] ;
		Scene_Base.prototype["start"] = function() {
			let self = this;
			sceneTitleStart.call(self);
			_$LTGlobals_$.$gameVariables.setValue(1,3);
			Window.Haxe = "Version 4.2.0";
			console.log("src/Main.hx:26:","Running Console Log From Haxe Added haxe Version");
		};
		Window_Base.prototype.update = function() {
		};
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
class _$LTGlobals_$ {
}
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
}
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
